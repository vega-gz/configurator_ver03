<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE Program >
<Program UUID="LTSGFAJW5NBE7C3YP7X6AEFCZI" Name="KC_Algorithm" Period="500" PutDataAtEndOfCycle="true">
    <Variables>
        <Variable UUID="L6UJGRH4XPKU5KSK3REJ2E3HLA" Name="Pulse" Type="FB_Pulse" TypeUUID="LCERBCVHMURELEDEHKKNKLUZNQ" Usage="internal" />
        <Variable UUID="Z43EX3DP6ZLEHFDOQ3OLDSI2LE" Name="IM_Call" Type="FB_IM_Call" TypeUUID="XICUTQAGUXZEZLSIPSBXR2UEV4" Usage="internal" />
        <Variable UUID="FLBZBRITPG2UDGM3IREOHSTQVY" Name="Imit" Type="FB_Imit" TypeUUID="6FYJFI56GMYUTBC5ILWW7D63N4" Usage="internal" />
        <Variable UUID="7VH46SS2MSDE5BTNY7TUPZ3X64" Name="Logic" Type="FB_Logic" TypeUUID="YFVWCR36G4AULLUU4VNZS6SAEA" Usage="internal" />
        <Variable UUID="QJ3XZ7HPD5DETCE6C42INHKUKY" Name="proc_KC_BK_mb_AI_CallAll_FB" Type="KC_BK_mb_AI_CallAll_FB" TypeUUID="V3MVFPQKUQVUBMCUABHCV5ESB4" Usage="internal" />
        <Variable UUID="TJXXTVG4QEIE5M3POA7UBPJRQY" Name="proc_KC_EK270_mb_AI_CallAll_FB" Type="KC_EK270_mb_AI_CallAll_FB" TypeUUID="S22Q5OE6VZ3UPPIHMUAT2AQL6A" Usage="internal" />
        <Variable UUID="EDKNS3SJZZ3ENFFFQBSKYJW4UM" Name="proc_EKG270" Type="EKG270" TypeUUID="H7ZPOOBYU7EE5MY2A7M2LHABHU" Usage="internal" />
        <Variable UUID="XACEX5EQ24VE3KSYUNLX5V6WME" Name="proc_NGK_SKM" Type="NGK_SKM" TypeUUID="P5O4FQ5UT5UUPMRUCYPCWT55CQ" Usage="internal" />
        <Variable UUID="Q7KQFMUZF4CEBP2M4FS72DEZPU" Name="proc_KC_SKM_mb_AI_CallAll_FB" Type="KC_SKM_mb_AI_CallAll_FB" TypeUUID="X7ICJEGNDGNUJLPNWC2HJ5DPTI" Usage="internal" />
        <Variable UUID="KKAB5BQGL5DEVCLGKHKLRXQP2E" Name="proc_KC_SKM2_mb_AI_CallAll_FB" Type="KC_SKM2_mb_AI_CallAll_FB" TypeUUID="VOWK46AI7QLUHFBFAGNFZD3EFI" Usage="internal" />
        <Variable UUID="BURCLR2HD3IE5CJIFP5C7UXHRE" Name="tmpBTN_ShopReg" Type="BOOL" Usage="internal" />
        <Variable UUID="GLN4LXWKU7CEPD6WSETXFQNQ24" Name="Proc_Link_CR" Type="FB_Link_CR" TypeUUID="2VBNFJ3FGN7UZF3NDJBDGJQJAM" Usage="internal" />
        <Variable UUID="EEHQBXJAI4EEBCB4PRG5QCIJOE" Name="Proc_DLink_GPA123" Type="FB_DLink_GPA123" TypeUUID="P7YX4V6ER2JULAGKVADRC4WIE4" Usage="internal" />
        <Variable UUID="2VG7ODOB6IBUJNT2ZPDFVQPCWM" Name="Proc_DLink_LIS5000" Type="FB_DLink_LIS5000" TypeUUID="KMIMX22WMQCUFHKY3MFFG256AU" Usage="internal" />
        <Variable UUID="KQ4TBW7VJDJUZD2EYFP2BPKA3A" Name="tmpBTN_ArchUser" Type="BOOL" Usage="internal" />
        <Variable UUID="E7PJH65NLWYEHLNOHV4Q6WDSEI" Name="t_init" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
        <Variable UUID="7VPKZSIM6MJUTE47OXU5UWIFGU" Name="TP_Deblock" Type="TP" TypeUUID="RB4Z6MFJZ2QUDHZMZFLAHZAWOI" Usage="internal" />
        <Variable UUID="RQDDGNAVO5PU7ICJOKRXRPHDLI" Name="DeblockTimeout" Type="TIME" Usage="internal" />
        <Variable UUID="JRC3H6XAQLRENBK3IQUAGTKQGM" Name="DeblockFlag" Type="BOOL" Usage="internal" />
        <Variable UUID="UMTHPOTKRB3EJMLN2YZ6XQZZKM" Name="mb_IM_UZRG" Type="FB_mb_IM_UZRG" TypeUUID="QCMBFFWNKMXUREEXPMIV3X6L6A" Usage="internal" />
    </Variables>
    <ST><![CDATA[//Определение длительности цикла
//cycle_time:
tim.tmpREALtime := CLOCK();
tim.cycle := LREAL_TO_REAL(tim.tmpREALtime - tim.tmpREALtime_prev);
tim.tmpREALtime_prev := tim.tmpREALtime;
//=
tim2.tmpREALtime_prev := CLOCK();
//================================== Имитаторы ===================================
if ImitOn then Imit(); end_if;
//================================== ввод ==================================
//Обработка
KC_AI_CallAll();
ANB_CallAll();
KC_DI_CallAll();
//= ПРУ
FC_PRU();
//=== Драйверы смежных подсистем ===
//= Котельная
KC_KOT_mb_AI_CallAll();
KC_KOT_mb_DI_CallAll();
//= УТУО (установка термического уничтожения отходов)
KC_UTUO_mb_AI_CallAll();
//= ВК (воздушная компрессорная)
proc_KC_BK_mb_AI_CallAll_FB();
KC_BK_mb_DI_CallAll();
KC_BK2_mb_DI_CallAll();
//= ЕК270 (корректор газа)
proc_KC_EK270_mb_AI_CallAll_FB();
proc_EKG270();
//= СКМ (система коррозионного мониторинга НГК-СКМ) ЭХЗ
proc_NGK_SKM();
proc_KC_SKM_mb_AI_CallAll_FB();
proc_KC_SKM2_mb_AI_CallAll_FB();
KC_SKM_mb_DI_CallAll();
//= ГПА №№1,2,3
//= №1
KC_GPA1_mb_AI_CallAll();
KC_GPA1_mb_DI_CallAll();
//= №2
KC_GPA2_mb_AI_CallAll();
KC_GPA2_mb_DI_CallAll();
//= №3
KC_GPA3_mb_AI_CallAll();
KC_GPA3_mb_DI_CallAll();
//= ЛИСы МСКУ5000
KC_FromLIStoKC_mb_AI_CallAll();
KC_FromLIStoKC_mb_DI_CallAll();

//================================== АПС ==================================
t_init(IN:= true, PT:= T#5s);
APS_Init();
if t_init.Q then APS_CallAll(KC_BTN.Deblock); end_if;

//================================== Регуляторы ==================================
//Инициализация
//Обработка
//================================== Логика =====================================
Logic();
//================================== ППУ ==================================
//Инициализация
//Обработка
//================================== Граф режимов ==================================
Mode_CallAll();
//================================== Барабаны ==================================
//DRM_CallAll();
//================================== Алгоритм ==================================
TP_Deblock(KC_BTN.Deblock, T#1s500ms, DeblockFlag, DeblockTimeout);
Alg_KC(DeblockFlag);
//================================== ИМ ==================================
//Резервированные
//Обычные
IM_Call();
//= по модбасу
mb_IM_UZRG();
//================================== Тренды ==================================
Trends(); // передача данных в тренды
//= запись архивов
KC_SS.ArchStop := KC_Mode.AOssKC OR KC_Mode.AObsKC;//= Архив останова
//= включение/выключение Пользовательского архива
tmpBTN_ArchUser := KC_BTN.ArchUser;
KC_BTN.ArchUser := FALSE;
if tmpBTN_ArchUser then
  if KC_SS.ArchUser Then
    KC_SS.ArchUser := FALSE;
  else
    KC_SS.ArchUser := TRUE;
  end_if;
end_if;
//================================== Обмен по интерфейсам ==================================
//================================== вывод ==================================
KC_DO_CallAll();
//= ПРУ
//= FC_PRU();
//=== Драйверы смежных подсистем ===
//= ВК (воздушная компрессорная)
KC_BK_DO_CallAll();
//= ГПА №№1,2,3
//= №1
KC_GPA1_mb_DO_CallAll();
KC_GPA1_mb_AO_CallAll();
//= №2
KC_GPA2_mb_DO_CallAll();
KC_GPA2_mb_AO_CallAll();
//= №3
KC_GPA3_mb_DO_CallAll();
KC_GPA3_mb_AO_CallAll();
//= ЛИСы МСКУ5000
KC_FromKCtoLIS_mb_DO_CallAll();
KC_FromKCtoLIS_mb_AO_CallAll();
//==========================================================================================

//= Для связи с Цеховым Регулятором

//= включение/выключение Регулятора
tmpBTN_ShopReg := KC_BTN.ShopReg_ON;
KC_BTN.ShopReg_ON := FALSE;
if tmpBTN_ShopReg then
  if KC_SS.ShopReg_ON Then
    KC_SS.ShopReg_ON := FALSE;
  else
    KC_SS.ShopReg_ON := TRUE;
  end_if;
end_if;

//= выбор контура регулирования
if KC_SS.ShopReg_ON then 
 if KC_BTN.ShopReg_Qg then Alg_Wish_main_loop_in := 1;
	elsif  KC_BTN.ShopReg_Pout then Alg_Wish_main_loop_in := 3;
	elsif  KC_BTN.ShopReg_cr then Alg_Wish_main_loop_in := 4;
	elsif  KC_BTN.ShopReg_N_ST then Alg_Wish_main_loop_in := 5;
  end_if;
else   Alg_Wish_main_loop_in := 0;
end_if;

KC_SS.ShopReg_Qg 	:= Alg_Wish_main_loop_in = 1;
KC_SS.ShopReg_Pout 	:= Alg_Wish_main_loop_in = 3;
KC_SS.ShopReg_cr 	:= Alg_Wish_main_loop_in = 4;
KC_SS.ShopReg_N_ST 	:= Alg_Wish_main_loop_in = 5;

Proc_Link_CR();//= обмен с ЦР

//==========================================================================================
//= обнуление кнопок с ПРУ
if KC_APS.PRU_AOss_BTN then PRU.AOss_BTN := FALSE; end_if;
if KC_APS.PRU_AObs_BTN then PRU.AObs_BTN := FALSE; end_if;


//меандр
Pulse(true, T#500ms, KC_SS.CPU_HeartBit);
//Pulse(NOT tst.m1, T#1s, KC_SS.CPU_HeartBit); //для теста
//= Диагностика связи с ГПА1,2,3
Proc_DLink_GPA123();
//= Диагностика связи с ЛИС5000
Proc_DLink_LIS5000();
init:= true;//=

//Определение фактического времени выполнения программы
tim2.tmpREALtime:= CLOCK();
tim2.cycle := LREAL_TO_REAL(tim2.tmpREALtime - tim2.tmpREALtime_prev);]]></ST>
    <DataTypes>
        <Struct UUID="VZ3H6GEVT3CUTI65HAA5AALRAY" Name="T_AI_FromHMI" Comment="команды из ЧМИ">
            <Field UUID="SCKERE4PHRDEBGWST4LC2RTTSE" Name="manualTarget" Comment="Задание из ЧМИ" Type="REAL" />
            <Field UUID="P47TXVXBU2GUBJ5JZEXSX4KSJ4" Name="BTNmanualOn" Comment="Кнопка вкл. задания значения из ЧМИ" Type="BOOL" />
            <Field UUID="GZSU6SS7CYNUPOLP767OZHJUK4" Name="BTNrepairOn" Comment="Кнопка вкл. ремонта" Type="BOOL" />
            <Field UUID="DI7XBJR5XPIE7L7MXPXMVNN3JI" Name="BTNworkOn" Comment="Кнопка перекл. в работу" Type="BOOL" />
            <Field UUID="R7L6QVFARZUU3FCBO456DXWXDQ" Name="BTNrepairProlong" Comment="Кнопка продления ремонта" Type="BOOL" />
        </Struct>
        <Struct UUID="GZ6UU5D6R5EXXPFY4TZ3EOTECU" Name="T_AI_Internal" Comment="Настройки канала">
            <Field UUID="URGJ7HGIJFACLBUMROBSRYNGTY" Name="qCycleROC" Comment="Количество циклов для контроля РОК" Type="INT" />
            <Field UUID="Z7HE4D7FEJA6XEO3ZT5EA5LEYI" Name="summCycleROC" Comment="сумма значений для РОК" Type="REAL" />
            <Field UUID="RW4U6LB23JHNFML2N4BQA7MLUE" Name="prevMeasure" Comment="Значение на предыдущем цикле" Type="REAL" />
            <Field UUID="QZTLVLZCD5A2FNOJWEQSSKV6WQ" Name="validMeasure" Comment="Последнее валидное измерение" Type="REAL" />
            <Field UUID="OTAS6CSOKJEYPNL7XMDFHUW3H4" Name="prevFault" Comment="наличие неисправности на предыдущем цикле " Type="BOOL" />
            <Field UUID="XWXRWWREWFAVBI2RI4EGZVP3HQ" Name="timerRecover" Comment="Таймер восстановления канала в работу после неисправности" Type="REAL" />
            <Field UUID="KKF6R5ONEBFP3DN2NJV3RM2STQ" Name="timerRepair" Comment="Таймер ремонта реальный" Type="REAL" />
        </Struct>
        <Struct UUID="XHUY6ZRHGRQEVOF35XEJI5L2SE" Name="T_AI_Settings" Comment="Настройки канала">
            <Field UUID="3KRWP62AKYDUFINJHEYQWHS2UU" Name="min" Comment="минимум шкалы канала, ед.изм. Не может быть &gt;= max" Type="REAL" />
            <Field UUID="RHO37XVNDVTUPEFTMJHSLHKUNY" Name="max" Comment="максимум шкалы канала, ед.изм. Не может быть &lt;= min" Type="REAL" />
            <Field UUID="RT6HE3WIDNSU7NDWHC2ZBOTRCI" Name="hiLim" Comment="уровень зашкала вверх, ед.изм. Не может быть &lt;= loLim и &gt; max" Type="REAL" />
            <Field UUID="NONAD4XZLCAUFCYSSF3ZG5Y2RM" Name="loLim" Comment="уровень зашкала вниз, ед.изм. Не может быть &gt;= hiLim и &lt; min" Type="REAL" />
            <Field UUID="IUL5HZOYX5CRDAD2EFAJYKUZ5Y" Name="hiBrk" Comment="уровень обрыва вверх, ед.изм. Не может быть &lt;= hiLim" Type="REAL" />
            <Field UUID="MYIPHEQSBJAADA2AH7XXTJLX64" Name="loBrk" Comment="уровень зашкала вниз, ед.изм. Не может быть &gt;= loLim" Type="REAL" />
            <Field UUID="35MUITRQHY5EPKM27DJOZ4D6SQ" Name="minADC" Comment="значение АЦП, соответствующее минимуму шкалы канала, б.р." Type="REAL" />
            <Field UUID="DW4YTEEV6RPEFHVBRONZ7WJRDI" Name="maxADC" Comment="значение АЦП, соотв. макс. шкалы, б.р. Не может быть равно minADC" Type="REAL" />
            <Field UUID="WIQAREZUYVCIVMICFARE4YILCI" Name="corrADC" Comment="корректировка минимуму АЦП" Type="REAL" />
            <Field UUID="YT5OLJPK5IAU7MM5REJ76FO7HM" Name="maxROC" Comment="макс. допустимая скорость роста, ед.изм./сек. Если «0» - скорость роста не анализируется" Type="REAL" />
            <Field UUID="Y52LQTQH7KVEPHEO2JGKSNLEYQ" Name="recoveryTime" Comment="время восстановления после неисправности, сек. Не может быть меньше &quot;0&quot;" Type="REAL" />
            <Field UUID="MX7EBZEDTNJUXGLTSFW2KWSO7U" Name="repairTime" Comment="максимальное время в ремонте, сек. Не может быть меньше или равно «0»" Type="INT" />
            <Field UUID="65QNI3SAURVUXMDDIVWNLWTPRA" Name="tau" Comment="тау фильтра, сек. Если «0» - фильтрация отсутствует" Type="REAL" />
            <Field UUID="CZKTSP7UMKMUHNAN43U4PZ3TDA" Name="id" Comment="номер по порядку" Type="INT" />
        </Struct>
        <Struct UUID="J74RQIZG5I6EZDCM32A6SZRKIM" Name="T_AI_ToHMI" Comment="устанавливаются программой обработки канала">
            <Field UUID="QJ6PEGLAUPLUFEIFAGBJIT6PW4" Name="PV" Comment="значение для САУ. Рассчитывается из  measure, Manual_Target с учётом неисправностей и фильтрации" Type="REAL" />
            <Field UUID="WBZOXI5CNLLEXLWHLINZ2KMYF4" Name="measure" Comment="Пересчёт кода АЦП в инженерные единицы" Type="REAL" />
            <Field UUID="6ZWUCOB6MR2ENPVJU6GJK7ZWXI" Name="CurrentTimeOfRepair" Comment="оставшееся время ремонта" Type="INT" />
            <Field UUID="GJY3VEM5KRNE5LIEPIA5A6MP5I" Name="fault_common" Comment="обобщённая неисправность. Образуется по «ИЛИ» от break,up_scale,down_scale,ROC,settingErr" Type="BOOL" />
            <Field UUID="3BIE4PEO6GDEZOARVMTGWNRJF4" Name="break" Comment="обрыв канала" Type="BOOL" />
            <Field UUID="JCRW2DPM2TFEDNS2CN4EMDRYHU" Name="up_scale" Comment="выход за верхний зашкал" Type="BOOL" />
            <Field UUID="4KBYMW34KEZE5ECIADCEQTZ6OA" Name="down_scale" Comment="выход за нижний зашкал" Type="BOOL" />
            <Field UUID="CKL3UGPLCBNUJBWI6XLA2VGNRQ" Name="ROC" Comment="превышение скорости изменения вверх или вниз" Type="BOOL" />
            <Field UUID="267MAGDT2FWEXMF4G7MQVHR24E" Name="settingErr" Comment="ошибка задания настроек – несоответствие допустимым значениям" Type="BOOL" />
            <Field UUID="S2TVATEJGHLUFBOP4OOPDLYPRA" Name="manual" Comment="канал в дист.упр." Type="BOOL" />
            <Field UUID="RBLIJTEXCENEXF4ULLUV3Q7PRU" Name="repair" Comment="канал в ремонте" Type="BOOL" />
            <Field UUID="TG5OXUO2FTCU5GZL2PWACX4G7E" Name="repair_time_less_10_percent" Comment="до конца ремонта осталось меньше 10% от заданного времени" Type="BOOL" />
            <Field UUID="YSARYMFTNDSE5LGQ3JNIXZZXTA" Name="as" Comment="отображать красным. Выставляется при выходе канала за аварийную уставку." Type="BOOL" />
            <Field UUID="UMPPDYIYCIUUFF73JAE2OWAUZM" Name="os" Comment="отображать фиолетовым. Выставляется при выходе канала за ограничительную уставку." Type="BOOL" />
            <Field UUID="I74VSDZAHPDUBF3C5UMMHZZF7M" Name="ps" Comment="отображать жёлтым. Выставляется при выходе канала за предупредительную уставку." Type="BOOL" />
            <Field UUID="RFUGWRJCW2IETLDPVQDEZRSKSE" Name="criticalFault" Comment="Критическая ошибка обработки" Type="BOOL" />
            <Field UUID="NAC3XDBC7TKE5COYOS7EGC37CY" Name="hint" Type="STRING" />
        </Struct>
        <Struct UUID="ANRR6BLMKETURJI5AWVQRMBAWA" Name="T_AM_Type" Comment="Типы ИМ">
            <Field UUID="R5GH244D3G6E5DEQ2KVL3QUOPI" Name="am1x0" Comment="1 команда, 0 конечников" Type="INT" />
            <Field UUID="EJFBQPJBB3XULMGIE7YE5QDS5Y" Name="am2x2fh" Comment="2 команды, 2 конечника (открытие, удержание)" Type="INT" />
            <Field UUID="PEAWQ344DBNUBPNVEK6VIDXUMQ" Name="am1x1" Comment="1 команда, 1 конечник" Type="INT" />
            <Field UUID="YXE6GIVXD3UUNKU3HRZPTTZBOE" Name="am1x2" Comment="1 команда, 2 конечника" Type="INT" />
            <Field UUID="MFOXKBTRKOKU3IUXG27BRR6PJU" Name="am2x1" Comment="2 команды, 1 конечник" Type="INT" />
            <Field UUID="CDSXEEZ5QJVETJCNSILRMROO5Q" Name="am2x2" Comment="2 команды, 2 конечника" Type="INT" />
            <Field UUID="XF7TYKMMVOAEXDRIKZ7ZD4YPTI" Name="am1ofx1of" Comment="1 команда OF, 1 конечник OF" Type="INT" />
            <Field UUID="QCC7QFFLWAIUFCBCEJXJDPMERY" Name="am1ofx2" Comment="1 команда OF, 2 конечника" Type="INT" />
            <Field UUID="4UM4UUEK6RMUPM6VL5ID7Q7ROY" Name="am1x1of" Comment="1 команда , 1 конечник OF" Type="INT" />
            <Field UUID="Y4PYZ4D5FQJUJN7SZNZX54JCW4" Name="amPos" Comment="Прочие с положением (АПК, ТРК...)" Type="INT" />
            <Field UUID="KBA3PS23ZYPEHHLFPRWZ6K2HSU" Name="am3x2" Comment="3 команды (on, off, stop), 2 конечника" Type="INT" />
            <Field UUID="ZMCVOELEKJSEHDWZMR7RVCXAQQ" Name="am2x2x3ware" Comment="2 команды, 2 конечника, трёхпроводная схема" Type="INT" />
            <Field UUID="5XGMK4PV7ZFK5OVFGH6GCCODQU" Name="am1x4nku" Comment="1 команда, 4 сигнала от НКУ" Type="INT" />
            <Field UUID="3ETYUGWR4FDSTEGO7ONOD7ACZA" Name="am2x7upp" Comment="2 команды (БП и УПП) и 7 сигналов от НКУ" Type="INT" />
            <Field UUID="ROV7ATBVJFGPPIFIL3A5A73ZOQ" Name="am2x8nku" Comment="2 команды и 8 сигналов от НКУ" Type="INT" />
        </Struct>
        <Struct UUID="I7SVZ4ZR3CPE7BHJZXJTI4JZXI" Name="T_ANB_Settings" Comment="Настройки уставки">
            <Field UUID="UXSEBOXIDKYENBCFLBBAZN2RZA" Name="setForFault" Comment="значение, записываемое в ANB при неисправности канала: 0 - FALSE, 1 - TRUE, 2 - оставить то что было" Type="INT" />
            <Field UUID="IPWZCJVRWK6U7JLH7P5RM5FSCQ" Name="isUp" Comment="направление срабатывания верхнее (FALSE - нижнее)" Type="BOOL" />
            <Field UUID="GDXKQ5WSUIYE5GF3QWM5WECPLM" Name="delay" Comment="задержка на срабатывание" Type="REAL" />
        </Struct>
        <Struct UUID="7GRLWKHH6VJU5KGLKDIOI5QPQI" Name="T_AO_FromHMI">
            <Field UUID="YQBDUQ2SLVH4VLPEMFQCTQ7MSA" Name="manualTarget" Comment="Задание из ЧМИ" Type="REAL" />
            <Field UUID="5X47MBB46NFXXFQYHPGECOG46U" Name="BTNforceOn" Comment="кнопка включения режима форсировки" Type="BOOL" />
            <Field UUID="2LUBNMQXIBEO7NYA7FMHMSQMQA" Name="BTNworkOn" Comment="Кнопка перекл. в работу" Type="BOOL" />
        </Struct>
        <Struct UUID="KOTCLUQLO7JERF5MDM2GMF62MI" Name="T_AO_ToHMI">
            <Field UUID="37PITYONYNCEPAA4FZ7CYI4ZZU" Name="forsPermit" Comment="Форсировка разрешена" Type="BOOL" />
            <Field UUID="EW23HL5DEBFQJMV2GMGKR3LXTE" Name="forsEnable" Comment="Форсировка включена" Type="BOOL" />
            <Field UUID="DXLEHCRAXMWERIXDDJCFFR6DXU" Name="hint" Type="STRING" />
        </Struct>
        <Struct UUID="Y2SUFYR34WCUVAETREJRLVIA74" Name="T_APS_Internal">
            <Field UUID="SW4246EO2NWU5CQN5ODA6OPOUI" Name="tmr" Comment="Счетчик времени задержки" Type="REAL" />
            <Field UUID="V6KC3PUL2GGUXCYZ4IXVPRX4NI" Name="pr_value" Comment="пред. значение" Type="BOOL" />
            <Field UUID="IYUBAOIBGQXEFF5UWNT4SITBCQ" Name="target" Comment="Реакция 1 пожар, 2 АОС, 3 АОБ, 4 АС, 5 ПС" Type="INT" />
        </Struct>
        <Struct UUID="CB63GVNINFXE5NDGOS62CUMGSY" Name="T_DI_FromHMI" Comment="команды из ЧМИ">
            <Field UUID="ALOR7DBMYYIEBCY2WB7KWCUIGU" Name="manualTarget" Comment="Задание из ЧМИ" Type="BOOL" />
            <Field UUID="B22NFHW4UO5ETI7GYQLXF3XAJM" Name="BTNmanualOn" Comment="Кнопка вкл. задания значения из ЧМИ" Type="BOOL" />
            <Field UUID="S7MY7EBTY62UHGFUKNDBNJEETM" Name="BTNrepairOn" Comment="Кнопка вкл. ремонта" Type="BOOL" />
            <Field UUID="JJ6OIYCGVKUURBCSRNZ6KZLHKE" Name="BTNworkOn" Comment="Кнопка перекл. в работу" Type="BOOL" />
            <Field UUID="6QZL235TTWWEFK6PJPHINDPP5Y" Name="BTNrepairProlong" Comment="Кнопка продления ремонта" Type="BOOL" />
        </Struct>
        <Struct UUID="AZLZGZOBJZBF3NOVFVJWX37NVA" Name="T_DI_Internal">
            <Field UUID="YN54AUR7NFHDJHYR7DISKVNB5Y" Name="timerRepair" Comment="таймер ремонта" Type="REAL" />
            <Field UUID="4I4YCSS2CFBTJMCGATBEXGG5SE" Name="timerAntiTremor" Comment="таймер антидребезга" Type="REAL" />
        </Struct>
        <Struct UUID="YYQ4LFBFOMREFPHHDI3SPZLDYM" Name="T_DI_Settings" Comment="настройки дискретного канала">
            <Field UUID="7BUOL5BGDSCU7DUITC6LJYC3EE" Name="del" Comment="задержка для устранения дребезга, сек." Type="REAL" />
            <Field UUID="65RJRGUGBJYUTJEW5S27QVKBII" Name="repairTime" Comment="максимальное время в ремонте, сек. Не может быть «0»" Type="INT" />
            <Field UUID="E6BN5T6PFMLUNLPCUXHL4REAAE" Name="inv" Comment="необходимость инвертирования измеренного значения" Type="BOOL" />
            <Field UUID="L2JGFBG6KZFEFAFNVUGMAVU6YE" Name="id" Comment="номер по порядку" Type="INT" />
        </Struct>
        <Struct UUID="GHOQ5H5MCDOEHDF2HTYC2D4HJI" Name="T_DI_ToHMI" Comment="устанавливаются программой обработки канала">
            <Field UUID="TNUWHHXWAKSE7ARXDZINL2OUL4" Name="CurrentTimeOfRepair" Comment="оставшееся время ремонта" Type="INT" />
            <Field UUID="Q5OI5ENSF7VEHIS4O4MQ3YADRU" Name="settingErr" Comment="ошибка задания настроек – несоответствие допустимым значениям" Type="BOOL" />
            <Field UUID="4EHQPHFYYZ5EDCSGTFQTH6IA2I" Name="manual" Comment="канал в дист.упр." Type="BOOL" />
            <Field UUID="26KRQPMZSAFUHEQWAFEZYCEXNA" Name="repair" Comment="канал в ремонте" Type="BOOL" />
            <Field UUID="2FXLROIDYK2UXEJA6MWOZVCPEQ" Name="repair_time_less_10_percent" Comment="до конца ремонта осталось меньше 10% от заданного времени" Type="BOOL" />
            <Field UUID="RHBQXEPMIJENTNXBIRDAZVI6ZM" Name="fault_common" Comment="обобщённая неисправность. Образуется по «ИЛИ» от settingErr и неисправности цепи датчика" Type="BOOL" />
            <Field UUID="6W6OANKZ3VDE7IFEAF7IFND5TY" Name="hint" Type="STRING" />
        </Struct>
        <Struct UUID="ICYCYA5WR5FTZMTITNXXGA6V4U" Name="T_DO_FromHMI">
            <Field UUID="YQBDUQ2SLVH4VLPEMFQCTQ7MSA" Name="manualTarget" Comment="Задание из ЧМИ" Type="BOOL" />
            <Field UUID="5X47MBB46NFXXFQYHPGECOG46U" Name="BTNforceOn" Comment="кнопка включения режима форсировки" Type="BOOL" />
            <Field UUID="2LUBNMQXIBEO7NYA7FMHMSQMQA" Name="BTNworkOn" Comment="Кнопка перекл. в работу" Type="BOOL" />
        </Struct>
        <Struct UUID="JPIXI5FFWBGSRAAFIJ2MBV77UE" Name="T_DO_ToHMI">
            <Field UUID="37PITYONYNCEPAA4FZ7CYI4ZZU" Name="forsPermit" Comment="Форсировка разрешена" Type="BOOL" />
            <Field UUID="EW23HL5DEBFQJMV2GMGKR3LXTE" Name="forsEnable" Comment="Форсировка включена" Type="BOOL" />
            <Field UUID="WP3KGWM747AURJEIHTUIQJLS5M" Name="hint" Type="STRING" />
        </Struct>
        <Struct UUID="KHQWP3RHOTWEFJWBPCB6JIVNWI" Name="T_Graph">
            <Field UUID="57SADCQ574VUDHSCYRYH5NMZQU" Name="cond" Comment="Условия перехода" Type="DWORD" Size="32" Array="TRUE" />
            <Field UUID="VJA4I3MIFT3U3DQCKXBULCRNXU" Name="state" Comment="Номер режима" Type="INT" />
        </Struct>
        <Struct UUID="ESHVMMDQRNWUVGD5OOWOXN2N44" Name="T_mb_AI_Settings" Comment="Настройки канала">
            <Field UUID="3KRWP62AKYDUFINJHEYQWHS2UU" Name="min" Comment="минимум шкалы канала, ед.изм. Не может быть &gt;= max" Type="REAL" />
            <Field UUID="RHO37XVNDVTUPEFTMJHSLHKUNY" Name="max" Comment="максимум шкалы канала, ед.изм. Не может быть &lt;= min" Type="REAL" />
            <Field UUID="RT6HE3WIDNSU7NDWHC2ZBOTRCI" Name="hiLim" Comment="уровень зашкала вверх, ед.изм. Не может быть &lt;= loLim и &gt; max" Type="REAL" />
            <Field UUID="NONAD4XZLCAUFCYSSF3ZG5Y2RM" Name="loLim" Comment="уровень зашкала вниз, ед.изм. Не может быть &gt;= hiLim и &lt; min" Type="REAL" />
            <Field UUID="IUL5HZOYX5CRDAD2EFAJYKUZ5Y" Name="hiBrk" Comment="уровень обрыва вверх, ед.изм. Не может быть &lt;= hiLim" Type="REAL" />
            <Field UUID="MYIPHEQSBJAADA2AH7XXTJLX64" Name="loBrk" Comment="уровень зашкала вниз, ед.изм. Не может быть &gt;= loLim" Type="REAL" />
            <Field UUID="6EEWY5YRIALELEVHNEOYVOVOKI" Name="format" Comment="Формат данных" Type="INT" />
            <Field UUID="UN2HNI376ZEU7EIB4YK7GZB34Y" Name="set1" Comment="Настройка 1" Type="REAL" />
            <Field UUID="OC357N75CFDUJLIQMDTSPYRANE" Name="set2" Comment="Настройка 2" Type="REAL" />
            <Field UUID="65QNI3SAURVUXMDDIVWNLWTPRA" Name="tau" Comment="тау фильтра, сек. Если «0» - фильтрация отсутствует" Type="REAL" />
            <Field UUID="CZKTSP7UMKMUHNAN43U4PZ3TDA" Name="id" Comment="номер по порядку" Type="INT" />
        </Struct>
        <Struct UUID="7ICVQVNQUR4UDG5AFGOT7BUCRA" Name="T_mb_AO_Settings">
            <Field UUID="PFXFJNM5WZBD7OHBISHXLQZ7LI" Name="min" Comment="Нижний порог ан.выхода в физ.единицах" Type="REAL" />
            <Field UUID="XFVOQ6QGIJAYHPPXMK6QYRI72A" Name="max" Comment="Верхний порог ан.выхода в физ.единицах" Type="REAL" />
            <Field UUID="U6PH5R5T7W7URHY7YARC4WTDC4" Name="format" Type="INT" />
            <Field UUID="A4U4GLRHWKSUNEDN2B433ZBATQ" Name="set1" Type="REAL" />
            <Field UUID="CTPDFG3CV5EEJLI5W2OAFCVLLU" Name="set2" Type="REAL" />
            <Field UUID="OK4EUCFXPNFV7EZMRH56FV3Y4M" Name="id" Type="INT" />
        </Struct>
        <Struct UUID="EKXWTT2XQFVEBA2O4SGLDA6X4E" Name="T_tuneAM">
            <Field UUID="O6YCSYX2QRLUTFJS52ZQUGTAWU" Name="delayChangeOvertimeAlert" Comment="Время перестановки, при превышении которого выдается предупреждение" Type="REAL" />
            <Field UUID="JGXKJLANO2SELHO62MUIPISOLM" Name="delayQTimeout" Comment="Время перестановки, при превышении которого снимается выходная команда" Type="REAL" />
            <Field UUID="WCIMRV5J5ANE7HJUA6CNAGFFG4" Name="delayExtraOn" Comment="Время дожима на открытие" Type="REAL" />
            <Field UUID="TI3CBQNB5L5UXB5JAB22HNT2WE" Name="delayExtraOff" Comment="Время дожима на закрытие" Type="REAL" />
            <Field UUID="F5QLAOOZQ23E5PP4LDMIH4DAZU" Name="delayNotMoveAlert" Comment="Задержка формирования нестрагивания" Type="REAL" />
            <Field UUID="TYZJFVKVMAREDE55SVBM4IKIQQ" Name="delayCircBrkAlert" Comment="Задержка формирования обрыва контроля цепи" Type="REAL" />
        </Struct>
        <Struct UUID="JOKANQL3O4QURP2EITPYYDMUV4" Name="support_AM" Comment="v1.0 от 20170724">
            <Field UUID="AJPZSGTBOZSURAEDGCYX3WHU3E" Name="iOn" Comment="Вход - &quot;включен&quot; (открыт)" Type="BOOL" />
            <Field UUID="6OD2DJH7NPKELOTUDZ75Y2AKVQ" Name="iOff" Comment="Вход - &quot;отключен&quot; (закрыт)" Type="BOOL" />
            <Field UUID="TB67SA6DTYPEDKISO6NAMC5SWQ" Name="iCon" Comment="Вход - контроль цепи включения (открытия)" Type="BOOL" />
            <Field UUID="EIFZU5L22RQUXBFPPCCT236FCQ" Name="iCoff" Comment="Вход - контроль цепи отключения (закрытия)" Type="BOOL" />
            <Field UUID="GIVBYIHUOBNU5DS3D7NB6IIQEA" Name="qOn" Comment="Выход - &quot;включить&quot; (открыть, форсировка)" Type="BOOL" />
            <Field UUID="B3U4CEPC5FQEXKDEAGWOPCDWZU" Name="qOff" Comment="Выход - &quot;отключить&quot; (закрыть)" Type="BOOL" />
            <Field UUID="5OXOOXY3F2CEHER2BZBJPT3FSA" Name="qHoldOn" Comment="Выход - &quot;удержание&quot; (трехходовой клапан)" Type="BOOL" />
            <Field UUID="W6BNQGNNUFSUXGQ3RZQ4V2XMD4" Name="algOn" Comment="Команда включения из алгоритма" Type="BOOL" />
            <Field UUID="Z3KAE3E5VX5UDAOPXTO4SUHYEY" Name="algOff" Comment="Команда отключения из алгоритма" Type="BOOL" />
            <Field UUID="U3KPWCQJYP4E7O6Z6S6U43Q2V4" Name="modeManual" Comment="Режим ручного управления" Type="BOOL" />
            <Field UUID="VSW5JXZJSMLUZFMXRYKWIBFB2I" Name="disableManual" Comment="Блокировка ручного управления" Type="BOOL" />
            <Field UUID="JO4FIXI66MRULCSWOZ7JRQSOBA" Name="disableCon" Comment="Не учитывать контроль цепи управления команды &apos;открыть&apos;" Type="BOOL" />
            <Field UUID="UZCWPJ5FO2OETORGJUJ77MHWEQ" Name="disableCoff" Comment="Не учитывать контроль цепи управления команды &apos;закрыть&apos;" Type="BOOL" />
            <Field UUID="XB6FRKLPQHBU3KBCQJ2O4LMWOI" Name="btnMode" Comment="Кнопка переключения режима Ручной/Авто (СКАДА)" Type="BOOL" />
            <Field UUID="HQXXP3VK6B7UFEZCLYPOAIJCVE" Name="btnOn" Comment="Кнопка &quot;включить&quot; (СКАДА)" Type="BOOL" />
            <Field UUID="EUREFPVUSAJU5MPE72IMKULFAQ" Name="btnOff" Comment="Кнопка &quot;отключить&quot; (СКАДА)" Type="BOOL" />
            <Field UUID="AILDXTDC3NIELCLUI3YK5YT24Q" Name="prmBtnOn" Comment="Разрешение ручного включения в авто-режиме (для повтора команды)" Type="BOOL" />
            <Field UUID="N3ML4S2CGYTUNLC75YT4BMSOZE" Name="prmBtnOff" Comment="Разрешение ручного отключения в авто-режиме (для повтора команды)" Type="BOOL" />
            <Field UUID="T6O6PYG5FOHE5M2XV53ZQ6EC4Q" Name="fNotOn" Comment="Не включен" Type="BOOL" />
            <Field UUID="FGO5HC5NS2AENDSJ7FTV6YTIKM" Name="fNotOff" Comment="Не отключен" Type="BOOL" />
            <Field UUID="SUNJAVMMKXFUTFOAEJWMDGD4B4" Name="fNotStart" Comment="Не стронулся" Type="BOOL" />
            <Field UUID="UOQBPEA7JBMU7KFLOB4CAR2Q5A" Name="fSelfOn" Comment="Самопроизвольное включение" Type="BOOL" />
            <Field UUID="DJLHHLRC674EHNL2W5UHHLPB4Y" Name="fSelfOff" Comment="Самопроизвольное отключение" Type="BOOL" />
            <Field UUID="URJGYYBT4DXU5N4YI3XNJOKP5M" Name="fFB" Comment="Двойное положение" Type="BOOL" />
            <Field UUID="WPU7QKFWK6TU5DDMTVHYF5AIOY" Name="fCon" Comment="Нет контроля цепи включения" Type="BOOL" />
            <Field UUID="WJBPVHFY5IPEZOLM74FY44PYMY" Name="fCoff" Comment="Нет контроля цепи отключения" Type="BOOL" />
            <Field UUID="3QBLSEMS7OCERKXNV3GPVS7PNM" Name="fCommon" Comment="Обобщенная неисправность" Type="BOOL" />
        </Struct>
    </DataTypes>
    <FBLibrary>
        <Folder Name="IM" Comment="" Data="" UUID="DZRV5K7VM7VUXAHQRR2BJCCTAE">
            <FunctionBlock UUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Name="FB_IM" Comment="FB Исполнительных механизмов">
                <Variables>
                    <Variable UUID="5XYFD3YZLLBUNB42KO2XYNFDCU" Name="AMtype" Comment="тип ИМ" Type="INT" Usage="input" />
                    <Variable UUID="PETOOKKOZ5ZUHGDFGUI235UOWE" Name="AM" Comment="структура ИМ" Type="support_AM" TypeUUID="JOKANQL3O4QURP2EITPYYDMUV4" Usage="inout" />
                    <Variable UUID="FECD53T2D3CUTMVI42ECGHMCLY" Name="tuns" Comment="Настройки ИМ" Type="T_tuneAM" TypeUUID="EKXWTT2XQFVEBA2O4SGLDA6X4E" Usage="input" />
                    <Variable UUID="EDVZIRQWLT3UDFKHACOVGWPYM4" Name="cycle" Comment="цикл вызова (с)" Type="REAL" Usage="input" />
                    <Variable UUID="MC7WZK735E7EDGYPA7FMYZ6ZYY" Name="onImit" Comment="включить режим имитации" Type="BOOL" Usage="input" />
                    <Variable UUID="KNJWSZAW7KLUHKINAJIYOXQUFU" Name="imtChangeTime" Comment="время переключения состояния для имитатора" Type="REAL" InitialValue="4" Usage="input" />
                    <Variable UUID="YJALDEKXZIAEBF7TAWFK34VG7A" Name="I_ON" Type="BOOL" Usage="input" />
                    <Variable UUID="JACB2RJGQM3EJFEEH5UBKF5TIM" Name="I_OFF" Type="BOOL" Usage="input" />
                    <Variable UUID="ICKZ3QWAXBMUTKG6JQNPTEC2QM" Name="I_Con" Type="BOOL" Usage="input" />
                    <Variable UUID="EMWHYR3US7OUVAQURMVK5WK2VU" Name="I_Coff" Type="BOOL" Usage="input" />
                    <Variable UUID="7M6X7SOAZ6CE3C3LKAET4H3KUA" Name="unlock" Type="BOOL" Usage="input" />
                    <Variable UUID="PDPZIK7RNIGEZALSPLREI2IPK4" Name="Q_ON" Type="BOOL" Usage="output" />
                    <Variable UUID="V6MUNN55PDPUTAJTEWOJUXQR6U" Name="Q_OFF" Type="BOOL" Usage="output" />
                    <Variable UUID="RKQGJ6QQUGQUXAIFQADPHSMOUM" Name="Q_HoldOn" Type="BOOL" Usage="output" />
                    <Variable UUID="BTZJYNYJ2UUURFURQFWR6S5O3Y" Name="ps" Comment="Сигналка предупреждения" Type="BOOL" Usage="output" />
                    <Variable UUID="HO5QMS37KGRUFNJ4JJRITZIMP4" Name="algOn" Comment="команда открытия от алгоритма" Type="BOOL" Usage="internal" />
                    <Variable UUID="CMXCEEFW6Z6ENAFCXGRHJOGI6M" Name="algOff" Comment="команда закрытия от алгоритма" Type="BOOL" Usage="internal" />
                    <Variable UUID="IZJKEDDZ47GUFO7BOZC7YKLQZE" Name="iOn" Comment="сигнал (конечник) открытия" Type="BOOL" Usage="internal" />
                    <Variable UUID="IT7YET3ZRL2EDH6OY4RZ7F5AKI" Name="iOff" Comment="сигнал (конечник) закрытия" Type="BOOL" Usage="internal" />
                    <Variable UUID="JZG6WQHPJMMUZBZE7X2FA4VPKM" Name="qOn" Comment="выход на открытие" Type="BOOL" Usage="internal" />
                    <Variable UUID="ZPLMRSLMHTCUHIP6TYW4CL2N5I" Name="qOff" Comment="выход на закрытие" Type="BOOL" Usage="internal" />
                    <Variable UUID="VUPVKP7RMWTERJ7AZBTZVEYPCY" Name="btnOn" Comment="кнопка открытия (включения)" Type="BOOL" Usage="internal" />
                    <Variable UUID="KGF35AM36CXUJJFX4C37TTI4EU" Name="btnOff" Comment="кнопка закрытия (отключения)" Type="BOOL" Usage="internal" />
                    <Variable UUID="6WBGZYIOBLMETEEEQZ6B5ASQII" Name="modeManual" Comment="ручное управление" Type="BOOL" Usage="internal" />
                    <Variable UUID="TNVNQT5NADZUHEA5XCOVODKHHM" Name="notOn" Comment="не открыт (не включен)" Type="BOOL" Usage="internal" />
                    <Variable UUID="RQOS2DNCVDXUXMEHU43U66PC2M" Name="notOff" Comment="не закрыт (не выключен)" Type="BOOL" Usage="internal" />
                    <Variable UUID="XWDUTHDWEMTEXF363ZDXUPB2FI" Name="setOn" Comment="обобщенная команда на открытие" Type="BOOL" Usage="internal" />
                    <Variable UUID="S7TDCYI34UAURMWX7LNZ7Q3DVQ" Name="setOff" Comment="обобщенная команда на закрытие" Type="BOOL" Usage="internal" />
                    <Variable UUID="2YFKES4RS6TEZIQK64GSW2VMLI" Name="int_iOn" Type="BOOL" Usage="internal" />
                    <Variable UUID="GZBUQS2K6R2EDONSFQIJ3B2AVM" Name="int_iOff" Type="BOOL" Usage="internal" />
                    <Variable UUID="JJPQIEFP32SUXG4U4O4MLUTJPI" Name="qOnPrev" Type="BOOL" Usage="internal" />
                    <Variable UUID="MZRVQ5DAR6FELAA4OJQ4ZJF47U" Name="qOffPrev" Type="BOOL" Usage="internal" />
                    <Variable UUID="VGZDX656BHWUHMVRFQ5T7UFPGA" Name="timeQOn" Comment="текущее время подачи команды открытия" Type="REAL" Usage="internal" />
                    <Variable UUID="BJ7NG6XPBDVEVD7WNGL2ATIDGE" Name="timeQOff" Comment="текущее время подачи команды закрытия" Type="REAL" Usage="internal" />
                    <Variable UUID="R4AU66NU2YVEHBFVJROOTEM2TM" Name="timeExtraOn" Comment="текущее время дожима открытия" Type="REAL" Usage="internal" />
                    <Variable UUID="GNURLIKPQ7HE5GHCKFJEQAONAI" Name="timeExtraOff" Comment="текущее время дожима закрытия" Type="REAL" Usage="internal" />
                    <Variable UUID="PDM4LADFVAUEFE5HUDLZHS7SEM" Name="timeCircBrkOn" Comment="текущее время КЦУ On" Type="REAL" Usage="internal" />
                    <Variable UUID="MGYODHIFDPRUBN4T56OY56ICHU" Name="timeCircBrkOff" Comment="текущее время КЦУ Off" Type="REAL" Usage="internal" />
                    <Variable UUID="AJO5AFGGN7BUDDZ7BWYSA5RPEQ" Name="changeCounter" Comment="количество попыток перевода в текущее положение" Type="INT" Usage="internal" />
                    <Variable UUID="ICO74YEEKVHELOXAIVEXGPQADQ" Name="FRONT_BTN" Comment="передний фронт кнопки РУ" Type="R_TRIG" TypeUUID="S45Q5WLSRRGU3MJDOGDVF24XVA" Usage="internal" />
                    <Variable UUID="R6PIXZGPSYXURC2XIL6YCBZWIY" Name="frBTN" Comment="передний фронт кнопки РУ" Type="BOOL" Usage="internal" />
                    <Variable UUID="IM6CQF6KSQCUVA7X4SECMK6LCM" Name="wasOn" Type="BOOL" Usage="internal" />
                    <Variable UUID="2S6R7J3WHQLULLRVMT2EJOD6YI" Name="wasOff" Type="BOOL" Usage="internal" />
                    <Variable UUID="CMAZOKJUL7ZETKJDW5UR5D743Q" Name="selfOn" Comment="самопроизвольное открытие (включение)" Type="BOOL" Usage="internal" />
                    <Variable UUID="6MJNYD4M6ALEZGQ5FROHQR5MCI" Name="selfOff" Comment="самопроизвольное закрытие (отключение)" Type="BOOL" Usage="internal" />
                    <Variable UUID="UJ646BIRCAFEJPINNWJFYZK27U" Name="imtState" Comment="текущее состояние" Type="REAL" Usage="internal" />
                    <Variable UUID="BT2WTUA36XFUHK5JVE57VGP7MU" Name="imt_qOn" Comment="внутренний сигнал ON (для унификации разнотипных ИМ)" Type="BOOL" Usage="internal" />
                    <Variable UUID="R6A5AI6O7K6ETL3VWIGD5RNVDU" Name="imt_qOff" Comment="внутренний сигнал OFF (для унификации разнотипных ИМ)" Type="BOOL" Usage="internal" />
                    <Variable UUID="SCKVA6FKP3UUJNHQUPGI2FXD7I" Name="iCon" Comment="контроль цепи" Type="BOOL" Usage="internal" />
                    <Variable UUID="FJBNTNBQHFREZNBP6FFGAKB64Y" Name="iCoff" Comment="контроль цепи" Type="BOOL" Usage="internal" />
                    <Variable UUID="NQH4CDIJEABERJZC2LFG46JX7E" Name="frontImitOn" Type="R_TRIG" TypeUUID="S45Q5WLSRRGU3MJDOGDVF24XVA" Usage="internal" />
                    <Variable UUID="P3NHLORDEEAEVENDKAOMT666JU" Name="frImitOn" Type="BOOL" Usage="internal" />
                    <Variable UUID="HF7YYOEZACGEXH23CYTA2BQ23Y" Name="disableManual" Comment="запрет ручного режима (внутренний сигнал)" Type="BOOL" Usage="internal" />
                    <Variable UUID="IB3U55AUN5UU7NW5VSDNGRDCKU" Name="fNotOn_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="ECXVHPRFC5XUXDL4FXXVLJU4PM" Name="fNotOff_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="RCCP626CVVQEDM5UZRBEWQAQAI" Name="fNotStart_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="J244K4GAFILUNINAFURJQGVEEY" Name="fSelfOn_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="MJPL45THOCLUTNSKBQLD3H6PGE" Name="fSelfOff_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="NJWXABGIHTKEBN4UVYBRAHZTLQ" Name="fFB_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="BMFNBKYDUCDUTGTY4MWQUMM3LY" Name="fCon_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="GMQ6D2T5AQAUPBWTXOAHL2QD2E" Name="fCoff_prv" Type="BOOL" Usage="internal" />
                </Variables>
                <ST><![CDATA[// ==================== Макрос для исполнительных механизмов =====================================

// константы AMtype
// 2-ИМ 1Q 0FB 1 команда 0 конечников (1x0)
// 3-ИМ 2Q(Fors+Hold) 2FB 2 команды 0 конечников (2x0)
// 4-ИМ 1Q 1FB 1 команда 1 конечник (1x1)
// 5-ИМ 1Q 2FB 1 команда 2 конечника (1x2)
// 6-ИМ 2Q 1FB 2 команды 1 конечник (2x1)
// 7-ИМ 2Q 2FB 2 команды 2 конечника (2x2)
// 8-ИМ 1Q 1FB с командой/конечником OFF
// 9-ИМ 1Q 2FB с командой OFF и двумя конечниками
// 10-ИМ 1Q 1FB с командой ON/ конечником OF 
// 11-ИМ ТРК, АПК и прочие с положением

  AM.iOn   := I_ON;
  AM.iOff  := I_OFF;
  AM.iCon  := I_Con;
  AM.iCoff := I_Coff;

// привязка к входам структуры AM
  btnOn  := AM.btnOn;
  btnOff := AM.btnOff;
  algOn  := AM.algOn;
  algOff := AM.algOff;
  modeManual := AM.modeManual;
 //запись типа ИМ в структуру  
//  AM.AMtype := AMtype; 

// инициализация задержек (если в структуре задержка не инициализирована - используем значение по-умолчанию)
//время перестановки, при превышении которого выдается предупреждение
IF tuns.delayChangeOvertimeAlert = 0.0 THEN tuns.delayChangeOvertimeAlert := 45.0; END_IF; 
//		delayChangeOvertimeAlert := 45.0; 
//	ELSE delayChangeOvertimeAlert := tuns.delayChangeOvertimeAlert; 
//END_IF; 

//время перестановки, при превышении которого снимается выходная команда
IF tuns.delayQTimeout = 0.0 THEN tuns.delayQTimeout := 90.0; END_IF; 
//	ELSE delayQTimeout := AM.delayQTimeout; 
//END_IF; 

//delayExtraOn := AM.delayExtraOn; //время дожима на открытие
//delayExtraOff := AM.delayExtraOff; //время дожима на закрытие
//задержка формирования нестрагивания
IF tuns.delayNotMoveAlert = 0.0 THEN tuns.delayNotMoveAlert := 4.0; END_IF; 
//ELSE delayNotMoveAlert := AM.delayNotMoveAlert; 
//END_IF; 
//задержка формирования обрыва контроля цепи
IF tuns.delayCircBrkAlert = 0.0 THEN tuns.delayCircBrkAlert := 1.0; END_IF; 
//	ELSE delayCircBrkAlert := AM.delayCircBrkAlert; 
//END_IF; 
// обобщенная неисправность
AM.fCommon := AM.fNotOn OR AM.fNotOff OR AM.fNotStart OR AM.fSelfOn OR AM.fSelfOff OR AM.fFB OR AM.fCon OR AM.fCoff;
// запрет ручного режима (внутренний сигнал)
disableManual := AM.disableManual AND NOT (AM.fNotOn OR AM.fNotOff); 

//** Переключатель РУЧНОГО РЕЖИМА (переключение по одному сигналу)
FRONT_BTN(AM.btnMode, frBTN); //передний фронт кнопки сохраняем в темп (frBTN)
IF frBTN AND AM.modeManual OR disableManual THEN //если есть фронт кнопки, и включен ручной режим - сброс ручного режима так же, ручной режим сбрасывается, когда он не разрешен!
	AM.modeManual := FALSE; //сброс ручного режима
	frBTN := FALSE; //сброс фронта
	AM.btnMode := FALSE; //сброс кнопки
END_IF;
//если есть фронт кнопки, ручной режим не включен, и нет запрета ручного режима
IF frBTN AND NOT AM.modeManual AND NOT disableManual THEN 
	AM.modeManual := TRUE; //включение ручного режима
	frBTN := FALSE; //сброс фронта
	AM.btnMode := FALSE; //сброс кнопки
END_IF;

//=========================================================================================================
CASE AMtype OF

2: // AM_1Q0FB *************************** ИМ 1Q 0FB ******************************************************

qOn := NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn) OR  modeManual AND (btnOn OR qOn) AND NOT btnOff;
       
// сигналы положения (конечники)
AM.iOn := AM.qOn;
AM.iOff := NOT AM.iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// обрыв КЦУ
IF iCon or qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
//обрыв КЦУ команды "открыть (включить)"
AM.fCon := NOT AM.disableCon AND timeCircBrkOn > tuns.delayCircBrkAlert;      

3: // AM_2Q_FH *************************** ИМ 2Q(Fors+Hold) 2FB *******************************************

// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := AM.iOff;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// формирование внутренних сигналов для реализации дожима
IF iOff OR NOT iOn THEN timeExtraOn  := 0.0; 
	ELSIF timeExtraOn  < 10000000.0 THEN timeExtraOn  := timeExtraOn  + cycle; 
END_IF;
int_iOn := timeExtraOn > tuns.delayExtraOn; // на время дожима - задерживаем сигналы открытия...

IF iOn OR NOT iOff THEN timeExtraOff  := 0.0; 
	ELSIF timeExtraOff  < 10000000.0 THEN timeExtraOff  := timeExtraOff  + cycle; 
END_IF;
int_iOff := timeExtraOff > tuns.delayExtraOff; // ...и закрытия.

// обобщенные команды от алгоритма и от кнопок РУ
AM.qHoldOn := int_iOn AND NOT setOff; //команда "удержание"
// обобщенная команда: открыть
setOn  := (modeManual AND  btnOn OR NOT modeManual AND algOn  OR setOn ) 
          AND NOT (modeManual  AND btnOff  OR NOT modeManual AND algOff); 
// обобщенная команда: закрыть
setOff := (modeManual AND btnOff OR NOT modeManual AND algOff OR setOff) 
          AND NOT (modeManual  AND  btnOn  OR NOT modeManual AND algOn ); 
 // выход на ИМ: открыть
qOn  := setOn  AND NOT int_iOn  AND timeQOn < tuns.delayQTimeout AND (changeCounter < 2  OR qOn );  

// подсчет попыток перестановки - только для ИМ (2х )
IF changeCounter > 0 AND (qOff OR btnOn) OR changeCounter < 0 AND (qOn OR btnOff) (*OR reset*) THEN changeCounter := 0;
	ELSIF NOT qOnPrev  AND qOn  THEN changeCounter := changeCounter + 1;
	ELSIF NOT qOffPrev AND qOff THEN changeCounter := changeCounter - 1;
END_IF;
qOnPrev := qOn;
qOffPrev := qOff;

// накапливаем время подачи команды открытия (включения)
IF NOT setOn  OR btnOn  THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;
IF NOT setOff OR btnOff THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// нестрагивание (только для ИМ с двумя конечниками)
//на закрытие
AM.fNotStart := (timeQOn > tuns.delayNotMoveAlert AND qOn AND iOff)    //на открытие
             OR (timeQOff > tuns.delayNotMoveAlert AND NOT qOn AND NOT AM.qHoldOn AND iOn); 

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > tuns.delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT int_iOn;     // не открыт
notOff := (timeQOff > tuns.delayChangeOvertimeAlert AND qOff OR notOff) AND NOT int_iOff;    // не закрыт

// неисправность концевых выключателей
AM.fFB:= iOff AND iOn; //двойное положение

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOn  := iOn AND (qOn OR AM.qHoldOn);
wasOff := (iOff OR wasOff) AND NOT (qOn OR AM.qHoldOn);

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

4: // AM_1Q1FB *************************** ИМ 1Q 1FB ******************************************************
// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := NOT iOn;
AM.iOff := NOT iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// обобщенные команды от алгоритма и от кнопок РУ
qOn := NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn)
       OR  modeManual AND (btnOn OR qOn) AND NOT btnOff;

// накапливаем время подачи команды открытия (включения)
IF NOT qOn THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;

IF qOn THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := timeQOn  > tuns.delayChangeOvertimeAlert AND NOT iOn;      // не включен
notOff := timeQOff > tuns.delayChangeOvertimeAlert AND NOT iOff;     // не выключен

// обрыв КЦУ
IF iCon or qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
//обрыв КЦУ команды "открыть (включить)"
AM.fCon := NOT AM.disableCon AND timeCircBrkOn > tuns.delayCircBrkAlert;      


// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOn  := iOn AND qOn;
wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

5: // AM_1Q2FB *************************** ИМ 1Q 2FB ******************************************************
// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := AM.iOff;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

//  обобщенные команды от алгоритма и от кнопок РУ
qOn := NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn)
       OR  modeManual AND (btnOn OR qOn) AND NOT btnOff;

// накапливаем время подачи команды открытия (включения)
IF NOT qOn THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;

IF qOn THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// нестрагивание (только для ИМ с двумя конечниками)
 //на закрытие
AM.fNotStart := (timeQOn > tuns.delayNotMoveAlert AND qOn AND iOff)    //на открытие
             OR (timeQOff > tuns.delayNotMoveAlert AND NOT qOn AND NOT AM.qHoldOn AND iOn);

// не включен (не открыт) / не выключен (не закрыт)
notOn  := timeQOn  > tuns.delayChangeOvertimeAlert AND NOT iOn;      // не включен
notOff := timeQOff > tuns.delayChangeOvertimeAlert AND NOT iOff;     // не выключен

// обрыв КЦУ
IF iCon or qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
AM.fCon := NOT AM.disableCon AND timeCircBrkOn > tuns.delayCircBrkAlert;      //обрыв КЦУ команды "открыть (включить)"

// неисправность концевых выключателей
AM.fFB:= iOff AND iOn; //двойное положение

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOn  := iOn AND qOn;
wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

6: // AM_2Q1FB *************************** ИМ 2Q 1FB ******************************************************   // 
// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := NOT iOn;
AM.iOff := NOT iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// формирование внутренних сигналов для реализации дожима
IF iOff OR NOT iOn THEN timeExtraOn  := 0.0; 
	ELSIF timeExtraOn  < 10000000.0 THEN timeExtraOn  := timeExtraOn  + cycle; 
END_IF;
int_iOn := timeExtraOn > tuns.delayExtraOn; // на время дожима - задерживаем сигналы открытия...

IF iOn OR NOT iOff THEN timeExtraOff  := 0.0; 
	ELSIF timeExtraOff  < 10000000.0 THEN timeExtraOff  := timeExtraOff  + cycle; 
END_IF;
int_iOff := timeExtraOff > tuns.delayExtraOff; // ...и закрытия.

//  обобщенные команды от алгоритма и от кнопок РУ
// обобщенная команда: открыть  
  setOn  := (modeManual AND btnOn OR NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn) OR setOn)  
					AND NOT (modeManual  AND btnOff  OR NOT modeManual AND algOff); 
 
 setOff := (modeManual AND btnOff OR NOT modeManual AND (algOff OR btnOff AND AM.prmBtnOff) OR setOff) 
						AND NOT (modeManual  AND  btnOn  OR NOT modeManual AND algOn); // обобщенная команда: закрыть
 
 qOn  := setOn  AND NOT int_iOn  AND timeQOn < tuns.delayQTimeout AND (changeCounter < 2  OR qOn);   // выход на ИМ: открыть 
 qOff := setOff AND NOT int_iOff AND timeQOff< tuns.delayQTimeout AND (changeCounter > -2 OR qOff);   // выход на ИМ: закрыть

// подсчет попыток перестановки - только для ИМ (2х )
IF changeCounter > 0 AND (qOff OR btnOn) OR changeCounter < 0 AND (qOn OR btnOff) (*OR reset*) THEN changeCounter := 0;
	ELSIF NOT qOnPrev  AND qOn  THEN changeCounter := changeCounter + 1;
	ELSIF NOT qOffPrev AND qOff THEN changeCounter := changeCounter - 1;
END_IF;
qOnPrev := qOn;
qOffPrev := qOff;

// накапливаем время подачи команды открытия (включения)
IF NOT setOn  OR btnOn  THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;

IF NOT setOff OR btnOff THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > tuns.delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT int_iOn;     // не открыт
notOff := (timeQOff > tuns.delayChangeOvertimeAlert AND qOff OR notOff) AND NOT int_iOff;    // не закрыт

// обрыв КЦУ
IF NOT qOn AND iCon OR qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
AM.fCon := NOT AM.disableCon AND (timeCircBrkOn > tuns.delayCircBrkAlert OR AM.fCon) AND NOT iCon;      //обрыв КЦУ команды "открыть (включить)"

IF NOT qOff AND iCoff OR qOff THEN timeCircBrkOff := 0.0;
	ELSIF timeCircBrkOff < tuns.delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; 
END_IF;
AM.fCoff := NOT AM.disableCoff AND (timeCircBrkOff > tuns.delayCircBrkAlert OR AM.fCoff) AND NOT iCoff; //обрыв КЦУ команды "закрыть (отключить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
  selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
  selfOff := (wasOn AND NOT iOn OR selfOff) AND NOT (iOn OR qOff); //
  wasOn  := (iOn OR wasOn) AND NOT qOff;
  wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

7: // AM_2Q2FB *************************** ИМ 2Q 2FB ******************************************************
// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := AM.iOff;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// формирование внутренних сигналов для реализации дожима
IF iOff OR NOT iOn THEN timeExtraOn  := 0.0; 
	ELSIF timeExtraOn  < 10000000.0 THEN timeExtraOn  := timeExtraOn  + cycle; 
END_IF;
int_iOn := timeExtraOn > tuns.delayExtraOn; // на время дожима - задерживаем сигналы открытия...

IF iOn OR NOT iOff THEN timeExtraOff  := 0.0; 
	ELSIF timeExtraOff  < 10000000.0 THEN timeExtraOff  := timeExtraOff  + cycle; 
END_IF;
int_iOff := timeExtraOff > tuns.delayExtraOff; // ...и закрытия.

//  обобщенные команды от алгоритма и от кнопок РУ
setOn  := (modeManual AND  btnOn OR NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn)  OR setOn)
          AND NOT (modeManual  AND btnOff  OR NOT modeManual AND algOff); // обобщенная команда: открыть
setOff := (modeManual AND btnOff OR NOT modeManual AND (algOff OR btnOff AND AM.prmBtnOff) OR setOff)           
          AND NOT (modeManual  AND  btnOn  OR NOT modeManual AND algOn); // обобщенная команда: закрыть

qOn  := setOn  AND NOT int_iOn  AND timeQOn < tuns.delayQTimeout AND (changeCounter < 2  OR qOn );   // выход на ИМ: открыть 
qOff := setOff AND NOT int_iOff AND timeQOff< tuns.delayQTimeout AND (changeCounter > -2 OR qOff);   // выход на ИМ: закрыть

// подсчет попыток перестановки - только для ИМ (2х )
IF changeCounter > 0 AND (qOff OR btnOn) OR changeCounter < 0 AND (qOn OR btnOff) (*OR reset*) THEN changeCounter := 0;
	ELSIF NOT qOnPrev  AND qOn  THEN changeCounter := changeCounter + 1;
	ELSIF NOT qOffPrev AND qOff THEN changeCounter := changeCounter - 1;
END_IF;
qOnPrev := qOn;
qOffPrev := qOff;

// накапливаем время подачи команды открытия (включения)
IF NOT setOn  OR btnOn  THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;

IF NOT setOff OR btnOff THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// нестрагивание (только для ИМ с двумя конечниками)
AM.fNotStart := (timeQOn > tuns.delayNotMoveAlert AND qOn AND iOff)    //на открытие
             OR (timeQOff > tuns.delayNotMoveAlert AND qOff AND iOn);   //на закрытие

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > tuns.delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT int_iOn;     // не открыт
notOff := (timeQOff > tuns.delayChangeOvertimeAlert AND qOff OR notOff) AND NOT int_iOff;    // не закрыт

// обрыв КЦУ
IF iCon or qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
AM.fCon := NOT AM.disableCon AND timeCircBrkOn > tuns.delayCircBrkAlert;      //обрыв КЦУ команды "открыть (включить)"

IF iCoff or qOff THEN timeCircBrkOff := 0.0;
	ELSIF timeCircBrkOff < tuns.delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; 
END_IF;
AM.fCoff := NOT AM.disableCoff AND timeCircBrkOff > tuns.delayCircBrkAlert; //обрыв КЦУ команды "закрыть (отключить)"

// неисправность концевых выключателей
AM.fFB:= iOff AND iOn; //двойное положение

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn AND NOT iOn OR selfOff) AND NOT (iOn OR qOff); 
wasOn  := (iOn OR wasOn) AND NOT qOff;
wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

8: // AM_inv1Q1FB ************************ ИМ 1Q 1FB с командой/конечником OFF ****************************
// сигналы положения (конечники)
iOff := AM.iOff;
iOn  := NOT iOff;
AM.iOn := NOT iOff; 

// сигналы контроля цепи
iCoff := AM.iCoff;

//  обобщенные команды от алгоритма и от кнопок РУ
qOff := NOT modeManual AND (algOff OR btnOff AND AM.prmBtnOff) OR modeManual AND (btnOff OR qOff) AND NOT btnOn;
       
// накапливаем время подачи команды открытия (включения)
IF NOT qOff THEN timeQOff  := 0.0; 
	ELSIF timeQOff  < 10000000.0 THEN timeQOff  := timeQOff  + cycle; 
END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > tuns.delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT iOn;     // не открыт
notOff := (timeQOff > tuns.delayChangeOvertimeAlert AND qOff OR notOff) AND NOT iOff;    // не закрыт

// обрыв КЦУ
IF NOT qOff AND iCoff OR qOff THEN timeCircBrkOff := 0.0;
	ELSIF timeCircBrkOff < tuns.delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; 
END_IF;
AM.fCoff := NOT AM.disableCoff AND (timeCircBrkOff > tuns.delayCircBrkAlert OR AM.fCoff) AND NOT iCoff; //обрыв КЦУ команды "закрыть (отключить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOff  := iOff AND qOff;
wasOn := (iOn OR wasOn) AND NOT qOff;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

9: // AM_inv1Q2FB ************************ ИМ 1Q 2FB с командой OFF/ и двумя конечниками ******************
// сигналы положения (конечники)
iOff := AM.iOff;
iOn  := AM.iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

//  обобщенные команды от алгоритма и от кнопок РУ
qOff := NOT modeManual AND (algOff OR btnOff AND AM.prmBtnOff) OR  modeManual AND (btnOff OR qOff) AND NOT btnOn;
       

// накапливаем время подачи команды открытия (включения)
IF NOT qOff THEN timeQOff  := 0.0; 
	ELSIF timeQOff  < 10000000.0 THEN timeQOff  := timeQOff  + cycle; 
END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > tuns.delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT iOn;     // не открыт
notOff := (timeQOff > tuns.delayChangeOvertimeAlert AND qOff OR notOff) AND NOT iOff;    // не закрыт

// обрыв КЦУ
IF NOT qOff AND iCoff OR qOff THEN timeCircBrkOff := 0.0;
	ELSIF timeCircBrkOff < tuns.delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; 
END_IF;
AM.fCoff := NOT AM.disableCoff AND (timeCircBrkOff > tuns.delayCircBrkAlert OR AM.fCoff) AND NOT iCoff; //обрыв КЦУ команды "закрыть (отключить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOff  := iOff AND qOff;
wasOn := (iOn OR wasOn) AND NOT qOff;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

10: // AM_1Q1CFB *************************** ИМ 1Q 1FB ******************************************************

// сигналы положения (конечники)
iOff := AM.iOff;
iOn  := NOT iOff;
AM.iOn := NOT iOff; 

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// обобщенные команды от алгоритма и от кнопок РУ
qOn := NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn) OR  modeManual AND (btnOn OR qOn) AND NOT btnOff;
      
// накапливаем время подачи команды открытия (включения)
IF NOT qOn or unlock THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;

IF qOn or unlock THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := timeQOn  > tuns.delayChangeOvertimeAlert AND NOT iOn;      // не включен
notOff := timeQOff > tuns.delayChangeOvertimeAlert AND NOT iOff;     // не выключен

// обрыв КЦУ
IF NOT qOn AND iCon OR qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
AM.fCon := NOT AM.disableCon AND (timeCircBrkOn > tuns.delayCircBrkAlert OR AM.fCon) AND NOT iCon;      //обрыв КЦУ команды "открыть (включить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn or unlock);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT (iOn or unlock);
wasOn  := iOn AND qOn;
wasOff := (iOff OR wasOff) AND NOT (qOn or unlock);

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

END_CASE;

//------------------------------------ Имитатор ИМ ---------------------------------------------------------

frontImitOn(onImit, frImitOn); //передний фронт onImit

IF onImit THEN //Начало имитации

	IF frImitOn THEN // по переднему фронту onImit инициализация положение ИМ
	  IF iOn AND NOT iOff THEN imtState := imtChangeTime; // открыт
		ELSIF iOff AND NOT iOn THEN imtState := 0.0; //закрыт
		ELSE imtState := imtChangeTime / 2.0; // ставим в середину
	  END_IF;
	END_IF;

	// формирование внутренних команд в соответствии с типом ИМ
	IF AMtype = 1 OR AMtype = 6 OR AMtype = 7 THEN // ИМ с двумя командами
	  imt_qOn  := qOn;
	  imt_qOff := qOff;
	ELSIF AMtype = 3 THEN // ИМ с форсировкой-удержанием
	  imt_qOn  := qOn OR AM.qHoldOn;
	  imt_qOff := NOT imt_qOn;
	ELSIF AMtype = 8 OR AMtype = 9 THEN // для ИМ (1x1) (с командой/конечником OFF)
	  imt_qOff  := qOff;
	  imt_qOn := NOT qOff;
	ELSE // ИМ с одной командой
	  imt_qOn  := qOn;
	  imt_qOff := NOT qOn;
	END_IF;    

	IF imt_qOn  THEN imtState := imtState + cycle; END_IF; // перемещение -> ON
	IF imt_qOff THEN imtState := imtState - cycle; END_IF; // перемещение -> OFF

	IF imtState > imtChangeTime THEN imtState := imtChangeTime; END_IF; // ограничение
	IF imtState < 0.0 THEN imtState := 0.0; END_IF;

	//концевики
	IF AMtype = 4 OR AMtype = 6 THEN
	  AM.iOn  := imtState/imtChangeTime > 0.9; // формируем выход при 90% перемещения 
	  AM.iOff := NOT iOn; // для ИМ 2х1
	ELSIF AMtype = 8 THEN // для ИМ (1x1) (с командой/конечником OFF)
	  AM.iOff  := imtState/imtChangeTime < 0.1; 
	  AM.iOn := NOT iOff; // для ИМ 2х1
	ELSIF AMtype = 11 THEN // для ИМ ТРК, АПК и прочих 
	  AM.iOff  := I_OFF; 
	  AM.iOn :=  I_ON; 
	ELSIF AMtype <> 2 THEN
	  AM.iOn  := imtState/imtChangeTime > 0.9; // формируем выход при 90% перемещения
	  AM.iOff := imtState/imtChangeTime < 0.1; // формируем выход при 10% перемещения
	END_IF;

	//КЦУ (формируется, когда не подается команда управления)
	AM.iCon  := NOT imt_qOn;
	AM.iCoff := NOT imt_qOff;

END_IF; //Конец имитации

//---------------------------------------------------------------------
IF unlock THEN 
	notOn   := FALSE;
	notOff  := FALSE;
	selfOn  := FALSE;
	selfOff := FALSE;
	wasOn:= FALSE; //Добавлено
	wasOff:= FALSE; //Добавлено
	changeCounter := 0; //Добавлено
END_IF;

// привязка к выходам структуры AM
AM.fNotOn  := notOn;	//не включен (не открыт)
AM.fNotOff := notOff;	//не выключен (не закрыт)
AM.fSelfOn  := selfOn;	//самопроизвольное открытие
AM.fSelfOff := selfOff;	//самопроизвольное закрытие
AM.qOn  := qOn;
AM.qOff := qOff;
// передача выходных сигналов
Q_ON     := AM.qOn;
Q_OFF    := AM.qOff;
Q_HoldOn := AM.qHoldOn;
// сброс кнопок РУ (откр/закр)
AM.btnOn  := FALSE;
AM.btnOff := FALSE;

//ПС по ИМ для сирены. Снимать там же где и остальные ПС
ps := AM.fNotOn and not fNotOn_prv
	  or AM.fNotOff and not fNotOff_prv
	  or AM.fNotStart and not fNotStart_prv
	  or AM.fSelfOn and not fSelfOn_prv
	  or AM.fSelfOff and not fSelfOff_prv
	  or AM.fFB and not fFB_prv
	  or AM.fCon and not fCon_prv
	  or AM.fCoff and not fCoff_prv;

fNotOn_prv		:= AM.fNotOn;
fNotOff_prv		:= AM.fNotOff;
fNotStart_prv	:= AM.fNotStart;
fSelfOn_prv		:=	AM.fSelfOn;
fSelfOff_prv	:=	AM.fSelfOff;
fFB_prv			:=	AM.fFB;
fCon_prv		:=	AM.fCon;
fCoff_prv		:=	AM.fCoff;

]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="XICUTQAGUXZEZLSIPSBXR2UEV4" Name="FB_IM_Call">
                <Variables>
                    <Variable UUID="V3F7UFOBJBJKS7XR3CRKAY2IAQ" Name="Proc_Kr51" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="YDQZ4QFEIV6N56LHE63MN2SDLM" Name="Proc_Kr52" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="JLPQUBIZIROBWYUS7CB672RTWA" Name="Proc_Kr53" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="U3PIVH55JIKISPK5LSKIKU75TU" Name="Proc_Kr54" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="3Q5EMMJXIUIESHSDHK6OTW2GQ4" Name="Proc_Kr53b" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="VDRAZ3ZUJC2D3NAOAKIR7CABEI" Name="Proc_Kr54b" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="BBNEBDAHJ6BB5EQXA6UOI6CLKY" Name="Proc_EN_LSA1_ADES" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="O33NMC4KJT5BLWNI5O5WIR2EDE" Name="Proc_EN_LSA2_ADES" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="LRD6ZX72I6YBEST4RO2IG6Y4LE" Name="Proc_EN_LSA3_ADES" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="ZIGM4QZWI6KDIABV6GLABUVJFI" Name="Proc_EN_LSA1_GPA" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="V3PTR54PIRPCND2DGKTJACQYKM" Name="Proc_EN_LSA2_GPA" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="6TIYJTULJV7KWUQVZSOEZZMKSU" Name="Proc_EN_LSA3_GPA" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="UDTH4Q35JCBJOTTHQOXPOK4GFM" Name="Proc_EN_LSA4_GPA" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="2D7TR7ANI44N2NLLMGAZ222I24" Name="Proc_EN_LSA5_GPA" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="NQQEIWGSIP5OZE3IXKHR2AZI6Q" Name="Proc_EN_LSA6_GPA" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="VCXRDCCTG7JU7HGIZFREOJTEDY" Name="Proc_Kr51_2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="LPE6ZPIN22WEJOYJCAONDRR5VQ" Name="Proc_Kr52_2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="H5PBCAC4VRDULBAEGWVD6PFO3U" Name="IM_type" Type="T_AM_Type" TypeUUID="ANRR6BLMKETURJI5AWVQRMBAWA" Usage="internal" />
                </Variables>
                <ST><![CDATA[//Константы ИМ

//= if not init.AM then
if not init then 
	IM_type.am1x0	   	:= 2; //ИМ 1 команда, 0 конечников
	IM_type.am2x2fh	   	:= 3; //ИМ 2 команды, 2 конечника (открытие, удержание)
	IM_type.am1x1	   	:= 4; //ИМ 1 команда, 1 конечник
	IM_type.am1x2	   	:= 5; //ИМ 1 команда, 2 конечника
	IM_type.am2x1	   	:= 6; //ИМ 2 команды, 1 конечник
	IM_type.am2x2	   	:= 7; //ИМ 2 команды, 2 конечника
	IM_type.am1ofx1of  	:= 8; //ИМ 1 команда OF, 1 конечник OF
	IM_type.am1ofx2	   	:= 9; //ИМ 1 команда OF, 2 конечника
	IM_type.am1x1of		:= 10; //ИМ 1 команда, 1 конечник OF
	IM_type.amPos		:= 11; //ИМ прочие с положением (АПК, ТРК...)
	IM_type.am3x2		:= 12; //ИМ 3 команды (on, off, stop), 2 конечника
	IM_type.am2x2x3ware	:= 13; //ИМ 2 команды, 2 конечника, трёхпроводная схема
	IM_type.am1x4nku	:= 14; //ИМ 1 команда, 4 сигнала от НКУ
	IM_type.am2x7upp	:= 15; //ИМ 2 команды (БП и УПП) и 7 сигналов от НКУ
	IM_type.am2x8nku	:= 16; //ИМ 2 команды и 8 сигналов от НКУ
	IM_Init(); 
//=	init.APS := true; 
end_if;

ps_im := false; //звуковое предупреждение по ИМ

//Кран 51
//2x2
KC_AM.Kr51.disableManual := not KC_TS.DU_IM;  //Запрет РУ
KC_AM.Kr51.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.)
KC_AM.Kr51.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr51( AMtype := IM_type.am2x2, AM := KC_AM.Kr51, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT (KC_DO_ToHMI.Kr51_ON.forsEnable OR KC_DO_ToHMI.Kr51_OF.forsEnable),
tuns := TuneAM.Kr51,
I_ON       := KC_DI.Kr51_ON
I_OFF      := KC_DI.Kr51_OF
I_Con      := KC_DI.Kr51_ON_KCU
I_Coff     := KC_DI.Kr51_OF_KCU
Q_ON     	=> KC_DO.Kr51_ON
Q_OFF     	=> KC_DO.Kr51_OF);

ps_im := ps_im OR Proc_Kr51.ps;

//Кран 52
//2x2
KC_AM.Kr52.disableManual := not KC_TS.DU_IM;  //Запрет РУ
KC_AM.Kr52.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.)
KC_AM.Kr52.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr52( AMtype := IM_type.am2x2, AM := KC_AM.Kr52, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT (KC_DO_ToHMI.Kr52_ON.forsEnable OR KC_DO_ToHMI.Kr52_OF.forsEnable),
tuns := TuneAM.Kr52,
I_ON       := KC_DI.Kr52_ON
I_OFF      := KC_DI.Kr52_OF
I_Con      := KC_DI.Kr52_ON_KCU
I_Coff     := KC_DI.Kr52_OF_KCU
Q_ON     	=> KC_DO.Kr52_ON
Q_OFF     	=> KC_DO.Kr52_OF);

ps_im := ps_im OR Proc_Kr52.ps;

//Кран 51-2
//2x2
KC_AM.Kr51_2.disableManual := not KC_TS.DU_IM;  //Запрет РУ
KC_AM.Kr51_2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.)
//= KC_AM.Kr51_2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.) - формируется в алгоритме //=

Proc_Kr51_2( AMtype := IM_type.am2x2, AM := KC_AM.Kr51_2, onImit := ImitOn   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT (KC_DO_ToHMI.Kr51_2_ON.forsEnable OR KC_DO_ToHMI.Kr51_2_OF.forsEnable),
tuns := TuneAM.Kr51_2,
I_ON       := KC_DI.Kr51_2_ON
I_OFF      := KC_DI.Kr51_2_OF
I_Con      := KC_DI.Kr51_2_ON_KCU
I_Coff     := KC_DI.Kr51_2_OF_KCU
Q_ON     	=> KC_DO.Kr51_2_ON
Q_OFF     	=> KC_DO.Kr51_2_OF);

ps_im := ps_im OR Proc_Kr51_2.ps;

//Кран 52-2
//2x2
KC_AM.Kr52_2.disableManual := not KC_TS.DU_IM;  //Запрет РУ
KC_AM.Kr52_2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.)
//= KC_AM.Kr52_2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.) - формируется в алгоритме //=

Proc_Kr52_2( AMtype := IM_type.am2x2, AM := KC_AM.Kr52_2, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT (KC_DO_ToHMI.Kr52_2_ON.forsEnable OR KC_DO_ToHMI.Kr52_2_OF.forsEnable),
tuns := TuneAM.Kr52_2,
I_ON       := KC_DI.Kr52_2_ON
I_OFF      := KC_DI.Kr52_2_OF
I_Con      := KC_DI.Kr52_2_ON_KCU
I_Coff     := KC_DI.Kr52_2_OF_KCU
Q_ON     	=> KC_DO.Kr52_2_ON
Q_OFF     	=> KC_DO.Kr52_2_OF);

ps_im := ps_im OR Proc_Kr52_2.ps;

//Кран 53
//2x2
KC_AM.Kr53.disableManual := not KC_TS.DU_IM;  //Запрет РУ
KC_AM.Kr53.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.)
KC_AM.Kr53.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr53( AMtype := IM_type.am2x2, AM := KC_AM.Kr53, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT (KC_DO_ToHMI.Kr53_ON.forsEnable OR KC_DO_ToHMI.Kr53_OF.forsEnable),
tuns := TuneAM.Kr53,
I_ON       := KC_DI.Kr53_ON
I_OFF      := KC_DI.Kr53_OF
I_Con      := KC_DI.Kr53_ON_KCU
I_Coff     := KC_DI.Kr53_OF_KCU
Q_ON     	=> KC_DO.Kr53_ON
Q_OFF     	=> KC_DO.Kr53_OF);

ps_im := ps_im OR Proc_Kr53.ps;

//Кран 54
//2x2
KC_AM.Kr54.disableManual := not KC_TS.DU_IM;  //Запрет РУ
KC_AM.Kr54.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.)
KC_AM.Kr54.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr54( AMtype := IM_type.am2x2, AM := KC_AM.Kr54, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT (KC_DO_ToHMI.Kr54_ON.forsEnable OR KC_DO_ToHMI.Kr54_OF.forsEnable),
tuns := TuneAM.Kr54,
I_ON       := KC_DI.Kr54_ON
I_OFF      := KC_DI.Kr54_OF
I_Con      := KC_DI.Kr54_ON_KCU
I_Coff     := KC_DI.Kr54_OF_KCU
Q_ON     	=> KC_DO.Kr54_ON
Q_OFF     	=> KC_DO.Kr54_OF);

ps_im := ps_im OR Proc_Kr54.ps;

//Кран 53 (бп)
//2x2
KC_AM.Kr53b.disableManual := not KC_TS.DU_IM;  //Запрет РУ
KC_AM.Kr53b.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.)
KC_AM.Kr53b.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr53b( AMtype := IM_type.am2x2, AM := KC_AM.Kr53b, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT (KC_DO_ToHMI.Kr53b_ON.forsEnable OR KC_DO_ToHMI.Kr53b_OF.forsEnable),
tuns := TuneAM.Kr53b,
I_ON       := KC_DI.Kr53b_ON
I_OFF      := KC_DI.Kr53b_OF
I_Con      := KC_DI.Kr53b_ON_KCU
I_Coff     := KC_DI.Kr53b_OF_KCU
Q_ON     	=> KC_DO.Kr53b_ON
Q_OFF     	=> KC_DO.Kr53b_OF);

ps_im := ps_im OR Proc_Kr53b.ps;

//Кран 54 (бп)
//2x2
KC_AM.Kr54b.disableManual := not KC_TS.DU_IM;  //Запрет РУ
KC_AM.Kr54b.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.)
KC_AM.Kr54b.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr54b( AMtype := IM_type.am2x2, AM := KC_AM.Kr54b, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT (KC_DO_ToHMI.Kr54b_ON.forsEnable OR KC_DO_ToHMI.Kr54b_OF.forsEnable),
tuns := TuneAM.Kr54b,
I_ON       := KC_DI.Kr54b_ON
I_OFF      := KC_DI.Kr54b_OF
I_Con      := KC_DI.Kr54b_ON_KCU
I_Coff     := KC_DI.Kr54b_OF_KCU
Q_ON     	=> KC_DO.Kr54b_ON
Q_OFF     	=> KC_DO.Kr54b_OF);

ps_im := ps_im OR Proc_Kr54b.ps;

//Обогреватель прибора АДЭС LSA1
//1x0
KC_AM.EN_LSA1_ADES.disableManual := not KC_TS.DU_IM;  //Запрет РУ
KC_AM.EN_LSA1_ADES.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_EN_LSA1_ADES( AMtype := IM_type.am1x0, AM := KC_AM.EN_LSA1_ADES, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT KC_DO_ToHMI.EN_LSA1_ADES_ON.forsEnable,
tuns := TuneAM.EN_LSA1_ADES,
I_Con      := KC_DI.EN_LSA1_ADES_ON_KCU,
Q_ON     	=> KC_DO.EN_LSA1_ADES_ON);

ps_im := ps_im OR Proc_EN_LSA1_ADES.ps;

//Обогреватель прибора АДЭС LSA2
//1x0
KC_AM.EN_LSA2_ADES.disableManual :=	false; //Запрет РУ
KC_AM.EN_LSA2_ADES.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_EN_LSA2_ADES( AMtype := IM_type.am1x0, AM := KC_AM.EN_LSA2_ADES, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT KC_DO_ToHMI.EN_LSA2_ADES_ON.forsEnable,
tuns := TuneAM.EN_LSA2_ADES,
I_Con      := KC_DI.EN_LSA2_ADES_ON_KCU,
Q_ON     	=> KC_DO.EN_LSA2_ADES_ON);

ps_im := ps_im OR Proc_EN_LSA2_ADES.ps;

//Обогреватель прибора АДЭС LSA3
//1x0
KC_AM.EN_LSA3_ADES.disableManual :=	false;  //Запрет РУ
KC_AM.EN_LSA3_ADES.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_EN_LSA3_ADES( AMtype := IM_type.am1x0, AM := KC_AM.EN_LSA3_ADES, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT KC_DO_ToHMI.EN_LSA3_ADES_ON.forsEnable,
tuns := TuneAM.EN_LSA3_ADES,
I_Con      := KC_DI.EN_LSA3_ADES_ON_KCU,
Q_ON     	=> KC_DO.EN_LSA3_ADES_ON);

ps_im := ps_im OR Proc_EN_LSA3_ADES.ps;

//Обогреватель прибора LSA1 
//1x0
KC_AM.EN_LSA1_GPA.disableManual :=	false;  //Запрет РУ
KC_AM.EN_LSA1_GPA.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_EN_LSA1_GPA( AMtype := IM_type.am1x0, AM := KC_AM.EN_LSA1_GPA, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT KC_DO_ToHMI.EN_LSA1_GPA_ON.forsEnable,
tuns := TuneAM.EN_LSA1_GPA,
I_Con      := KC_DI.EN_LSA1_GPA_ON_KCU,
Q_ON     	=> KC_DO.EN_LSA1_GPA_ON);

ps_im := ps_im OR Proc_EN_LSA1_GPA.ps;


//Обогреватель прибора LSA2 
//1x0
KC_AM.EN_LSA2_GPA.disableManual :=	false;  //Запрет РУ
KC_AM.EN_LSA2_GPA.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_EN_LSA2_GPA( AMtype := IM_type.am1x0, AM := KC_AM.EN_LSA2_GPA, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT KC_DO_ToHMI.EN_LSA2_GPA_ON.forsEnable,
tuns := TuneAM.EN_LSA2_GPA,
I_Con      := KC_DI.EN_LSA2_GPA_ON_KCU,
Q_ON     	=> KC_DO.EN_LSA2_GPA_ON);

ps_im := ps_im OR Proc_EN_LSA2_GPA.ps;

//Обогреватель прибора LSA3
//1x0
KC_AM.EN_LSA3_GPA.disableManual	 :=	false;  //Запрет РУ
KC_AM.EN_LSA3_GPA.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_EN_LSA3_GPA( AMtype := IM_type.am1x0, AM := KC_AM.EN_LSA3_GPA, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT KC_DO_ToHMI.EN_LSA3_GPA_ON.forsEnable, 
tuns := TuneAM.EN_LSA3_GPA,
I_Con      := KC_DI.EN_LSA3_GPA_ON_KCU,
Q_ON     	=> KC_DO.EN_LSA3_GPA_ON);

ps_im := ps_im OR Proc_EN_LSA3_GPA.ps;

//Обогреватель прибора LSA4
//1x0
KC_AM.EN_LSA4_GPA.disableManual :=	false; //Запрет РУ
KC_AM.EN_LSA4_GPA.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_EN_LSA4_GPA( AMtype := IM_type.am1x0, AM := KC_AM.EN_LSA4_GPA, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT KC_DO_ToHMI.EN_LSA4_GPA_ON.forsEnable,
tuns := TuneAM.EN_LSA4_GPA,
I_Con      := KC_DI.EN_LSA4_GPA_ON_KCU,
Q_ON     	=> KC_DO.EN_LSA4_GPA_ON);

ps_im := ps_im OR Proc_EN_LSA4_GPA.ps;

//Обогреватель прибора LSA5 
//1x0
KC_AM.EN_LSA5_GPA.disableManual :=	false;  //Запрет РУ
KC_AM.EN_LSA5_GPA.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_EN_LSA5_GPA( AMtype := IM_type.am1x0, AM := KC_AM.EN_LSA5_GPA, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT KC_DO_ToHMI.EN_LSA5_GPA_ON.forsEnable,
tuns := TuneAM.EN_LSA5_GPA,
I_Con      := KC_DI.EN_LSA5_GPA_ON_KCU,
Q_ON     	=> KC_DO.EN_LSA5_GPA_ON);

ps_im := ps_im OR Proc_EN_LSA5_GPA.ps;

//Обогреватель прибора LSA6 
//1x0
KC_AM.EN_LSA6_GPA.disableManual :=	false;  //Запрет РУ
KC_AM.EN_LSA6_GPA.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_EN_LSA6_GPA( AMtype := IM_type.am1x0, AM := KC_AM.EN_LSA6_GPA, onImit := ImitOn,   cycle := tim.cycle, unlock := KC_BTN.Deblock
EN := NOT KC_DO_ToHMI.EN_LSA6_GPA_ON.forsEnable,
tuns := TuneAM.EN_LSA6_GPA,
I_Con      := KC_DI.EN_LSA6_GPA_ON_KCU,
Q_ON     	=> KC_DO.EN_LSA6_GPA_ON);

ps_im := ps_im OR Proc_EN_LSA6_GPA.ps;


]]></ST>
            </FunctionBlock>
            <Function UUID="CODNAAKPURQE5ISSMFLXHEFINI" Name="IM_Init" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables />
                <ST><![CDATA[//Кран 51
TuneAM.Kr51.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr51.delayQTimeout := 20.0;
TuneAM.Kr51.delayExtraOn := 1.0;
TuneAM.Kr51.delayExtraOff := 1.0;
TuneAM.Kr51.delayNotMoveAlert := 5.0;
TuneAM.Kr51.delayCircBrkAlert := 1.0;

//Кран 52
TuneAM.Kr52.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr52.delayQTimeout := 20.0;
TuneAM.Kr52.delayExtraOn := 1.0;
TuneAM.Kr52.delayExtraOff := 1.0;
TuneAM.Kr52.delayNotMoveAlert := 5.0;
TuneAM.Kr52.delayCircBrkAlert := 1.0;

//Кран 51-2
TuneAM.Kr51_2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr51_2.delayQTimeout := 20.0;
TuneAM.Kr51_2.delayExtraOn := 1.0;
TuneAM.Kr51_2.delayExtraOff := 1.0;
TuneAM.Kr51_2.delayNotMoveAlert := 5.0;
TuneAM.Kr51_2.delayCircBrkAlert := 1.0;

//Кран 52-2
TuneAM.Kr52_2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr52_2.delayQTimeout := 20.0;
TuneAM.Kr52_2.delayExtraOn := 1.0;
TuneAM.Kr52_2.delayExtraOff := 1.0;
TuneAM.Kr52_2.delayNotMoveAlert := 5.0;
TuneAM.Kr52_2.delayCircBrkAlert := 1.0;

//Кран 53
TuneAM.Kr53.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr53.delayQTimeout := 20.0;
TuneAM.Kr53.delayExtraOn := 1.0;
TuneAM.Kr53.delayExtraOff := 1.0;
TuneAM.Kr53.delayNotMoveAlert := 5.0;
TuneAM.Kr53.delayCircBrkAlert := 1.0;

//Кран 54
TuneAM.Kr54.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr54.delayQTimeout := 20.0;
TuneAM.Kr54.delayExtraOn := 1.0;
TuneAM.Kr54.delayExtraOff := 1.0;
TuneAM.Kr54.delayNotMoveAlert := 5.0;
TuneAM.Kr54.delayCircBrkAlert := 1.0;

//Кран 53 (бп)
TuneAM.Kr53b.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr53b.delayQTimeout := 20.0;
TuneAM.Kr53b.delayExtraOn := 1.0;
TuneAM.Kr53b.delayExtraOff := 1.0;
TuneAM.Kr53b.delayNotMoveAlert := 5.0;
TuneAM.Kr53b.delayCircBrkAlert := 1.0;

//Кран 54 (бп)
TuneAM.Kr54b.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr54b.delayQTimeout := 20.0;
TuneAM.Kr54b.delayExtraOn := 1.0;
TuneAM.Kr54b.delayExtraOff := 1.0;
TuneAM.Kr54b.delayNotMoveAlert := 5.0;
TuneAM.Kr54b.delayCircBrkAlert := 1.0;

//Обогреватель прибора АДЭС LSA1
TuneAM.EN_LSA1_ADES.delayChangeOvertimeAlert := 15.0;
TuneAM.EN_LSA1_ADES.delayQTimeout := 20.0;
TuneAM.EN_LSA1_ADES.delayExtraOn := 1.0;
TuneAM.EN_LSA1_ADES.delayExtraOff := 1.0;
TuneAM.EN_LSA1_ADES.delayNotMoveAlert := 5.0;
TuneAM.EN_LSA1_ADES.delayCircBrkAlert := 1.0;

//Обогреватель прибора АДЭС LSA2
TuneAM.EN_LSA2_ADES.delayChangeOvertimeAlert := 15.0;
TuneAM.EN_LSA2_ADES.delayQTimeout := 20.0;
TuneAM.EN_LSA2_ADES.delayExtraOn := 1.0;
TuneAM.EN_LSA2_ADES.delayExtraOff := 1.0;
TuneAM.EN_LSA2_ADES.delayNotMoveAlert := 5.0;
TuneAM.EN_LSA2_ADES.delayCircBrkAlert := 1.0;

//Обогреватель прибора АДЭС LSA3
TuneAM.EN_LSA3_ADES.delayChangeOvertimeAlert := 15.0;
TuneAM.EN_LSA3_ADES.delayQTimeout := 20.0;
TuneAM.EN_LSA3_ADES.delayExtraOn := 1.0;
TuneAM.EN_LSA3_ADES.delayExtraOff := 1.0;
TuneAM.EN_LSA3_ADES.delayNotMoveAlert := 5.0;
TuneAM.EN_LSA3_ADES.delayCircBrkAlert := 1.0;

//Обогреватель прибора LSA1 
TuneAM.EN_LSA1_GPA.delayChangeOvertimeAlert := 15.0;
TuneAM.EN_LSA1_GPA.delayQTimeout := 20.0;
TuneAM.EN_LSA1_GPA.delayExtraOn := 1.0;
TuneAM.EN_LSA1_GPA.delayExtraOff := 1.0;
TuneAM.EN_LSA1_GPA.delayNotMoveAlert := 5.0;
TuneAM.EN_LSA1_GPA.delayCircBrkAlert := 1.0;

//Обогреватель прибора LSA2 
TuneAM.EN_LSA2_GPA.delayChangeOvertimeAlert := 15.0;
TuneAM.EN_LSA2_GPA.delayQTimeout := 20.0;
TuneAM.EN_LSA2_GPA.delayExtraOn := 1.0;
TuneAM.EN_LSA2_GPA.delayExtraOff := 1.0;
TuneAM.EN_LSA2_GPA.delayNotMoveAlert := 5.0;
TuneAM.EN_LSA2_GPA.delayCircBrkAlert := 1.0;

//Обогреватель прибора LSA3
TuneAM.EN_LSA3_GPA.delayChangeOvertimeAlert := 15.0;
TuneAM.EN_LSA3_GPA.delayQTimeout := 20.0;
TuneAM.EN_LSA3_GPA.delayExtraOn := 1.0;
TuneAM.EN_LSA3_GPA.delayExtraOff := 1.0;
TuneAM.EN_LSA3_GPA.delayNotMoveAlert := 5.0;
TuneAM.EN_LSA3_GPA.delayCircBrkAlert := 1.0;

//Обогреватель прибора LSA4
TuneAM.EN_LSA4_GPA.delayChangeOvertimeAlert := 15.0;
TuneAM.EN_LSA4_GPA.delayQTimeout := 20.0;
TuneAM.EN_LSA4_GPA.delayExtraOn := 1.0;
TuneAM.EN_LSA4_GPA.delayExtraOff := 1.0;
TuneAM.EN_LSA4_GPA.delayNotMoveAlert := 5.0;
TuneAM.EN_LSA4_GPA.delayCircBrkAlert := 1.0;

//Обогреватель прибора LSA5 
TuneAM.EN_LSA5_GPA.delayChangeOvertimeAlert := 15.0;
TuneAM.EN_LSA5_GPA.delayQTimeout := 20.0;
TuneAM.EN_LSA5_GPA.delayExtraOn := 1.0;
TuneAM.EN_LSA5_GPA.delayExtraOff := 1.0;
TuneAM.EN_LSA5_GPA.delayNotMoveAlert := 5.0;
TuneAM.EN_LSA5_GPA.delayCircBrkAlert := 1.0;

//Обогреватель прибора LSA6 
TuneAM.EN_LSA6_GPA.delayChangeOvertimeAlert := 15.0;
TuneAM.EN_LSA6_GPA.delayQTimeout := 20.0;
TuneAM.EN_LSA6_GPA.delayExtraOn := 1.0;
TuneAM.EN_LSA6_GPA.delayExtraOff := 1.0;
TuneAM.EN_LSA6_GPA.delayNotMoveAlert := 5.0;
TuneAM.EN_LSA6_GPA.delayCircBrkAlert := 1.0;]]></ST>
            </Function>
        </Folder>
        <Folder Name="InOut" Comment="" Data="" UUID="FEAW5UHR47GEHF4UGY4PG6WELI">
            <Folder Name="AI" Comment="" Data="" UUID="QDN7NMQ3QQDUND7NCUE7VH276U">
                <Folder Name="ANB" Comment="" Data="" UUID="BKFILTHJY4LE7DMEZXA6LKJAKY">
                    <Function UUID="BYAR3MRKOBFE3ASGP7ZBFBDZQA" Name="ANB_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[(*//=
if not init.ANB then
	init.ANB := true;
*)
if init = false then //=
//Высокая температура на выходе КЦ
KC_Ust.Tg_out_KC_Av := 60.0;
//Повышенная температура на выходе КЦ
KC_Ust.Tg_out_KC_Pv := 45.0;
//---------------------------------------------------------------------
//Высокое давление на выходе КЦ
KC_Ust.Pg_out_KC_Av := 16.4;// 15.8- измено в соответствии с таблицей апс 27.05.2021
//Повышенное давление на выходе КЦ
KC_Ust.Pg_out_KC_Pv := 16.1; // 15.0- измено в соответствии с таблицей апс 27.05.2021
//=====================================||уставка||setForFault||true - верхняя, false - нижняя||задержка||=================================

KC_ANB_Settings.Tg_out_KC_Pv := ANB_init(0, true, 1.0);// Температура газа на выходе КЦ: предупредительная верхняя
KC_ANB_Settings.Tg_out_KC_Av := ANB_init(0, true, 1.0);// Температура газа на выходе КЦ: аварийная верхняя
//
KC_ANB_Settings.Pg_out_KC_Pv := ANB_init(0, true, 1.0);// Давление газа на выходе КЦ: предупредительная верхняя
KC_ANB_Settings.Pg_out_KC_Av := ANB_init(0, true, 1.0);// Давление газа на выходе КЦ: аварийная верхняя

end_if;

//========================================================================================================================================
(*KC_ANB.Tg_out_KC_Pv := ANB_Processing(KC_AI_ToHMI.Tg_out_KC, KC_Ust.Tg_out_KC_Pv, KC_ANB_Settings.Tg_out_KC_Pv	, KC_ANB_Internal.Tg_out_KC_Pv 	);// Температура газа на выходе КЦ: предупредительная верхняя
KC_ANB.Tg_out_KC_Av := ANB_Processing(KC_AI_ToHMI.Tg_out_KC, KC_Ust.Tg_out_KC_Av, KC_ANB_Settings.Tg_out_KC_Av	, KC_ANB_Internal.Tg_out_KC_Av	);// Температура газа на выходе КЦ: аварийная верхняя
KC_ANB.Pg_out_KC_Pv := ANB_Processing(KC_AI_ToHMI.Pg_out_KC, KC_Ust.Pg_out_KC_Pv, KC_ANB_Settings.Pg_out_KC_Pv	, KC_ANB_Internal.Pg_out_KC_Pv 	);// Температура газа на выходе КЦ: предупредительная верхняя
KC_ANB.Pg_out_KC_Av := ANB_Processing(KC_AI_ToHMI.Pg_out_KC, KC_Ust.Pg_out_KC_Av, KC_ANB_Settings.Pg_out_KC_Av	, KC_ANB_Internal.Pg_out_KC_Av	);// Температура газа на выходе КЦ: аварийная верхняя
*)
KC_ANB.Tg_out_KC_Pv := ANB_Processing(KC_Ust.Tg_out_KC_Pv, KC_AI_ToHMI.Tg_out_KC.PV, KC_AI_ToHMI.Tg_out_KC.fault_common ,KC_ANB_Settings.Tg_out_KC_Pv, KC_ANB_Internal.Tg_out_KC_Pv);// Температура газа на выходе КЦ: предупредительная верхняя
KC_AI_ToHMI.Tg_out_KC.ps := KC_ANB.Tg_out_KC_Pv;
KC_ANB.Tg_out_KC_Av := ANB_Processing(KC_Ust.Tg_out_KC_Av, KC_AI_ToHMI.Tg_out_KC.PV, KC_AI_ToHMI.Tg_out_KC.fault_common, KC_ANB_Settings.Tg_out_KC_Av, KC_ANB_Internal.Tg_out_KC_Av);// Температура газа на выходе КЦ: аварийная верхняя
KC_AI_ToHMI.Tg_out_KC.as := KC_ANB.Tg_out_KC_Av;
KC_ANB.Pg_out_KC_Pv := ANB_Processing(KC_Ust.Pg_out_KC_Pv, KC_AI_ToHMI.Pg_out_KC.PV, KC_AI_ToHMI.Pg_out_KC.fault_common, KC_ANB_Settings.Pg_out_KC_Pv, KC_ANB_Internal.Pg_out_KC_Pv);// Температура газа на выходе КЦ: предупредительная верхняя
KC_AI_ToHMI.Pg_out_KC.ps := KC_ANB.Pg_out_KC_Pv;
KC_ANB.Pg_out_KC_Av := ANB_Processing(KC_Ust.Pg_out_KC_Av, KC_AI_ToHMI.Pg_out_KC.PV, KC_AI_ToHMI.Pg_out_KC.fault_common, KC_ANB_Settings.Pg_out_KC_Av, KC_ANB_Internal.Pg_out_KC_Av);// Температура газа на выходе КЦ: аварийная верхняя
KC_AI_ToHMI.Pg_out_KC.as := KC_ANB.Pg_out_KC_Av;]]></ST>
                    </Function>
                    <Function UUID="XYBPO55BLI4UPLMLN7IPM2G3AE" Name="ANB_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="NGTALOKOFQQEJCXFO5K2WRVOEM" Name="limit" Comment="порог срабатывания" Type="REAL" Usage="input" />
                            <Variable UUID="OYP2F37VW5REJFKT3KXRET4S3M" Name="anp" Type="REAL" Usage="input" />
                            <Variable UUID="QHRSZQ2O22ZUDO3RO7LZCS7TCQ" Name="fault" Type="BOOL" Usage="input" />
                            <Variable UUID="XZFZFVGE5NOUHBKTICGTXHSDWI" Name="set" Type="T_ANB_Settings" TypeUUID="I7SVZ4ZR3CPE7BHJZXJTI4JZXI" Usage="input" />
                            <Variable UUID="6A7WAZF3BDRUBOHX4IKMI5L3CY" Name="timer" Type="REAL" Usage="inout" />
                        </Variables>
                        <ST><![CDATA[if fault then
	if    set.setForFault = 0 then ANB_Processing := false;
	elsif set.setForFault = 1 then ANB_Processing := true; 
	end_if;
else
	if anp < limit xor set.isUp then
		timer := timer + tim.cycle;
	else
		timer := 0.0;
	end_if;
	ANB_Processing := timer >(*=*) set.delay; //= неравенство д.б. строгим
(*anp.ps := ANB_Processing and set.tip = 1;
anp.as := ANB_Processing and set.tip = 2; 
anp.os := ANB_Processing and set.tip = 3; 
*)
end_if;]]></ST>
                    </Function>
                    <Function UUID="QLH3Q4CCZZNUZDE6GAV5NNELHQ" Name="ANB_init" ResultTypeUUID="I7SVZ4ZR3CPE7BHJZXJTI4JZXI">
                        <Variables>
                            <Variable UUID="J3PMJZQQPFCKTLXZKHCSBVW2FY" Name="setForFault" Type="INT" Usage="input" />
                            <Variable UUID="PPFZBCEPQNDGDPXS4GFZ5DG2R4" Name="isUp" Type="BOOL" Usage="input" />
                            <Variable UUID="YGKONKKT2ZACFPHVF5HQIODJOQ" Name="delay" Type="REAL" Usage="input" />
                        </Variables>
                        <ST><![CDATA[//setStruct.spVal := spVal;//значения уставки
ANB_init.setForFault := setForFault;//значение, записываемое в ANB при неисправности канала: 0 - FALSE, 1 - TRUE, 2 - оставить то что было
ANB_init.isUp := isUp;//направление срабатывания. TRUE - верхняя, FALSE - нижняя
ANB_init.delay := delay;//задержка на срабатывание
//ANB_init.tip := tip; // тип уставки (1 ПС, 2 АС, 3 ОС)]]></ST>
                    </Function>
                </Folder>
                <Function UUID="FRQ7F67BQNBCDLLM53Q4UKPGR4" Name="AI_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="L27BSM7XEZH7PBAFCWXQPDPAHM" Name="in" Type="REAL" Usage="input" />
                        <Variable UUID="3RRZ672T65H27KGUANWIHJUTAQ" Name="set" Type="T_AI_Settings" TypeUUID="XHUY6ZRHGRQEVOF35XEJI5L2SE" Usage="input" />
                        <Variable UUID="6GENIMNWPJBGLDUSADU5POKSIU" Name="btn" Type="T_AI_FromHMI" TypeUUID="VZ3H6GEVT3CUTI65HAA5AALRAY" Usage="input" />
                        <Variable UUID="2ISD2SFA6RHOVBLDUJA43YIYKA" Name="out" Type="T_AI_ToHMI" TypeUUID="J74RQIZG5I6EZDCM32A6SZRKIM" Usage="inout" />
                        <Variable UUID="KNUNDWLBWVFKTOYD3CUNK54D2I" Name="my" Type="T_AI_Internal" TypeUUID="GZ6UU5D6R5EXXPFY4TZ3EOTECU" Usage="inout" />
                        <Variable UUID="Z3VWPXEY7ZHYHLOJY634T36OTI" Name="tmp" Type="INT" Usage="internal" />
                        <Variable UUID="3JRCDCALYZAKDD252W6PF3GDLA" Name="qCycleCheckROC" Comment="Количество циклов контроля РОК" Type="INT" Usage="internal" />
                        <Variable UUID="5M2NFBWVLJEB5GONNQSVU37O3M" Name="tau" Type="REAL" Usage="internal" />
                        <Variable UUID="4FOVGDDSVNDJVMJ33BNQD4UHBQ" Name="criticalSettingErr" Type="BOOL" Usage="internal" />
                        <Variable UUID="SIMSIEIFINHRJIC55L2DCXT3CM" Name="limSettingErr" Type="BOOL" Usage="internal" />
                        <Variable UUID="BGOHZRGBKVHJFGQBERMGBC6VXU" Name="brkSettingErr" Type="BOOL" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[//---------------------- Поиск ошибок задания настроек – несоответствие допустимым значениям (BOOL)-----------------------------------------
criticalSettingErr := (set.min >= set.max or 
					set.minADC = set.maxADC or
					set.repairTime = 0 or set.recoveryTime < 0.0)  and not out.manual ;     //AKV
limSettingErr := (set.loLim >= set.hiLim or set.loLim >= set.max or set.hiLim <= set.min)  and not out.manual ;    //AKV
brkSettingErr := (set.hiBrk <= set.hiLim or set.loBrk >= set.loLim)  and not out.manual ;     //AKV
out.settingErr := criticalSettingErr or limSettingErr or brkSettingErr;
	out.fault_common := (out.settingErr or out.break or out.up_scale or out.down_scale or out.ROC)  and not out.manual ;  //AKV //обобщённая неисправность. Образуется по «ИЛИ» от break,up_scale,down_scale,ROC,settingErr (BOOL)
	out.criticalFault := (criticalSettingErr or out.break or out.ROC)  and not out.manual ;   //AKV //Критическая ошибка, свидетельствующая о полной неисправности канала

//---------------- таймер восстановления канала после неисправности или ремонта или ДУ ----------------------------------------------------------------
if not (criticalSettingErr or out.repair or out.manual) and my.prevFault then
	my.timerRecover := set.recoveryTime;
elsif my.timerRecover > 0.0 then
	my.timerRecover := my.timerRecover - tim.cycle;
else
	my.timerRecover := 0.0;
end_if;
my.prevFault := criticalSettingErr or out.repair or out.manual;
if criticalSettingErr then return; end_if; //Если есть ошибки настроек - прекращаем обработку
//---------------------------------------------------------------------------------------------------------------------------------------------
//----------------- Пересчёт парамера из кодов АЦП в единицы измерения -----------------------------------------------------------------------
out.measure := (in - set.minADC  + set.corrADC)/(set.maxADC - set.minADC)*(set.max - set.min)+set.min;//Пересчёт кода АЦП в инженерные единицы (REAL)
//---------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------- Определение обрыва и зашкалов -----------------------------------------------------------------------
if not brkSettingErr and not out.manual then    //AKV
	out.break      := out.break      and not btn.BTNworkOn or out.measure > set.hiBrk or out.measure < set.loBrk;	//обрыв канала (BOOL)
	elsif out.manual then
		out.break      := false;

end_if;
if not limSettingErr and not out.manual then //AKV
	out.up_scale   := out.up_scale   and not btn.BTNworkOn or out.measure > set.hiLim;							//выход за верхний зашкал (BOOL)
	out.down_scale := out.down_scale and not btn.BTNworkOn or out.manual or out.measure < set.loLim;							//выход за нижний зашкал (BOOL)
		elsif out.manual then
			out.up_scale   :=false;
			out.down_scale :=false;

end_if;
//---------------------------------------------------------------------------------------------------------------------------------------------
//----------- Расчёт превышения максимальной скорости изменения парамера -----------------------------------------------------------------------
if set.maxROC > 0.0 and tim.cycle > 0.0 then //Работает только если макс.скорость задана и есть корректное время цикла
	qCycleCheckROC := 3; //Количество циклов подряд, когда скорость изменения параметра превышает заданный предел
	if (out.measure - my.prevMeasure)/tim.cycle > set.maxROC  then //если новый замер больше старого на заданную величину приведённую к времени цикла
		if    my.qCycleROC >= 0 and my.qCycleROC < qCycleCheckROC then my.qCycleROC := my.qCycleROC + 1; //и предыдущий тоже был больше или никаким - увеличиваем счётчик на 1
		elsif my.qCycleROC < 0 then my.qCycleROC := 1;														//если предыдущая проверка показала падение скорости - устанавливаем счётчик на 1
		end_if;
	elsif (my.prevMeasure - out.measure)/tim.cycle > set.maxROC then // то же делаем для отрицательной разницы
		if    my.qCycleROC <= 0 and my.qCycleROC > -qCycleCheckROC then my.qCycleROC := my.qCycleROC - 1;
		elsif my.qCycleROC < 0 then my.qCycleROC := -1;
		end_if;
	else
		my.qCycleROC := 0; 		//если скорость в норме - обнуляем счётчик превышений подряд
								//и, если таймер восстановления не запущен, запоминаем достоверное значение
		//------- Обработка вывода канала в работу ----------------------------------------------------------------------------------------------------------
		if my.timerRecover <= 0.0 then my.validMeasure := out.measure;
		else my.validMeasure := my.validMeasure + (out.measure - my.validMeasure)*(set.recoveryTime - my.timerRecover + 1.0)/(set.recoveryTime + 1.0);
		end_if;
	end_if;
else
	//------- Обработка вывода канала в работу ----------------------------------------------------------------------------------------------------------
	if my.timerRecover <= 0.0 then my.validMeasure := out.measure;
	else my.validMeasure := my.validMeasure + (out.measure - my.validMeasure)*(set.recoveryTime - my.timerRecover + 1.0)/(set.recoveryTime + 1.0);
	end_if;
end_if;
//Если количество циклов с превышением скорости больше заданного количества, неисправность запоминаем до нажатия кнопки "в работу"
//= out.ROC := out.ROC and not btn.BTNworkOn or (my.qCycleROC >= qCycleCheckROC) or (my.qCycleROC <= -qCycleCheckROC);
out.ROC := (out.ROC and not btn.BTNworkOn or (my.qCycleROC >= qCycleCheckROC) or (my.qCycleROC <= -qCycleCheckROC)) and set.maxROC > 0.0;//=
my.prevMeasure := out.measure; //запоминаем предыдущее измерение.
//------------------------------------------------------------------------------------------------------------------------------------------------
out.repair := (btn.BTNrepairOn or out.repair) and not(btn.BTNworkOn or btn.BTNmanualOn or out.CurrentTimeOfRepair > set.repairTime);//канал в ремонте (BOOL)
out.manual := (btn.BTNmanualOn or out.manual) and not(btn.BTNworkOn or btn.BTNrepairOn);//канал в дист.упр. (BOOL)
//------------------- Обработка ремонта ----------------------------------------------------------------------------------------------------------
if out.repair and not btn.BTNrepairProlong then
	my.timerRepair := my.timerRepair + tim.cycle;//оставшееся время ремонта (INT)
else
	my.timerRepair := 0.0;
end_if;
tmp := set.repairTime - REAL_TO_INT(my.timerRepair);
if tmp >= 0 then out.CurrentTimeOfRepair := tmp;
else out.CurrentTimeOfRepair := 0;
end_if;
out.repair_time_less_10_percent := out.CurrentTimeOfRepair < set.repairTime/10;//до конца ремонта осталось меньше 10% от заданного времени (BOOL)
if out.repair then return; end_if; //если выставлен ремонт - не обновляем значение параметра для алгоритма
//------------------------------------------------------------------------------------------------------------------------------------------------
//------------------- Обработка ДУ ----------------------------------------------------------------------------------------------------------
if out.manual then
	my.validMeasure := btn.manualTarget;//значение для САУ. Рассчитывается из  measure, Manual_Target с учётом неисправностей и фильтрации (REAL)
else
	btn.manualTarget := my.validMeasure;
end_if;
//------------------------------------------------------------------------------------------------------------------------------------------------
//------------------- Расчёт PV ----------------------------------------------------------------------------------------------------------
//значение для САУ. Рассчитывается из  measure, Manual_Target с учётом неисправностей и фильтрации (REAL)
if tim.cycle > 0.0 then
	tau := 4.0 * set.tau/tim.cycle;
	if tau > 1.0 then
		out.PV := out.PV + (my.validMeasure - out.PV)/tau;
	else
		out.PV := my.validMeasure;
	end_if;
else
	out.PV := my.validMeasure;
end_if;
(*
set.min := ;//минимум шкалы канала, ед.изм. Не может быть >= max
set.max := ;//максимум шкалы канала, ед.изм. Не может быть <= min
set.loLim := ;//уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
set.hiLim := ;//уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
set.minADC := ;//значение АЦП, соответствующее минимуму шкалы канала, б.р.
set.maxADC := ;//значение АЦП, соотв. макс. шкалы, б.р. Не может быть равно minADC
set.minROC := ;//макс. допустимая скорость сниж. показаний, ед.изм./сек. Если «0» - скорость падения не анализируется
set.maxROC := ;//макс. допустимая скорость роста, ед.изм./сек. Если «0» - скорость роста не анализируется
set.ROC_time := ;//время, за которое анализируется скорость изменения, сек. Если «0» - скорость не анализируется
set.recoveryTime := ;//время восстановления после неисправности, сек. Не может быть < «0»
set.repairTime := ;//максимальное время в ремонте, сек. Не может быть «0»
set.tau := ;//тау фильтра, сек. Если «0» - фильтрация отсутствует
set.id := ;//номер по порядку
btn.manualTarget //Задание из ЧМИ
btn.BTNmanualOn //Кнопка вкл. задания значения из ЧМИ
btn.BTNrepairOn //Кнопка вкл. ремонта
btn.BTNworkOn //Кнопка перекл. в работу
btn.BTNrepairProlong //Кнопка продления ремонта
*)]]></ST>
                </Function>
                <Function UUID="CF4QENKSGJC3PJ2UNFRMVS5ILY" Name="AI_init" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="3PUM5EGSZZGW5B46GT7GJGJYHY" Name="setStruct" Type="T_AI_Settings" TypeUUID="XHUY6ZRHGRQEVOF35XEJI5L2SE" Usage="output" />
                        <Variable UUID="A4X47N4MTNEGBMHG5JCV54OYD4" Name="min" Type="REAL" Usage="input" />
                        <Variable UUID="J3PMJZQQPFCKTLXZKHCSBVW2FY" Name="max" Type="REAL" Usage="input" />
                        <Variable UUID="PPFZBCEPQNDGDPXS4GFZ5DG2R4" Name="minADC" Type="REAL" Usage="input" />
                        <Variable UUID="YGKONKKT2ZACFPHVF5HQIODJOQ" Name="maxADC" Type="REAL" Usage="input" />
                        <Variable UUID="SNMC52OSVNCEJC2WKNQ55IXRDU" Name="loLim" Type="REAL" Usage="input" />
                        <Variable UUID="C5FFNJBSORADZKDONAJYIOYQMM" Name="hiLim" Type="REAL" Usage="input" />
                        <Variable UUID="BLJ7QPD3B5GIFOK5INHVLE4N4M" Name="loBrk" Type="REAL" Usage="input" />
                        <Variable UUID="BRAZ2SPNOBCCNMKASNN375STCQ" Name="hiBrk" Type="REAL" Usage="input" />
                        <Variable UUID="A5ZCH4MWLNBG7GEVV73JJRNRZ4" Name="maxROC" Type="REAL" Usage="input" />
                        <Variable UUID="322VB4Q5PNEOBO55S4FRZSF2IQ" Name="recoveryTime" Type="REAL" Usage="input" />
                        <Variable UUID="UCAGZSJ77NAYTFYRM4N5QV62A4" Name="repairTime" Type="INT" Usage="input" />
                        <Variable UUID="3WUETIGW3VCGPPNXPQHEFM4NP4" Name="tau" Type="REAL" Usage="input" />
                        <Variable UUID="O2PSTUZUB5EIRAZBONFYBOPYXU" Name="id" Type="INT" Usage="input" />
                    </Variables>
                    <ST><![CDATA[setStruct.min:= min;//минимум шкалы канала, ед.изм. Не может быть >= max
setStruct.max:= max;//максимум шкалы канала, ед.изм. Не может быть <= min
setStruct.minADC:= minADC;//значение АЦП, соответствующее минимуму шкалы канала, б.р.
setStruct.maxADC:= maxADC;//значение АЦП, соотв. макс. шкалы, б.р. Не может быть равно minADC
setStruct.loLim:= loLim;//уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
setStruct.hiLim:= hiLim;//уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
setStruct.loBrk:= loBrk;//уровень зашкала вниз, ед.изм. Не может быть >= loLim
setStruct.hiBrk:= hiBrk;//уровень обрыва вверх, ед.изм. Не может быть <= hiLim
setStruct.maxROC:= maxROC;//макс. допустимая скорость роста, ед.изм./сек. Если «0» - скорость роста не анализируется
setStruct.recoveryTime:= recoveryTime;//время восстановления после неисправности, сек. Не может быть меньше "0"
setStruct.repairTime:= repairTime;//максимальное время в ремонте, сек. Не может быть меньше или равно «0»
setStruct.tau:= tau;//тау фильтра, сек. Если «0» - фильтрация отсутствует
setStruct.id:= id;//номер по порядку	
setStruct.corrADC:= 0.0;//корректировка минимумa АЦП
]]></ST>
                </Function>
                <Function UUID="IDNHZDHUJ5SFWPTUOWUZPKI33E" Name="KC_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="repTime" Type="INT" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[repTime := 3600;
(*//=
if init.AI = false then
	init.AI := true;
*)
if init = false then //=
//------------------------------- аргументы функции инициализации --------------------------------
//минимум шкалы канала, ед.изм. Не может быть >= max
//максимум шкалы канала, ед.изм. Не может быть <= min
//значение АЦП, соответствующее минимуму шкалы канала, б.р.
//значение АЦП, соотв. макс. шкалы, б.р. Не может быть равно minADC
//уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
//уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
//уровень зашкала вниз, ед.изм. Не может быть >= loLim
//уровень обрыва вверх, ед.изм. Не может быть <= hiLim
//макс. допустимая скорость роста, ед.изм./сек. Если «0» - скорость роста не анализируется
//время восстановления после неисправности, сек. Не может быть меньше "0"
//максимальное время в ремонте, сек. Не может быть меньше или равно «0»
//тау фильтра, сек. Если «0» - фильтрация отсутствует
//номер по порядку	
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Резерв
AI_init(KC_AI_Settings.Res_00,0.0,100.0,11773.0,59714.0,0.0,0.0,0.0,0.0,0.0,1.0,repTime,1.0,0);
//Температура газа на входе КЦ
AI_init(KC_AI_Settings.Tg_in_KC,-50.0,500.0,11773.0,59714.0,-65.0,515.0,-80.0,530.0,0.0,1.0,repTime,1.0,1);
//Температура газа на выходе К
AI_init(KC_AI_Settings.Tg_out_KC,-50.0,500.0,11773.0,59714.0,-65.0,515.0,-80.0,530.0,0.0,1.0,repTime,1.0,2);
//Давление газа на входе КЦ
AI_init(KC_AI_Settings.Pg_in_KC,0.0,6.0,11773.0,59714.0,-0.18,6.18,-0.36,6.36,0.0,1.0,repTime,1.0,3);//= исправлено с 10 МПа на 6 МПа 29.01.2021 на ПНР (ОАЕ)
//Давление газа на выходе КЦ
AI_init(KC_AI_Settings.Pg_out_KC,0.0,25.0,11773.0,59714.0,-0.75,25.75,-1.5,26.5,0.0,1.0,repTime,1.0,4);//= исправлено с 10 МПа на 25 МПа 29.01.2021 на ПНР (ОАЕ)
//Ток разряда-заряда Аб в ЩПТ =220
AI_init(KC_AI_Settings.I_AB,0.0,10.0,11773.0,59714.0,-0.3,10.3,-0.6,10.6,0.0,1.0,repTime,1.0,5);
//Напряжение на I секции шин в ЩПТ =220В
AI_init(KC_AI_Settings.U1_DC220,0.0,370.0,11773.0,59714.0,-11.1,381.1,-22.2,392.2,0.0,1.0,repTime,1.0,6);
//Напряжение на II секции шин в ЩПТ =220В
AI_init(KC_AI_Settings.U2_DC220,0.0,370.0,11773.0,59714.0,-11.1,381.1,-22.2,392.2,0.0,1.0,repTime,1.0,7);
//Давление на входном коллекторе КЦ (1)
AI_init(KC_AI_Settings.Pg1_in_Kol,2.3,4.3,11773.0,59714.0,2.24,4.36,2.18,4.42,0.0,1.0,repTime,1.0,8);
//Давление на входном коллекторе КЦ (2)
AI_init(KC_AI_Settings.Pg2_in_Kol,2.3,4.3,11773.0,59714.0,2.24,4.36,2.18,4.42,0.0,1.0,repTime,1.0,9);
//Давление на выходном коллекторе КЦ (1)
AI_init(KC_AI_Settings.Pg1_out_Kol,5.5,16.0,11773.0,59714.0,5.185,16.315,4.87,16.63,0.0,1.0,repTime,1.0,10);
//Давление на выходном коллекторе КЦ (2)
AI_init(KC_AI_Settings.Pg2_out_Kol,5.5,16.0,11773.0,59714.0,5.185,16.315,4.87,16.63,0.0,1.0,repTime,1.0,11);
//Резерв0
AI_init(KC_AI_Settings.Res_0,0.0,100.0,11773.0,59714.0,0.0,0.0,0.0,0.0,0.0,1.0,repTime,1.0,12);
//Резерв1
AI_init(KC_AI_Settings.Res_1,0.0,100.0,11773.0,59714.0,0.0,0.0,0.0,0.0,0.0,1.0,repTime,1.0,13);
//Резерв2
AI_init(KC_AI_Settings.Res_2,0.0,100.0,11773.0,59714.0,0.0,0.0,0.0,0.0,0.0,1.0,repTime,1.0,14);
//Резерв3
AI_init(KC_AI_Settings.Res_3,0.0,100.0,11773.0,59714.0,0.0,0.0,0.0,0.0,0.0,1.0,repTime,1.0,15);
//Измерение основного напряжения
AI_init(KC_AI_Settings.Uosn_SAU,0.0,370.0,11773.0,59714.0,-11.1,381.1,-22.2,392.2,0.0,1.0,repTime,1.0,16);
//Напряжение резервного питания
AI_init(KC_AI_Settings.Urez_SAU,0.0,370.0,11773.0,59714.0,-11.1,381.1,-22.2,392.2,0.0,1.0,repTime,1.0,17);
//Напряжение питания кранов
AI_init(KC_AI_Settings.Ukr,0.0,370.0,11773.0,59714.0,-11.1,381.1,-22.2,392.2,0.0,1.0,repTime,1.0,18);
//Резерв4
AI_init(KC_AI_Settings.Res_4,0.0,100.0,11773.0,59714.0,0.0,0.0,0.0,0.0,0.0,1.0,repTime,1.0,19);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Резерв
AI_Processing(KC_AI_DRV.Res_00,KC_AI_Settings.Res_00,KC_AI_FromHMI.Res_00,KC_AI_ToHMI.Res_00,KC_AI_Internal.Res_00);
//Температура газа на входе КЦ
AI_Processing(KC_AI_DRV.Tg_in_KC,KC_AI_Settings.Tg_in_KC,KC_AI_FromHMI.Tg_in_KC,KC_AI_ToHMI.Tg_in_KC,KC_AI_Internal.Tg_in_KC);
//Температура газа на выходе КЦ
AI_Processing(KC_AI_DRV.Tg_out_KC,KC_AI_Settings.Tg_out_KC,KC_AI_FromHMI.Tg_out_KC,KC_AI_ToHMI.Tg_out_KC,KC_AI_Internal.Tg_out_KC);
//Давление газа на входе КЦ
AI_Processing(KC_AI_DRV.Pg_in_KC,KC_AI_Settings.Pg_in_KC,KC_AI_FromHMI.Pg_in_KC,KC_AI_ToHMI.Pg_in_KC,KC_AI_Internal.Pg_in_KC);
//Давление газа на выходе КЦ
AI_Processing(KC_AI_DRV.Pg_out_KC,KC_AI_Settings.Pg_out_KC,KC_AI_FromHMI.Pg_out_KC,KC_AI_ToHMI.Pg_out_KC,KC_AI_Internal.Pg_out_KC);
//Ток разряда-заряда Аб в ЩПТ =220
AI_Processing(KC_AI_DRV.I_AB,KC_AI_Settings.I_AB,KC_AI_FromHMI.I_AB,KC_AI_ToHMI.I_AB,KC_AI_Internal.I_AB);
//Напряжение на I секции шин в ЩПТ =220В
AI_Processing(KC_AI_DRV.U1_DC220,KC_AI_Settings.U1_DC220,KC_AI_FromHMI.U1_DC220,KC_AI_ToHMI.U1_DC220,KC_AI_Internal.U1_DC220);
//Напряжение на II секции шин в ЩПТ =220В
AI_Processing(KC_AI_DRV.U2_DC220,KC_AI_Settings.U2_DC220,KC_AI_FromHMI.U2_DC220,KC_AI_ToHMI.U2_DC220,KC_AI_Internal.U2_DC220);
//Давление на входном коллекторе КЦ (1)
AI_Processing(KC_AI_DRV.Pg1_in_Kol,KC_AI_Settings.Pg1_in_Kol,KC_AI_FromHMI.Pg1_in_Kol,KC_AI_ToHMI.Pg1_in_Kol,KC_AI_Internal.Pg1_in_Kol);
//Давление на входном коллекторе КЦ (2)
AI_Processing(KC_AI_DRV.Pg2_in_Kol,KC_AI_Settings.Pg2_in_Kol,KC_AI_FromHMI.Pg2_in_Kol,KC_AI_ToHMI.Pg2_in_Kol,KC_AI_Internal.Pg2_in_Kol);
//Давление на выходном коллекторе КЦ (1)
AI_Processing(KC_AI_DRV.Pg1_out_Kol,KC_AI_Settings.Pg1_out_Kol,KC_AI_FromHMI.Pg1_out_Kol,KC_AI_ToHMI.Pg1_out_Kol,KC_AI_Internal.Pg1_out_Kol);
//Давление на выходном коллекторе КЦ (2)
AI_Processing(KC_AI_DRV.Pg2_out_Kol,KC_AI_Settings.Pg2_out_Kol,KC_AI_FromHMI.Pg2_out_Kol,KC_AI_ToHMI.Pg2_out_Kol,KC_AI_Internal.Pg2_out_Kol);
//Резерв0
AI_Processing(KC_AI_DRV.Res_0,KC_AI_Settings.Res_0,KC_AI_FromHMI.Res_0,KC_AI_ToHMI.Res_0,KC_AI_Internal.Res_0);
//Резерв1
AI_Processing(KC_AI_DRV.Res_1,KC_AI_Settings.Res_1,KC_AI_FromHMI.Res_1,KC_AI_ToHMI.Res_1,KC_AI_Internal.Res_1);
//Резерв2
AI_Processing(KC_AI_DRV.Res_2,KC_AI_Settings.Res_2,KC_AI_FromHMI.Res_2,KC_AI_ToHMI.Res_2,KC_AI_Internal.Res_2);
//Резерв3
AI_Processing(KC_AI_DRV.Res_3,KC_AI_Settings.Res_3,KC_AI_FromHMI.Res_3,KC_AI_ToHMI.Res_3,KC_AI_Internal.Res_3);
//Измерение основного напряжения
AI_Processing(KC_AI_DRV.Uosn_SAU,KC_AI_Settings.Uosn_SAU,KC_AI_FromHMI.Uosn_SAU,KC_AI_ToHMI.Uosn_SAU,KC_AI_Internal.Uosn_SAU);
//Напряжение резервного питания
AI_Processing(KC_AI_DRV.Urez_SAU,KC_AI_Settings.Urez_SAU,KC_AI_FromHMI.Urez_SAU,KC_AI_ToHMI.Urez_SAU,KC_AI_Internal.Urez_SAU);
//Напряжение питания кранов
AI_Processing(KC_AI_DRV.Ukr,KC_AI_Settings.Ukr,KC_AI_FromHMI.Ukr,KC_AI_ToHMI.Ukr,KC_AI_Internal.Ukr);
//Резерв4
AI_Processing(KC_AI_DRV.Res_4,KC_AI_Settings.Res_4,KC_AI_FromHMI.Res_4,KC_AI_ToHMI.Res_4,KC_AI_Internal.Res_4);
//Конец сгенерированного кода
]]></ST>
                </Function>
            </Folder>
            <Folder Name="DI" Comment="" Data="" UUID="PWN5YFJRJEJUBCYTU26HPP3SAQ">
                <Function UUID="P2XYAGEU5FGZTGPRCEWII4RCGE" Name="DI_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="L27BSM7XEZH7PBAFCWXQPDPAHM" Name="in" Type="BOOL" Usage="input" />
                        <Variable UUID="WHFS6UBDDVC7RDLEWVS6NYVJLQ" Name="externalFault" Type="BOOL" Usage="input" />
                        <Variable UUID="3RRZ672T65H27KGUANWIHJUTAQ" Name="set" Type="T_DI_Settings" TypeUUID="YYQ4LFBFOMREFPHHDI3SPZLDYM" Usage="input" />
                        <Variable UUID="6GENIMNWPJBGLDUSADU5POKSIU" Name="fromHMI" Type="T_DI_FromHMI" TypeUUID="CB63GVNINFXE5NDGOS62CUMGSY" Usage="inout" />
                        <Variable UUID="2ISD2SFA6RHOVBLDUJA43YIYKA" Name="toHMI" Type="T_DI_ToHMI" TypeUUID="GHOQ5H5MCDOEHDF2HTYC2D4HJI" Usage="inout" />
                        <Variable UUID="KNUNDWLBWVFKTOYD3CUNK54D2I" Name="my" Type="T_DI_Internal" TypeUUID="AZLZGZOBJZBF3NOVFVJWX37NVA" Usage="inout" />
                        <Variable UUID="BHQXJT3WMZFR5CMWIFB25VJNXQ" Name="out" Type="BOOL" Usage="inout" />
                        <Variable UUID="I6ZDT3YY5BCUHDXRDWGOOQPS74" Name="tmp" Type="INT" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[//---------------------- Поиск ошибок задания настроек – несоответствие допустимым значениям (BOOL)-----------------------------------------
toHMI.settingErr := set.repairTime = 0;
toHMI.fault_common := toHMI.settingErr or externalFault;//обобщённая неисправность. Образуется по «ИЛИ» от settingErr и неисправности цепи датчика
//---------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------
toHMI.repair := (fromHMI.BTNrepairOn or toHMI.repair) and not(fromHMI.BTNworkOn or fromHMI.BTNmanualOn or toHMI.CurrentTimeOfRepair > set.repairTime);//канал в ремонте (BOOL)
toHMI.manual := (fromHMI.BTNmanualOn or toHMI.manual) and not(fromHMI.BTNworkOn or fromHMI.BTNrepairOn);//канал в дист.упр. (BOOL)
//------------------- Обработка ремонта ----------------------------------------------------------------------------------------------------------
if toHMI.repair and not fromHMI.BTNrepairProlong then
	my.timerRepair := my.timerRepair + tim.cycle;//оставшееся время ремонта (INT)
else
	my.timerRepair := 0.0;
end_if;
tmp := set.repairTime - REAL_TO_INT(my.timerRepair);
if(tmp >= 0) then toHMI.CurrentTimeOfRepair := tmp;
else toHMI.CurrentTimeOfRepair := 0;
end_if;
toHMI.repair_time_less_10_percent := toHMI.CurrentTimeOfRepair < set.repairTime/10;//до конца ремонта осталось меньше 10% от заданного времени (BOOL)
if toHMI.repair then return; end_if; //если выставлен ремонт - не обновляем значение параметра для алгоритма
//------------------------------------------------------------------------------------------------------------------------------------------------
fromHMI.BTNrepairOn := false;
fromHMI.BTNworkOn	:= false;
fromHMI.BTNmanualOn	:= false;
fromHMI.BTNrepairProlong := false;
//------------------- Обработка ДУ ----------------------------------------------------------------------------------------------------------
if toHMI.manual then
	out := fromHMI.manualTarget;	//значение для САУ. Рассчитывается из  measure, Manual_Target с учётом неисправностей и фильтрации (REAL)
	return; 					//дальнейшие вычисления не нужны
else
	fromHMI.manualTarget := out;
end_if;
//------------------------------------------------------------------------------------------------------------------------------------------------
//------------------- Расчёт PV ----------------------------------------------------------------------------------------------------------
//значение для САУ
if set.del = 0.0 then
	out := in;
else
    if not out and in and my.timerAntiTremor < set.del then// or not out and in then
        if my.timerAntiTremor < 0.0 then
            my.timerAntiTremor := 0.0;
        end_if;
        my.timerAntiTremor := my.timerAntiTremor + tim.cycle;
    elsif out and not in and my.timerAntiTremor > -set.del then// or not out and in then
        if my.timerAntiTremor > 0.0 then
            my.timerAntiTremor := 0.0;
        end_if;
        my.timerAntiTremor := my.timerAntiTremor - tim.cycle;
	else
		my.timerAntiTremor := 0.0;
    end_if;
    out := in and my.timerAntiTremor >= set.del or out and (in or my.timerAntiTremor > -set.del);
end_if;
//-----------------------------------------------------------------------------------------------------------------------------------
]]></ST>
                </Function>
                <Function UUID="HNOM4UHXFVC4LPCSJFKZTYGF74" Name="DI_init" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="3PUM5EGSZZGW5B46GT7GJGJYHY" Name="setStruct" Type="T_DI_Settings" TypeUUID="YYQ4LFBFOMREFPHHDI3SPZLDYM" Usage="output" />
                        <Variable UUID="UCAGZSJ77NAYTFYRM4N5QV62A4" Name="repairTime" Type="INT" Usage="input" />
                        <Variable UUID="3WUETIGW3VCGPPNXPQHEFM4NP4" Name="del" Type="REAL" Usage="input" />
                        <Variable UUID="DOVR3SXOLZGSNMUJFQXZNFY4WQ" Name="inv" Type="BOOL" Usage="input" />
                        <Variable UUID="O2PSTUZUB5EIRAZBONFYBOPYXU" Name="id" Type="INT" Usage="input" />
                    </Variables>
                    <ST><![CDATA[setStruct.del:= del;//задержка от дребезга
setStruct.repairTime:= repairTime;//максимальное время в ремонте, сек. Не может быть меньше или равно «0»
setStruct.inv:= inv;//признак инверсии
setStruct.id:= id;//номер по порядку	]]></ST>
                </Function>
                <Function UUID="ETGUDLNZJ363YFWCOKKEZBQZV4" Name="KC_DI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="IPPP52UYWOXETJA3YKWVVFCKSM" Name="repTime" Type="INT" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[repTime := 3600;
(*//=
if ImitOn then return; end_if;

if init.DI = false then
	init.DI := true;
*)
if init = false then //=
//---------------- аргументы функции инициализации --------------------------
//задержка от дребезга
//максимальное время в ремонте, сек. Не может быть меньше или равно «0»
//признак инверсии
//номер по порядку	
//---------------------------------------------------------------------
//Начало сгенерированного кода DI_init
//Кран 51 открыт
DI_init(KC_DI_Settings.Kr51_ON,repTime,0.0,false,0);
//Кран 51 открыт. КЦД
DI_init(KC_DI_Settings.Kr51_ON_KCD,repTime,0.0,false,1);
//Кран 51 закрыт 
DI_init(KC_DI_Settings.Kr51_OF,repTime,0.0,false,2);
//Кран 51 закрыт. КЦД
DI_init(KC_DI_Settings.Kr51_OF_KCD,repTime,0.0,false,3);
//Кран 52 открыт 
DI_init(KC_DI_Settings.Kr52_ON,repTime,0.0,false,4);
//Кран 52 открыт. КЦД
DI_init(KC_DI_Settings.Kr52_ON_KCD,repTime,0.0,false,5);
//Кран 52 закрыт
DI_init(KC_DI_Settings.Kr52_OF,repTime,0.0,false,6);
//Кран 52 закрыт. КЦД
DI_init(KC_DI_Settings.Kr52_OF_KCD,repTime,0.0,false,7);
//УТУО. Обобщенный сигнал аварии 
DI_init(KC_DI_Settings.UTUO_Alarm,repTime,0.0,false,8);
//УТУО. Обобщенный сигнал аварии. КЦД
DI_init(KC_DI_Settings.UTUO_Alarm_KCD,repTime,0.0,false,9);
//УТУО. Загазованность по метану более 10% НКПР
DI_init(KC_DI_Settings.UTUO_Gas10,repTime,0.0,false,10);
//УТУО. Загазованность по метану более 10% НКПР. КЦД
DI_init(KC_DI_Settings.UTUO_Gas10_KCD,repTime,0.0,false,11);
//УТУО. Срабатывание отсечного клапана на подводящем газопроводе
DI_init(KC_DI_Settings.UTUO_Kl_ots_OF,repTime,0.0,false,12);
//УТУО. Срабатывание отсечного клапана на подводящем газопроводе. КЦД
DI_init(KC_DI_Settings.UTUO_Kl_ots_OF_KCD,repTime,0.0,false,13);
//УТУО. Исчезновение напряжения питания
DI_init(KC_DI_Settings.UTUO_No_U,repTime,0.0,false,14);
//УТУО. Исчезновение напряжения питания. КЦД
DI_init(KC_DI_Settings.UTUO_No_U_KCD,repTime,0.0,false,15);
//Вентсистема П2 в работе 
DI_init(KC_DI_Settings.Vn_P2_ON,repTime,0.0,false,16);
//Вентсистема П2 в работе. КЦД
DI_init(KC_DI_Settings.Vn_P2_ON_KCD,repTime,0.0,false,17);
//Вентсистема П3 в работе 
DI_init(KC_DI_Settings.Vn_P3_ON,repTime,0.0,false,18);
//Вентсистема П3 в работе. КЦД
DI_init(KC_DI_Settings.Vn_P3_ON_KCD,repTime,0.0,false,19);
//Вентсистема В2 в работе 
DI_init(KC_DI_Settings.Vn_V2_ON,repTime,0.0,false,20);
//Вентсистема В2 в работе. КЦД
DI_init(KC_DI_Settings.Vn_V2_ON_KCD,repTime,0.0,false,21);
//Вентсистема В3 в работе 
DI_init(KC_DI_Settings.Vn_V3_ON,repTime,0.0,false,22);
//Вентсистема В3 в работе. КЦД
DI_init(KC_DI_Settings.Vn_V3_ON_KCD,repTime,0.0,false,23);
//Авария вентсистемы П1 
DI_init(KC_DI_Settings.Vn_P1_Alarm,repTime,0.0,false,24);
//Авария вентсистемы П1. КЦД
DI_init(KC_DI_Settings.Vn_P1_Alarm_KCD,repTime,0.0,false,25);
//Авария вентсистемы П4
DI_init(KC_DI_Settings.Vn_P4_Alarm,repTime,0.0,false,26);
//Авария вентсистемы П4. КЦД
DI_init(KC_DI_Settings.Vn_P4_Alarm_KCD,repTime,0.0,false,27);
//Вентсистема В4.Авария
DI_init(KC_DI_Settings.Vn_V4_Alarm,repTime,0.0,false,28);
//Вентсистема В4.Авария. КЦД
DI_init(KC_DI_Settings.Vn_V4_Alarm_KCD,repTime,0.0,false,29);
//Вентсистема В4 в работе 
DI_init(KC_DI_Settings.Vn_V4_ON,repTime,0.0,false,30);
//Вентсистема В4 в работе. КЦД
DI_init(KC_DI_Settings.Vn_V4_ON_KCD,repTime,0.0,false,31);
//Верхний уровень в резервуаре Р1 для хранения дизтоплива, LSA1
DI_init(KC_DI_Settings.Lt_R1_ADES_v,repTime,0.0,false,32);
//Верхний уровень в резервуаре Р1 для хранения дизтоплива, LSA1. КЦД
DI_init(KC_DI_Settings.Lt_R1_ADES_v_KCD,repTime,0.0,false,33);
//Нижний уровень в резервуаре Р1 для хранения дизтоплива, LSA2
DI_init(KC_DI_Settings.Lt_R1_ADES_n,repTime,0.0,false,34);
//Нижний уровень в резервуаре Р1 для хранения дизтоплива, LSA2. КЦД
DI_init(KC_DI_Settings.Lt_R1_ADES_n_KCD,repTime,0.0,false,35);
//Верхний уровень в резервуаре Р2 для аварийного слива топлива, LSA3
DI_init(KC_DI_Settings.Lt_R2_ADES_v,repTime,0.0,false,36);
//Верхний уровень в резервуаре Р2 для аварийного слива топлива, LSA3. КЦД
DI_init(KC_DI_Settings.Lt_R2_v_KCD,repTime,0.0,false,37);
//Исправность датчика уровня, LSA1 
DI_init(KC_DI_Settings.LSA1_ADES_ok,repTime,0.0,false,38);
//Исправность датчика уровня, LSA1. КЦД
DI_init(KC_DI_Settings.LSA1_ADES_ok_KCD,repTime,0.0,false,39);
//Исправность датчика уровня, LSA2
DI_init(KC_DI_Settings.LSA2_ADES_ok,repTime,0.0,false,40);
//Исправность датчика уровня, LSA2. КЦД
DI_init(KC_DI_Settings.LSA2_ADES_ok_KCD,repTime,0.0,false,41);
//Исправность датчика уровня, LSA3
DI_init(KC_DI_Settings.LSA3_ADES_ok,repTime,0.0,false,42);
//Исправность датчика уровня, LSA3. КЦД
DI_init(KC_DI_Settings.LSA3_ADES_ok_KCD,repTime,0.0,false,43);
//Агрегат 4 Верхний уровень в резервуаре Р1 для дренажа масла нагнетателя LSA1
DI_init(KC_DI_Settings.Lm_R1_v,repTime,0.0,false,44);
//Агрегат 4. Верхний уровень в резервуаре Р1 для дренажа масла нагнетателя LSA1. КЦД
DI_init(KC_DI_Settings.Lm_R1_v_KCD,repTime,0.0,false,45);
//Агрегат 4 Верхний уровень в резервуаре Р4 для отработанного масла двигателя LSA4
DI_init(KC_DI_Settings.Lm_R4_v,repTime,0.0,false,46);
//Агрегат 4.Верхний уровень в резервуаре Р4 для отработанного масла двигателя LSA4.КЦД
DI_init(KC_DI_Settings.Lm_R4_v_KCD,repTime,0.0,false,47);
//Агрегат 5 Верхний уровень в резервуаре Р2 для дренажа масла нагнетателя LSA2
DI_init(KC_DI_Settings.Lm_R2_v,repTime,0.0,false,48);
//Агрегат 5. Верхний уровень в резервуаре Р2 для дренажа масла нагнетателя LSA2. КЦД
DI_init(KC_DI_Settings.Lm_R2_v_KCD,repTime,0.0,false,49);
//Агрегат 5. Верхний уровень в резервуаре Р5 для отработанного масла двигателя LSA5
DI_init(KC_DI_Settings.Lm_R5_v,repTime,0.0,false,50);
//Агрегат 5.Верхний уровень в резервуаре Р5 для отработанного масла двигателя LSA5.КЦД
DI_init(KC_DI_Settings.Lm_R5_v_KCD,repTime,0.0,false,51);
//Агрегат 6. Верхний уровень в резервуаре Р3 для дренажа масла нагнетателя LSA3
DI_init(KC_DI_Settings.Lm_R3_v,repTime,0.0,false,52);
//Агрегат 6. Верхний уровень в резервуаре Р3 для дренажа масла нагнетателя LSA3. КЦД
DI_init(KC_DI_Settings.Lm_R3_v_KCD,repTime,0.0,false,53);
//Агрегат 6. Верхний уровень в резервуаре Р6 для отработанного масла двигателя LSA6
DI_init(KC_DI_Settings.Lm_R6_v,repTime,0.0,false,54);
//Агрегат 6.Верхний уровень в резервуаре Р6 для отработанного масла двигателя LSA6.КЦД
DI_init(KC_DI_Settings.Lm_R6_v_KCD,repTime,0.0,false,55);
//Исправность датчика уровня, LSA1
DI_init(KC_DI_Settings.LSA1_GRA_ok,repTime,0.0,false,56);
//Исправность датчика уровня, LSA1. КЦД
DI_init(KC_DI_Settings.LSA1_GPA_ok_KCD,repTime,0.0,false,57);
//Исправность датчика уровня, LSA2
DI_init(KC_DI_Settings.LSA2_GPA_ok,repTime,0.0,false,58);
//Исправность датчика уровня, LSA2. КЦД
DI_init(KC_DI_Settings.LSA2_GPA_ok_KCD,repTime,0.0,false,59);
//Исправность датчика уровня, LSA3 
DI_init(KC_DI_Settings.LSA3_GPA_ok,repTime,0.0,false,60);
//Исправность датчика уровня, LSA3. КЦД
DI_init(KC_DI_Settings.LSA3_GPA_ok_KCD,repTime,0.0,false,61);
//Исправность датчика уровня, LSA4 
DI_init(KC_DI_Settings.LSA4_GPA_ok,repTime,0.0,false,62);
//Исправность датчика уровня, LSA4. КЦД 
DI_init(KC_DI_Settings.LSA4_GPA_ok_KCD,repTime,0.0,false,63);
//Исправность датчика уровня, LSA5
DI_init(KC_DI_Settings.LSA5_GPA_ok,repTime,0.0,false,64);
//Исправность датчика уровня, LSA5. КЦД 
DI_init(KC_DI_Settings.LSA5_GPA_ok_KCD,repTime,0.0,false,65);
//Исправность датчика уровня, LSA6
DI_init(KC_DI_Settings.LSA6_GPA_ok,repTime,0.0,false,66);
//Исправность датчика уровня, LSA6. КЦД 
DI_init(KC_DI_Settings.LSA6_GPA_ok_KCD,repTime,0.0,false,67);
//Неисправность UZ1 
DI_init(KC_DI_Settings.UZ1_Bad,repTime,0.0,false,68);
//Неисправность UZ1. КЦД  
DI_init(KC_DI_Settings.UZ1_Bad_KCD,repTime,0.0,false,69);
//Неисправность UZ2 
DI_init(KC_DI_Settings.UZ2_Bad,repTime,0.0,false,70);
//Неисправность UZ2. КЦД  
DI_init(KC_DI_Settings.UZ2_Bad_KCD,repTime,0.0,false,71);
//Выключатель АБ отключен
DI_init(KC_DI_Settings.Q_AB_OF,repTime,0.0,false,72);
//Выключатель АБ отключен. КЦД 
DI_init(KC_DI_Settings.Q_AB_OF_KCD,repTime,0.0,false,73);
//Выключатель 1 «Резерв» отключен
DI_init(KC_DI_Settings.Q_Rez1_OF,repTime,0.0,false,74);
//Выключатель 1 «Резерв» отключен. КЦД 
DI_init(KC_DI_Settings.Q_Rez1_OF_KCD,repTime,0.0,false,75);
//Выключатель UZ1 отключен
DI_init(KC_DI_Settings.Q_UZ1_OF,repTime,0.0,false,76);
//Выключатель UZ1 отключен. КЦД 
DI_init(KC_DI_Settings.Q_UZ1_OF_KCD,repTime,0.0,false,77);
//Выключатель UZ2 отключен 
DI_init(KC_DI_Settings.Q_UZ2_OF,repTime,0.0,false,78);
//Выключатель UZ2 отключен. КЦД  
DI_init(KC_DI_Settings.Q_UZ2_OF_KCD,repTime,0.0,false,79);
//Секционный выключатель QS1 отключен
DI_init(KC_DI_Settings.QS1_OF,repTime,0.0,false,80);
//Секционный выключатель QS1 отключен. КЦД 
DI_init(KC_DI_Settings.QS1_OF_KCD,repTime,0.0,false,81);
//Секционный выключатель QS2 отключен
DI_init(KC_DI_Settings.QS2_OF,repTime,0.0,false,82);
//Секционный выключатель QS2 отключен. КЦД 
DI_init(KC_DI_Settings.QS2_OF_KCD,repTime,0.0,false,83);
//Секционный выключатель QS3 отключен
DI_init(KC_DI_Settings.QS3_OF,repTime,0.0,false,84);
//Секционный выключатель QS3 отключен. КЦД 
DI_init(KC_DI_Settings.QS3_OF_KCD,repTime,0.0,false,85);
//Секционный выключатель QS4 отключен
DI_init(KC_DI_Settings.QS4_OF,repTime,0.0,false,86);
//Секционный выключатель QS4 отключен. КЦД 
DI_init(KC_DI_Settings.QS4_OF_KCD,repTime,0.0,false,87);
//Секционный выключатель QS5 отключен
DI_init(KC_DI_Settings.QS5_OF,repTime,0.0,false,88);
//Секционный выключатель QS5 отключен. КЦД 
DI_init(KC_DI_Settings.QS5_OF_KCD,repTime,0.0,false,89);
//Выключатель блока электротехнического ГПА №1.1 отключен
DI_init(KC_DI_Settings.Q_ETO1_OF,repTime,0.0,false,90);
//Выключатель блока электротехнического ГПА №1.1 отключен. КЦД 
DI_init(KC_DI_Settings.Q_ETO1_OF_KCD,repTime,0.0,false,91);
//Выключатель блока электротехнического ГПА №1.2 отключен
DI_init(KC_DI_Settings.Q_ETO2_OF,repTime,0.0,false,92);
//Выключатель блока электротехнического ГПА №1.2 отключен. КЦД 
DI_init(KC_DI_Settings.Q_ETO2_OF_KCD,repTime,0.0,false,93);
//Выключатель шкафа 2АСУ ЭС, ввод №3 отключен
DI_init(KC_DI_Settings.Q_ASUES3_OF,repTime,0.0,false,94);
//Выключатель шкафа 2АСУ ЭС, ввод №3 отключен. КЦД 
DI_init(KC_DI_Settings.Q_ASUES3_OF_KCD,repTime,0.0,false,95);
//Выключатель КТП ПЭБа. Шкаф №1 отключен
DI_init(KC_DI_Settings.Q_KTP_PEB1_OF,repTime,0.0,false,96);
//Выключатель КТП ПЭБа. Шкаф №1 отключен. КЦД
DI_init(KC_DI_Settings.Q_KTP_PEB1_OF_KCD,repTime,0.0,false,97);
//Выключатель 2 «Резерв» отключен
DI_init(KC_DI_Settings.Q_Rez2_OF,repTime,0.0,false,98);
//Выключатель 2 «Резерв» отключен. КЦД
DI_init(KC_DI_Settings.Q_Rez2_OF_KCD,repTime,0.0,false,99);
//Выключатель 3 «Резерв» отключен 
DI_init(KC_DI_Settings.Q_Rez3_OF,repTime,0.0,false,100);
//Выключатель 3 «Резерв» отключен . КЦД
DI_init(KC_DI_Settings.Q_Rez3_OF_KCD,repTime,0.0,false,101);
//Выключатель 4 «Резерв» отключен
DI_init(KC_DI_Settings.Q_Rez4_OF,repTime,0.0,false,102);
//Выключатель 4 «Резерв» отключен. КЦД
DI_init(KC_DI_Settings.Q_Rez4_OF_KCD,repTime,0.0,false,103);
//Выключатель 5 «Резерв» отключен
DI_init(KC_DI_Settings.Q_Rez5_OF,repTime,0.0,false,104);
//Выключатель 5 «Резерв» отключен. КЦД
DI_init(KC_DI_Settings.Q_Rez5_OF_KCD,repTime,0.0,false,105);
//Выключатель блока электротехнического ГПА №1.3 отключен
DI_init(KC_DI_Settings.Q_ETO3_OF,repTime,0.0,false,106);
//Выключатель блока электротехнического ГПА №1.3 отключен. КЦД
DI_init(KC_DI_Settings.Q_ETO3_OF_KCD,repTime,0.0,false,107);
//Выключатель шкафа 2АСУ ЭС, ввод №4 отключен
DI_init(KC_DI_Settings.Q_ASUES4_OF,repTime,0.0,false,108);
//Выключатель шкафа 2АСУ ЭС, ввод №4 отключен. КЦД
DI_init(KC_DI_Settings.Q_ASUES4_OF_KCD,repTime,0.0,false,109);
//Выключатель КТП ПЭБа. Шкаф №14 отключен
DI_init(KC_DI_Settings.Q_KTP_PEB14_OF,repTime,0.0,false,110);
//Выключатель КТП ПЭБа. Шкаф №14 отключен. КЦД
DI_init(KC_DI_Settings.Q_KTP_PEB14_OF_KCD,repTime,0.0,false,111);
//Выключатель 6 «Резерв» отключен
DI_init(KC_DI_Settings.Q_Rez6_OF,repTime,0.0,false,112);
//Выключатель 6 «Резерв» отключен. КЦД
DI_init(KC_DI_Settings.Q_Rez6_OF_KCD,repTime,0.0,false,113);
//Выключатель 7 «Резерв» отключен
DI_init(KC_DI_Settings.Q_Rez7_OF,repTime,0.0,false,114);
//Выключатель 7 «Резерв» отключен. КЦД
DI_init(KC_DI_Settings.Q_Rez7_OF_KCD,repTime,0.0,false,115);
//Выключатель 8 «Резерв» отключен 
DI_init(KC_DI_Settings.Q_Rez8_OF,repTime,0.0,false,116);
//Выключатель 8 «Резерв» отключен . КЦД
DI_init(KC_DI_Settings.Q_Rez8_OF_KCD,repTime,0.0,false,117);
//Выключатель 9 «Резерв» отключен
DI_init(KC_DI_Settings.Q_Rez9_OF,repTime,0.0,false,118);
//Выключатель 9 «Резерв» отключен. КЦД
DI_init(KC_DI_Settings.Q_Rez9_OF_KCD,repTime,0.0,false,119);
//Выключатель 10 «Резерв» отключен
DI_init(KC_DI_Settings.Q_Rez10_OF,repTime,0.0,false,120);
//Выключатель 10 «Резерв» отключен. КЦД
DI_init(KC_DI_Settings.Q_Rez10_OF_KCD,repTime,0.0,false,121);
//Выключатель Q10 аварийное освещение ПЭБ отключен
DI_init(KC_DI_Settings.Q_Lamp_PEB_A_OF,repTime,0.0,false,122);
//Выключатель Q10 аварийное освещение ПЭБ отключен. КЦД
DI_init(KC_DI_Settings.Q_Lamp_PEB_A_OF_KCD,repTime,0.0,false,123);
//Выключатель Насосная метанола (Шкаф ЛИС НМ) отключен
DI_init(KC_DI_Settings.Q_NasMet_NM_OF,repTime,0.0,false,124);
//Выключатель Насосная метанола (Шкаф ЛИС НМ) отключен. КЦД
DI_init(KC_DI_Settings.Q_NasMet_NM_OF_KCD,repTime,0.0,false,125);
//Выключатель Насосная метанола (Шкаф ПК) отключен
DI_init(KC_DI_Settings.Q_NasMet_PK_OF,repTime,0.0,false,126);
//Выключатель Насосная метанола (Шкаф ПК) отключен. КЦД
DI_init(KC_DI_Settings.Q_NasMet_PK_OF_KCD,repTime,0.0,false,127);
//Выключатель УЗРГ (Шкаф ЛИС УЗРГ) отключен
DI_init(KC_DI_Settings.Q_UZRG_OF,repTime,0.0,false,128);
//Выключатель УЗРГ (Шкаф ЛИС УЗРГ) отключен. КЦД
DI_init(KC_DI_Settings.Q_UZRG_OF_KCD,repTime,0.0,false,129);
//Выключатель УЗРГ (Шкаф ЛИС УНТС) отключен
DI_init(KC_DI_Settings.Q_UZRG_NTS_OF,repTime,0.0,false,130);
//Выключатель УЗРГ (Шкаф ЛИС УНТС) отключен. КЦД
DI_init(KC_DI_Settings.Q_UZRG_NTS_OF_KCD,repTime,0.0,false,131);
//Выключатель шкафа УПИ АСП отключен
DI_init(KC_DI_Settings.Q_UPI_OF,repTime,0.0,false,132);
//Выключатель шкафа УПИ АСП отключен. КЦД
DI_init(KC_DI_Settings.Q_UPI_OF_KCD,repTime,0.0,false,133);
//Выключатель шкафа ЛИС КЦ отключен
DI_init(KC_DI_Settings.Q_LISKC_OF,repTime,0.0,false,134);
//Выключатель шкафа ЛИС КЦ отключен. КЦД
DI_init(KC_DI_Settings.Q_LISKC_OF_KCD,repTime,0.0,false,135);
//Выключатель 11 «Резерв» отключен
DI_init(KC_DI_Settings.Q_Rez11_OF,repTime,0.0,false,136);
//Выключатель 11 «Резерв» отключен. КЦД
DI_init(KC_DI_Settings.Q_Rez11_OF_KCD,repTime,0.0,false,137);
//Выключатель 12 «Резерв» отключен
DI_init(KC_DI_Settings.Q_Rez12_OF,repTime,0.0,false,138);
//Выключатель 12 «Резерв» отключен. КЦД
DI_init(KC_DI_Settings.Q_Rez12_OF_KCD,repTime,0.0,false,139);
//Выключатель Блок БК-200 отключен 
DI_init(KC_DI_Settings.Q_BK200_OF,repTime,0.0,false,140);
//Выключатель Блок БК-200 отключен. КЦД 
DI_init(KC_DI_Settings.Q_BK200_OF_KCD,repTime,0.0,false,141);
//Выключатель Насосная противопожарного водоснабжения (Шкаф ЛИС ВОС) отключен
DI_init(KC_DI_Settings.Q_NasPPV_OF,repTime,0.0,false,142);
//Выключатель Насосная противопожарного водоснабжения (Шкаф ЛИС ВОС) отключен. КЦД
DI_init(KC_DI_Settings.Q_NasPPV_OF_KCD,repTime,0.0,false,143);
//Выключатель Котельная (Шкаф ЛИС) отключен
DI_init(KC_DI_Settings.Q_Kotel_OF,repTime,0.0,false,144);
//Выключатель Котельная (Шкаф ЛИС) отключен. КЦД
DI_init(KC_DI_Settings.Q_Kotel_OF_KCD,repTime,0.0,false,145);
//Выключатель Склад ГСМ (Шкаф ЛИС ГСМ) отключен
DI_init(KC_DI_Settings.Q_SkGSM_OF,repTime,0.0,false,146);
//Выключатель Склад ГСМ (Шкаф ЛИС ГСМ) отключен. КЦД
DI_init(KC_DI_Settings.Q_SkGSM_OF_KCD,repTime,0.0,false,147);
//Выключатель Блок-бокс УПТПГ отключен
DI_init(KC_DI_Settings.Q_BB_UPTIG_OF,repTime,0.0,false,148);
//Выключатель Блок-бокс УПТПГ отключен. КЦД
DI_init(KC_DI_Settings.Q_SBB_UPTIG_OF_KCD,repTime,0.0,false,149);
//Выключатель КТП ПЭБ (Шкаф САУ АВО) отключен
DI_init(KC_DI_Settings.Q_KTP_AVOG_OF,repTime,0.0,false,150);
//Выключатель КТП ПЭБ (Шкаф САУ АВО) отключен. КЦД
DI_init(KC_DI_Settings.Q_KTP_AVOG_OF_KCD,repTime,0.0,false,151);
//Выключатель 13 «Резерв» отключен
DI_init(KC_DI_Settings.Q_Rez13_OF,repTime,0.0,false,152);
//Выключатель 13 «Резерв» отключен. КЦД
DI_init(KC_DI_Settings.Q_Rez13_OF_KCD,repTime,0.0,false,153);
//Выключатель 14 «Резерв» отключен
DI_init(KC_DI_Settings.Q_Rez14_OF,repTime,0.0,false,154);
//Выключатель 14 «Резерв» отключен. КЦД
DI_init(KC_DI_Settings.Q_Rez14_OF_KCD,repTime,0.0,false,155);
//«Земля» на шинах
DI_init(KC_DI_Settings.Rsh_Bad,repTime,0.0,false,156);
//«Земля» на шинах. КЦД
DI_init(KC_DI_Settings.Rsh_Bad_KCD,repTime,0.0,false,157);
//«Земля» на фидерах
DI_init(KC_DI_Settings.Rf_Bad,repTime,0.0,false,158);
//«Земля» на фидерах. КЦД
DI_init(KC_DI_Settings.Rf_Bad_KCD,repTime,0.0,false,159);
//Пониженное напряжение
DI_init(KC_DI_Settings.U_lo,repTime,0.0,false,160);
//Пониженное напряжение. КЦД
DI_init(KC_DI_Settings.U_lo_KCD,repTime,0.0,false,161);
//Повышенное напряжение 
DI_init(KC_DI_Settings.U_hi,repTime,0.0,false,162);
//Повышенное напряжение. КЦД 
DI_init(KC_DI_Settings.U_hi_KCD,repTime,0.0,false,163);
//АОcc от ПРУ КЦ 
DI_init(KC_DI_Settings.Kn_AOss_PRU_nz,repTime,0.0,false,164);
//АОcc от ПРУ КЦ. КЦД 
DI_init(KC_DI_Settings.Kn_AOss_PRU_KCD,repTime,0.0,false,165);
//АОбc от ПРУ КЦ 
DI_init(KC_DI_Settings.Kn_AObs_PRU_nz,repTime,0.0,false,166);
//АОбc от ПРУ КЦ. КЦД 
DI_init(KC_DI_Settings.Kn_AObs_PRU_KCD,repTime,0.0,false,167);
//Пожар в здании проходной
DI_init(KC_DI_Settings.Fire_in_ZdGate,repTime,0.0,false,168);
//Пожар в здании проходной. КЦД
DI_init(KC_DI_Settings.Fire_in_ZdGate_KCD,repTime,0.0,false,169);
//Пожар в здании насосной противопожарного водоснабжения
DI_init(KC_DI_Settings.Fire_in_NasPPV,repTime,0.0,false,170);
//Пожар в здании насосной противопожарного водоснабжения. КЦД
DI_init(KC_DI_Settings.Fire_in_NasPPV_KCD,repTime,0.0,false,171);
//Пожар в здании РЭБ 
DI_init(KC_DI_Settings.Fire_in_REB,repTime,0.0,false,172);
//Пожар в здании РЭБ. КЦД 
DI_init(KC_DI_Settings.Fire_in_REB_KCD,repTime,0.0,false,173);
//Пожар в здании очистных сооружений сточных вод
DI_init(KC_DI_Settings.Fire_in_WWplant,repTime,0.0,false,174);
//Пожар в здании очистных сооружений сточных вод. КЦД
DI_init(KC_DI_Settings.Fire_in_Wwplant,repTime,0.0,false,175);
//Резерв
DI_init(KC_DI_Settings.Res_0,repTime,0.0,false,176);
//Резерв
DI_init(KC_DI_Settings.Res_1,repTime,0.0,false,177);
//Резерв
DI_init(KC_DI_Settings.Res_2,repTime,0.0,false,178);
//Резерв
DI_init(KC_DI_Settings.Res_3,repTime,0.0,false,179);
//Резерв
DI_init(KC_DI_Settings.Res_4,repTime,0.0,false,180);
//Резерв
DI_init(KC_DI_Settings.Res_5,repTime,0.0,false,181);
//Резерв
DI_init(KC_DI_Settings.Res_6,repTime,0.0,false,182);
//Резерв
DI_init(KC_DI_Settings.Res_7,repTime,0.0,false,183);
//Наличие ~220В в УC 
DI_init(KC_DI_Settings.U_AC220_US,repTime,0.0,false,184);
//Дверь УК открыта
DI_init(KC_DI_Settings.Dver_UK_open,repTime,0.0,false,185);
//УК неисправен
DI_init(KC_DI_Settings.UK_Bad,repTime,0.0,false,186);
//Наличие ~220В в УК 
DI_init(KC_DI_Settings.U_AC220_UK,repTime,0.0,false,187);
//Дверь УС открыта 
DI_init(KC_DI_Settings.Dver_US_open,repTime,0.0,false,188);
//Температура в УС больше 25 °С 
DI_init(KC_DI_Settings.T_US_25v,repTime,0.0,false,189);
//Температура в УС больше 30 °С 
DI_init(KC_DI_Settings.T_US_30v,repTime,0.0,false,190);
//Превышение температуры в пульте 
DI_init(KC_DI_Settings.T_pult_max,repTime,0.0,false,191);
//АОcc от ПРУ КЦ
DI_init(KC_DI_Settings.Kn_AOss_PRU,repTime,0.0,false,192);
//АОбc от ПРУ КЦ 
DI_init(KC_DI_Settings.Kn_AObs_PRU,repTime,0.0,false,193);
//Неисправность контроллера САУ ГПА №4 
DI_init(KC_DI_Settings.PLC_GPA4_Bad,repTime,0.0,false,194);
//Неисправность контроллера САУ ГПА №5
DI_init(KC_DI_Settings.PLC_GPA5_Bad,repTime,0.0,false,195);
//Неисправность контроллера САУ ГПА №6
DI_init(KC_DI_Settings.PLC_GPA6_Bad,repTime,0.0,false,196);
//Резерв 
DI_init(KC_DI_Settings.Res_8,repTime,0.0,false,197);
//Резерв 
DI_init(KC_DI_Settings.Res_9,repTime,0.0,false,198);
//Резерв 
DI_init(KC_DI_Settings.Res_10,repTime,0.0,false,199);
//Резерв
DI_init(KC_DI_Settings.Res_11,repTime,0.0,false,200);
//Резерв
DI_init(KC_DI_Settings.Res_12,repTime,0.0,false,201);
//ЭО КЦ от ПРУ (+)
DI_init(KC_DI_Settings.Kn_EO_PRU,repTime,0.0,false,202);
//Общ. ЭО КЦ с ПРУ
DI_init(KC_DI_Settings.Res_13,repTime,0.0,false,203);
//Резерв
DI_init(KC_DI_Settings.Res_14,repTime,0.0,false,204);
//Резерв
DI_init(KC_DI_Settings.Res_15,repTime,0.0,false,205);
//Резерв
DI_init(KC_DI_Settings.Res_16,repTime,0.0,false,206);
//Резерв
DI_init(KC_DI_Settings.Res_17,repTime,0.0,false,207);
//Пожар в здании котельной
DI_init(KC_DI_Settings.Fire_in_Kot,repTime,0.0,false,208);
//Пожар в здании котельной. КЦД
DI_init(KC_DI_Settings.Fire_in_Kot_KCD,repTime,0.0,false,209);
//Пожар в здании АДЭС 
DI_init(KC_DI_Settings.Fire_in_ZADES,repTime,0.0,false,210);
//Пожар в здании АДЭС. КЦД 
DI_init(KC_DI_Settings.Fire_in_ZADES_KCD,repTime,0.0,false,211);
//Пожар в здании ПЭБ
DI_init(KC_DI_Settings.Fire_in_PEB,repTime,0.0,false,212);
//Пожар в здании ПЭБ. КЦД
DI_init(KC_DI_Settings.Fire_in_PEB_KCD,repTime,0.0,false,213);
//Пожар в здании насосной масел
DI_init(KC_DI_Settings.Fire_in_NasOil,repTime,0.0,false,214);
//Пожар в здании насосной масел. КЦД
DI_init(KC_DI_Settings.Fire_in_NasOil_KCD,repTime,0.0,false,215);
//Пожар в резервуарном парке для хранения дизтоплива
DI_init(KC_DI_Settings.Fire_in_FuelTanks,repTime,0.0,false,216);
//Пожар в резервуарном парке для хранения дизтоплива. КЦД
DI_init(KC_DI_Settings.Fire_in_FuelTanks_KCD,repTime,0.0,false,217);
//Пожар в резервуаре для аварийного слива топлива
DI_init(KC_DI_Settings.Fire_in_Fuel_ATanks,repTime,0.0,false,218);
//Пожар в резервуаре для аварийного слива топлива. КЦД
DI_init(KC_DI_Settings.Fire_in_Fuel_ATanks_KCD,repTime,0.0,false,219);
//Пожар на складе метанола
DI_init(KC_DI_Settings.Fire_in_MetanolSklad,repTime,0.0,false,220);
//Пожар на складе метанола. КЦД
DI_init(KC_DI_Settings.Fire_in_MetanolSklad_KCD,repTime,0.0,false,221);
//Пожар в здании насосной метанола
DI_init(KC_DI_Settings.Fire_in_NasMet,repTime,0.0,false,222);
//Пожар в здании насосной метанола. КЦД
DI_init(KC_DI_Settings.Fire_in_NasMet_KCD,repTime,0.0,false,223);
//Пожар в подземной дренажной емкости
DI_init(KC_DI_Settings.Fire_in_DainTank,repTime,0.0,false,224);
//Пожар в подземной дренажной емкости. КЦД
DI_init(KC_DI_Settings.Fire_in_DainTank_KCD,repTime,0.0,false,225);
//Пожар на установке регенерации метанола
DI_init(KC_DI_Settings.Fire_in_RegenMetanol,repTime,0.0,false,226);
//Пожар на установке регенерации метанола. КЦД
DI_init(KC_DI_Settings.Fire_in_RegenMetanol_KCD,repTime,0.0,false,227);
//Пожар в емкости метанола 
DI_init(KC_DI_Settings.Fire_in_MetanolTank,repTime,0.0,false,228);
//Пожар в емкости метанола. КЦД 
DI_init(KC_DI_Settings.Fire_in_MetanolTank_KCD,repTime,0.0,false,229);
//Пожар в здании УТО
DI_init(KC_DI_Settings.Fire_in_UTO,repTime,0.0,false,230);
//Пожар в здании УТО. КЦД
DI_init(KC_DI_Settings.Fire_in_UTO_KCD,repTime,0.0,false,231);
//Пожар в здании УПГ
DI_init(KC_DI_Settings.Fire_in_ZdUPG,repTime,0.0,false,232);
//Пожар в здании УПГ. КЦД
DI_init(KC_DI_Settings.Fire_in_ZdUPG_KCD,repTime,0.0,false,233);
//Пожар в здании УЗРГ
DI_init(KC_DI_Settings.Fire_in_UZRG,repTime,0.0,false,234);
//Пожар в здании УЗРГ. КЦД
DI_init(KC_DI_Settings.Fire_in_UZRG_KCD,repTime,0.0,false,235);
//Пожар на установке дожимных компрессоров
DI_init(KC_DI_Settings.Fire_in_UDK,repTime,0.0,false,236);
//Пожар на установке дожимных компрессоров. КЦД
DI_init(KC_DI_Settings.Fire_in_UDK_KCD,repTime,0.0,false,237);
//Неисправность ПС
DI_init(KC_DI_Settings.ASPS_Bad,repTime,0.0,false,238);
//Неисправность ПС. КЦД
DI_init(KC_DI_Settings.ASPS_Bad_KCD,repTime,0.0,false,239);
//Кран Кр51-2 - закрыт
DI_init(KC_DI_Settings.Kr51_2_OF,repTime,0.0,false,240);
//Кран Кр51-2 - открыт
DI_init(KC_DI_Settings.Kr51_2_ON,repTime,0.0,false,241);
//Кран Кр52-2 - закрыт
DI_init(KC_DI_Settings.Kr52_2_OF,repTime,0.0,false,242);
//Кран Кр52-2 - открыт
DI_init(KC_DI_Settings.Kr52_2_ON,repTime,0.0,false,243);
//Кран Кр53 - закрыт
DI_init(KC_DI_Settings.Kr53_OF,repTime,0.0,false,244);
//Кран Кр53 - открыт
DI_init(KC_DI_Settings.Kr53_ON,repTime,0.0,false,245);
//Кран Кр53бп - закрыт
DI_init(KC_DI_Settings.Kr53b_OF,repTime,0.0,false,246);
//Кран Кр53бп - открыт
DI_init(KC_DI_Settings.Kr53b_ON,repTime,0.0,false,247);
//Кран Кр54 - закрыт
DI_init(KC_DI_Settings.Kr54_OF,repTime,0.0,false,248);
//Кран Кр54 - открыт
DI_init(KC_DI_Settings.Kr54_ON,repTime,0.0,false,249);
//Кран Кр54бп - закрыт
DI_init(KC_DI_Settings.Kr54b_OF,repTime,0.0,false,250);
//Кран Кр54бп - открыт
DI_init(KC_DI_Settings.Kr54b_ON,repTime,0.0,false,251);
//Неисправность САУ УПГ
DI_init(KC_DI_Settings.SAU_UPG_Bad,repTime,0.0,false,252);
//САУ УПГ в работе
DI_init(KC_DI_Settings.SAU_UPG_work,repTime,0.0,false,253);
//Загазованность в УПГ более 1%
DI_init(KC_DI_Settings.UPG_Gas1,repTime,0.0,false,254);
//Резерв
DI_init(KC_DI_Settings.Res_18,repTime,0.0,false,255);
//Контроль основного питания  ~220 В
DI_init(KC_DI_Settings.Chk_AC220_SAU,repTime,0.0,false,256);
//Контроль резервного питания  =220 В
DI_init(KC_DI_Settings.Chk_DC220_SAU,repTime,0.0,false,257);
//Контроль питания кранов =220В
DI_init(KC_DI_Settings.Chk_DC220_Kr,repTime,0.0,false,258);
//Контроль исправности разрядников
DI_init(KC_DI_Settings.Chk_razr,repTime,0.0,false,259);
//Двери САУ КЦ открыты
DI_init(KC_DI_Settings.Cabin_open,repTime,0.0,false,260);
//Исправность осн. ИП =24В внутренних цепей
DI_init(KC_DI_Settings.DC24osn_Int_ok,repTime,0.0,false,261);
//Исправность рез. ИП =24В внутренних цепей
DI_init(KC_DI_Settings.DC24rez_Int_ok,repTime,0.0,false,262);
//Исправность осн. ИП =24В внешних цепей
DI_init(KC_DI_Settings.DC24osn_Ext1_ok,repTime,0.0,false,263);
//Исправность рез. ИП =24В внешних цепей
DI_init(KC_DI_Settings.DC24rez_Ext1_ok,repTime,0.0,false,264);
//Исправность осн. ИП =24В внешних цепей
DI_init(KC_DI_Settings.DC24osn_Ext2_ok,repTime,0.0,false,265);
//Исправность рез. ИП =24В внешних цепей
DI_init(KC_DI_Settings.DC24rez_Ext2_ok,repTime,0.0,false,266);
//Резерв
DI_init(KC_DI_Settings.Res_19,repTime,0.0,false,267);
//Резерв
DI_init(KC_DI_Settings.Res_20,repTime,0.0,false,268);
//Резерв
DI_init(KC_DI_Settings.Res_21,repTime,0.0,false,269);
//Резерв
DI_init(KC_DI_Settings.Res_22,repTime,0.0,false,270);
//Резерв
DI_init(KC_DI_Settings.Res_23,repTime,0.0,false,271);
//Кран 51 открыть (КЦУ)
DI_init(KC_DI_Settings.Kr51_ON_KCU,repTime,0.0,false,272);
//Кран 51 закрыть (КЦУ)
DI_init(KC_DI_Settings.Kr51_OF_KCU,repTime,0.0,false,273);
//Кран 52 открыть (КЦУ)
DI_init(KC_DI_Settings.Kr52_ON_KCU,repTime,0.0,false,274);
//Кран 52 закрыть (КЦУ)
DI_init(KC_DI_Settings.Kr52_OF_KCU,repTime,0.0,false,275);
//Инд. ЭО КЦ на ПРУ (+) (КЦУ)
DI_init(KC_DI_Settings.EO_LED_PRU_KCU,repTime,0.0,false,276);
//Инд. АОсс на ПРУ (+) (КЦУ)
DI_init(KC_DI_Settings.AOss_LED_PRU_KCU,repTime,0.0,false,277);
//Инд. АОбс на ПРУ (+) (КЦУ)
DI_init(KC_DI_Settings.AObs_LED_PRU_KCU,repTime,0.0,false,278);
//Инд. Вкл. пожнасоса на ПРУ (+) (КЦУ)
DI_init(KC_DI_Settings.FirePump_LED_PRU_KCU,repTime,0.0,false,279);
//Резерв 110VDC (КЦУ)
DI_init(KC_DI_Settings.Res_24,repTime,0.0,false,280);
//Резерв 110VDC (КЦУ)
DI_init(KC_DI_Settings.Res_25,repTime,0.0,false,281);
//Резерв 110VDC (КЦУ)
DI_init(KC_DI_Settings.Res_26,repTime,0.0,false,282);
//Резерв 110VDC (КЦУ)
DI_init(KC_DI_Settings.Res_27,repTime,0.0,false,283);
//Резерв 110VDC (КЦУ)
DI_init(KC_DI_Settings.Res_28,repTime,0.0,false,284);
//Резерв 110VDC (КЦУ)
DI_init(KC_DI_Settings.Res_29,repTime,0.0,false,285);
//Резерв 110VDC (КЦУ)
DI_init(KC_DI_Settings.Res_30,repTime,0.0,false,286);
//Резерв 110VDC (КЦУ)
DI_init(KC_DI_Settings.Res_31,repTime,0.0,false,287);
//Резерв 110VDC (КЦУ)
DI_init(KC_DI_Settings.Res_32,repTime,0.0,false,288);
//Резерв 110VDC (КЦУ)
DI_init(KC_DI_Settings.Res_33,repTime,0.0,false,289);
//Резерв 110VDC (КЦУ)
DI_init(KC_DI_Settings.Res_34,repTime,0.0,false,290);
//Резерв 110VDC (КЦУ)
DI_init(KC_DI_Settings.Res_35,repTime,0.0,false,291);
//Резерв 110VDC (КЦУ)
DI_init(KC_DI_Settings.Res_36,repTime,0.0,false,292);
//Резерв 110VDC (КЦУ)
DI_init(KC_DI_Settings.Res_37,repTime,0.0,false,293);
//Резерв 110VDC (КЦУ)
DI_init(KC_DI_Settings.Res_38,repTime,0.0,false,294);
//Обогрев прибора АДЭС LSA1 включить (КЦУ)
DI_init(KC_DI_Settings.EN_LSA1_ADES_ON_KCU,repTime,0.0,false,295);
//Обогрев прибора АДЭС LSA2 включить (КЦУ)
DI_init(KC_DI_Settings.EN_LSA2_ADES_ON_KCU,repTime,0.0,false,296);
//Обогрев прибора АДЭС LSA3 включить (КЦУ)
DI_init(KC_DI_Settings.EN_LSA3_ADES_ON_KCU,repTime,0.0,false,297);
//Обогрев прибора LSA1 (ГПА4) включить (КЦУ)
DI_init(KC_DI_Settings.EN_LSA1_GPA_ON_KCU,repTime,0.0,false,298);
//Обогрев прибора LSA2 (ГПА5) включить (КЦУ)
DI_init(KC_DI_Settings.EN_LSA2_GPA_ON_KCU,repTime,0.0,false,299);
//Обогрев прибора LSA3 (ГПА6)  включить (КЦУ)
DI_init(KC_DI_Settings.EN_LSA3_GPA_ON_KCU,repTime,0.0,false,300);
//Обогрев прибора LSA4 (ГПА4)  включить (КЦУ)
DI_init(KC_DI_Settings.EN_LSA4_GPA_ON_KCU,repTime,0.0,false,301);
//Обогрев прибора LSA5 (ГПА5)  включить (КЦУ)
DI_init(KC_DI_Settings.EN_LSA5_GPA_ON_KCU,repTime,0.0,false,302);
//Обогрев прибора LSA6 (ГПА6) включить (КЦУ)
DI_init(KC_DI_Settings.EN_LSA6_GPA_ON_KCU,repTime,0.0,false,303);
//Кран Кр51-2 - закрыть (КЦУ)
DI_init(KC_DI_Settings.Kr51_2_OF_KCU,repTime,0.0,false,304);
//Кран Кр51-2 - открыть (КЦУ)
DI_init(KC_DI_Settings.Kr51_2_ON_KCU,repTime,0.0,false,305);
//Кран Кр52-2 - закрыть (КЦУ)
DI_init(KC_DI_Settings.Kr52_2_OF_KCU,repTime,0.0,false,306);
//Кран Кр52-2 - открыть (КЦУ)
DI_init(KC_DI_Settings.Kr52_2_ON_KCU,repTime,0.0,false,307);
//Кран Кр53 - закрыть (КЦУ)
DI_init(KC_DI_Settings.Kr53_OF_KCU,repTime,0.0,false,308);
//Кран Кр53 - открыть (КЦУ)
DI_init(KC_DI_Settings.Kr53_ON_KCU,repTime,0.0,false,309);
//Кран Кр53бп - закрыть (КЦУ)
DI_init(KC_DI_Settings.Kr53b_OF_KCU,repTime,0.0,false,310);
//Кран Кр53бп - открыть (КЦУ)
DI_init(KC_DI_Settings.Kr53b_ON_KCU,repTime,0.0,false,311);
//Кран Кр54 - закрыть (КЦУ)
DI_init(KC_DI_Settings.Kr54_OF_KCU,repTime,0.0,false,312);
//Кран Кр54 - открыть (КЦУ)
DI_init(KC_DI_Settings.Kr54_ON_KCU,repTime,0.0,false,313);
//Кран Кр54бп - закрыть (КЦУ)
DI_init(KC_DI_Settings.Kr54b_OF_KCU,repTime,0.0,false,314);
//Кран Кр54бп - открыть (КЦУ)
DI_init(KC_DI_Settings.Kr54b_ON_KCU,repTime,0.0,false,315);
//ЭО от САУ КЦ (КЦУ)
DI_init(KC_DI_Settings.EO_KC_KCU,repTime,0.0,false,316);
//Инд. ЭО от САУ КЦ (КЦУ)
DI_init(KC_DI_Settings.EO_LED_KC_KCU,repTime,0.0,false,317);
//АОсс от САУ КЦ (КЦУ)
DI_init(KC_DI_Settings.AOss_KC_KCU,repTime,0.0,false,318);
//АОбс от САУ КЦ (КЦУ)
DI_init(KC_DI_Settings.AObs_KC_KCU,repTime,0.0,false,319);
//Пожар в энергоблоке
DI_init(KC_DI_Settings.Fire_in_Eblock,repTime,0.0,false,320);
//Пожар в насосной масел
DI_init(KC_DI_Settings.Fire_in_NasOil2,repTime,0.0,false,321);
//Пожар в проходной
DI_init(KC_DI_Settings.Fire_in_Gate,repTime,0.0,false,322);
//Пожар в б/б БВВ УП
DI_init(KC_DI_Settings.Fire_in_BB_BVVUP,repTime,0.0,false,323);
//Пожар в аварийной дизельной электростанции
DI_init(KC_DI_Settings.Fire_in_ADES,repTime,0.0,false,324);
//Пожар в БКУ ЭХЗ
DI_init(KC_DI_Settings.Fire_in_EXZ,repTime,0.0,false,325);
//Пожар в компрессорной сжатого воздуха
DI_init(KC_DI_Settings.Fire_in_VKompr,repTime,0.0,false,326);
//Пожар на площадке блока резервуаров масла (НМ)
DI_init(KC_DI_Settings.Fire_in_OilTanks,repTime,0.0,false,327);
//Пожар в емкости для аварийного слива масла (НМ)
DI_init(KC_DI_Settings.Fire_in_Oil_Atanks,repTime,0.0,false,328);
//Пожар в емкости для аварийного слива топлива (АДЭС)
DI_init(KC_DI_Settings.Fire_in_Fuel_ATanks2,repTime,0.0,false,329);
//Пожар на площадке резервуара для дизтоплива (АДЭС)
DI_init(KC_DI_Settings.Fire_in_FuelTanks2,repTime,0.0,false,330);
//Неисправность САПС обобщенный
DI_init(KC_DI_Settings.SAPS_Bad,repTime,0.0,false,331);
//Пожар ГПА 4
DI_init(KC_DI_Settings.Fire_in_GPA4,repTime,0.0,false,332);
//Неисправность АСПС, КЗ и ПТ ГПА 4
DI_init(KC_DI_Settings.GPA4_ASPS_Bad,repTime,0.0,false,333);
//Загазованность предупредительная (10%) ГПА 4
DI_init(KC_DI_Settings.GPA4_GAS10,repTime,0.0,false,334);
//Загазованность аварийная (20%) ГПА 4
DI_init(KC_DI_Settings.GPA4_GAS20,repTime,0.0,false,335);
//Пожар ГПА 5
DI_init(KC_DI_Settings.Fire_in_GPA5,repTime,0.0,false,336);
//Неисправность АСПС, КЗ и ПТ ГПА 5
DI_init(KC_DI_Settings.GPA5_ASPS_Bad,repTime,0.0,false,337);
//Загазованность предупредительная (10%) ГПА 5
DI_init(KC_DI_Settings.GPA5_GAS10,repTime,0.0,false,338);
//Загазованность аварийная (20%) ГПА 5
DI_init(KC_DI_Settings.GPA5_GAS20,repTime,0.0,false,339);
//Пожар ГПА 6
DI_init(KC_DI_Settings.Fire_in_GPA6,repTime,0.0,false,340);
//Неисправность АСПС, КЗ и ПТ ГПА 6
DI_init(KC_DI_Settings.GPA6_ASPS_Bad,repTime,0.0,false,341);
//Загазованность предупредительная (10%) ГПА 6
DI_init(KC_DI_Settings.GPA6_GAS10,repTime,0.0,false,342);
//Загазованность аварийная (20%) ГПА 6
DI_init(KC_DI_Settings.GPA6_GAS20,repTime,0.0,false,343);
//Пожар УПГ
DI_init(KC_DI_Settings.Fire_in_UPG,repTime,0.0,false,344);
//Неисправность АСПС, КЗ и ПТ УПГ
DI_init(KC_DI_Settings.UPG_ASPS_Bad,repTime,0.0,false,345);
//Загазованность предупредительная (10%) УПГ
DI_init(KC_DI_Settings.UPG_GAS10,repTime,0.0,false,346);
//Загазованность аварийная (20%) УПГ
DI_init(KC_DI_Settings.UPG_GAS20,repTime,0.0,false,347);
//Пожар УРМ
DI_init(KC_DI_Settings.Fire_in_URM,repTime,0.0,false,348);
//Неисправность АСПС, КЗ и ПТ УРМ
DI_init(KC_DI_Settings.URM_ASPS_Bad,repTime,0.0,false,349);
//Резерв под сигнал Загазованность предупредительная (10%) УРМ
DI_init(KC_DI_Settings.Res_39,repTime,0.0,false,350);
//Резерв под сигнал Загазованность аварийная (20%) УРМ
DI_init(KC_DI_Settings.Res_40,repTime,0.0,false,351);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода DI_Processing
//Кран 51 открыт
DI_Processing(KC_DI_DRV.Kr51_ON,false,KC_DI_Settings.Kr51_ON,KC_DI_FromHMI.Kr51_ON,KC_DI_ToHMI.Kr51_ON,KC_DI_Internal.Kr51_ON,KC_DI.Kr51_ON);
//Кран 51 открыт. КЦД
DI_Processing(KC_DI_DRV.Kr51_ON_KCD,false,KC_DI_Settings.Kr51_ON_KCD,KC_DI_FromHMI.Kr51_ON_KCD,KC_DI_ToHMI.Kr51_ON_KCD,KC_DI_Internal.Kr51_ON_KCD,KC_DI.Kr51_ON_KCD);
//Кран 51 закрыт 
DI_Processing(KC_DI_DRV.Kr51_OF,false,KC_DI_Settings.Kr51_OF,KC_DI_FromHMI.Kr51_OF,KC_DI_ToHMI.Kr51_OF,KC_DI_Internal.Kr51_OF,KC_DI.Kr51_OF);
//Кран 51 закрыт. КЦД
DI_Processing(KC_DI_DRV.Kr51_OF_KCD,false,KC_DI_Settings.Kr51_OF_KCD,KC_DI_FromHMI.Kr51_OF_KCD,KC_DI_ToHMI.Kr51_OF_KCD,KC_DI_Internal.Kr51_OF_KCD,KC_DI.Kr51_OF_KCD);
//Кран 52 открыт 
DI_Processing(KC_DI_DRV.Kr52_ON,false,KC_DI_Settings.Kr52_ON,KC_DI_FromHMI.Kr52_ON,KC_DI_ToHMI.Kr52_ON,KC_DI_Internal.Kr52_ON,KC_DI.Kr52_ON);
//Кран 52 открыт. КЦД
DI_Processing(KC_DI_DRV.Kr52_ON_KCD,false,KC_DI_Settings.Kr52_ON_KCD,KC_DI_FromHMI.Kr52_ON_KCD,KC_DI_ToHMI.Kr52_ON_KCD,KC_DI_Internal.Kr52_ON_KCD,KC_DI.Kr52_ON_KCD);
//Кран 52 закрыт
DI_Processing(KC_DI_DRV.Kr52_OF,false,KC_DI_Settings.Kr52_OF,KC_DI_FromHMI.Kr52_OF,KC_DI_ToHMI.Kr52_OF,KC_DI_Internal.Kr52_OF,KC_DI.Kr52_OF);
//Кран 52 закрыт. КЦД
DI_Processing(KC_DI_DRV.Kr52_OF_KCD,false,KC_DI_Settings.Kr52_OF_KCD,KC_DI_FromHMI.Kr52_OF_KCD,KC_DI_ToHMI.Kr52_OF_KCD,KC_DI_Internal.Kr52_OF_KCD,KC_DI.Kr52_OF_KCD);
//УТУО. Обобщенный сигнал аварии 
DI_Processing(KC_DI_DRV.UTUO_Alarm,false,KC_DI_Settings.UTUO_Alarm,KC_DI_FromHMI.UTUO_Alarm,KC_DI_ToHMI.UTUO_Alarm,KC_DI_Internal.UTUO_Alarm,KC_DI.UTUO_Alarm);
//УТУО. Обобщенный сигнал аварии. КЦД
DI_Processing(KC_DI_DRV.UTUO_Alarm_KCD,false,KC_DI_Settings.UTUO_Alarm_KCD,KC_DI_FromHMI.UTUO_Alarm_KCD,KC_DI_ToHMI.UTUO_Alarm_KCD,KC_DI_Internal.UTUO_Alarm_KCD,KC_DI.UTUO_Alarm_KCD);
//УТУО. Загазованность по метану более 10% НКПР
DI_Processing(KC_DI_DRV.UTUO_Gas10,false,KC_DI_Settings.UTUO_Gas10,KC_DI_FromHMI.UTUO_Gas10,KC_DI_ToHMI.UTUO_Gas10,KC_DI_Internal.UTUO_Gas10,KC_DI.UTUO_Gas10);
//УТУО. Загазованность по метану более 10% НКПР. КЦД
DI_Processing(KC_DI_DRV.UTUO_Gas10_KCD,false,KC_DI_Settings.UTUO_Gas10_KCD,KC_DI_FromHMI.UTUO_Gas10_KCD,KC_DI_ToHMI.UTUO_Gas10_KCD,KC_DI_Internal.UTUO_Gas10_KCD,KC_DI.UTUO_Gas10_KCD);
//УТУО. Срабатывание отсечного клапана на подводящем газопроводе
DI_Processing(KC_DI_DRV.UTUO_Kl_ots_OF,false,KC_DI_Settings.UTUO_Kl_ots_OF,KC_DI_FromHMI.UTUO_Kl_ots_OF,KC_DI_ToHMI.UTUO_Kl_ots_OF,KC_DI_Internal.UTUO_Kl_ots_OF,KC_DI.UTUO_Kl_ots_OF);
//УТУО. Срабатывание отсечного клапана на подводящем газопроводе. КЦД
DI_Processing(KC_DI_DRV.UTUO_Kl_ots_OF_KCD,false,KC_DI_Settings.UTUO_Kl_ots_OF_KCD,KC_DI_FromHMI.UTUO_Kl_ots_OF_KCD,KC_DI_ToHMI.UTUO_Kl_ots_OF_KCD,KC_DI_Internal.UTUO_Kl_ots_OF_KCD,KC_DI.UTUO_Kl_ots_OF_KCD);
//УТУО. Исчезновение напряжения питания
DI_Processing(KC_DI_DRV.UTUO_No_U,false,KC_DI_Settings.UTUO_No_U,KC_DI_FromHMI.UTUO_No_U,KC_DI_ToHMI.UTUO_No_U,KC_DI_Internal.UTUO_No_U,KC_DI.UTUO_No_U);
//УТУО. Исчезновение напряжения питания. КЦД
DI_Processing(KC_DI_DRV.UTUO_No_U_KCD,false,KC_DI_Settings.UTUO_No_U_KCD,KC_DI_FromHMI.UTUO_No_U_KCD,KC_DI_ToHMI.UTUO_No_U_KCD,KC_DI_Internal.UTUO_No_U_KCD,KC_DI.UTUO_No_U_KCD);
//Вентсистема П2 в работе 
DI_Processing(KC_DI_DRV.Vn_P2_ON,false,KC_DI_Settings.Vn_P2_ON,KC_DI_FromHMI.Vn_P2_ON,KC_DI_ToHMI.Vn_P2_ON,KC_DI_Internal.Vn_P2_ON,KC_DI.Vn_P2_ON);
//Вентсистема П2 в работе. КЦД
DI_Processing(KC_DI_DRV.Vn_P2_ON_KCD,false,KC_DI_Settings.Vn_P2_ON_KCD,KC_DI_FromHMI.Vn_P2_ON_KCD,KC_DI_ToHMI.Vn_P2_ON_KCD,KC_DI_Internal.Vn_P2_ON_KCD,KC_DI.Vn_P2_ON_KCD);
//Вентсистема П3 в работе 
DI_Processing(KC_DI_DRV.Vn_P3_ON,false,KC_DI_Settings.Vn_P3_ON,KC_DI_FromHMI.Vn_P3_ON,KC_DI_ToHMI.Vn_P3_ON,KC_DI_Internal.Vn_P3_ON,KC_DI.Vn_P3_ON);
//Вентсистема П3 в работе. КЦД
DI_Processing(KC_DI_DRV.Vn_P3_ON_KCD,false,KC_DI_Settings.Vn_P3_ON_KCD,KC_DI_FromHMI.Vn_P3_ON_KCD,KC_DI_ToHMI.Vn_P3_ON_KCD,KC_DI_Internal.Vn_P3_ON_KCD,KC_DI.Vn_P3_ON_KCD);
//Вентсистема В2 в работе 
DI_Processing(KC_DI_DRV.Vn_V2_ON,false,KC_DI_Settings.Vn_V2_ON,KC_DI_FromHMI.Vn_V2_ON,KC_DI_ToHMI.Vn_V2_ON,KC_DI_Internal.Vn_V2_ON,KC_DI.Vn_V2_ON);
//Вентсистема В2 в работе. КЦД
DI_Processing(KC_DI_DRV.Vn_V2_ON_KCD,false,KC_DI_Settings.Vn_V2_ON_KCD,KC_DI_FromHMI.Vn_V2_ON_KCD,KC_DI_ToHMI.Vn_V2_ON_KCD,KC_DI_Internal.Vn_V2_ON_KCD,KC_DI.Vn_V2_ON_KCD);
//Вентсистема В3 в работе 
DI_Processing(KC_DI_DRV.Vn_V3_ON,false,KC_DI_Settings.Vn_V3_ON,KC_DI_FromHMI.Vn_V3_ON,KC_DI_ToHMI.Vn_V3_ON,KC_DI_Internal.Vn_V3_ON,KC_DI.Vn_V3_ON);
//Вентсистема В3 в работе. КЦД
DI_Processing(KC_DI_DRV.Vn_V3_ON_KCD,false,KC_DI_Settings.Vn_V3_ON_KCD,KC_DI_FromHMI.Vn_V3_ON_KCD,KC_DI_ToHMI.Vn_V3_ON_KCD,KC_DI_Internal.Vn_V3_ON_KCD,KC_DI.Vn_V3_ON_KCD);
//Авария вентсистемы П1 
DI_Processing(KC_DI_DRV.Vn_P1_Alarm,false,KC_DI_Settings.Vn_P1_Alarm,KC_DI_FromHMI.Vn_P1_Alarm,KC_DI_ToHMI.Vn_P1_Alarm,KC_DI_Internal.Vn_P1_Alarm,KC_DI.Vn_P1_Alarm);
//Авария вентсистемы П1. КЦД
DI_Processing(KC_DI_DRV.Vn_P1_Alarm_KCD,false,KC_DI_Settings.Vn_P1_Alarm_KCD,KC_DI_FromHMI.Vn_P1_Alarm_KCD,KC_DI_ToHMI.Vn_P1_Alarm_KCD,KC_DI_Internal.Vn_P1_Alarm_KCD,KC_DI.Vn_P1_Alarm_KCD);
//Авария вентсистемы П4
DI_Processing(KC_DI_DRV.Vn_P4_Alarm,false,KC_DI_Settings.Vn_P4_Alarm,KC_DI_FromHMI.Vn_P4_Alarm,KC_DI_ToHMI.Vn_P4_Alarm,KC_DI_Internal.Vn_P4_Alarm,KC_DI.Vn_P4_Alarm);
//Авария вентсистемы П4. КЦД
DI_Processing(KC_DI_DRV.Vn_P4_Alarm_KCD,false,KC_DI_Settings.Vn_P4_Alarm_KCD,KC_DI_FromHMI.Vn_P4_Alarm_KCD,KC_DI_ToHMI.Vn_P4_Alarm_KCD,KC_DI_Internal.Vn_P4_Alarm_KCD,KC_DI.Vn_P4_Alarm_KCD);
//Вентсистема В4.Авария
DI_Processing(KC_DI_DRV.Vn_V4_Alarm,false,KC_DI_Settings.Vn_V4_Alarm,KC_DI_FromHMI.Vn_V4_Alarm,KC_DI_ToHMI.Vn_V4_Alarm,KC_DI_Internal.Vn_V4_Alarm,KC_DI.Vn_V4_Alarm);
//Вентсистема В4.Авария. КЦД
DI_Processing(KC_DI_DRV.Vn_V4_Alarm_KCD,false,KC_DI_Settings.Vn_V4_Alarm_KCD,KC_DI_FromHMI.Vn_V4_Alarm_KCD,KC_DI_ToHMI.Vn_V4_Alarm_KCD,KC_DI_Internal.Vn_V4_Alarm_KCD,KC_DI.Vn_V4_Alarm_KCD);
//Вентсистема В4 в работе 
DI_Processing(KC_DI_DRV.Vn_V4_ON,false,KC_DI_Settings.Vn_V4_ON,KC_DI_FromHMI.Vn_V4_ON,KC_DI_ToHMI.Vn_V4_ON,KC_DI_Internal.Vn_V4_ON,KC_DI.Vn_V4_ON);
//Вентсистема В4 в работе. КЦД
DI_Processing(KC_DI_DRV.Vn_V4_ON_KCD,false,KC_DI_Settings.Vn_V4_ON_KCD,KC_DI_FromHMI.Vn_V4_ON_KCD,KC_DI_ToHMI.Vn_V4_ON_KCD,KC_DI_Internal.Vn_V4_ON_KCD,KC_DI.Vn_V4_ON_KCD);
//Верхний уровень в резервуаре Р1 для хранения дизтоплива, LSA1
DI_Processing(KC_DI_DRV.Lt_R1_ADES_v,false,KC_DI_Settings.Lt_R1_ADES_v,KC_DI_FromHMI.Lt_R1_ADES_v,KC_DI_ToHMI.Lt_R1_ADES_v,KC_DI_Internal.Lt_R1_ADES_v,KC_DI.Lt_R1_ADES_v);
//Верхний уровень в резервуаре Р1 для хранения дизтоплива, LSA1. КЦД
DI_Processing(KC_DI_DRV.Lt_R1_ADES_v_KCD,false,KC_DI_Settings.Lt_R1_ADES_v_KCD,KC_DI_FromHMI.Lt_R1_ADES_v_KCD,KC_DI_ToHMI.Lt_R1_ADES_v_KCD,KC_DI_Internal.Lt_R1_ADES_v_KCD,KC_DI.Lt_R1_ADES_v_KCD);
//Нижний уровень в резервуаре Р1 для хранения дизтоплива, LSA2
DI_Processing(KC_DI_DRV.Lt_R1_ADES_n,false,KC_DI_Settings.Lt_R1_ADES_n,KC_DI_FromHMI.Lt_R1_ADES_n,KC_DI_ToHMI.Lt_R1_ADES_n,KC_DI_Internal.Lt_R1_ADES_n,KC_DI.Lt_R1_ADES_n);
//Нижний уровень в резервуаре Р1 для хранения дизтоплива, LSA2. КЦД
DI_Processing(KC_DI_DRV.Lt_R1_ADES_n_KCD,false,KC_DI_Settings.Lt_R1_ADES_n_KCD,KC_DI_FromHMI.Lt_R1_ADES_n_KCD,KC_DI_ToHMI.Lt_R1_ADES_n_KCD,KC_DI_Internal.Lt_R1_ADES_n_KCD,KC_DI.Lt_R1_ADES_n_KCD);
//Верхний уровень в резервуаре Р2 для аварийного слива топлива, LSA3
DI_Processing(KC_DI_DRV.Lt_R2_ADES_v,false,KC_DI_Settings.Lt_R2_ADES_v,KC_DI_FromHMI.Lt_R2_ADES_v,KC_DI_ToHMI.Lt_R2_ADES_v,KC_DI_Internal.Lt_R2_ADES_v,KC_DI.Lt_R2_ADES_v);
//Верхний уровень в резервуаре Р2 для аварийного слива топлива, LSA3. КЦД
DI_Processing(KC_DI_DRV.Lt_R2_v_KCD,false,KC_DI_Settings.Lt_R2_v_KCD,KC_DI_FromHMI.Lt_R2_v_KCD,KC_DI_ToHMI.Lt_R2_v_KCD,KC_DI_Internal.Lt_R2_v_KCD,KC_DI.Lt_R2_v_KCD);
//Исправность датчика уровня, LSA1 
DI_Processing(KC_DI_DRV.LSA1_ADES_ok,false,KC_DI_Settings.LSA1_ADES_ok,KC_DI_FromHMI.LSA1_ADES_ok,KC_DI_ToHMI.LSA1_ADES_ok,KC_DI_Internal.LSA1_ADES_ok,KC_DI.LSA1_ADES_ok);
//Исправность датчика уровня, LSA1. КЦД
DI_Processing(KC_DI_DRV.LSA1_ADES_ok_KCD,false,KC_DI_Settings.LSA1_ADES_ok_KCD,KC_DI_FromHMI.LSA1_ADES_ok_KCD,KC_DI_ToHMI.LSA1_ADES_ok_KCD,KC_DI_Internal.LSA1_ADES_ok_KCD,KC_DI.LSA1_ADES_ok_KCD);
//Исправность датчика уровня, LSA2
DI_Processing(KC_DI_DRV.LSA2_ADES_ok,false,KC_DI_Settings.LSA2_ADES_ok,KC_DI_FromHMI.LSA2_ADES_ok,KC_DI_ToHMI.LSA2_ADES_ok,KC_DI_Internal.LSA2_ADES_ok,KC_DI.LSA2_ADES_ok);
//Исправность датчика уровня, LSA2. КЦД
DI_Processing(KC_DI_DRV.LSA2_ADES_ok_KCD,false,KC_DI_Settings.LSA2_ADES_ok_KCD,KC_DI_FromHMI.LSA2_ADES_ok_KCD,KC_DI_ToHMI.LSA2_ADES_ok_KCD,KC_DI_Internal.LSA2_ADES_ok_KCD,KC_DI.LSA2_ADES_ok_KCD);
//Исправность датчика уровня, LSA3
DI_Processing(KC_DI_DRV.LSA3_ADES_ok,false,KC_DI_Settings.LSA3_ADES_ok,KC_DI_FromHMI.LSA3_ADES_ok,KC_DI_ToHMI.LSA3_ADES_ok,KC_DI_Internal.LSA3_ADES_ok,KC_DI.LSA3_ADES_ok);
//Исправность датчика уровня, LSA3. КЦД
DI_Processing(KC_DI_DRV.LSA3_ADES_ok_KCD,false,KC_DI_Settings.LSA3_ADES_ok_KCD,KC_DI_FromHMI.LSA3_ADES_ok_KCD,KC_DI_ToHMI.LSA3_ADES_ok_KCD,KC_DI_Internal.LSA3_ADES_ok_KCD,KC_DI.LSA3_ADES_ok_KCD);
//Агрегат 4 Верхний уровень в резервуаре Р1 для дренажа масла нагнетателя LSA1
DI_Processing(KC_DI_DRV.Lm_R1_v,false,KC_DI_Settings.Lm_R1_v,KC_DI_FromHMI.Lm_R1_v,KC_DI_ToHMI.Lm_R1_v,KC_DI_Internal.Lm_R1_v,KC_DI.Lm_R1_v);
//Агрегат 4. Верхний уровень в резервуаре Р1 для дренажа масла нагнетателя LSA1. КЦД
DI_Processing(KC_DI_DRV.Lm_R1_v_KCD,false,KC_DI_Settings.Lm_R1_v_KCD,KC_DI_FromHMI.Lm_R1_v_KCD,KC_DI_ToHMI.Lm_R1_v_KCD,KC_DI_Internal.Lm_R1_v_KCD,KC_DI.Lm_R1_v_KCD);
//Агрегат 4 Верхний уровень в резервуаре Р4 для отработанного масла двигателя LSA4
DI_Processing(KC_DI_DRV.Lm_R4_v,false,KC_DI_Settings.Lm_R4_v,KC_DI_FromHMI.Lm_R4_v,KC_DI_ToHMI.Lm_R4_v,KC_DI_Internal.Lm_R4_v,KC_DI.Lm_R4_v);
//Агрегат 4.Верхний уровень в резервуаре Р4 для отработанного масла двигателя LSA4.КЦД
DI_Processing(KC_DI_DRV.Lm_R4_v_KCD,false,KC_DI_Settings.Lm_R4_v_KCD,KC_DI_FromHMI.Lm_R4_v_KCD,KC_DI_ToHMI.Lm_R4_v_KCD,KC_DI_Internal.Lm_R4_v_KCD,KC_DI.Lm_R4_v_KCD);
//Агрегат 5 Верхний уровень в резервуаре Р2 для дренажа масла нагнетателя LSA2
DI_Processing(KC_DI_DRV.Lm_R2_v,false,KC_DI_Settings.Lm_R2_v,KC_DI_FromHMI.Lm_R2_v,KC_DI_ToHMI.Lm_R2_v,KC_DI_Internal.Lm_R2_v,KC_DI.Lm_R2_v);
//Агрегат 5. Верхний уровень в резервуаре Р2 для дренажа масла нагнетателя LSA2. КЦД
DI_Processing(KC_DI_DRV.Lm_R2_v_KCD,false,KC_DI_Settings.Lm_R2_v_KCD,KC_DI_FromHMI.Lm_R2_v_KCD,KC_DI_ToHMI.Lm_R2_v_KCD,KC_DI_Internal.Lm_R2_v_KCD,KC_DI.Lm_R2_v_KCD);
//Агрегат 5. Верхний уровень в резервуаре Р5 для отработанного масла двигателя LSA5
DI_Processing(KC_DI_DRV.Lm_R5_v,false,KC_DI_Settings.Lm_R5_v,KC_DI_FromHMI.Lm_R5_v,KC_DI_ToHMI.Lm_R5_v,KC_DI_Internal.Lm_R5_v,KC_DI.Lm_R5_v);
//Агрегат 5.Верхний уровень в резервуаре Р5 для отработанного масла двигателя LSA5.КЦД
DI_Processing(KC_DI_DRV.Lm_R5_v_KCD,false,KC_DI_Settings.Lm_R5_v_KCD,KC_DI_FromHMI.Lm_R5_v_KCD,KC_DI_ToHMI.Lm_R5_v_KCD,KC_DI_Internal.Lm_R5_v_KCD,KC_DI.Lm_R5_v_KCD);
//Агрегат 6. Верхний уровень в резервуаре Р3 для дренажа масла нагнетателя LSA3
DI_Processing(KC_DI_DRV.Lm_R3_v,false,KC_DI_Settings.Lm_R3_v,KC_DI_FromHMI.Lm_R3_v,KC_DI_ToHMI.Lm_R3_v,KC_DI_Internal.Lm_R3_v,KC_DI.Lm_R3_v);
//Агрегат 6. Верхний уровень в резервуаре Р3 для дренажа масла нагнетателя LSA3. КЦД
DI_Processing(KC_DI_DRV.Lm_R3_v_KCD,false,KC_DI_Settings.Lm_R3_v_KCD,KC_DI_FromHMI.Lm_R3_v_KCD,KC_DI_ToHMI.Lm_R3_v_KCD,KC_DI_Internal.Lm_R3_v_KCD,KC_DI.Lm_R3_v_KCD);
//Агрегат 6. Верхний уровень в резервуаре Р6 для отработанного масла двигателя LSA6
DI_Processing(KC_DI_DRV.Lm_R6_v,false,KC_DI_Settings.Lm_R6_v,KC_DI_FromHMI.Lm_R6_v,KC_DI_ToHMI.Lm_R6_v,KC_DI_Internal.Lm_R6_v,KC_DI.Lm_R6_v);
//Агрегат 6.Верхний уровень в резервуаре Р6 для отработанного масла двигателя LSA6.КЦД
DI_Processing(KC_DI_DRV.Lm_R6_v_KCD,false,KC_DI_Settings.Lm_R6_v_KCD,KC_DI_FromHMI.Lm_R6_v_KCD,KC_DI_ToHMI.Lm_R6_v_KCD,KC_DI_Internal.Lm_R6_v_KCD,KC_DI.Lm_R6_v_KCD);
//Исправность датчика уровня, LSA1
DI_Processing(KC_DI_DRV.LSA1_GRA_ok,false,KC_DI_Settings.LSA1_GRA_ok,KC_DI_FromHMI.LSA1_GRA_ok,KC_DI_ToHMI.LSA1_GRA_ok,KC_DI_Internal.LSA1_GRA_ok,KC_DI.LSA1_GRA_ok);
//Исправность датчика уровня, LSA1. КЦД
DI_Processing(KC_DI_DRV.LSA1_GPA_ok_KCD,false,KC_DI_Settings.LSA1_GPA_ok_KCD,KC_DI_FromHMI.LSA1_GPA_ok_KCD,KC_DI_ToHMI.LSA1_GPA_ok_KCD,KC_DI_Internal.LSA1_GPA_ok_KCD,KC_DI.LSA1_GPA_ok_KCD);
//Исправность датчика уровня, LSA2
DI_Processing(KC_DI_DRV.LSA2_GPA_ok,false,KC_DI_Settings.LSA2_GPA_ok,KC_DI_FromHMI.LSA2_GPA_ok,KC_DI_ToHMI.LSA2_GPA_ok,KC_DI_Internal.LSA2_GPA_ok,KC_DI.LSA2_GPA_ok);
//Исправность датчика уровня, LSA2. КЦД
DI_Processing(KC_DI_DRV.LSA2_GPA_ok_KCD,false,KC_DI_Settings.LSA2_GPA_ok_KCD,KC_DI_FromHMI.LSA2_GPA_ok_KCD,KC_DI_ToHMI.LSA2_GPA_ok_KCD,KC_DI_Internal.LSA2_GPA_ok_KCD,KC_DI.LSA2_GPA_ok_KCD);
//Исправность датчика уровня, LSA3 
DI_Processing(KC_DI_DRV.LSA3_GPA_ok,false,KC_DI_Settings.LSA3_GPA_ok,KC_DI_FromHMI.LSA3_GPA_ok,KC_DI_ToHMI.LSA3_GPA_ok,KC_DI_Internal.LSA3_GPA_ok,KC_DI.LSA3_GPA_ok);
//Исправность датчика уровня, LSA3. КЦД
DI_Processing(KC_DI_DRV.LSA3_GPA_ok_KCD,false,KC_DI_Settings.LSA3_GPA_ok_KCD,KC_DI_FromHMI.LSA3_GPA_ok_KCD,KC_DI_ToHMI.LSA3_GPA_ok_KCD,KC_DI_Internal.LSA3_GPA_ok_KCD,KC_DI.LSA3_GPA_ok_KCD);
//Исправность датчика уровня, LSA4 
DI_Processing(KC_DI_DRV.LSA4_GPA_ok,false,KC_DI_Settings.LSA4_GPA_ok,KC_DI_FromHMI.LSA4_GPA_ok,KC_DI_ToHMI.LSA4_GPA_ok,KC_DI_Internal.LSA4_GPA_ok,KC_DI.LSA4_GPA_ok);
//Исправность датчика уровня, LSA4. КЦД 
DI_Processing(KC_DI_DRV.LSA4_GPA_ok_KCD,false,KC_DI_Settings.LSA4_GPA_ok_KCD,KC_DI_FromHMI.LSA4_GPA_ok_KCD,KC_DI_ToHMI.LSA4_GPA_ok_KCD,KC_DI_Internal.LSA4_GPA_ok_KCD,KC_DI.LSA4_GPA_ok_KCD);
//Исправность датчика уровня, LSA5
DI_Processing(KC_DI_DRV.LSA5_GPA_ok,false,KC_DI_Settings.LSA5_GPA_ok,KC_DI_FromHMI.LSA5_GPA_ok,KC_DI_ToHMI.LSA5_GPA_ok,KC_DI_Internal.LSA5_GPA_ok,KC_DI.LSA5_GPA_ok);
//Исправность датчика уровня, LSA5. КЦД 
DI_Processing(KC_DI_DRV.LSA5_GPA_ok_KCD,false,KC_DI_Settings.LSA5_GPA_ok_KCD,KC_DI_FromHMI.LSA5_GPA_ok_KCD,KC_DI_ToHMI.LSA5_GPA_ok_KCD,KC_DI_Internal.LSA5_GPA_ok_KCD,KC_DI.LSA5_GPA_ok_KCD);
//Исправность датчика уровня, LSA6
DI_Processing(KC_DI_DRV.LSA6_GPA_ok,false,KC_DI_Settings.LSA6_GPA_ok,KC_DI_FromHMI.LSA6_GPA_ok,KC_DI_ToHMI.LSA6_GPA_ok,KC_DI_Internal.LSA6_GPA_ok,KC_DI.LSA6_GPA_ok);
//Исправность датчика уровня, LSA6. КЦД 
DI_Processing(KC_DI_DRV.LSA6_GPA_ok_KCD,false,KC_DI_Settings.LSA6_GPA_ok_KCD,KC_DI_FromHMI.LSA6_GPA_ok_KCD,KC_DI_ToHMI.LSA6_GPA_ok_KCD,KC_DI_Internal.LSA6_GPA_ok_KCD,KC_DI.LSA6_GPA_ok_KCD);
//Неисправность UZ1 
DI_Processing(KC_DI_DRV.UZ1_Bad,false,KC_DI_Settings.UZ1_Bad,KC_DI_FromHMI.UZ1_Bad,KC_DI_ToHMI.UZ1_Bad,KC_DI_Internal.UZ1_Bad,KC_DI.UZ1_Bad);
//Неисправность UZ1. КЦД  
DI_Processing(KC_DI_DRV.UZ1_Bad_KCD,false,KC_DI_Settings.UZ1_Bad_KCD,KC_DI_FromHMI.UZ1_Bad_KCD,KC_DI_ToHMI.UZ1_Bad_KCD,KC_DI_Internal.UZ1_Bad_KCD,KC_DI.UZ1_Bad_KCD);
//Неисправность UZ2 
DI_Processing(KC_DI_DRV.UZ2_Bad,false,KC_DI_Settings.UZ2_Bad,KC_DI_FromHMI.UZ2_Bad,KC_DI_ToHMI.UZ2_Bad,KC_DI_Internal.UZ2_Bad,KC_DI.UZ2_Bad);
//Неисправность UZ2. КЦД  
DI_Processing(KC_DI_DRV.UZ2_Bad_KCD,false,KC_DI_Settings.UZ2_Bad_KCD,KC_DI_FromHMI.UZ2_Bad_KCD,KC_DI_ToHMI.UZ2_Bad_KCD,KC_DI_Internal.UZ2_Bad_KCD,KC_DI.UZ2_Bad_KCD);
//Выключатель АБ отключен
DI_Processing(KC_DI_DRV.Q_AB_OF,false,KC_DI_Settings.Q_AB_OF,KC_DI_FromHMI.Q_AB_OF,KC_DI_ToHMI.Q_AB_OF,KC_DI_Internal.Q_AB_OF,KC_DI.Q_AB_OF);
//Выключатель АБ отключен. КЦД 
DI_Processing(KC_DI_DRV.Q_AB_OF_KCD,false,KC_DI_Settings.Q_AB_OF_KCD,KC_DI_FromHMI.Q_AB_OF_KCD,KC_DI_ToHMI.Q_AB_OF_KCD,KC_DI_Internal.Q_AB_OF_KCD,KC_DI.Q_AB_OF_KCD);
//Выключатель 1 «Резерв» отключен
DI_Processing(KC_DI_DRV.Q_Rez1_OF,false,KC_DI_Settings.Q_Rez1_OF,KC_DI_FromHMI.Q_Rez1_OF,KC_DI_ToHMI.Q_Rez1_OF,KC_DI_Internal.Q_Rez1_OF,KC_DI.Q_Rez1_OF);
//Выключатель 1 «Резерв» отключен. КЦД 
DI_Processing(KC_DI_DRV.Q_Rez1_OF_KCD,false,KC_DI_Settings.Q_Rez1_OF_KCD,KC_DI_FromHMI.Q_Rez1_OF_KCD,KC_DI_ToHMI.Q_Rez1_OF_KCD,KC_DI_Internal.Q_Rez1_OF_KCD,KC_DI.Q_Rez1_OF_KCD);
//Выключатель UZ1 отключен
DI_Processing(KC_DI_DRV.Q_UZ1_OF,false,KC_DI_Settings.Q_UZ1_OF,KC_DI_FromHMI.Q_UZ1_OF,KC_DI_ToHMI.Q_UZ1_OF,KC_DI_Internal.Q_UZ1_OF,KC_DI.Q_UZ1_OF);
//Выключатель UZ1 отключен. КЦД 
DI_Processing(KC_DI_DRV.Q_UZ1_OF_KCD,false,KC_DI_Settings.Q_UZ1_OF_KCD,KC_DI_FromHMI.Q_UZ1_OF_KCD,KC_DI_ToHMI.Q_UZ1_OF_KCD,KC_DI_Internal.Q_UZ1_OF_KCD,KC_DI.Q_UZ1_OF_KCD);
//Выключатель UZ2 отключен 
DI_Processing(KC_DI_DRV.Q_UZ2_OF,false,KC_DI_Settings.Q_UZ2_OF,KC_DI_FromHMI.Q_UZ2_OF,KC_DI_ToHMI.Q_UZ2_OF,KC_DI_Internal.Q_UZ2_OF,KC_DI.Q_UZ2_OF);
//Выключатель UZ2 отключен. КЦД  
DI_Processing(KC_DI_DRV.Q_UZ2_OF_KCD,false,KC_DI_Settings.Q_UZ2_OF_KCD,KC_DI_FromHMI.Q_UZ2_OF_KCD,KC_DI_ToHMI.Q_UZ2_OF_KCD,KC_DI_Internal.Q_UZ2_OF_KCD,KC_DI.Q_UZ2_OF_KCD);
//Секционный выключатель QS1 отключен
DI_Processing(KC_DI_DRV.QS1_OF,false,KC_DI_Settings.QS1_OF,KC_DI_FromHMI.QS1_OF,KC_DI_ToHMI.QS1_OF,KC_DI_Internal.QS1_OF,KC_DI.QS1_OF);
//Секционный выключатель QS1 отключен. КЦД 
DI_Processing(KC_DI_DRV.QS1_OF_KCD,false,KC_DI_Settings.QS1_OF_KCD,KC_DI_FromHMI.QS1_OF_KCD,KC_DI_ToHMI.QS1_OF_KCD,KC_DI_Internal.QS1_OF_KCD,KC_DI.QS1_OF_KCD);
//Секционный выключатель QS2 отключен
DI_Processing(KC_DI_DRV.QS2_OF,false,KC_DI_Settings.QS2_OF,KC_DI_FromHMI.QS2_OF,KC_DI_ToHMI.QS2_OF,KC_DI_Internal.QS2_OF,KC_DI.QS2_OF);
//Секционный выключатель QS2 отключен. КЦД 
DI_Processing(KC_DI_DRV.QS2_OF_KCD,false,KC_DI_Settings.QS2_OF_KCD,KC_DI_FromHMI.QS2_OF_KCD,KC_DI_ToHMI.QS2_OF_KCD,KC_DI_Internal.QS2_OF_KCD,KC_DI.QS2_OF_KCD);
//Секционный выключатель QS3 отключен
DI_Processing(KC_DI_DRV.QS3_OF,false,KC_DI_Settings.QS3_OF,KC_DI_FromHMI.QS3_OF,KC_DI_ToHMI.QS3_OF,KC_DI_Internal.QS3_OF,KC_DI.QS3_OF);
//Секционный выключатель QS3 отключен. КЦД 
DI_Processing(KC_DI_DRV.QS3_OF_KCD,false,KC_DI_Settings.QS3_OF_KCD,KC_DI_FromHMI.QS3_OF_KCD,KC_DI_ToHMI.QS3_OF_KCD,KC_DI_Internal.QS3_OF_KCD,KC_DI.QS3_OF_KCD);
//Секционный выключатель QS4 отключен
DI_Processing(KC_DI_DRV.QS4_OF,false,KC_DI_Settings.QS4_OF,KC_DI_FromHMI.QS4_OF,KC_DI_ToHMI.QS4_OF,KC_DI_Internal.QS4_OF,KC_DI.QS4_OF);
//Секционный выключатель QS4 отключен. КЦД 
DI_Processing(KC_DI_DRV.QS4_OF_KCD,false,KC_DI_Settings.QS4_OF_KCD,KC_DI_FromHMI.QS4_OF_KCD,KC_DI_ToHMI.QS4_OF_KCD,KC_DI_Internal.QS4_OF_KCD,KC_DI.QS4_OF_KCD);
//Секционный выключатель QS5 отключен
DI_Processing(KC_DI_DRV.QS5_OF,false,KC_DI_Settings.QS5_OF,KC_DI_FromHMI.QS5_OF,KC_DI_ToHMI.QS5_OF,KC_DI_Internal.QS5_OF,KC_DI.QS5_OF);
//Секционный выключатель QS5 отключен. КЦД 
DI_Processing(KC_DI_DRV.QS5_OF_KCD,false,KC_DI_Settings.QS5_OF_KCD,KC_DI_FromHMI.QS5_OF_KCD,KC_DI_ToHMI.QS5_OF_KCD,KC_DI_Internal.QS5_OF_KCD,KC_DI.QS5_OF_KCD);
//Выключатель блока электротехнического ГПА №1.1 отключен
DI_Processing(KC_DI_DRV.Q_ETO1_OF,false,KC_DI_Settings.Q_ETO1_OF,KC_DI_FromHMI.Q_ETO1_OF,KC_DI_ToHMI.Q_ETO1_OF,KC_DI_Internal.Q_ETO1_OF,KC_DI.Q_ETO1_OF);
//Выключатель блока электротехнического ГПА №1.1 отключен. КЦД 
DI_Processing(KC_DI_DRV.Q_ETO1_OF_KCD,false,KC_DI_Settings.Q_ETO1_OF_KCD,KC_DI_FromHMI.Q_ETO1_OF_KCD,KC_DI_ToHMI.Q_ETO1_OF_KCD,KC_DI_Internal.Q_ETO1_OF_KCD,KC_DI.Q_ETO1_OF_KCD);
//Выключатель блока электротехнического ГПА №1.2 отключен
DI_Processing(KC_DI_DRV.Q_ETO2_OF,false,KC_DI_Settings.Q_ETO2_OF,KC_DI_FromHMI.Q_ETO2_OF,KC_DI_ToHMI.Q_ETO2_OF,KC_DI_Internal.Q_ETO2_OF,KC_DI.Q_ETO2_OF);
//Выключатель блока электротехнического ГПА №1.2 отключен. КЦД 
DI_Processing(KC_DI_DRV.Q_ETO2_OF_KCD,false,KC_DI_Settings.Q_ETO2_OF_KCD,KC_DI_FromHMI.Q_ETO2_OF_KCD,KC_DI_ToHMI.Q_ETO2_OF_KCD,KC_DI_Internal.Q_ETO2_OF_KCD,KC_DI.Q_ETO2_OF_KCD);
//Выключатель шкафа 2АСУ ЭС, ввод №3 отключен
DI_Processing(KC_DI_DRV.Q_ASUES3_OF,false,KC_DI_Settings.Q_ASUES3_OF,KC_DI_FromHMI.Q_ASUES3_OF,KC_DI_ToHMI.Q_ASUES3_OF,KC_DI_Internal.Q_ASUES3_OF,KC_DI.Q_ASUES3_OF);
//Выключатель шкафа 2АСУ ЭС, ввод №3 отключен. КЦД 
DI_Processing(KC_DI_DRV.Q_ASUES3_OF_KCD,false,KC_DI_Settings.Q_ASUES3_OF_KCD,KC_DI_FromHMI.Q_ASUES3_OF_KCD,KC_DI_ToHMI.Q_ASUES3_OF_KCD,KC_DI_Internal.Q_ASUES3_OF_KCD,KC_DI.Q_ASUES3_OF_KCD);
//Выключатель КТП ПЭБа. Шкаф №1 отключен
DI_Processing(KC_DI_DRV.Q_KTP_PEB1_OF,false,KC_DI_Settings.Q_KTP_PEB1_OF,KC_DI_FromHMI.Q_KTP_PEB1_OF,KC_DI_ToHMI.Q_KTP_PEB1_OF,KC_DI_Internal.Q_KTP_PEB1_OF,KC_DI.Q_KTP_PEB1_OF);
//Выключатель КТП ПЭБа. Шкаф №1 отключен. КЦД
DI_Processing(KC_DI_DRV.Q_KTP_PEB1_OF_KCD,false,KC_DI_Settings.Q_KTP_PEB1_OF_KCD,KC_DI_FromHMI.Q_KTP_PEB1_OF_KCD,KC_DI_ToHMI.Q_KTP_PEB1_OF_KCD,KC_DI_Internal.Q_KTP_PEB1_OF_KCD,KC_DI.Q_KTP_PEB1_OF_KCD);
//Выключатель 2 «Резерв» отключен
DI_Processing(KC_DI_DRV.Q_Rez2_OF,false,KC_DI_Settings.Q_Rez2_OF,KC_DI_FromHMI.Q_Rez2_OF,KC_DI_ToHMI.Q_Rez2_OF,KC_DI_Internal.Q_Rez2_OF,KC_DI.Q_Rez2_OF);
//Выключатель 2 «Резерв» отключен. КЦД
DI_Processing(KC_DI_DRV.Q_Rez2_OF_KCD,false,KC_DI_Settings.Q_Rez2_OF_KCD,KC_DI_FromHMI.Q_Rez2_OF_KCD,KC_DI_ToHMI.Q_Rez2_OF_KCD,KC_DI_Internal.Q_Rez2_OF_KCD,KC_DI.Q_Rez2_OF_KCD);
//Выключатель 3 «Резерв» отключен 
DI_Processing(KC_DI_DRV.Q_Rez3_OF,false,KC_DI_Settings.Q_Rez3_OF,KC_DI_FromHMI.Q_Rez3_OF,KC_DI_ToHMI.Q_Rez3_OF,KC_DI_Internal.Q_Rez3_OF,KC_DI.Q_Rez3_OF);
//Выключатель 3 «Резерв» отключен . КЦД
DI_Processing(KC_DI_DRV.Q_Rez3_OF_KCD,false,KC_DI_Settings.Q_Rez3_OF_KCD,KC_DI_FromHMI.Q_Rez3_OF_KCD,KC_DI_ToHMI.Q_Rez3_OF_KCD,KC_DI_Internal.Q_Rez3_OF_KCD,KC_DI.Q_Rez3_OF_KCD);
//Выключатель 4 «Резерв» отключен
DI_Processing(KC_DI_DRV.Q_Rez4_OF,false,KC_DI_Settings.Q_Rez4_OF,KC_DI_FromHMI.Q_Rez4_OF,KC_DI_ToHMI.Q_Rez4_OF,KC_DI_Internal.Q_Rez4_OF,KC_DI.Q_Rez4_OF);
//Выключатель 4 «Резерв» отключен. КЦД
DI_Processing(KC_DI_DRV.Q_Rez4_OF_KCD,false,KC_DI_Settings.Q_Rez4_OF_KCD,KC_DI_FromHMI.Q_Rez4_OF_KCD,KC_DI_ToHMI.Q_Rez4_OF_KCD,KC_DI_Internal.Q_Rez4_OF_KCD,KC_DI.Q_Rez4_OF_KCD);
//Выключатель 5 «Резерв» отключен
DI_Processing(KC_DI_DRV.Q_Rez5_OF,false,KC_DI_Settings.Q_Rez5_OF,KC_DI_FromHMI.Q_Rez5_OF,KC_DI_ToHMI.Q_Rez5_OF,KC_DI_Internal.Q_Rez5_OF,KC_DI.Q_Rez5_OF);
//Выключатель 5 «Резерв» отключен. КЦД
DI_Processing(KC_DI_DRV.Q_Rez5_OF_KCD,false,KC_DI_Settings.Q_Rez5_OF_KCD,KC_DI_FromHMI.Q_Rez5_OF_KCD,KC_DI_ToHMI.Q_Rez5_OF_KCD,KC_DI_Internal.Q_Rez5_OF_KCD,KC_DI.Q_Rez5_OF_KCD);
//Выключатель блока электротехнического ГПА №1.3 отключен
DI_Processing(KC_DI_DRV.Q_ETO3_OF,false,KC_DI_Settings.Q_ETO3_OF,KC_DI_FromHMI.Q_ETO3_OF,KC_DI_ToHMI.Q_ETO3_OF,KC_DI_Internal.Q_ETO3_OF,KC_DI.Q_ETO3_OF);
//Выключатель блока электротехнического ГПА №1.3 отключен. КЦД
DI_Processing(KC_DI_DRV.Q_ETO3_OF_KCD,false,KC_DI_Settings.Q_ETO3_OF_KCD,KC_DI_FromHMI.Q_ETO3_OF_KCD,KC_DI_ToHMI.Q_ETO3_OF_KCD,KC_DI_Internal.Q_ETO3_OF_KCD,KC_DI.Q_ETO3_OF_KCD);
//Выключатель шкафа 2АСУ ЭС, ввод №4 отключен
DI_Processing(KC_DI_DRV.Q_ASUES4_OF,false,KC_DI_Settings.Q_ASUES4_OF,KC_DI_FromHMI.Q_ASUES4_OF,KC_DI_ToHMI.Q_ASUES4_OF,KC_DI_Internal.Q_ASUES4_OF,KC_DI.Q_ASUES4_OF);
//Выключатель шкафа 2АСУ ЭС, ввод №4 отключен. КЦД
DI_Processing(KC_DI_DRV.Q_ASUES4_OF_KCD,false,KC_DI_Settings.Q_ASUES4_OF_KCD,KC_DI_FromHMI.Q_ASUES4_OF_KCD,KC_DI_ToHMI.Q_ASUES4_OF_KCD,KC_DI_Internal.Q_ASUES4_OF_KCD,KC_DI.Q_ASUES4_OF_KCD);
//Выключатель КТП ПЭБа. Шкаф №14 отключен
DI_Processing(KC_DI_DRV.Q_KTP_PEB14_OF,false,KC_DI_Settings.Q_KTP_PEB14_OF,KC_DI_FromHMI.Q_KTP_PEB14_OF,KC_DI_ToHMI.Q_KTP_PEB14_OF,KC_DI_Internal.Q_KTP_PEB14_OF,KC_DI.Q_KTP_PEB14_OF);
//Выключатель КТП ПЭБа. Шкаф №14 отключен. КЦД
DI_Processing(KC_DI_DRV.Q_KTP_PEB14_OF_KCD,false,KC_DI_Settings.Q_KTP_PEB14_OF_KCD,KC_DI_FromHMI.Q_KTP_PEB14_OF_KCD,KC_DI_ToHMI.Q_KTP_PEB14_OF_KCD,KC_DI_Internal.Q_KTP_PEB14_OF_KCD,KC_DI.Q_KTP_PEB14_OF_KCD);
//Выключатель 6 «Резерв» отключен
DI_Processing(KC_DI_DRV.Q_Rez6_OF,false,KC_DI_Settings.Q_Rez6_OF,KC_DI_FromHMI.Q_Rez6_OF,KC_DI_ToHMI.Q_Rez6_OF,KC_DI_Internal.Q_Rez6_OF,KC_DI.Q_Rez6_OF);
//Выключатель 6 «Резерв» отключен. КЦД
DI_Processing(KC_DI_DRV.Q_Rez6_OF_KCD,false,KC_DI_Settings.Q_Rez6_OF_KCD,KC_DI_FromHMI.Q_Rez6_OF_KCD,KC_DI_ToHMI.Q_Rez6_OF_KCD,KC_DI_Internal.Q_Rez6_OF_KCD,KC_DI.Q_Rez6_OF_KCD);
//Выключатель 7 «Резерв» отключен
DI_Processing(KC_DI_DRV.Q_Rez7_OF,false,KC_DI_Settings.Q_Rez7_OF,KC_DI_FromHMI.Q_Rez7_OF,KC_DI_ToHMI.Q_Rez7_OF,KC_DI_Internal.Q_Rez7_OF,KC_DI.Q_Rez7_OF);
//Выключатель 7 «Резерв» отключен. КЦД
DI_Processing(KC_DI_DRV.Q_Rez7_OF_KCD,false,KC_DI_Settings.Q_Rez7_OF_KCD,KC_DI_FromHMI.Q_Rez7_OF_KCD,KC_DI_ToHMI.Q_Rez7_OF_KCD,KC_DI_Internal.Q_Rez7_OF_KCD,KC_DI.Q_Rez7_OF_KCD);
//Выключатель 8 «Резерв» отключен 
DI_Processing(KC_DI_DRV.Q_Rez8_OF,false,KC_DI_Settings.Q_Rez8_OF,KC_DI_FromHMI.Q_Rez8_OF,KC_DI_ToHMI.Q_Rez8_OF,KC_DI_Internal.Q_Rez8_OF,KC_DI.Q_Rez8_OF);
//Выключатель 8 «Резерв» отключен . КЦД
DI_Processing(KC_DI_DRV.Q_Rez8_OF_KCD,false,KC_DI_Settings.Q_Rez8_OF_KCD,KC_DI_FromHMI.Q_Rez8_OF_KCD,KC_DI_ToHMI.Q_Rez8_OF_KCD,KC_DI_Internal.Q_Rez8_OF_KCD,KC_DI.Q_Rez8_OF_KCD);
//Выключатель 9 «Резерв» отключен
DI_Processing(KC_DI_DRV.Q_Rez9_OF,false,KC_DI_Settings.Q_Rez9_OF,KC_DI_FromHMI.Q_Rez9_OF,KC_DI_ToHMI.Q_Rez9_OF,KC_DI_Internal.Q_Rez9_OF,KC_DI.Q_Rez9_OF);
//Выключатель 9 «Резерв» отключен. КЦД
DI_Processing(KC_DI_DRV.Q_Rez9_OF_KCD,false,KC_DI_Settings.Q_Rez9_OF_KCD,KC_DI_FromHMI.Q_Rez9_OF_KCD,KC_DI_ToHMI.Q_Rez9_OF_KCD,KC_DI_Internal.Q_Rez9_OF_KCD,KC_DI.Q_Rez9_OF_KCD);
//Выключатель 10 «Резерв» отключен
DI_Processing(KC_DI_DRV.Q_Rez10_OF,false,KC_DI_Settings.Q_Rez10_OF,KC_DI_FromHMI.Q_Rez10_OF,KC_DI_ToHMI.Q_Rez10_OF,KC_DI_Internal.Q_Rez10_OF,KC_DI.Q_Rez10_OF);
//Выключатель 10 «Резерв» отключен. КЦД
DI_Processing(KC_DI_DRV.Q_Rez10_OF_KCD,false,KC_DI_Settings.Q_Rez10_OF_KCD,KC_DI_FromHMI.Q_Rez10_OF_KCD,KC_DI_ToHMI.Q_Rez10_OF_KCD,KC_DI_Internal.Q_Rez10_OF_KCD,KC_DI.Q_Rez10_OF_KCD);
//Выключатель Q10 аварийное освещение ПЭБ отключен
DI_Processing(KC_DI_DRV.Q_Lamp_PEB_A_OF,false,KC_DI_Settings.Q_Lamp_PEB_A_OF,KC_DI_FromHMI.Q_Lamp_PEB_A_OF,KC_DI_ToHMI.Q_Lamp_PEB_A_OF,KC_DI_Internal.Q_Lamp_PEB_A_OF,KC_DI.Q_Lamp_PEB_A_OF);
//Выключатель Q10 аварийное освещение ПЭБ отключен. КЦД
DI_Processing(KC_DI_DRV.Q_Lamp_PEB_A_OF_KCD,false,KC_DI_Settings.Q_Lamp_PEB_A_OF_KCD,KC_DI_FromHMI.Q_Lamp_PEB_A_OF_KCD,KC_DI_ToHMI.Q_Lamp_PEB_A_OF_KCD,KC_DI_Internal.Q_Lamp_PEB_A_OF_KCD,KC_DI.Q_Lamp_PEB_A_OF_KCD);
//Выключатель Насосная метанола (Шкаф ЛИС НМ) отключен
DI_Processing(KC_DI_DRV.Q_NasMet_NM_OF,false,KC_DI_Settings.Q_NasMet_NM_OF,KC_DI_FromHMI.Q_NasMet_NM_OF,KC_DI_ToHMI.Q_NasMet_NM_OF,KC_DI_Internal.Q_NasMet_NM_OF,KC_DI.Q_NasMet_NM_OF);
//Выключатель Насосная метанола (Шкаф ЛИС НМ) отключен. КЦД
DI_Processing(KC_DI_DRV.Q_NasMet_NM_OF_KCD,false,KC_DI_Settings.Q_NasMet_NM_OF_KCD,KC_DI_FromHMI.Q_NasMet_NM_OF_KCD,KC_DI_ToHMI.Q_NasMet_NM_OF_KCD,KC_DI_Internal.Q_NasMet_NM_OF_KCD,KC_DI.Q_NasMet_NM_OF_KCD);
//Выключатель Насосная метанола (Шкаф ПК) отключен
DI_Processing(KC_DI_DRV.Q_NasMet_PK_OF,false,KC_DI_Settings.Q_NasMet_PK_OF,KC_DI_FromHMI.Q_NasMet_PK_OF,KC_DI_ToHMI.Q_NasMet_PK_OF,KC_DI_Internal.Q_NasMet_PK_OF,KC_DI.Q_NasMet_PK_OF);
//Выключатель Насосная метанола (Шкаф ПК) отключен. КЦД
DI_Processing(KC_DI_DRV.Q_NasMet_PK_OF_KCD,false,KC_DI_Settings.Q_NasMet_PK_OF_KCD,KC_DI_FromHMI.Q_NasMet_PK_OF_KCD,KC_DI_ToHMI.Q_NasMet_PK_OF_KCD,KC_DI_Internal.Q_NasMet_PK_OF_KCD,KC_DI.Q_NasMet_PK_OF_KCD);
//Выключатель УЗРГ (Шкаф ЛИС УЗРГ) отключен
DI_Processing(KC_DI_DRV.Q_UZRG_OF,false,KC_DI_Settings.Q_UZRG_OF,KC_DI_FromHMI.Q_UZRG_OF,KC_DI_ToHMI.Q_UZRG_OF,KC_DI_Internal.Q_UZRG_OF,KC_DI.Q_UZRG_OF);
//Выключатель УЗРГ (Шкаф ЛИС УЗРГ) отключен. КЦД
DI_Processing(KC_DI_DRV.Q_UZRG_OF_KCD,false,KC_DI_Settings.Q_UZRG_OF_KCD,KC_DI_FromHMI.Q_UZRG_OF_KCD,KC_DI_ToHMI.Q_UZRG_OF_KCD,KC_DI_Internal.Q_UZRG_OF_KCD,KC_DI.Q_UZRG_OF_KCD);
//Выключатель УЗРГ (Шкаф ЛИС УНТС) отключен
DI_Processing(KC_DI_DRV.Q_UZRG_NTS_OF,false,KC_DI_Settings.Q_UZRG_NTS_OF,KC_DI_FromHMI.Q_UZRG_NTS_OF,KC_DI_ToHMI.Q_UZRG_NTS_OF,KC_DI_Internal.Q_UZRG_NTS_OF,KC_DI.Q_UZRG_NTS_OF);
//Выключатель УЗРГ (Шкаф ЛИС УНТС) отключен. КЦД
DI_Processing(KC_DI_DRV.Q_UZRG_NTS_OF_KCD,false,KC_DI_Settings.Q_UZRG_NTS_OF_KCD,KC_DI_FromHMI.Q_UZRG_NTS_OF_KCD,KC_DI_ToHMI.Q_UZRG_NTS_OF_KCD,KC_DI_Internal.Q_UZRG_NTS_OF_KCD,KC_DI.Q_UZRG_NTS_OF_KCD);
//Выключатель шкафа УПИ АСП отключен
DI_Processing(KC_DI_DRV.Q_UPI_OF,false,KC_DI_Settings.Q_UPI_OF,KC_DI_FromHMI.Q_UPI_OF,KC_DI_ToHMI.Q_UPI_OF,KC_DI_Internal.Q_UPI_OF,KC_DI.Q_UPI_OF);
//Выключатель шкафа УПИ АСП отключен. КЦД
DI_Processing(KC_DI_DRV.Q_UPI_OF_KCD,false,KC_DI_Settings.Q_UPI_OF_KCD,KC_DI_FromHMI.Q_UPI_OF_KCD,KC_DI_ToHMI.Q_UPI_OF_KCD,KC_DI_Internal.Q_UPI_OF_KCD,KC_DI.Q_UPI_OF_KCD);
//Выключатель шкафа ЛИС КЦ отключен
DI_Processing(KC_DI_DRV.Q_LISKC_OF,false,KC_DI_Settings.Q_LISKC_OF,KC_DI_FromHMI.Q_LISKC_OF,KC_DI_ToHMI.Q_LISKC_OF,KC_DI_Internal.Q_LISKC_OF,KC_DI.Q_LISKC_OF);
//Выключатель шкафа ЛИС КЦ отключен. КЦД
DI_Processing(KC_DI_DRV.Q_LISKC_OF_KCD,false,KC_DI_Settings.Q_LISKC_OF_KCD,KC_DI_FromHMI.Q_LISKC_OF_KCD,KC_DI_ToHMI.Q_LISKC_OF_KCD,KC_DI_Internal.Q_LISKC_OF_KCD,KC_DI.Q_LISKC_OF_KCD);
//Выключатель 11 «Резерв» отключен
DI_Processing(KC_DI_DRV.Q_Rez11_OF,false,KC_DI_Settings.Q_Rez11_OF,KC_DI_FromHMI.Q_Rez11_OF,KC_DI_ToHMI.Q_Rez11_OF,KC_DI_Internal.Q_Rez11_OF,KC_DI.Q_Rez11_OF);
//Выключатель 11 «Резерв» отключен. КЦД
DI_Processing(KC_DI_DRV.Q_Rez11_OF_KCD,false,KC_DI_Settings.Q_Rez11_OF_KCD,KC_DI_FromHMI.Q_Rez11_OF_KCD,KC_DI_ToHMI.Q_Rez11_OF_KCD,KC_DI_Internal.Q_Rez11_OF_KCD,KC_DI.Q_Rez11_OF_KCD);
//Выключатель 12 «Резерв» отключен
DI_Processing(KC_DI_DRV.Q_Rez12_OF,false,KC_DI_Settings.Q_Rez12_OF,KC_DI_FromHMI.Q_Rez12_OF,KC_DI_ToHMI.Q_Rez12_OF,KC_DI_Internal.Q_Rez12_OF,KC_DI.Q_Rez12_OF);
//Выключатель 12 «Резерв» отключен. КЦД
DI_Processing(KC_DI_DRV.Q_Rez12_OF_KCD,false,KC_DI_Settings.Q_Rez12_OF_KCD,KC_DI_FromHMI.Q_Rez12_OF_KCD,KC_DI_ToHMI.Q_Rez12_OF_KCD,KC_DI_Internal.Q_Rez12_OF_KCD,KC_DI.Q_Rez12_OF_KCD);
//Выключатель Блок БК-200 отключен 
DI_Processing(KC_DI_DRV.Q_BK200_OF,false,KC_DI_Settings.Q_BK200_OF,KC_DI_FromHMI.Q_BK200_OF,KC_DI_ToHMI.Q_BK200_OF,KC_DI_Internal.Q_BK200_OF,KC_DI.Q_BK200_OF);
//Выключатель Блок БК-200 отключен. КЦД 
DI_Processing(KC_DI_DRV.Q_BK200_OF_KCD,false,KC_DI_Settings.Q_BK200_OF_KCD,KC_DI_FromHMI.Q_BK200_OF_KCD,KC_DI_ToHMI.Q_BK200_OF_KCD,KC_DI_Internal.Q_BK200_OF_KCD,KC_DI.Q_BK200_OF_KCD);
//Выключатель Насосная противопожарного водоснабжения (Шкаф ЛИС ВОС) отключен
DI_Processing(KC_DI_DRV.Q_NasPPV_OF,false,KC_DI_Settings.Q_NasPPV_OF,KC_DI_FromHMI.Q_NasPPV_OF,KC_DI_ToHMI.Q_NasPPV_OF,KC_DI_Internal.Q_NasPPV_OF,KC_DI.Q_NasPPV_OF);
//Выключатель Насосная противопожарного водоснабжения (Шкаф ЛИС ВОС) отключен. КЦД
DI_Processing(KC_DI_DRV.Q_NasPPV_OF_KCD,false,KC_DI_Settings.Q_NasPPV_OF_KCD,KC_DI_FromHMI.Q_NasPPV_OF_KCD,KC_DI_ToHMI.Q_NasPPV_OF_KCD,KC_DI_Internal.Q_NasPPV_OF_KCD,KC_DI.Q_NasPPV_OF_KCD);
//Выключатель Котельная (Шкаф ЛИС) отключен
DI_Processing(KC_DI_DRV.Q_Kotel_OF,false,KC_DI_Settings.Q_Kotel_OF,KC_DI_FromHMI.Q_Kotel_OF,KC_DI_ToHMI.Q_Kotel_OF,KC_DI_Internal.Q_Kotel_OF,KC_DI.Q_Kotel_OF);
//Выключатель Котельная (Шкаф ЛИС) отключен. КЦД
DI_Processing(KC_DI_DRV.Q_Kotel_OF_KCD,false,KC_DI_Settings.Q_Kotel_OF_KCD,KC_DI_FromHMI.Q_Kotel_OF_KCD,KC_DI_ToHMI.Q_Kotel_OF_KCD,KC_DI_Internal.Q_Kotel_OF_KCD,KC_DI.Q_Kotel_OF_KCD);
//Выключатель Склад ГСМ (Шкаф ЛИС ГСМ) отключен
DI_Processing(KC_DI_DRV.Q_SkGSM_OF,false,KC_DI_Settings.Q_SkGSM_OF,KC_DI_FromHMI.Q_SkGSM_OF,KC_DI_ToHMI.Q_SkGSM_OF,KC_DI_Internal.Q_SkGSM_OF,KC_DI.Q_SkGSM_OF);
//Выключатель Склад ГСМ (Шкаф ЛИС ГСМ) отключен. КЦД
DI_Processing(KC_DI_DRV.Q_SkGSM_OF_KCD,false,KC_DI_Settings.Q_SkGSM_OF_KCD,KC_DI_FromHMI.Q_SkGSM_OF_KCD,KC_DI_ToHMI.Q_SkGSM_OF_KCD,KC_DI_Internal.Q_SkGSM_OF_KCD,KC_DI.Q_SkGSM_OF_KCD);
//Выключатель Блок-бокс УПТПГ отключен
DI_Processing(KC_DI_DRV.Q_BB_UPTIG_OF,false,KC_DI_Settings.Q_BB_UPTIG_OF,KC_DI_FromHMI.Q_BB_UPTIG_OF,KC_DI_ToHMI.Q_BB_UPTIG_OF,KC_DI_Internal.Q_BB_UPTIG_OF,KC_DI.Q_BB_UPTIG_OF);
//Выключатель Блок-бокс УПТПГ отключен. КЦД
DI_Processing(KC_DI_DRV.Q_SBB_UPTIG_OF_KCD,false,KC_DI_Settings.Q_SBB_UPTIG_OF_KCD,KC_DI_FromHMI.Q_SBB_UPTIG_OF_KCD,KC_DI_ToHMI.Q_SBB_UPTIG_OF_KCD,KC_DI_Internal.Q_SBB_UPTIG_OF_KCD,KC_DI.Q_SBB_UPTIG_OF_KCD);
//Выключатель КТП ПЭБ (Шкаф САУ АВО) отключен
DI_Processing(KC_DI_DRV.Q_KTP_AVOG_OF,false,KC_DI_Settings.Q_KTP_AVOG_OF,KC_DI_FromHMI.Q_KTP_AVOG_OF,KC_DI_ToHMI.Q_KTP_AVOG_OF,KC_DI_Internal.Q_KTP_AVOG_OF,KC_DI.Q_KTP_AVOG_OF);
//Выключатель КТП ПЭБ (Шкаф САУ АВО) отключен. КЦД
DI_Processing(KC_DI_DRV.Q_KTP_AVOG_OF_KCD,false,KC_DI_Settings.Q_KTP_AVOG_OF_KCD,KC_DI_FromHMI.Q_KTP_AVOG_OF_KCD,KC_DI_ToHMI.Q_KTP_AVOG_OF_KCD,KC_DI_Internal.Q_KTP_AVOG_OF_KCD,KC_DI.Q_KTP_AVOG_OF_KCD);
//Выключатель 13 «Резерв» отключен
DI_Processing(KC_DI_DRV.Q_Rez13_OF,false,KC_DI_Settings.Q_Rez13_OF,KC_DI_FromHMI.Q_Rez13_OF,KC_DI_ToHMI.Q_Rez13_OF,KC_DI_Internal.Q_Rez13_OF,KC_DI.Q_Rez13_OF);
//Выключатель 13 «Резерв» отключен. КЦД
DI_Processing(KC_DI_DRV.Q_Rez13_OF_KCD,false,KC_DI_Settings.Q_Rez13_OF_KCD,KC_DI_FromHMI.Q_Rez13_OF_KCD,KC_DI_ToHMI.Q_Rez13_OF_KCD,KC_DI_Internal.Q_Rez13_OF_KCD,KC_DI.Q_Rez13_OF_KCD);
//Выключатель 14 «Резерв» отключен
DI_Processing(KC_DI_DRV.Q_Rez14_OF,false,KC_DI_Settings.Q_Rez14_OF,KC_DI_FromHMI.Q_Rez14_OF,KC_DI_ToHMI.Q_Rez14_OF,KC_DI_Internal.Q_Rez14_OF,KC_DI.Q_Rez14_OF);
//Выключатель 14 «Резерв» отключен. КЦД
DI_Processing(KC_DI_DRV.Q_Rez14_OF_KCD,false,KC_DI_Settings.Q_Rez14_OF_KCD,KC_DI_FromHMI.Q_Rez14_OF_KCD,KC_DI_ToHMI.Q_Rez14_OF_KCD,KC_DI_Internal.Q_Rez14_OF_KCD,KC_DI.Q_Rez14_OF_KCD);
//«Земля» на шинах
DI_Processing(KC_DI_DRV.Rsh_Bad,false,KC_DI_Settings.Rsh_Bad,KC_DI_FromHMI.Rsh_Bad,KC_DI_ToHMI.Rsh_Bad,KC_DI_Internal.Rsh_Bad,KC_DI.Rsh_Bad);
//«Земля» на шинах. КЦД
DI_Processing(KC_DI_DRV.Rsh_Bad_KCD,false,KC_DI_Settings.Rsh_Bad_KCD,KC_DI_FromHMI.Rsh_Bad_KCD,KC_DI_ToHMI.Rsh_Bad_KCD,KC_DI_Internal.Rsh_Bad_KCD,KC_DI.Rsh_Bad_KCD);
//«Земля» на фидерах
DI_Processing(KC_DI_DRV.Rf_Bad,false,KC_DI_Settings.Rf_Bad,KC_DI_FromHMI.Rf_Bad,KC_DI_ToHMI.Rf_Bad,KC_DI_Internal.Rf_Bad,KC_DI.Rf_Bad);
//«Земля» на фидерах. КЦД
DI_Processing(KC_DI_DRV.Rf_Bad_KCD,false,KC_DI_Settings.Rf_Bad_KCD,KC_DI_FromHMI.Rf_Bad_KCD,KC_DI_ToHMI.Rf_Bad_KCD,KC_DI_Internal.Rf_Bad_KCD,KC_DI.Rf_Bad_KCD);
//Пониженное напряжение
DI_Processing(KC_DI_DRV.U_lo,false,KC_DI_Settings.U_lo,KC_DI_FromHMI.U_lo,KC_DI_ToHMI.U_lo,KC_DI_Internal.U_lo,KC_DI.U_lo);
//Пониженное напряжение. КЦД
DI_Processing(KC_DI_DRV.U_lo_KCD,false,KC_DI_Settings.U_lo_KCD,KC_DI_FromHMI.U_lo_KCD,KC_DI_ToHMI.U_lo_KCD,KC_DI_Internal.U_lo_KCD,KC_DI.U_lo_KCD);
//Повышенное напряжение 
DI_Processing(KC_DI_DRV.U_hi,false,KC_DI_Settings.U_hi,KC_DI_FromHMI.U_hi,KC_DI_ToHMI.U_hi,KC_DI_Internal.U_hi,KC_DI.U_hi);
//Повышенное напряжение. КЦД 
DI_Processing(KC_DI_DRV.U_hi_KCD,false,KC_DI_Settings.U_hi_KCD,KC_DI_FromHMI.U_hi_KCD,KC_DI_ToHMI.U_hi_KCD,KC_DI_Internal.U_hi_KCD,KC_DI.U_hi_KCD);
//АОcc от ПРУ КЦ 
DI_Processing(KC_DI_DRV.Kn_AOss_PRU_nz,false,KC_DI_Settings.Kn_AOss_PRU_nz,KC_DI_FromHMI.Kn_AOss_PRU_nz,KC_DI_ToHMI.Kn_AOss_PRU_nz,KC_DI_Internal.Kn_AOss_PRU_nz,KC_DI.Kn_AOss_PRU_nz);
//АОcc от ПРУ КЦ. КЦД 
DI_Processing(KC_DI_DRV.Kn_AOss_PRU_KCD,false,KC_DI_Settings.Kn_AOss_PRU_KCD,KC_DI_FromHMI.Kn_AOss_PRU_KCD,KC_DI_ToHMI.Kn_AOss_PRU_KCD,KC_DI_Internal.Kn_AOss_PRU_KCD,KC_DI.Kn_AOss_PRU_KCD);
//АОбc от ПРУ КЦ 
DI_Processing(KC_DI_DRV.Kn_AObs_PRU_nz,false,KC_DI_Settings.Kn_AObs_PRU_nz,KC_DI_FromHMI.Kn_AObs_PRU_nz,KC_DI_ToHMI.Kn_AObs_PRU_nz,KC_DI_Internal.Kn_AObs_PRU_nz,KC_DI.Kn_AObs_PRU_nz);
//АОбc от ПРУ КЦ. КЦД 
DI_Processing(KC_DI_DRV.Kn_AObs_PRU_KCD,false,KC_DI_Settings.Kn_AObs_PRU_KCD,KC_DI_FromHMI.Kn_AObs_PRU_KCD,KC_DI_ToHMI.Kn_AObs_PRU_KCD,KC_DI_Internal.Kn_AObs_PRU_KCD,KC_DI.Kn_AObs_PRU_KCD);
//Пожар в здании проходной
DI_Processing(KC_DI_DRV.Fire_in_ZdGate,false,KC_DI_Settings.Fire_in_ZdGate,KC_DI_FromHMI.Fire_in_ZdGate,KC_DI_ToHMI.Fire_in_ZdGate,KC_DI_Internal.Fire_in_ZdGate,KC_DI.Fire_in_ZdGate);
//Пожар в здании проходной. КЦД
DI_Processing(KC_DI_DRV.Fire_in_ZdGate_KCD,false,KC_DI_Settings.Fire_in_ZdGate_KCD,KC_DI_FromHMI.Fire_in_ZdGate_KCD,KC_DI_ToHMI.Fire_in_ZdGate_KCD,KC_DI_Internal.Fire_in_ZdGate_KCD,KC_DI.Fire_in_ZdGate_KCD);
//Пожар в здании насосной противопожарного водоснабжения
DI_Processing(KC_DI_DRV.Fire_in_NasPPV,false,KC_DI_Settings.Fire_in_NasPPV,KC_DI_FromHMI.Fire_in_NasPPV,KC_DI_ToHMI.Fire_in_NasPPV,KC_DI_Internal.Fire_in_NasPPV,KC_DI.Fire_in_NasPPV);
//Пожар в здании насосной противопожарного водоснабжения. КЦД
DI_Processing(KC_DI_DRV.Fire_in_NasPPV_KCD,false,KC_DI_Settings.Fire_in_NasPPV_KCD,KC_DI_FromHMI.Fire_in_NasPPV_KCD,KC_DI_ToHMI.Fire_in_NasPPV_KCD,KC_DI_Internal.Fire_in_NasPPV_KCD,KC_DI.Fire_in_NasPPV_KCD);
//Пожар в здании РЭБ 
DI_Processing(KC_DI_DRV.Fire_in_REB,false,KC_DI_Settings.Fire_in_REB,KC_DI_FromHMI.Fire_in_REB,KC_DI_ToHMI.Fire_in_REB,KC_DI_Internal.Fire_in_REB,KC_DI.Fire_in_REB);
//Пожар в здании РЭБ. КЦД 
DI_Processing(KC_DI_DRV.Fire_in_REB_KCD,false,KC_DI_Settings.Fire_in_REB_KCD,KC_DI_FromHMI.Fire_in_REB_KCD,KC_DI_ToHMI.Fire_in_REB_KCD,KC_DI_Internal.Fire_in_REB_KCD,KC_DI.Fire_in_REB_KCD);
//Пожар в здании очистных сооружений сточных вод
DI_Processing(KC_DI_DRV.Fire_in_WWplant,false,KC_DI_Settings.Fire_in_WWplant,KC_DI_FromHMI.Fire_in_WWplant,KC_DI_ToHMI.Fire_in_WWplant,KC_DI_Internal.Fire_in_WWplant,KC_DI.Fire_in_WWplant);
//Пожар в здании очистных сооружений сточных вод. КЦД
DI_Processing(KC_DI_DRV.Fire_in_Wwplant,false,KC_DI_Settings.Fire_in_Wwplant,KC_DI_FromHMI.Fire_in_Wwplant,KC_DI_ToHMI.Fire_in_Wwplant,KC_DI_Internal.Fire_in_Wwplant,KC_DI.Fire_in_Wwplant);
//Резерв
DI_Processing(KC_DI_DRV.Res_0,false,KC_DI_Settings.Res_0,KC_DI_FromHMI.Res_0,KC_DI_ToHMI.Res_0,KC_DI_Internal.Res_0,KC_DI.Res_0);
//Резерв
DI_Processing(KC_DI_DRV.Res_1,false,KC_DI_Settings.Res_1,KC_DI_FromHMI.Res_1,KC_DI_ToHMI.Res_1,KC_DI_Internal.Res_1,KC_DI.Res_1);
//Резерв
DI_Processing(KC_DI_DRV.Res_2,false,KC_DI_Settings.Res_2,KC_DI_FromHMI.Res_2,KC_DI_ToHMI.Res_2,KC_DI_Internal.Res_2,KC_DI.Res_2);
//Резерв
DI_Processing(KC_DI_DRV.Res_3,false,KC_DI_Settings.Res_3,KC_DI_FromHMI.Res_3,KC_DI_ToHMI.Res_3,KC_DI_Internal.Res_3,KC_DI.Res_3);
//Резерв
DI_Processing(KC_DI_DRV.Res_4,false,KC_DI_Settings.Res_4,KC_DI_FromHMI.Res_4,KC_DI_ToHMI.Res_4,KC_DI_Internal.Res_4,KC_DI.Res_4);
//Резерв
DI_Processing(KC_DI_DRV.Res_5,false,KC_DI_Settings.Res_5,KC_DI_FromHMI.Res_5,KC_DI_ToHMI.Res_5,KC_DI_Internal.Res_5,KC_DI.Res_5);
//Резерв
DI_Processing(KC_DI_DRV.Res_6,false,KC_DI_Settings.Res_6,KC_DI_FromHMI.Res_6,KC_DI_ToHMI.Res_6,KC_DI_Internal.Res_6,KC_DI.Res_6);
//Резерв
DI_Processing(KC_DI_DRV.Res_7,false,KC_DI_Settings.Res_7,KC_DI_FromHMI.Res_7,KC_DI_ToHMI.Res_7,KC_DI_Internal.Res_7,KC_DI.Res_7);
//Наличие ~220В в УC 
DI_Processing(KC_DI_DRV.U_AC220_US,false,KC_DI_Settings.U_AC220_US,KC_DI_FromHMI.U_AC220_US,KC_DI_ToHMI.U_AC220_US,KC_DI_Internal.U_AC220_US,KC_DI.U_AC220_US);
//Дверь УК открыта
DI_Processing(KC_DI_DRV.Dver_UK_open,false,KC_DI_Settings.Dver_UK_open,KC_DI_FromHMI.Dver_UK_open,KC_DI_ToHMI.Dver_UK_open,KC_DI_Internal.Dver_UK_open,KC_DI.Dver_UK_open);
//УК неисправен
DI_Processing(KC_DI_DRV.UK_Bad,false,KC_DI_Settings.UK_Bad,KC_DI_FromHMI.UK_Bad,KC_DI_ToHMI.UK_Bad,KC_DI_Internal.UK_Bad,KC_DI.UK_Bad);
//Наличие ~220В в УК 
DI_Processing(KC_DI_DRV.U_AC220_UK,false,KC_DI_Settings.U_AC220_UK,KC_DI_FromHMI.U_AC220_UK,KC_DI_ToHMI.U_AC220_UK,KC_DI_Internal.U_AC220_UK,KC_DI.U_AC220_UK);
//Дверь УС открыта 
DI_Processing(KC_DI_DRV.Dver_US_open,false,KC_DI_Settings.Dver_US_open,KC_DI_FromHMI.Dver_US_open,KC_DI_ToHMI.Dver_US_open,KC_DI_Internal.Dver_US_open,KC_DI.Dver_US_open);
//Температура в УС больше 25 °С 
DI_Processing(KC_DI_DRV.T_US_25v,false,KC_DI_Settings.T_US_25v,KC_DI_FromHMI.T_US_25v,KC_DI_ToHMI.T_US_25v,KC_DI_Internal.T_US_25v,KC_DI.T_US_25v);
//Температура в УС больше 30 °С 
DI_Processing(KC_DI_DRV.T_US_30v,false,KC_DI_Settings.T_US_30v,KC_DI_FromHMI.T_US_30v,KC_DI_ToHMI.T_US_30v,KC_DI_Internal.T_US_30v,KC_DI.T_US_30v);
//Превышение температуры в пульте 
DI_Processing(KC_DI_DRV.T_pult_max,false,KC_DI_Settings.T_pult_max,KC_DI_FromHMI.T_pult_max,KC_DI_ToHMI.T_pult_max,KC_DI_Internal.T_pult_max,KC_DI.T_pult_max);
//АОcc от ПРУ КЦ
DI_Processing(KC_DI_DRV.Kn_AOss_PRU,false,KC_DI_Settings.Kn_AOss_PRU,KC_DI_FromHMI.Kn_AOss_PRU,KC_DI_ToHMI.Kn_AOss_PRU,KC_DI_Internal.Kn_AOss_PRU,KC_DI.Kn_AOss_PRU);
//АОбc от ПРУ КЦ 
DI_Processing(KC_DI_DRV.Kn_AObs_PRU,false,KC_DI_Settings.Kn_AObs_PRU,KC_DI_FromHMI.Kn_AObs_PRU,KC_DI_ToHMI.Kn_AObs_PRU,KC_DI_Internal.Kn_AObs_PRU,KC_DI.Kn_AObs_PRU);
//Неисправность контроллера САУ ГПА №4 
DI_Processing(KC_DI_DRV.PLC_GPA4_Bad,false,KC_DI_Settings.PLC_GPA4_Bad,KC_DI_FromHMI.PLC_GPA4_Bad,KC_DI_ToHMI.PLC_GPA4_Bad,KC_DI_Internal.PLC_GPA4_Bad,KC_DI.PLC_GPA4_Bad);
//Неисправность контроллера САУ ГПА №5
DI_Processing(KC_DI_DRV.PLC_GPA5_Bad,false,KC_DI_Settings.PLC_GPA5_Bad,KC_DI_FromHMI.PLC_GPA5_Bad,KC_DI_ToHMI.PLC_GPA5_Bad,KC_DI_Internal.PLC_GPA5_Bad,KC_DI.PLC_GPA5_Bad);
//Неисправность контроллера САУ ГПА №6
DI_Processing(KC_DI_DRV.PLC_GPA6_Bad,false,KC_DI_Settings.PLC_GPA6_Bad,KC_DI_FromHMI.PLC_GPA6_Bad,KC_DI_ToHMI.PLC_GPA6_Bad,KC_DI_Internal.PLC_GPA6_Bad,KC_DI.PLC_GPA6_Bad);
//Резерв 
DI_Processing(KC_DI_DRV.Res_8,false,KC_DI_Settings.Res_8,KC_DI_FromHMI.Res_8,KC_DI_ToHMI.Res_8,KC_DI_Internal.Res_8,KC_DI.Res_8);
//Резерв 
DI_Processing(KC_DI_DRV.Res_9,false,KC_DI_Settings.Res_9,KC_DI_FromHMI.Res_9,KC_DI_ToHMI.Res_9,KC_DI_Internal.Res_9,KC_DI.Res_9);
//Резерв 
DI_Processing(KC_DI_DRV.Res_10,false,KC_DI_Settings.Res_10,KC_DI_FromHMI.Res_10,KC_DI_ToHMI.Res_10,KC_DI_Internal.Res_10,KC_DI.Res_10);
//Резерв
DI_Processing(KC_DI_DRV.Res_11,false,KC_DI_Settings.Res_11,KC_DI_FromHMI.Res_11,KC_DI_ToHMI.Res_11,KC_DI_Internal.Res_11,KC_DI.Res_11);
//Резерв
DI_Processing(KC_DI_DRV.Res_12,false,KC_DI_Settings.Res_12,KC_DI_FromHMI.Res_12,KC_DI_ToHMI.Res_12,KC_DI_Internal.Res_12,KC_DI.Res_12);
//ЭО КЦ от ПРУ (+)
DI_Processing(KC_DI_DRV.Kn_EO_PRU,false,KC_DI_Settings.Kn_EO_PRU,KC_DI_FromHMI.Kn_EO_PRU,KC_DI_ToHMI.Kn_EO_PRU,KC_DI_Internal.Kn_EO_PRU,KC_DI.Kn_EO_PRU);
//Общ. ЭО КЦ с ПРУ
DI_Processing(KC_DI_DRV.Res_13,false,KC_DI_Settings.Res_13,KC_DI_FromHMI.Res_13,KC_DI_ToHMI.Res_13,KC_DI_Internal.Res_13,KC_DI.Res_13);
//Резерв
DI_Processing(KC_DI_DRV.Res_14,false,KC_DI_Settings.Res_14,KC_DI_FromHMI.Res_14,KC_DI_ToHMI.Res_14,KC_DI_Internal.Res_14,KC_DI.Res_14);
//Резерв
DI_Processing(KC_DI_DRV.Res_15,false,KC_DI_Settings.Res_15,KC_DI_FromHMI.Res_15,KC_DI_ToHMI.Res_15,KC_DI_Internal.Res_15,KC_DI.Res_15);
//Резерв
DI_Processing(KC_DI_DRV.Res_16,false,KC_DI_Settings.Res_16,KC_DI_FromHMI.Res_16,KC_DI_ToHMI.Res_16,KC_DI_Internal.Res_16,KC_DI.Res_16);
//Резерв
DI_Processing(KC_DI_DRV.Res_17,false,KC_DI_Settings.Res_17,KC_DI_FromHMI.Res_17,KC_DI_ToHMI.Res_17,KC_DI_Internal.Res_17,KC_DI.Res_17);
//Пожар в здании котельной
DI_Processing(KC_DI_DRV.Fire_in_Kot,false,KC_DI_Settings.Fire_in_Kot,KC_DI_FromHMI.Fire_in_Kot,KC_DI_ToHMI.Fire_in_Kot,KC_DI_Internal.Fire_in_Kot,KC_DI.Fire_in_Kot);
//Пожар в здании котельной. КЦД
DI_Processing(KC_DI_DRV.Fire_in_Kot_KCD,false,KC_DI_Settings.Fire_in_Kot_KCD,KC_DI_FromHMI.Fire_in_Kot_KCD,KC_DI_ToHMI.Fire_in_Kot_KCD,KC_DI_Internal.Fire_in_Kot_KCD,KC_DI.Fire_in_Kot_KCD);
//Пожар в здании АДЭС 
DI_Processing(KC_DI_DRV.Fire_in_ZADES,false,KC_DI_Settings.Fire_in_ZADES,KC_DI_FromHMI.Fire_in_ZADES,KC_DI_ToHMI.Fire_in_ZADES,KC_DI_Internal.Fire_in_ZADES,KC_DI.Fire_in_ZADES);
//Пожар в здании АДЭС. КЦД 
DI_Processing(KC_DI_DRV.Fire_in_ZADES_KCD,false,KC_DI_Settings.Fire_in_ZADES_KCD,KC_DI_FromHMI.Fire_in_ZADES_KCD,KC_DI_ToHMI.Fire_in_ZADES_KCD,KC_DI_Internal.Fire_in_ZADES_KCD,KC_DI.Fire_in_ZADES_KCD);
//Пожар в здании ПЭБ
DI_Processing(KC_DI_DRV.Fire_in_PEB,false,KC_DI_Settings.Fire_in_PEB,KC_DI_FromHMI.Fire_in_PEB,KC_DI_ToHMI.Fire_in_PEB,KC_DI_Internal.Fire_in_PEB,KC_DI.Fire_in_PEB);
//Пожар в здании ПЭБ. КЦД
DI_Processing(KC_DI_DRV.Fire_in_PEB_KCD,false,KC_DI_Settings.Fire_in_PEB_KCD,KC_DI_FromHMI.Fire_in_PEB_KCD,KC_DI_ToHMI.Fire_in_PEB_KCD,KC_DI_Internal.Fire_in_PEB_KCD,KC_DI.Fire_in_PEB_KCD);
//Пожар в здании насосной масел
DI_Processing(KC_DI_DRV.Fire_in_NasOil,false,KC_DI_Settings.Fire_in_NasOil,KC_DI_FromHMI.Fire_in_NasOil,KC_DI_ToHMI.Fire_in_NasOil,KC_DI_Internal.Fire_in_NasOil,KC_DI.Fire_in_NasOil);
//Пожар в здании насосной масел. КЦД
DI_Processing(KC_DI_DRV.Fire_in_NasOil_KCD,false,KC_DI_Settings.Fire_in_NasOil_KCD,KC_DI_FromHMI.Fire_in_NasOil_KCD,KC_DI_ToHMI.Fire_in_NasOil_KCD,KC_DI_Internal.Fire_in_NasOil_KCD,KC_DI.Fire_in_NasOil_KCD);
//Пожар в резервуарном парке для хранения дизтоплива
DI_Processing(KC_DI_DRV.Fire_in_FuelTanks,false,KC_DI_Settings.Fire_in_FuelTanks,KC_DI_FromHMI.Fire_in_FuelTanks,KC_DI_ToHMI.Fire_in_FuelTanks,KC_DI_Internal.Fire_in_FuelTanks,KC_DI.Fire_in_FuelTanks);
//Пожар в резервуарном парке для хранения дизтоплива. КЦД
DI_Processing(KC_DI_DRV.Fire_in_FuelTanks_KCD,false,KC_DI_Settings.Fire_in_FuelTanks_KCD,KC_DI_FromHMI.Fire_in_FuelTanks_KCD,KC_DI_ToHMI.Fire_in_FuelTanks_KCD,KC_DI_Internal.Fire_in_FuelTanks_KCD,KC_DI.Fire_in_FuelTanks_KCD);
//Пожар в резервуаре для аварийного слива топлива
DI_Processing(KC_DI_DRV.Fire_in_Fuel_ATanks,false,KC_DI_Settings.Fire_in_Fuel_ATanks,KC_DI_FromHMI.Fire_in_Fuel_ATanks,KC_DI_ToHMI.Fire_in_Fuel_ATanks,KC_DI_Internal.Fire_in_Fuel_ATanks,KC_DI.Fire_in_Fuel_ATanks);
//Пожар в резервуаре для аварийного слива топлива. КЦД
DI_Processing(KC_DI_DRV.Fire_in_Fuel_ATanks_KCD,false,KC_DI_Settings.Fire_in_Fuel_ATanks_KCD,KC_DI_FromHMI.Fire_in_Fuel_ATanks_KCD,KC_DI_ToHMI.Fire_in_Fuel_ATanks_KCD,KC_DI_Internal.Fire_in_Fuel_ATanks_KCD,KC_DI.Fire_in_Fuel_ATanks_KCD);
//Пожар на складе метанола
DI_Processing(KC_DI_DRV.Fire_in_MetanolSklad,false,KC_DI_Settings.Fire_in_MetanolSklad,KC_DI_FromHMI.Fire_in_MetanolSklad,KC_DI_ToHMI.Fire_in_MetanolSklad,KC_DI_Internal.Fire_in_MetanolSklad,KC_DI.Fire_in_MetanolSklad);
//Пожар на складе метанола. КЦД
DI_Processing(KC_DI_DRV.Fire_in_MetanolSklad_KCD,false,KC_DI_Settings.Fire_in_MetanolSklad_KCD,KC_DI_FromHMI.Fire_in_MetanolSklad_KCD,KC_DI_ToHMI.Fire_in_MetanolSklad_KCD,KC_DI_Internal.Fire_in_MetanolSklad_KCD,KC_DI.Fire_in_MetanolSklad_KCD);
//Пожар в здании насосной метанола
DI_Processing(KC_DI_DRV.Fire_in_NasMet,false,KC_DI_Settings.Fire_in_NasMet,KC_DI_FromHMI.Fire_in_NasMet,KC_DI_ToHMI.Fire_in_NasMet,KC_DI_Internal.Fire_in_NasMet,KC_DI.Fire_in_NasMet);
//Пожар в здании насосной метанола. КЦД
DI_Processing(KC_DI_DRV.Fire_in_NasMet_KCD,false,KC_DI_Settings.Fire_in_NasMet_KCD,KC_DI_FromHMI.Fire_in_NasMet_KCD,KC_DI_ToHMI.Fire_in_NasMet_KCD,KC_DI_Internal.Fire_in_NasMet_KCD,KC_DI.Fire_in_NasMet_KCD);
//Пожар в подземной дренажной емкости
DI_Processing(KC_DI_DRV.Fire_in_DainTank,false,KC_DI_Settings.Fire_in_DainTank,KC_DI_FromHMI.Fire_in_DainTank,KC_DI_ToHMI.Fire_in_DainTank,KC_DI_Internal.Fire_in_DainTank,KC_DI.Fire_in_DainTank);
//Пожар в подземной дренажной емкости. КЦД
DI_Processing(KC_DI_DRV.Fire_in_DainTank_KCD,false,KC_DI_Settings.Fire_in_DainTank_KCD,KC_DI_FromHMI.Fire_in_DainTank_KCD,KC_DI_ToHMI.Fire_in_DainTank_KCD,KC_DI_Internal.Fire_in_DainTank_KCD,KC_DI.Fire_in_DainTank_KCD);
//Пожар на установке регенерации метанола
DI_Processing(KC_DI_DRV.Fire_in_RegenMetanol,false,KC_DI_Settings.Fire_in_RegenMetanol,KC_DI_FromHMI.Fire_in_RegenMetanol,KC_DI_ToHMI.Fire_in_RegenMetanol,KC_DI_Internal.Fire_in_RegenMetanol,KC_DI.Fire_in_RegenMetanol);
//Пожар на установке регенерации метанола. КЦД
DI_Processing(KC_DI_DRV.Fire_in_RegenMetanol_KCD,false,KC_DI_Settings.Fire_in_RegenMetanol_KCD,KC_DI_FromHMI.Fire_in_RegenMetanol_KCD,KC_DI_ToHMI.Fire_in_RegenMetanol_KCD,KC_DI_Internal.Fire_in_RegenMetanol_KCD,KC_DI.Fire_in_RegenMetanol_KCD);
//Пожар в емкости метанола 
DI_Processing(KC_DI_DRV.Fire_in_MetanolTank,false,KC_DI_Settings.Fire_in_MetanolTank,KC_DI_FromHMI.Fire_in_MetanolTank,KC_DI_ToHMI.Fire_in_MetanolTank,KC_DI_Internal.Fire_in_MetanolTank,KC_DI.Fire_in_MetanolTank);
//Пожар в емкости метанола. КЦД 
DI_Processing(KC_DI_DRV.Fire_in_MetanolTank_KCD,false,KC_DI_Settings.Fire_in_MetanolTank_KCD,KC_DI_FromHMI.Fire_in_MetanolTank_KCD,KC_DI_ToHMI.Fire_in_MetanolTank_KCD,KC_DI_Internal.Fire_in_MetanolTank_KCD,KC_DI.Fire_in_MetanolTank_KCD);
//Пожар в здании УТО
DI_Processing(KC_DI_DRV.Fire_in_UTO,false,KC_DI_Settings.Fire_in_UTO,KC_DI_FromHMI.Fire_in_UTO,KC_DI_ToHMI.Fire_in_UTO,KC_DI_Internal.Fire_in_UTO,KC_DI.Fire_in_UTO);
//Пожар в здании УТО. КЦД
DI_Processing(KC_DI_DRV.Fire_in_UTO_KCD,false,KC_DI_Settings.Fire_in_UTO_KCD,KC_DI_FromHMI.Fire_in_UTO_KCD,KC_DI_ToHMI.Fire_in_UTO_KCD,KC_DI_Internal.Fire_in_UTO_KCD,KC_DI.Fire_in_UTO_KCD);
//Пожар в здании УПГ
DI_Processing(KC_DI_DRV.Fire_in_ZdUPG,false,KC_DI_Settings.Fire_in_ZdUPG,KC_DI_FromHMI.Fire_in_ZdUPG,KC_DI_ToHMI.Fire_in_ZdUPG,KC_DI_Internal.Fire_in_ZdUPG,KC_DI.Fire_in_ZdUPG);
//Пожар в здании УПГ. КЦД
DI_Processing(KC_DI_DRV.Fire_in_ZdUPG_KCD,false,KC_DI_Settings.Fire_in_ZdUPG_KCD,KC_DI_FromHMI.Fire_in_ZdUPG_KCD,KC_DI_ToHMI.Fire_in_ZdUPG_KCD,KC_DI_Internal.Fire_in_ZdUPG_KCD,KC_DI.Fire_in_ZdUPG_KCD);
//Пожар в здании УЗРГ
DI_Processing(KC_DI_DRV.Fire_in_UZRG,false,KC_DI_Settings.Fire_in_UZRG,KC_DI_FromHMI.Fire_in_UZRG,KC_DI_ToHMI.Fire_in_UZRG,KC_DI_Internal.Fire_in_UZRG,KC_DI.Fire_in_UZRG);
//Пожар в здании УЗРГ. КЦД
DI_Processing(KC_DI_DRV.Fire_in_UZRG_KCD,false,KC_DI_Settings.Fire_in_UZRG_KCD,KC_DI_FromHMI.Fire_in_UZRG_KCD,KC_DI_ToHMI.Fire_in_UZRG_KCD,KC_DI_Internal.Fire_in_UZRG_KCD,KC_DI.Fire_in_UZRG_KCD);
//Пожар на установке дожимных компрессоров
DI_Processing(KC_DI_DRV.Fire_in_UDK,false,KC_DI_Settings.Fire_in_UDK,KC_DI_FromHMI.Fire_in_UDK,KC_DI_ToHMI.Fire_in_UDK,KC_DI_Internal.Fire_in_UDK,KC_DI.Fire_in_UDK);
//Пожар на установке дожимных компрессоров. КЦД
DI_Processing(KC_DI_DRV.Fire_in_UDK_KCD,false,KC_DI_Settings.Fire_in_UDK_KCD,KC_DI_FromHMI.Fire_in_UDK_KCD,KC_DI_ToHMI.Fire_in_UDK_KCD,KC_DI_Internal.Fire_in_UDK_KCD,KC_DI.Fire_in_UDK_KCD);
//Неисправность ПС
DI_Processing(KC_DI_DRV.ASPS_Bad,false,KC_DI_Settings.ASPS_Bad,KC_DI_FromHMI.ASPS_Bad,KC_DI_ToHMI.ASPS_Bad,KC_DI_Internal.ASPS_Bad,KC_DI.ASPS_Bad);
//Неисправность ПС. КЦД
DI_Processing(KC_DI_DRV.ASPS_Bad_KCD,false,KC_DI_Settings.ASPS_Bad_KCD,KC_DI_FromHMI.ASPS_Bad_KCD,KC_DI_ToHMI.ASPS_Bad_KCD,KC_DI_Internal.ASPS_Bad_KCD,KC_DI.ASPS_Bad_KCD);
//Кран Кр51-2 - закрыт
DI_Processing(KC_DI_DRV.Kr51_2_OF,false,KC_DI_Settings.Kr51_2_OF,KC_DI_FromHMI.Kr51_2_OF,KC_DI_ToHMI.Kr51_2_OF,KC_DI_Internal.Kr51_2_OF,KC_DI.Kr51_2_OF);
//Кран Кр51-2 - открыт
DI_Processing(KC_DI_DRV.Kr51_2_ON,false,KC_DI_Settings.Kr51_2_ON,KC_DI_FromHMI.Kr51_2_ON,KC_DI_ToHMI.Kr51_2_ON,KC_DI_Internal.Kr51_2_ON,KC_DI.Kr51_2_ON);
//Кран Кр52-2 - закрыт
DI_Processing(KC_DI_DRV.Kr52_2_OF,false,KC_DI_Settings.Kr52_2_OF,KC_DI_FromHMI.Kr52_2_OF,KC_DI_ToHMI.Kr52_2_OF,KC_DI_Internal.Kr52_2_OF,KC_DI.Kr52_2_OF);
//Кран Кр52-2 - открыт
DI_Processing(KC_DI_DRV.Kr52_2_ON,false,KC_DI_Settings.Kr52_2_ON,KC_DI_FromHMI.Kr52_2_ON,KC_DI_ToHMI.Kr52_2_ON,KC_DI_Internal.Kr52_2_ON,KC_DI.Kr52_2_ON);
//Кран Кр53 - закрыт
DI_Processing(KC_DI_DRV.Kr53_OF,false,KC_DI_Settings.Kr53_OF,KC_DI_FromHMI.Kr53_OF,KC_DI_ToHMI.Kr53_OF,KC_DI_Internal.Kr53_OF,KC_DI.Kr53_OF);
//Кран Кр53 - открыт
DI_Processing(KC_DI_DRV.Kr53_ON,false,KC_DI_Settings.Kr53_ON,KC_DI_FromHMI.Kr53_ON,KC_DI_ToHMI.Kr53_ON,KC_DI_Internal.Kr53_ON,KC_DI.Kr53_ON);
//Кран Кр53бп - закрыт
DI_Processing(KC_DI_DRV.Kr53b_OF,false,KC_DI_Settings.Kr53b_OF,KC_DI_FromHMI.Kr53b_OF,KC_DI_ToHMI.Kr53b_OF,KC_DI_Internal.Kr53b_OF,KC_DI.Kr53b_OF);
//Кран Кр53бп - открыт
DI_Processing(KC_DI_DRV.Kr53b_ON,false,KC_DI_Settings.Kr53b_ON,KC_DI_FromHMI.Kr53b_ON,KC_DI_ToHMI.Kr53b_ON,KC_DI_Internal.Kr53b_ON,KC_DI.Kr53b_ON);
//Кран Кр54 - закрыт
DI_Processing(KC_DI_DRV.Kr54_OF,false,KC_DI_Settings.Kr54_OF,KC_DI_FromHMI.Kr54_OF,KC_DI_ToHMI.Kr54_OF,KC_DI_Internal.Kr54_OF,KC_DI.Kr54_OF);
//Кран Кр54 - открыт
DI_Processing(KC_DI_DRV.Kr54_ON,false,KC_DI_Settings.Kr54_ON,KC_DI_FromHMI.Kr54_ON,KC_DI_ToHMI.Kr54_ON,KC_DI_Internal.Kr54_ON,KC_DI.Kr54_ON);
//Кран Кр54бп - закрыт
DI_Processing(KC_DI_DRV.Kr54b_OF,false,KC_DI_Settings.Kr54b_OF,KC_DI_FromHMI.Kr54b_OF,KC_DI_ToHMI.Kr54b_OF,KC_DI_Internal.Kr54b_OF,KC_DI.Kr54b_OF);
//Кран Кр54бп - открыт
DI_Processing(KC_DI_DRV.Kr54b_ON,false,KC_DI_Settings.Kr54b_ON,KC_DI_FromHMI.Kr54b_ON,KC_DI_ToHMI.Kr54b_ON,KC_DI_Internal.Kr54b_ON,KC_DI.Kr54b_ON);
//Неисправность САУ УПГ
DI_Processing(KC_DI_DRV.SAU_UPG_Bad,false,KC_DI_Settings.SAU_UPG_Bad,KC_DI_FromHMI.SAU_UPG_Bad,KC_DI_ToHMI.SAU_UPG_Bad,KC_DI_Internal.SAU_UPG_Bad,KC_DI.SAU_UPG_Bad);
//САУ УПГ в работе
DI_Processing(KC_DI_DRV.SAU_UPG_work,false,KC_DI_Settings.SAU_UPG_work,KC_DI_FromHMI.SAU_UPG_work,KC_DI_ToHMI.SAU_UPG_work,KC_DI_Internal.SAU_UPG_work,KC_DI.SAU_UPG_work);
//Загазованность в УПГ более 1%
DI_Processing(KC_DI_DRV.UPG_Gas1,false,KC_DI_Settings.UPG_Gas1,KC_DI_FromHMI.UPG_Gas1,KC_DI_ToHMI.UPG_Gas1,KC_DI_Internal.UPG_Gas1,KC_DI.UPG_Gas1);
//Резерв
DI_Processing(KC_DI_DRV.Res_18,false,KC_DI_Settings.Res_18,KC_DI_FromHMI.Res_18,KC_DI_ToHMI.Res_18,KC_DI_Internal.Res_18,KC_DI.Res_18);
//Контроль основного питания  ~220 В
DI_Processing(KC_DI_DRV.Chk_AC220_SAU,false,KC_DI_Settings.Chk_AC220_SAU,KC_DI_FromHMI.Chk_AC220_SAU,KC_DI_ToHMI.Chk_AC220_SAU,KC_DI_Internal.Chk_AC220_SAU,KC_DI.Chk_AC220_SAU);
//Контроль резервного питания  =220 В
DI_Processing(KC_DI_DRV.Chk_DC220_SAU,false,KC_DI_Settings.Chk_DC220_SAU,KC_DI_FromHMI.Chk_DC220_SAU,KC_DI_ToHMI.Chk_DC220_SAU,KC_DI_Internal.Chk_DC220_SAU,KC_DI.Chk_DC220_SAU);
//Контроль питания кранов =220В
DI_Processing(KC_DI_DRV.Chk_DC220_Kr,false,KC_DI_Settings.Chk_DC220_Kr,KC_DI_FromHMI.Chk_DC220_Kr,KC_DI_ToHMI.Chk_DC220_Kr,KC_DI_Internal.Chk_DC220_Kr,KC_DI.Chk_DC220_Kr);
//Контроль исправности разрядников
DI_Processing(KC_DI_DRV.Chk_razr,false,KC_DI_Settings.Chk_razr,KC_DI_FromHMI.Chk_razr,KC_DI_ToHMI.Chk_razr,KC_DI_Internal.Chk_razr,KC_DI.Chk_razr);
//Двери САУ КЦ открыты
DI_Processing(KC_DI_DRV.Cabin_open,false,KC_DI_Settings.Cabin_open,KC_DI_FromHMI.Cabin_open,KC_DI_ToHMI.Cabin_open,KC_DI_Internal.Cabin_open,KC_DI.Cabin_open);
//Исправность осн. ИП =24В внутренних цепей
DI_Processing(KC_DI_DRV.DC24osn_Int_ok,false,KC_DI_Settings.DC24osn_Int_ok,KC_DI_FromHMI.DC24osn_Int_ok,KC_DI_ToHMI.DC24osn_Int_ok,KC_DI_Internal.DC24osn_Int_ok,KC_DI.DC24osn_Int_ok);
//Исправность рез. ИП =24В внутренних цепей
DI_Processing(KC_DI_DRV.DC24rez_Int_ok,false,KC_DI_Settings.DC24rez_Int_ok,KC_DI_FromHMI.DC24rez_Int_ok,KC_DI_ToHMI.DC24rez_Int_ok,KC_DI_Internal.DC24rez_Int_ok,KC_DI.DC24rez_Int_ok);
//Исправность осн. ИП =24В внешних цепей
DI_Processing(KC_DI_DRV.DC24osn_Ext1_ok,false,KC_DI_Settings.DC24osn_Ext1_ok,KC_DI_FromHMI.DC24osn_Ext1_ok,KC_DI_ToHMI.DC24osn_Ext1_ok,KC_DI_Internal.DC24osn_Ext1_ok,KC_DI.DC24osn_Ext1_ok);
//Исправность рез. ИП =24В внешних цепей
DI_Processing(KC_DI_DRV.DC24rez_Ext1_ok,false,KC_DI_Settings.DC24rez_Ext1_ok,KC_DI_FromHMI.DC24rez_Ext1_ok,KC_DI_ToHMI.DC24rez_Ext1_ok,KC_DI_Internal.DC24rez_Ext1_ok,KC_DI.DC24rez_Ext1_ok);
//Исправность осн. ИП =24В внешних цепей
DI_Processing(KC_DI_DRV.DC24osn_Ext2_ok,false,KC_DI_Settings.DC24osn_Ext2_ok,KC_DI_FromHMI.DC24osn_Ext2_ok,KC_DI_ToHMI.DC24osn_Ext2_ok,KC_DI_Internal.DC24osn_Ext2_ok,KC_DI.DC24osn_Ext2_ok);
//Исправность рез. ИП =24В внешних цепей
DI_Processing(KC_DI_DRV.DC24rez_Ext2_ok,false,KC_DI_Settings.DC24rez_Ext2_ok,KC_DI_FromHMI.DC24rez_Ext2_ok,KC_DI_ToHMI.DC24rez_Ext2_ok,KC_DI_Internal.DC24rez_Ext2_ok,KC_DI.DC24rez_Ext2_ok);
//Резерв
DI_Processing(KC_DI_DRV.Res_19,false,KC_DI_Settings.Res_19,KC_DI_FromHMI.Res_19,KC_DI_ToHMI.Res_19,KC_DI_Internal.Res_19,KC_DI.Res_19);
//Резерв
DI_Processing(KC_DI_DRV.Res_20,false,KC_DI_Settings.Res_20,KC_DI_FromHMI.Res_20,KC_DI_ToHMI.Res_20,KC_DI_Internal.Res_20,KC_DI.Res_20);
//Резерв
DI_Processing(KC_DI_DRV.Res_21,false,KC_DI_Settings.Res_21,KC_DI_FromHMI.Res_21,KC_DI_ToHMI.Res_21,KC_DI_Internal.Res_21,KC_DI.Res_21);
//Резерв
DI_Processing(KC_DI_DRV.Res_22,false,KC_DI_Settings.Res_22,KC_DI_FromHMI.Res_22,KC_DI_ToHMI.Res_22,KC_DI_Internal.Res_22,KC_DI.Res_22);
//Резерв
DI_Processing(KC_DI_DRV.Res_23,false,KC_DI_Settings.Res_23,KC_DI_FromHMI.Res_23,KC_DI_ToHMI.Res_23,KC_DI_Internal.Res_23,KC_DI.Res_23);
//Кран 51 открыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr51_ON_KCU,false,KC_DI_Settings.Kr51_ON_KCU,KC_DI_FromHMI.Kr51_ON_KCU,KC_DI_ToHMI.Kr51_ON_KCU,KC_DI_Internal.Kr51_ON_KCU,KC_DI.Kr51_ON_KCU);
//Кран 51 закрыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr51_OF_KCU,false,KC_DI_Settings.Kr51_OF_KCU,KC_DI_FromHMI.Kr51_OF_KCU,KC_DI_ToHMI.Kr51_OF_KCU,KC_DI_Internal.Kr51_OF_KCU,KC_DI.Kr51_OF_KCU);
//Кран 52 открыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr52_ON_KCU,false,KC_DI_Settings.Kr52_ON_KCU,KC_DI_FromHMI.Kr52_ON_KCU,KC_DI_ToHMI.Kr52_ON_KCU,KC_DI_Internal.Kr52_ON_KCU,KC_DI.Kr52_ON_KCU);
//Кран 52 закрыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr52_OF_KCU,false,KC_DI_Settings.Kr52_OF_KCU,KC_DI_FromHMI.Kr52_OF_KCU,KC_DI_ToHMI.Kr52_OF_KCU,KC_DI_Internal.Kr52_OF_KCU,KC_DI.Kr52_OF_KCU);
//Инд. ЭО КЦ на ПРУ (+) (КЦУ)
DI_Processing(KC_DI_DRV.EO_LED_PRU_KCU,false,KC_DI_Settings.EO_LED_PRU_KCU,KC_DI_FromHMI.EO_LED_PRU_KCU,KC_DI_ToHMI.EO_LED_PRU_KCU,KC_DI_Internal.EO_LED_PRU_KCU,KC_DI.EO_LED_PRU_KCU);
//Инд. АОсс на ПРУ (+) (КЦУ)
DI_Processing(KC_DI_DRV.AOss_LED_PRU_KCU,false,KC_DI_Settings.AOss_LED_PRU_KCU,KC_DI_FromHMI.AOss_LED_PRU_KCU,KC_DI_ToHMI.AOss_LED_PRU_KCU,KC_DI_Internal.AOss_LED_PRU_KCU,KC_DI.AOss_LED_PRU_KCU);
//Инд. АОбс на ПРУ (+) (КЦУ)
DI_Processing(KC_DI_DRV.AObs_LED_PRU_KCU,false,KC_DI_Settings.AObs_LED_PRU_KCU,KC_DI_FromHMI.AObs_LED_PRU_KCU,KC_DI_ToHMI.AObs_LED_PRU_KCU,KC_DI_Internal.AObs_LED_PRU_KCU,KC_DI.AObs_LED_PRU_KCU);
//Инд. Вкл. пожнасоса на ПРУ (+) (КЦУ)
DI_Processing(KC_DI_DRV.FirePump_LED_PRU_KCU,false,KC_DI_Settings.FirePump_LED_PRU_KCU,KC_DI_FromHMI.FirePump_LED_PRU_KCU,KC_DI_ToHMI.FirePump_LED_PRU_KCU,KC_DI_Internal.FirePump_LED_PRU_KCU,KC_DI.FirePump_LED_PRU_KCU);
//Резерв 110VDC (КЦУ)
DI_Processing(KC_DI_DRV.Res_24,false,KC_DI_Settings.Res_24,KC_DI_FromHMI.Res_24,KC_DI_ToHMI.Res_24,KC_DI_Internal.Res_24,KC_DI.Res_24);
//Резерв 110VDC (КЦУ)
DI_Processing(KC_DI_DRV.Res_25,false,KC_DI_Settings.Res_25,KC_DI_FromHMI.Res_25,KC_DI_ToHMI.Res_25,KC_DI_Internal.Res_25,KC_DI.Res_25);
//Резерв 110VDC (КЦУ)
DI_Processing(KC_DI_DRV.Res_26,false,KC_DI_Settings.Res_26,KC_DI_FromHMI.Res_26,KC_DI_ToHMI.Res_26,KC_DI_Internal.Res_26,KC_DI.Res_26);
//Резерв 110VDC (КЦУ)
DI_Processing(KC_DI_DRV.Res_27,false,KC_DI_Settings.Res_27,KC_DI_FromHMI.Res_27,KC_DI_ToHMI.Res_27,KC_DI_Internal.Res_27,KC_DI.Res_27);
//Резерв 110VDC (КЦУ)
DI_Processing(KC_DI_DRV.Res_28,false,KC_DI_Settings.Res_28,KC_DI_FromHMI.Res_28,KC_DI_ToHMI.Res_28,KC_DI_Internal.Res_28,KC_DI.Res_28);
//Резерв 110VDC (КЦУ)
DI_Processing(KC_DI_DRV.Res_29,false,KC_DI_Settings.Res_29,KC_DI_FromHMI.Res_29,KC_DI_ToHMI.Res_29,KC_DI_Internal.Res_29,KC_DI.Res_29);
//Резерв 110VDC (КЦУ)
DI_Processing(KC_DI_DRV.Res_30,false,KC_DI_Settings.Res_30,KC_DI_FromHMI.Res_30,KC_DI_ToHMI.Res_30,KC_DI_Internal.Res_30,KC_DI.Res_30);
//Резерв 110VDC (КЦУ)
DI_Processing(KC_DI_DRV.Res_31,false,KC_DI_Settings.Res_31,KC_DI_FromHMI.Res_31,KC_DI_ToHMI.Res_31,KC_DI_Internal.Res_31,KC_DI.Res_31);
//Резерв 110VDC (КЦУ)
DI_Processing(KC_DI_DRV.Res_32,false,KC_DI_Settings.Res_32,KC_DI_FromHMI.Res_32,KC_DI_ToHMI.Res_32,KC_DI_Internal.Res_32,KC_DI.Res_32);
//Резерв 110VDC (КЦУ)
DI_Processing(KC_DI_DRV.Res_33,false,KC_DI_Settings.Res_33,KC_DI_FromHMI.Res_33,KC_DI_ToHMI.Res_33,KC_DI_Internal.Res_33,KC_DI.Res_33);
//Резерв 110VDC (КЦУ)
DI_Processing(KC_DI_DRV.Res_34,false,KC_DI_Settings.Res_34,KC_DI_FromHMI.Res_34,KC_DI_ToHMI.Res_34,KC_DI_Internal.Res_34,KC_DI.Res_34);
//Резерв 110VDC (КЦУ)
DI_Processing(KC_DI_DRV.Res_35,false,KC_DI_Settings.Res_35,KC_DI_FromHMI.Res_35,KC_DI_ToHMI.Res_35,KC_DI_Internal.Res_35,KC_DI.Res_35);
//Резерв 110VDC (КЦУ)
DI_Processing(KC_DI_DRV.Res_36,false,KC_DI_Settings.Res_36,KC_DI_FromHMI.Res_36,KC_DI_ToHMI.Res_36,KC_DI_Internal.Res_36,KC_DI.Res_36);
//Резерв 110VDC (КЦУ)
DI_Processing(KC_DI_DRV.Res_37,false,KC_DI_Settings.Res_37,KC_DI_FromHMI.Res_37,KC_DI_ToHMI.Res_37,KC_DI_Internal.Res_37,KC_DI.Res_37);
//Резерв 110VDC (КЦУ)
DI_Processing(KC_DI_DRV.Res_38,false,KC_DI_Settings.Res_38,KC_DI_FromHMI.Res_38,KC_DI_ToHMI.Res_38,KC_DI_Internal.Res_38,KC_DI.Res_38);
//Обогрев прибора АДЭС LSA1 включить (КЦУ)
DI_Processing(KC_DI_DRV.EN_LSA1_ADES_ON_KCU,false,KC_DI_Settings.EN_LSA1_ADES_ON_KCU,KC_DI_FromHMI.EN_LSA1_ADES_ON_KCU,KC_DI_ToHMI.EN_LSA1_ADES_ON_KCU,KC_DI_Internal.EN_LSA1_ADES_ON_KCU,KC_DI.EN_LSA1_ADES_ON_KCU);
//Обогрев прибора АДЭС LSA2 включить (КЦУ)
DI_Processing(KC_DI_DRV.EN_LSA2_ADES_ON_KCU,false,KC_DI_Settings.EN_LSA2_ADES_ON_KCU,KC_DI_FromHMI.EN_LSA2_ADES_ON_KCU,KC_DI_ToHMI.EN_LSA2_ADES_ON_KCU,KC_DI_Internal.EN_LSA2_ADES_ON_KCU,KC_DI.EN_LSA2_ADES_ON_KCU);
//Обогрев прибора АДЭС LSA3 включить (КЦУ)
DI_Processing(KC_DI_DRV.EN_LSA3_ADES_ON_KCU,false,KC_DI_Settings.EN_LSA3_ADES_ON_KCU,KC_DI_FromHMI.EN_LSA3_ADES_ON_KCU,KC_DI_ToHMI.EN_LSA3_ADES_ON_KCU,KC_DI_Internal.EN_LSA3_ADES_ON_KCU,KC_DI.EN_LSA3_ADES_ON_KCU);
//Обогрев прибора LSA1 (ГПА4) включить (КЦУ)
DI_Processing(KC_DI_DRV.EN_LSA1_GPA_ON_KCU,false,KC_DI_Settings.EN_LSA1_GPA_ON_KCU,KC_DI_FromHMI.EN_LSA1_GPA_ON_KCU,KC_DI_ToHMI.EN_LSA1_GPA_ON_KCU,KC_DI_Internal.EN_LSA1_GPA_ON_KCU,KC_DI.EN_LSA1_GPA_ON_KCU);
//Обогрев прибора LSA2 (ГПА5) включить (КЦУ)
DI_Processing(KC_DI_DRV.EN_LSA2_GPA_ON_KCU,false,KC_DI_Settings.EN_LSA2_GPA_ON_KCU,KC_DI_FromHMI.EN_LSA2_GPA_ON_KCU,KC_DI_ToHMI.EN_LSA2_GPA_ON_KCU,KC_DI_Internal.EN_LSA2_GPA_ON_KCU,KC_DI.EN_LSA2_GPA_ON_KCU);
//Обогрев прибора LSA3 (ГПА6)  включить (КЦУ)
DI_Processing(KC_DI_DRV.EN_LSA3_GPA_ON_KCU,false,KC_DI_Settings.EN_LSA3_GPA_ON_KCU,KC_DI_FromHMI.EN_LSA3_GPA_ON_KCU,KC_DI_ToHMI.EN_LSA3_GPA_ON_KCU,KC_DI_Internal.EN_LSA3_GPA_ON_KCU,KC_DI.EN_LSA3_GPA_ON_KCU);
//Обогрев прибора LSA4 (ГПА4)  включить (КЦУ)
DI_Processing(KC_DI_DRV.EN_LSA4_GPA_ON_KCU,false,KC_DI_Settings.EN_LSA4_GPA_ON_KCU,KC_DI_FromHMI.EN_LSA4_GPA_ON_KCU,KC_DI_ToHMI.EN_LSA4_GPA_ON_KCU,KC_DI_Internal.EN_LSA4_GPA_ON_KCU,KC_DI.EN_LSA4_GPA_ON_KCU);
//Обогрев прибора LSA5 (ГПА5)  включить (КЦУ)
DI_Processing(KC_DI_DRV.EN_LSA5_GPA_ON_KCU,false,KC_DI_Settings.EN_LSA5_GPA_ON_KCU,KC_DI_FromHMI.EN_LSA5_GPA_ON_KCU,KC_DI_ToHMI.EN_LSA5_GPA_ON_KCU,KC_DI_Internal.EN_LSA5_GPA_ON_KCU,KC_DI.EN_LSA5_GPA_ON_KCU);
//Обогрев прибора LSA6 (ГПА6) включить (КЦУ)
DI_Processing(KC_DI_DRV.EN_LSA6_GPA_ON_KCU,false,KC_DI_Settings.EN_LSA6_GPA_ON_KCU,KC_DI_FromHMI.EN_LSA6_GPA_ON_KCU,KC_DI_ToHMI.EN_LSA6_GPA_ON_KCU,KC_DI_Internal.EN_LSA6_GPA_ON_KCU,KC_DI.EN_LSA6_GPA_ON_KCU);
//Кран Кр51-2 - закрыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr51_2_OF_KCU,false,KC_DI_Settings.Kr51_2_OF_KCU,KC_DI_FromHMI.Kr51_2_OF_KCU,KC_DI_ToHMI.Kr51_2_OF_KCU,KC_DI_Internal.Kr51_2_OF_KCU,KC_DI.Kr51_2_OF_KCU);
//Кран Кр51-2 - открыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr51_2_ON_KCU,false,KC_DI_Settings.Kr51_2_ON_KCU,KC_DI_FromHMI.Kr51_2_ON_KCU,KC_DI_ToHMI.Kr51_2_ON_KCU,KC_DI_Internal.Kr51_2_ON_KCU,KC_DI.Kr51_2_ON_KCU);
//Кран Кр52-2 - закрыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr52_2_OF_KCU,false,KC_DI_Settings.Kr52_2_OF_KCU,KC_DI_FromHMI.Kr52_2_OF_KCU,KC_DI_ToHMI.Kr52_2_OF_KCU,KC_DI_Internal.Kr52_2_OF_KCU,KC_DI.Kr52_2_OF_KCU);
//Кран Кр52-2 - открыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr52_2_ON_KCU,false,KC_DI_Settings.Kr52_2_ON_KCU,KC_DI_FromHMI.Kr52_2_ON_KCU,KC_DI_ToHMI.Kr52_2_ON_KCU,KC_DI_Internal.Kr52_2_ON_KCU,KC_DI.Kr52_2_ON_KCU);
//Кран Кр53 - закрыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr53_OF_KCU,false,KC_DI_Settings.Kr53_OF_KCU,KC_DI_FromHMI.Kr53_OF_KCU,KC_DI_ToHMI.Kr53_OF_KCU,KC_DI_Internal.Kr53_OF_KCU,KC_DI.Kr53_OF_KCU);
//Кран Кр53 - открыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr53_ON_KCU,false,KC_DI_Settings.Kr53_ON_KCU,KC_DI_FromHMI.Kr53_ON_KCU,KC_DI_ToHMI.Kr53_ON_KCU,KC_DI_Internal.Kr53_ON_KCU,KC_DI.Kr53_ON_KCU);
//Кран Кр53бп - закрыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr53b_OF_KCU,false,KC_DI_Settings.Kr53b_OF_KCU,KC_DI_FromHMI.Kr53b_OF_KCU,KC_DI_ToHMI.Kr53b_OF_KCU,KC_DI_Internal.Kr53b_OF_KCU,KC_DI.Kr53b_OF_KCU);
//Кран Кр53бп - открыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr53b_ON_KCU,false,KC_DI_Settings.Kr53b_ON_KCU,KC_DI_FromHMI.Kr53b_ON_KCU,KC_DI_ToHMI.Kr53b_ON_KCU,KC_DI_Internal.Kr53b_ON_KCU,KC_DI.Kr53b_ON_KCU);
//Кран Кр54 - закрыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr54_OF_KCU,false,KC_DI_Settings.Kr54_OF_KCU,KC_DI_FromHMI.Kr54_OF_KCU,KC_DI_ToHMI.Kr54_OF_KCU,KC_DI_Internal.Kr54_OF_KCU,KC_DI.Kr54_OF_KCU);
//Кран Кр54 - открыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr54_ON_KCU,false,KC_DI_Settings.Kr54_ON_KCU,KC_DI_FromHMI.Kr54_ON_KCU,KC_DI_ToHMI.Kr54_ON_KCU,KC_DI_Internal.Kr54_ON_KCU,KC_DI.Kr54_ON_KCU);
//Кран Кр54бп - закрыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr54b_OF_KCU,false,KC_DI_Settings.Kr54b_OF_KCU,KC_DI_FromHMI.Kr54b_OF_KCU,KC_DI_ToHMI.Kr54b_OF_KCU,KC_DI_Internal.Kr54b_OF_KCU,KC_DI.Kr54b_OF_KCU);
//Кран Кр54бп - открыть (КЦУ)
DI_Processing(KC_DI_DRV.Kr54b_ON_KCU,false,KC_DI_Settings.Kr54b_ON_KCU,KC_DI_FromHMI.Kr54b_ON_KCU,KC_DI_ToHMI.Kr54b_ON_KCU,KC_DI_Internal.Kr54b_ON_KCU,KC_DI.Kr54b_ON_KCU);
//ЭО от САУ КЦ (КЦУ)
DI_Processing(KC_DI_DRV.EO_KC_KCU,false,KC_DI_Settings.EO_KC_KCU,KC_DI_FromHMI.EO_KC_KCU,KC_DI_ToHMI.EO_KC_KCU,KC_DI_Internal.EO_KC_KCU,KC_DI.EO_KC_KCU);
//Инд. ЭО от САУ КЦ (КЦУ)
DI_Processing(KC_DI_DRV.EO_LED_KC_KCU,false,KC_DI_Settings.EO_LED_KC_KCU,KC_DI_FromHMI.EO_LED_KC_KCU,KC_DI_ToHMI.EO_LED_KC_KCU,KC_DI_Internal.EO_LED_KC_KCU,KC_DI.EO_LED_KC_KCU);
//АОсс от САУ КЦ (КЦУ)
DI_Processing(KC_DI_DRV.AOss_KC_KCU,false,KC_DI_Settings.AOss_KC_KCU,KC_DI_FromHMI.AOss_KC_KCU,KC_DI_ToHMI.AOss_KC_KCU,KC_DI_Internal.AOss_KC_KCU,KC_DI.AOss_KC_KCU);
//АОбс от САУ КЦ (КЦУ)
DI_Processing(KC_DI_DRV.AObs_KC_KCU,false,KC_DI_Settings.AObs_KC_KCU,KC_DI_FromHMI.AObs_KC_KCU,KC_DI_ToHMI.AObs_KC_KCU,KC_DI_Internal.AObs_KC_KCU,KC_DI.AObs_KC_KCU);
//Пожар в энергоблоке
DI_Processing(KC_DI_DRV.Fire_in_Eblock,false,KC_DI_Settings.Fire_in_Eblock,KC_DI_FromHMI.Fire_in_Eblock,KC_DI_ToHMI.Fire_in_Eblock,KC_DI_Internal.Fire_in_Eblock,KC_DI.Fire_in_Eblock);
//Пожар в насосной масел
DI_Processing(KC_DI_DRV.Fire_in_NasOil2,false,KC_DI_Settings.Fire_in_NasOil2,KC_DI_FromHMI.Fire_in_NasOil2,KC_DI_ToHMI.Fire_in_NasOil2,KC_DI_Internal.Fire_in_NasOil2,KC_DI.Fire_in_NasOil2);
//Пожар в проходной
DI_Processing(KC_DI_DRV.Fire_in_Gate,false,KC_DI_Settings.Fire_in_Gate,KC_DI_FromHMI.Fire_in_Gate,KC_DI_ToHMI.Fire_in_Gate,KC_DI_Internal.Fire_in_Gate,KC_DI.Fire_in_Gate);
//Пожар в б/б БВВ УП
DI_Processing(KC_DI_DRV.Fire_in_BB_BVVUP,false,KC_DI_Settings.Fire_in_BB_BVVUP,KC_DI_FromHMI.Fire_in_BB_BVVUP,KC_DI_ToHMI.Fire_in_BB_BVVUP,KC_DI_Internal.Fire_in_BB_BVVUP,KC_DI.Fire_in_BB_BVVUP);
//Пожар в аварийной дизельной электростанции
DI_Processing(KC_DI_DRV.Fire_in_ADES,false,KC_DI_Settings.Fire_in_ADES,KC_DI_FromHMI.Fire_in_ADES,KC_DI_ToHMI.Fire_in_ADES,KC_DI_Internal.Fire_in_ADES,KC_DI.Fire_in_ADES);
//Пожар в БКУ ЭХЗ
DI_Processing(KC_DI_DRV.Fire_in_EXZ,false,KC_DI_Settings.Fire_in_EXZ,KC_DI_FromHMI.Fire_in_EXZ,KC_DI_ToHMI.Fire_in_EXZ,KC_DI_Internal.Fire_in_EXZ,KC_DI.Fire_in_EXZ);
//Пожар в компрессорной сжатого воздуха
DI_Processing(KC_DI_DRV.Fire_in_VKompr,false,KC_DI_Settings.Fire_in_VKompr,KC_DI_FromHMI.Fire_in_VKompr,KC_DI_ToHMI.Fire_in_VKompr,KC_DI_Internal.Fire_in_VKompr,KC_DI.Fire_in_VKompr);
//Пожар на площадке блока резервуаров масла (НМ)
DI_Processing(KC_DI_DRV.Fire_in_OilTanks,false,KC_DI_Settings.Fire_in_OilTanks,KC_DI_FromHMI.Fire_in_OilTanks,KC_DI_ToHMI.Fire_in_OilTanks,KC_DI_Internal.Fire_in_OilTanks,KC_DI.Fire_in_OilTanks);
//Пожар в емкости для аварийного слива масла (НМ)
DI_Processing(KC_DI_DRV.Fire_in_Oil_Atanks,false,KC_DI_Settings.Fire_in_Oil_Atanks,KC_DI_FromHMI.Fire_in_Oil_Atanks,KC_DI_ToHMI.Fire_in_Oil_Atanks,KC_DI_Internal.Fire_in_Oil_Atanks,KC_DI.Fire_in_Oil_Atanks);
//Пожар в емкости для аварийного слива топлива (АДЭС)
DI_Processing(KC_DI_DRV.Fire_in_Fuel_ATanks2,false,KC_DI_Settings.Fire_in_Fuel_ATanks2,KC_DI_FromHMI.Fire_in_Fuel_ATanks2,KC_DI_ToHMI.Fire_in_Fuel_ATanks2,KC_DI_Internal.Fire_in_Fuel_ATanks2,KC_DI.Fire_in_Fuel_ATanks2);
//Пожар на площадке резервуара для дизтоплива (АДЭС)
DI_Processing(KC_DI_DRV.Fire_in_FuelTanks2,false,KC_DI_Settings.Fire_in_FuelTanks2,KC_DI_FromHMI.Fire_in_FuelTanks2,KC_DI_ToHMI.Fire_in_FuelTanks2,KC_DI_Internal.Fire_in_FuelTanks2,KC_DI.Fire_in_FuelTanks2);
//Неисправность САПС обобщенный
DI_Processing(KC_DI_DRV.SAPS_Bad,false,KC_DI_Settings.SAPS_Bad,KC_DI_FromHMI.SAPS_Bad,KC_DI_ToHMI.SAPS_Bad,KC_DI_Internal.SAPS_Bad,KC_DI.SAPS_Bad);
//Пожар ГПА 4
DI_Processing(KC_DI_DRV.Fire_in_GPA4,false,KC_DI_Settings.Fire_in_GPA4,KC_DI_FromHMI.Fire_in_GPA4,KC_DI_ToHMI.Fire_in_GPA4,KC_DI_Internal.Fire_in_GPA4,KC_DI.Fire_in_GPA4);
//Неисправность АСПС, КЗ и ПТ ГПА 4
DI_Processing(KC_DI_DRV.GPA4_ASPS_Bad,false,KC_DI_Settings.GPA4_ASPS_Bad,KC_DI_FromHMI.GPA4_ASPS_Bad,KC_DI_ToHMI.GPA4_ASPS_Bad,KC_DI_Internal.GPA4_ASPS_Bad,KC_DI.GPA4_ASPS_Bad);
//Загазованность предупредительная (10%) ГПА 4
DI_Processing(KC_DI_DRV.GPA4_GAS10,false,KC_DI_Settings.GPA4_GAS10,KC_DI_FromHMI.GPA4_GAS10,KC_DI_ToHMI.GPA4_GAS10,KC_DI_Internal.GPA4_GAS10,KC_DI.GPA4_GAS10);
//Загазованность аварийная (20%) ГПА 4
DI_Processing(KC_DI_DRV.GPA4_GAS20,false,KC_DI_Settings.GPA4_GAS20,KC_DI_FromHMI.GPA4_GAS20,KC_DI_ToHMI.GPA4_GAS20,KC_DI_Internal.GPA4_GAS20,KC_DI.GPA4_GAS20);
//Пожар ГПА 5
DI_Processing(KC_DI_DRV.Fire_in_GPA5,false,KC_DI_Settings.Fire_in_GPA5,KC_DI_FromHMI.Fire_in_GPA5,KC_DI_ToHMI.Fire_in_GPA5,KC_DI_Internal.Fire_in_GPA5,KC_DI.Fire_in_GPA5);
//Неисправность АСПС, КЗ и ПТ ГПА 5
DI_Processing(KC_DI_DRV.GPA5_ASPS_Bad,false,KC_DI_Settings.GPA5_ASPS_Bad,KC_DI_FromHMI.GPA5_ASPS_Bad,KC_DI_ToHMI.GPA5_ASPS_Bad,KC_DI_Internal.GPA5_ASPS_Bad,KC_DI.GPA5_ASPS_Bad);
//Загазованность предупредительная (10%) ГПА 5
DI_Processing(KC_DI_DRV.GPA5_GAS10,false,KC_DI_Settings.GPA5_GAS10,KC_DI_FromHMI.GPA5_GAS10,KC_DI_ToHMI.GPA5_GAS10,KC_DI_Internal.GPA5_GAS10,KC_DI.GPA5_GAS10);
//Загазованность аварийная (20%) ГПА 5
DI_Processing(KC_DI_DRV.GPA5_GAS20,false,KC_DI_Settings.GPA5_GAS20,KC_DI_FromHMI.GPA5_GAS20,KC_DI_ToHMI.GPA5_GAS20,KC_DI_Internal.GPA5_GAS20,KC_DI.GPA5_GAS20);
//Пожар ГПА 6
DI_Processing(KC_DI_DRV.Fire_in_GPA6,false,KC_DI_Settings.Fire_in_GPA6,KC_DI_FromHMI.Fire_in_GPA6,KC_DI_ToHMI.Fire_in_GPA6,KC_DI_Internal.Fire_in_GPA6,KC_DI.Fire_in_GPA6);
//Неисправность АСПС, КЗ и ПТ ГПА 6
DI_Processing(KC_DI_DRV.GPA6_ASPS_Bad,false,KC_DI_Settings.GPA6_ASPS_Bad,KC_DI_FromHMI.GPA6_ASPS_Bad,KC_DI_ToHMI.GPA6_ASPS_Bad,KC_DI_Internal.GPA6_ASPS_Bad,KC_DI.GPA6_ASPS_Bad);
//Загазованность предупредительная (10%) ГПА 6
DI_Processing(KC_DI_DRV.GPA6_GAS10,false,KC_DI_Settings.GPA6_GAS10,KC_DI_FromHMI.GPA6_GAS10,KC_DI_ToHMI.GPA6_GAS10,KC_DI_Internal.GPA6_GAS10,KC_DI.GPA6_GAS10);
//Загазованность аварийная (20%) ГПА 6
DI_Processing(KC_DI_DRV.GPA6_GAS20,false,KC_DI_Settings.GPA6_GAS20,KC_DI_FromHMI.GPA6_GAS20,KC_DI_ToHMI.GPA6_GAS20,KC_DI_Internal.GPA6_GAS20,KC_DI.GPA6_GAS20);
//Пожар УПГ
DI_Processing(KC_DI_DRV.Fire_in_UPG,false,KC_DI_Settings.Fire_in_UPG,KC_DI_FromHMI.Fire_in_UPG,KC_DI_ToHMI.Fire_in_UPG,KC_DI_Internal.Fire_in_UPG,KC_DI.Fire_in_UPG);
//Неисправность АСПС, КЗ и ПТ УПГ
DI_Processing(KC_DI_DRV.UPG_ASPS_Bad,false,KC_DI_Settings.UPG_ASPS_Bad,KC_DI_FromHMI.UPG_ASPS_Bad,KC_DI_ToHMI.UPG_ASPS_Bad,KC_DI_Internal.UPG_ASPS_Bad,KC_DI.UPG_ASPS_Bad);
//Загазованность предупредительная (10%) УПГ
DI_Processing(KC_DI_DRV.UPG_GAS10,false,KC_DI_Settings.UPG_GAS10,KC_DI_FromHMI.UPG_GAS10,KC_DI_ToHMI.UPG_GAS10,KC_DI_Internal.UPG_GAS10,KC_DI.UPG_GAS10);
//Загазованность аварийная (20%) УПГ
DI_Processing(KC_DI_DRV.UPG_GAS20,false,KC_DI_Settings.UPG_GAS20,KC_DI_FromHMI.UPG_GAS20,KC_DI_ToHMI.UPG_GAS20,KC_DI_Internal.UPG_GAS20,KC_DI.UPG_GAS20);
//Пожар УРМ
DI_Processing(KC_DI_DRV.Fire_in_URM,false,KC_DI_Settings.Fire_in_URM,KC_DI_FromHMI.Fire_in_URM,KC_DI_ToHMI.Fire_in_URM,KC_DI_Internal.Fire_in_URM,KC_DI.Fire_in_URM);
//Неисправность АСПС, КЗ и ПТ УРМ
DI_Processing(KC_DI_DRV.URM_ASPS_Bad,false,KC_DI_Settings.URM_ASPS_Bad,KC_DI_FromHMI.URM_ASPS_Bad,KC_DI_ToHMI.URM_ASPS_Bad,KC_DI_Internal.URM_ASPS_Bad,KC_DI.URM_ASPS_Bad);
//Резерв под сигнал Загазованность предупредительная (10%) УРМ
DI_Processing(KC_DI_DRV.Res_39,false,KC_DI_Settings.Res_39,KC_DI_FromHMI.Res_39,KC_DI_ToHMI.Res_39,KC_DI_Internal.Res_39,KC_DI.Res_39);
//Резерв под сигнал Загазованность аварийная (20%) УРМ
DI_Processing(KC_DI_DRV.Res_40,false,KC_DI_Settings.Res_40,KC_DI_FromHMI.Res_40,KC_DI_ToHMI.Res_40,KC_DI_Internal.Res_40,KC_DI.Res_40);
//Конец сгенерированного кода
]]></ST>
                </Function>
            </Folder>
            <Folder Name="DO" Comment="" Data="" UUID="YA2KV3KUNC4EDOB65IGXK6FRIA">
                <Function UUID="A5XW7BBUWNFW7M2YG2UJULUSFM" Name="DO_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="4AIZP6TN7OCU3GVNU6PSRDOTRA" Name="algOut" Type="BOOL" Usage="input" />
                        <Variable UUID="5R5WL3HGLRGMXN3ZVPA3FETS6Q" Name="fromHMI" Type="T_DO_FromHMI" TypeUUID="ICYCYA5WR5FTZMTITNXXGA6V4U" Usage="inout" />
                        <Variable UUID="EDA4FRWG6FGWJPKIBGBT6SNR2Q" Name="toHMI" Type="T_DO_ToHMI" TypeUUID="JPIXI5FFWBGSRAAFIJ2MBV77UE" Usage="inout" />
                        <Variable UUID="ROPOI5IJ6BZEBLSGQEGYPURC2I" Name="drv" Type="BOOL" Usage="output" />
                    </Variables>
                    <ST><![CDATA[toHMI.forsEnable := (toHMI.forsEnable or fromHMI.BTNforceOn) and toHMI.forsPermit and not fromHMI.BTNworkOn;
drv := algOut and not toHMI.forsEnable or fromHMI.manualTarget and toHMI.forsEnable;
fromHMI.manualTarget := drv;
//-------------------------------------------
fromHMI.BTNforceOn := false;
fromHMI.BTNworkOn := false;]]></ST>
                </Function>
                <Function UUID="24SCQNH4ISJQPG2W26I3JKJKPY" Name="KC_DO_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables />
                    <ST><![CDATA[//----------- Обработка дискретных выходов ---------------
//Начало сгенерированного кода DO_Processing
//Кран 51 открыть
DO_Processing(KC_DO.Kr51_ON,KC_DO_FromHMI.Kr51_ON,KC_DO_ToHMI.Kr51_ON,KC_DO_DRV.Kr51_ON);
//Кран 51 закрыть
DO_Processing(KC_DO.Kr51_OF,KC_DO_FromHMI.Kr51_OF,KC_DO_ToHMI.Kr51_OF,KC_DO_DRV.Kr51_OF);
//Кран 52 открыть
DO_Processing(KC_DO.Kr52_ON,KC_DO_FromHMI.Kr52_ON,KC_DO_ToHMI.Kr52_ON,KC_DO_DRV.Kr52_ON);
//Кран 52 закрыть 
DO_Processing(KC_DO.Kr52_OF,KC_DO_FromHMI.Kr52_OF,KC_DO_ToHMI.Kr52_OF,KC_DO_DRV.Kr52_OF);
//Инд. ЭО КЦ на ПРУ (+) 
DO_Processing(KC_DO.EO_LED_PRU,KC_DO_FromHMI.EO_LED_PRU,KC_DO_ToHMI.EO_LED_PRU,KC_DO_DRV.EO_LED_PRU);
//Инд. АОсс на ПРУ (+) 
DO_Processing(KC_DO.AOss_LED_PRU,KC_DO_FromHMI.AOss_LED_PRU,KC_DO_ToHMI.AOss_LED_PRU,KC_DO_DRV.AOss_LED_PRU);
//Инд. АОбс на ПРУ (+) 
DO_Processing(KC_DO.AObs_LED_PRU,KC_DO_FromHMI.AObs_LED_PRU,KC_DO_ToHMI.AObs_LED_PRU,KC_DO_DRV.AObs_LED_PRU);
//Инд. Вкл. пожнасоса на ПРУ (+) 
DO_Processing(KC_DO.FirePump_LED_PRU,KC_DO_FromHMI.FirePump_LED_PRU,KC_DO_ToHMI.FirePump_LED_PRU,KC_DO_DRV.FirePump_LED_PRU);
//АО в САУ ГПА 4
DO_Processing(KC_DO.AO_GPA4,KC_DO_FromHMI.AO_GPA4,KC_DO_ToHMI.AO_GPA4,KC_DO_DRV.AO_GPA4);
//АО в САУ ГПА 5
DO_Processing(KC_DO.AO_GPA5,KC_DO_FromHMI.AO_GPA5,KC_DO_ToHMI.AO_GPA5,KC_DO_DRV.AO_GPA5);
//АО в САУ ГПА 6
DO_Processing(KC_DO.AO_GPA6,KC_DO_FromHMI.AO_GPA6,KC_DO_ToHMI.AO_GPA6,KC_DO_DRV.AO_GPA6);
//АО в САУ УПА 
DO_Processing(KC_DO.AO_UPA,KC_DO_FromHMI.AO_UPA,KC_DO_ToHMI.AO_UPA,KC_DO_DRV.AO_UPA);
//АО в САУ УВИ
DO_Processing(KC_DO.AO_UVI,KC_DO_FromHMI.AO_UVI,KC_DO_ToHMI.AO_UVI,KC_DO_DRV.AO_UVI);
//АО в САУ ТСк
DO_Processing(KC_DO.AO_TSK,KC_DO_FromHMI.AO_TSK,KC_DO_ToHMI.AO_TSK,KC_DO_DRV.AO_TSK);
//АО в САУ УПГ
DO_Processing(KC_DO.AO_UPG,KC_DO_FromHMI.AO_UPG,KC_DO_ToHMI.AO_UPG,KC_DO_DRV.AO_UPG);
//АО в САУ НМс
DO_Processing(KC_DO.AO_NMS,KC_DO_FromHMI.AO_NMS,KC_DO_ToHMI.AO_NMS,KC_DO_DRV.AO_NMS);
//АО в САУ БВКС
DO_Processing(KC_DO.AO_BVKS,KC_DO_FromHMI.AO_BVKS,KC_DO_ToHMI.AO_BVKS,KC_DO_DRV.AO_BVKS);
//Резерв 110VDC
DO_Processing(KC_DO.Res_0,KC_DO_FromHMI.Res_0,KC_DO_ToHMI.Res_0,KC_DO_DRV.Res_0);
//Резерв 110VDC
DO_Processing(KC_DO.Res_1,KC_DO_FromHMI.Res_1,KC_DO_ToHMI.Res_1,KC_DO_DRV.Res_1);
//Резерв 110VDC
DO_Processing(KC_DO.Res_2,KC_DO_FromHMI.Res_2,KC_DO_ToHMI.Res_2,KC_DO_DRV.Res_2);
//Резерв 110VDC
DO_Processing(KC_DO.Res_3,KC_DO_FromHMI.Res_3,KC_DO_ToHMI.Res_3,KC_DO_DRV.Res_3);
//Резерв 110VDC
DO_Processing(KC_DO.Res_4,KC_DO_FromHMI.Res_4,KC_DO_ToHMI.Res_4,KC_DO_DRV.Res_4);
//Резерв 110VDC
DO_Processing(KC_DO.Res_5,KC_DO_FromHMI.Res_5,KC_DO_ToHMI.Res_5,KC_DO_DRV.Res_5);
//Инд. вкл. пожнасоса на ПРУ
DO_Processing(KC_DO.FirePump_LED_PRU2,KC_DO_FromHMI.FirePump_LED_PRU2,KC_DO_ToHMI.FirePump_LED_PRU2,KC_DO_DRV.FirePump_LED_PRU2);
//АО в САУ ГПА 1
DO_Processing(KC_DO.AO_GPA1,KC_DO_FromHMI.AO_GPA1,KC_DO_ToHMI.AO_GPA1,KC_DO_DRV.AO_GPA1);
//АО в САУ ГПА 2 
DO_Processing(KC_DO.AO_GPA2,KC_DO_FromHMI.AO_GPA2,KC_DO_ToHMI.AO_GPA2,KC_DO_DRV.AO_GPA2);
//АО в САУ ГПА 3 
DO_Processing(KC_DO.AO_GPA3,KC_DO_FromHMI.AO_GPA3,KC_DO_ToHMI.AO_GPA3,KC_DO_DRV.AO_GPA3);
//АО в ЛИС ГСМ 
DO_Processing(KC_DO.AO_GSM,KC_DO_FromHMI.AO_GSM,KC_DO_ToHMI.AO_GSM,KC_DO_DRV.AO_GSM);
//АО в ЛИС УПТИГ
DO_Processing(KC_DO.AO_UPTIG,KC_DO_FromHMI.AO_UPTIG,KC_DO_ToHMI.AO_UPTIG,KC_DO_DRV.AO_UPTIG);
//АОсс в ЛИС УПОУ (осн.) 
DO_Processing(KC_DO.AOss_UPOU_osn,KC_DO_FromHMI.AOss_UPOU_osn,KC_DO_ToHMI.AOss_UPOU_osn,KC_DO_DRV.AOss_UPOU_osn);
//АОбс в ЛИС УПОУ (осн.) 
DO_Processing(KC_DO.AObs_UPOU_osn,KC_DO_FromHMI.AObs_UPOU_osn,KC_DO_ToHMI.AObs_UPOU_osn,KC_DO_DRV.AObs_UPOU_osn);
//АОсс в ЛИС УПОУ (рез.)
DO_Processing(KC_DO.AOss_UPOU_rez,KC_DO_FromHMI.AOss_UPOU_rez,KC_DO_ToHMI.AOss_UPOU_rez,KC_DO_DRV.AOss_UPOU_rez);
//АОбс в ЛИС УПОУ (рез.) 
DO_Processing(KC_DO.AObs_UPOU_rez,KC_DO_FromHMI.AObs_UPOU_rez,KC_DO_ToHMI.AObs_UPOU_rez,KC_DO_DRV.AObs_UPOU_rez);
//Инд. АОсс на ПРУ 
DO_Processing(KC_DO.AOss_LED_PRU2,KC_DO_FromHMI.AOss_LED_PRU2,KC_DO_ToHMI.AOss_LED_PRU2,KC_DO_DRV.AOss_LED_PRU2);
//Инд. АОбс на ПРУ
DO_Processing(KC_DO.AObs_LED_PRU2,KC_DO_FromHMI.AObs_LED_PRU2,KC_DO_ToHMI.AObs_LED_PRU2,KC_DO_DRV.AObs_LED_PRU2);
//АО в ЛИС КОС 
DO_Processing(KC_DO.AO_KOS,KC_DO_FromHMI.AO_KOS,KC_DO_ToHMI.AO_KOS,KC_DO_DRV.AO_KOS);
//АО в ЛИС НМ 
DO_Processing(KC_DO.AO_NM,KC_DO_FromHMI.AO_NM,KC_DO_ToHMI.AO_NM,KC_DO_DRV.AO_NM);
//АО в ЛИС УНТС 
DO_Processing(KC_DO.AO_UNTS,KC_DO_FromHMI.AO_UNTS,KC_DO_ToHMI.AO_UNTS,KC_DO_DRV.AO_UNTS);
//АО в ЛИС УЗРГ
DO_Processing(KC_DO.AO_UZRG,KC_DO_FromHMI.AO_UZRG,KC_DO_ToHMI.AO_UZRG,KC_DO_DRV.AO_UZRG);
//Обогрев прибора АДЭС LSA1 включить
DO_Processing(KC_DO.EN_LSA1_ADES_ON,KC_DO_FromHMI.EN_LSA1_ADES_ON,KC_DO_ToHMI.EN_LSA1_ADES_ON,KC_DO_DRV.EN_LSA1_ADES_ON);
//Обогрев прибора АДЭС LSA2 включить
DO_Processing(KC_DO.EN_LSA2_ADES_ON,KC_DO_FromHMI.EN_LSA2_ADES_ON,KC_DO_ToHMI.EN_LSA2_ADES_ON,KC_DO_DRV.EN_LSA2_ADES_ON);
//Обогрев прибора АДЭС LSA3 включить
DO_Processing(KC_DO.EN_LSA3_ADES_ON,KC_DO_FromHMI.EN_LSA3_ADES_ON,KC_DO_ToHMI.EN_LSA3_ADES_ON,KC_DO_DRV.EN_LSA3_ADES_ON);
//Обогрев прибора LSA1 включить 
DO_Processing(KC_DO.EN_LSA1_GPA_ON,KC_DO_FromHMI.EN_LSA1_GPA_ON,KC_DO_ToHMI.EN_LSA1_GPA_ON,KC_DO_DRV.EN_LSA1_GPA_ON);
//Обогрев прибора LSA2 включить 
DO_Processing(KC_DO.EN_LSA2_GPA_ON,KC_DO_FromHMI.EN_LSA2_GPA_ON,KC_DO_ToHMI.EN_LSA2_GPA_ON,KC_DO_DRV.EN_LSA2_GPA_ON);
//Обогрев прибора LSA3 включить
DO_Processing(KC_DO.EN_LSA3_GPA_ON,KC_DO_FromHMI.EN_LSA3_GPA_ON,KC_DO_ToHMI.EN_LSA3_GPA_ON,KC_DO_DRV.EN_LSA3_GPA_ON);
//Обогрев прибора LSA4 включить
DO_Processing(KC_DO.EN_LSA4_GPA_ON,KC_DO_FromHMI.EN_LSA4_GPA_ON,KC_DO_ToHMI.EN_LSA4_GPA_ON,KC_DO_DRV.EN_LSA4_GPA_ON);
//Обогрев прибора LSA5 включить 
DO_Processing(KC_DO.EN_LSA5_GPA_ON,KC_DO_FromHMI.EN_LSA5_GPA_ON,KC_DO_ToHMI.EN_LSA5_GPA_ON,KC_DO_DRV.EN_LSA5_GPA_ON);
//Обогрев прибора LSA6 включить 
DO_Processing(KC_DO.EN_LSA6_GPA_ON,KC_DO_FromHMI.EN_LSA6_GPA_ON,KC_DO_ToHMI.EN_LSA6_GPA_ON,KC_DO_DRV.EN_LSA6_GPA_ON);
//Кран Кр51-2 - закрыть
DO_Processing(KC_DO.Kr51_2_OF,KC_DO_FromHMI.Kr51_2_OF,KC_DO_ToHMI.Kr51_2_OF,KC_DO_DRV.Kr51_2_OF);
//Кран Кр51-2 - открыть
DO_Processing(KC_DO.Kr51_2_ON,KC_DO_FromHMI.Kr51_2_ON,KC_DO_ToHMI.Kr51_2_ON,KC_DO_DRV.Kr51_2_ON);
//Кран Кр52-2 - закрыть
DO_Processing(KC_DO.Kr52_2_OF,KC_DO_FromHMI.Kr52_2_OF,KC_DO_ToHMI.Kr52_2_OF,KC_DO_DRV.Kr52_2_OF);
//Кран Кр52-2 - открыть
DO_Processing(KC_DO.Kr52_2_ON,KC_DO_FromHMI.Kr52_2_ON,KC_DO_ToHMI.Kr52_2_ON,KC_DO_DRV.Kr52_2_ON);
//Кран Кр53 - закрыть
DO_Processing(KC_DO.Kr53_OF,KC_DO_FromHMI.Kr53_OF,KC_DO_ToHMI.Kr53_OF,KC_DO_DRV.Kr53_OF);
//Кран Кр53 - открыть
DO_Processing(KC_DO.Kr53_ON,KC_DO_FromHMI.Kr53_ON,KC_DO_ToHMI.Kr53_ON,KC_DO_DRV.Kr53_ON);
//Кран Кр53бп - закрыть
DO_Processing(KC_DO.Kr53b_OF,KC_DO_FromHMI.Kr53b_OF,KC_DO_ToHMI.Kr53b_OF,KC_DO_DRV.Kr53b_OF);
//Кран Кр53бп - открыть
DO_Processing(KC_DO.Kr53b_ON,KC_DO_FromHMI.Kr53b_ON,KC_DO_ToHMI.Kr53b_ON,KC_DO_DRV.Kr53b_ON);
//Кран Кр54 - закрыть
DO_Processing(KC_DO.Kr54_OF,KC_DO_FromHMI.Kr54_OF,KC_DO_ToHMI.Kr54_OF,KC_DO_DRV.Kr54_OF);
//Кран Кр54 - открыть
DO_Processing(KC_DO.Kr54_ON,KC_DO_FromHMI.Kr54_ON,KC_DO_ToHMI.Kr54_ON,KC_DO_DRV.Kr54_ON);
//Кран Кр54бп - закрыть
DO_Processing(KC_DO.Kr54b_OF,KC_DO_FromHMI.Kr54b_OF,KC_DO_ToHMI.Kr54b_OF,KC_DO_DRV.Kr54b_OF);
//Кран Кр54бп - открыть
DO_Processing(KC_DO.Kr54b_ON,KC_DO_FromHMI.Kr54b_ON,KC_DO_ToHMI.Kr54b_ON,KC_DO_DRV.Kr54b_ON);
//ЭО от САУ КЦ
DO_Processing(KC_DO.EO_KC,KC_DO_FromHMI.EO_KC,KC_DO_ToHMI.EO_KC,KC_DO_DRV.EO_KC);
//Инд. ЭО от САУ КЦ
DO_Processing(KC_DO.EO_LED_KC,KC_DO_FromHMI.EO_LED_KC,KC_DO_ToHMI.EO_LED_KC,KC_DO_DRV.EO_LED_KC);
//АОсс от САУ КЦ
DO_Processing(KC_DO.AOss_KC,KC_DO_FromHMI.AOss_KC,KC_DO_ToHMI.AOss_KC,KC_DO_DRV.AOss_KC);
//АОбс от САУ КЦ
DO_Processing(KC_DO.AObs_KC,KC_DO_FromHMI.AObs_KC,KC_DO_ToHMI.AObs_KC,KC_DO_DRV.AObs_KC);
//Конец сгенерированного кода
]]></ST>
                </Function>
            </Folder>
        </Folder>
        <Folder Name="АПС" Comment="" Data="" UUID="SROI4G4V7W7U5NPW6N3HLRJEMY">
            <Function UUID="FW42INRNPRHFXK54IV4UB5K24M" Name="APS_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="5KOTXMQ56XMUXOPGEVEUSMNRCY" Name="unlock" Comment="Деблокировка" Type="BOOL" Usage="input" />
                    <Variable UUID="A4RLFHSGO6HEPPBSGLD75OAVJA" Name="i" Type="INT" Usage="internal" />
                </Variables>
                <ST><![CDATA[
for i :=0 to 5 do AlarmTarget[i] := FALSE; end_for; // 5 - номер последнего типа сигнализации (target)
if unlock then KC_FirstOutIndex := 0; end_if;
new_wrn := false;
new_crs := false;
i :=0;//= обнуление - очень важный момент для корректной работы приложения AT_Pult.lua (вывод Первопричины)

APS_Processing(KC_DI.Kn_AOss_PRU OR KC_DI.Kn_AOss_PRU_nz, 1.0, unlock, KC_APS.Kn_AOss_PRU, KC_APS_Internal.Kn_AOss_PRU, KC_FirstOutIndex, i);                            // АОcc от ПРУ КЦ [AOss]
APS_Processing(KC_BTN.AOss, 1.0, unlock, KC_APS.Kn_AOss_HMI, KC_APS_Internal.Kn_AOss_HMI, KC_FirstOutIndex, i);                                  // АОcc c АРМ оператора  [AOss]
APS_Processing(KC_DI.Kn_AObs_PRU OR KC_DI.Kn_AObs_PRU_nz, 1.0, unlock, KC_APS.Kn_AObs_PRU, KC_APS_Internal.Kn_AObs_PRU, KC_FirstOutIndex, i);                            // АОбc от ПРУ КЦ  [AObs]
APS_Processing(KC_BTN.AObs, 1.0, unlock, KC_APS.Kn_AObs_HMI, KC_APS_Internal.Kn_AObs_HMI, KC_FirstOutIndex, i);                                  // АОбc c АРМ оператора  [AObs]
APS_Processing(KC_DI.Kn_EO_PRU, 1.0, unlock, KC_APS.Kn_EO_PRU, KC_APS_Internal.Kn_EO_PRU, KC_FirstOutIndex, i);                                  // ЭО от ПРУ КЦ [AOss]
APS_Processing(KC_ANB.Tg_out_KC_Av, 1.0, unlock, KC_APS.Tg_out_KC_Av, KC_APS_Internal.Tg_out_KC_Av, KC_FirstOutIndex, i);                        // Высокая температура на выходе КЦ [AObs]
APS_Processing(KC_ANB.Pg_out_KC_Av, 3.0, unlock, KC_APS.Pg_out_KC_Av, KC_APS_Internal.Pg_out_KC_Av, KC_FirstOutIndex, i);                        // Высокое давление на выходе КЦ [AObs]
APS_Processing(KC_DI.GPA5_GAS20, 1.0, unlock, KC_APS.GPA5_GAS20, KC_APS_Internal.GPA5_GAS20, KC_FirstOutIndex, i);                               // Загазованность аварийная  ГПА5 [AS]
APS_Processing(KC_DI.GPA6_GAS20, 1.0, unlock, KC_APS.GPA6_GAS20, KC_APS_Internal.GPA6_GAS20, KC_FirstOutIndex, i);                               // Загазованность аварийная  ГПА6 [AS]
APS_Processing(KC_DI.GPA4_GAS20, 1.0, unlock, KC_APS.GPA4_GAS20, KC_APS_Internal.GPA4_GAS20, KC_FirstOutIndex, i);                               // Загазованность аварийная  ГПА4 [AS]
APS_Processing(KC_DI.UPG_GAS20, 1.0, unlock, KC_APS.UPG_GAS20, KC_APS_Internal.UPG_GAS20, KC_FirstOutIndex, i);                                  // Загазованность аварийная УПГ [AObs]
APS_Processing(KC_DI.ASPS_Bad, 1.0, unlock, KC_APS.ASPS_Bad, KC_APS_Internal.ASPS_Bad, KC_FirstOutIndex, i);                                     // Неисправность ПС [AS]
APS_Processing(KC_DI.Fire_in_ADES, 1.0, unlock, KC_APS.Fire_in_ADES, KC_APS_Internal.Fire_in_ADES, KC_FirstOutIndex, i);                         // Пожар в аварийной дизельной электростанции [AS]
APS_Processing(KC_DI.Fire_in_BB_BVVUP, 1.0, unlock, KC_APS.Fire_in_BB_BVVUP, KC_APS_Internal.Fire_in_BB_BVVUP, KC_FirstOutIndex, i);             // Пожар в ББ БВВ УП [AS]
APS_Processing(KC_DI.Fire_in_EXZ, 1.0, unlock, KC_APS.Fire_in_EXZ, KC_APS_Internal.Fire_in_EXZ, KC_FirstOutIndex, i);                            // Пожар в БКУ ЭХЗ "Антик" [AS]
APS_Processing(KC_DI.Fire_in_Oil_Atanks, 1.0, unlock, KC_APS.Fire_in_Oil_Atanks, KC_APS_Internal.Fire_in_Oil_Atanks, KC_FirstOutIndex, i);       // Пожар в емкости для аварийного слива масла [AS]
APS_Processing(KC_DI.Fire_in_Fuel_ATanks2, 1.0, unlock, KC_APS.Fire_in_Fuel_ATanks2, KC_APS_Internal.Fire_in_Fuel_ATanks2, KC_FirstOutIndex, i); // Пожар в емкости для аварийного слива топлива [AS]
APS_Processing(KC_DI.Fire_in_MetanolTank, 1.0, unlock, KC_APS.Fire_in_MetanolTank, KC_APS_Internal.Fire_in_MetanolTank, KC_FirstOutIndex, i);    // Пожар в емкости метанола  [AS]
APS_Processing(KC_DI.Fire_in_ZADES, 1.0, unlock, KC_APS.Fire_in_ZADES, KC_APS_Internal.Fire_in_ZADES, KC_FirstOutIndex, i);                      // Пожар в здании АДЭС  [AS]
APS_Processing(KC_DI.Fire_in_Kot, 1.0, unlock, KC_APS.Fire_in_Kot, KC_APS_Internal.Fire_in_Kot, KC_FirstOutIndex, i);                            // Пожар в здании котельной [PS]
APS_Processing(KC_DI.Fire_in_NasOil, 1.0, unlock, KC_APS.Fire_in_NasOil, KC_APS_Internal.Fire_in_NasOil, KC_FirstOutIndex, i);                   // Пожар в здании насосной масел [AS]
APS_Processing(KC_DI.Fire_in_NasMet, 1.0, unlock, KC_APS.Fire_in_NasMet, KC_APS_Internal.Fire_in_NasMet, KC_FirstOutIndex, i);                   // Пожар в здании насосной метанола [AS]
APS_Processing(KC_DI.Fire_in_NasPPV, 1.0, unlock, KC_APS.Fire_in_NasPPV, KC_APS_Internal.Fire_in_NasPPV, KC_FirstOutIndex, i);                   // Пожар в здании насосной противопожарного водоснабжения [PS]
APS_Processing(KC_DI.Fire_in_Wwplant, 1.0, unlock, KC_APS.Fire_in_Wwplant, KC_APS_Internal.Fire_in_Wwplant, KC_FirstOutIndex, i);                // Пожар в здании очистных сооружений сточных вод [PS]
APS_Processing(KC_DI.Fire_in_ZdGate, 1.0, unlock, KC_APS.Fire_in_ZdGate, KC_APS_Internal.Fire_in_ZdGate, KC_FirstOutIndex, i);                   // Пожар в здании проходной [PS]
APS_Processing(KC_DI.Fire_in_PEB, 1.0, unlock, KC_APS.Fire_in_PEB, KC_APS_Internal.Fire_in_PEB, KC_FirstOutIndex, i);                            // Пожар в здании ПЭБ [AS]
APS_Processing(KC_DI.Fire_in_REB, 1.0, unlock, KC_APS.Fire_in_REB, KC_APS_Internal.Fire_in_REB, KC_FirstOutIndex, i);                            // Пожар в здании РЭБ  [PS]
APS_Processing(KC_DI.Fire_in_UZRG, 1.0, unlock, KC_APS.Fire_in_UZRG, KC_APS_Internal.Fire_in_UZRG, KC_FirstOutIndex, i);                         // Пожар в здании УЗРГ [AS]
APS_Processing(KC_DI.Fire_in_ZdUPG, 1.0, unlock, KC_APS.Fire_in_ZdUPG, KC_APS_Internal.Fire_in_ZdUPG, KC_FirstOutIndex, i);                      // Пожар в здании УПГ [AOss]
APS_Processing(KC_DI.Fire_in_UTO, 1.0, unlock, KC_APS.Fire_in_UTO, KC_APS_Internal.Fire_in_UTO, KC_FirstOutIndex, i);                            // Пожар в здании УТО [AS]
APS_Processing(KC_DI.Fire_in_VKompr, 1.0, unlock, KC_APS.Fire_in_Vkompr, KC_APS_Internal.Fire_in_Vkompr, KC_FirstOutIndex, i);                   // Пожар в компрессорной сжатого воздуха [AS]
APS_Processing(KC_DI.Fire_in_NasOil2, 1.0, unlock, KC_APS.Fire_in_NasOil2, KC_APS_Internal.Fire_in_NasOil2, KC_FirstOutIndex, i);                // Пожар в насосной масел [PS]
APS_Processing(KC_DI.Fire_in_DainTank, 1.0, unlock, KC_APS.Fire_in_DainTank, KC_APS_Internal.Fire_in_DainTank, KC_FirstOutIndex, i);             // Пожар в подземной дренажной емкости [AS]
APS_Processing(KC_DI.Fire_in_Gate, 1.0, unlock, KC_APS.Fire_in_Gate, KC_APS_Internal.Fire_in_Gate, KC_FirstOutIndex, i);                         // Пожар в проходной [AS]
APS_Processing(KC_DI.Fire_in_Fuel_ATanks, 1.0, unlock, KC_APS.Fire_in_Fuel_Atanks, KC_APS_Internal.Fire_in_Fuel_Atanks, KC_FirstOutIndex, i);    // Пожар в резервуаре для аварийного слива топлива [AS]
APS_Processing(KC_DI.Fire_in_FuelTanks, 1.0, unlock, KC_APS.Fire_in_FuelTanks, KC_APS_Internal.Fire_in_FuelTanks, KC_FirstOutIndex, i);          // Пожар в резервуарном парке для хранения дизтоплива [AS]
APS_Processing(KC_DI.Fire_in_Eblock, 1.0, unlock, KC_APS.Fire_in_Eblock, KC_APS_Internal.Fire_in_Eblock, KC_FirstOutIndex, i);                   // Пожар в энергоблоке [AS]
APS_Processing(algKC.Fire_in_GPA, 1.0, unlock, KC_APS.Fire_in_GPA, KC_APS_Internal.Fire_in_GPA, KC_FirstOutIndex, i);                            // Пожар ГПА [AS]
APS_Processing(KC_DI.Fire_in_GPA5, 1.0, unlock, KC_APS.Fire_in_GPA5, KC_APS_Internal.Fire_in_GPA5, KC_FirstOutIndex, i);                         // Пожар ГПА5 [AS]
APS_Processing(KC_DI.Fire_in_GPA6, 1.0, unlock, KC_APS.Fire_in_GPA6, KC_APS_Internal.Fire_in_GPA6, KC_FirstOutIndex, i);                         // Пожар ГПА6 [AS]
APS_Processing(KC_DI.Fire_in_GPA4, 1.0, unlock, KC_APS.Fire_in_GPA4, KC_APS_Internal.Fire_in_GPA4, KC_FirstOutIndex, i);                         // Пожар ГПА4 [AS]
APS_Processing(KC_DI.Fire_in_OilTanks, 1.0, unlock, KC_APS.Fire_in_OilTanks, KC_APS_Internal.Fire_in_OilTanks, KC_FirstOutIndex, i);             // Пожар на площадке блока резервуаров 2x10 м куб. [AS]
APS_Processing(KC_DI.Fire_in_FuelTanks2, 1.0, unlock, KC_APS.Fire_in_FuelTanks2, KC_APS_Internal.Fire_in_FuelTanks2, KC_FirstOutIndex, i);       // Пожар на площадке резервуара для дизтоплива 25 м куб. [AS]
APS_Processing(KC_DI.Fire_in_MetanolSklad, 1.0, unlock, KC_APS.Fire_in_MetanolSklad, KC_APS_Internal.Fire_in_MetanolSklad, KC_FirstOutIndex, i); // Пожар на складе метанола [AS]
APS_Processing(KC_DI.Fire_in_UDK, 1.0, unlock, KC_APS.Fire_in_UDK, KC_APS_Internal.Fire_in_UDK, KC_FirstOutIndex, i);                            // Пожар на установке дожимных компрессоров [AS]
APS_Processing(KC_DI.Fire_in_RegenMetanol, 1.0, unlock, KC_APS.Fire_in_RegenMetanol, KC_APS_Internal.Fire_in_RegenMetanol, KC_FirstOutIndex, i); // Пожар на установке регенерации метанола [AS]
APS_Processing(KC_DI.Fire_in_URM, 1.0, unlock, KC_APS.Fire_in_URM, KC_APS_Internal.Fire_in_URM, KC_FirstOutIndex, i);                            // Пожар УРМ [AS]
APS_Processing(algKC.Gasmain_in_KC_brk, 1.0, unlock, KC_APS.Gasmain_in_KC_brk, KC_APS_Internal.Gasmain_in_KC_brk, KC_FirstOutIndex, i);          // Прорыв трубопровода на входе в КЦ [AObs]
APS_Processing(algKC.Gasmain_out_KC_brk, 1.0, unlock, KC_APS.Gasmain_out_KC_brk, KC_APS_Internal.Gasmain_out_KC_brk, KC_FirstOutIndex, i);       // Прорыв трубопровода на выходе в КЦ [AObs]
APS_Processing(KC_DI.UTUO_Alarm, 1.0, unlock, KC_APS.UTUO_Alarm, KC_APS_Internal.UTUO_Alarm, KC_FirstOutIndex, i);                               // УТУО. Обобщенный сигнал аварии  [AS]
APS_Processing(algKC.Kr51_selfON, 1.0, unlock, KC_APS.Kr51_selfON, KC_APS_Internal.Kr51_selfON, KC_FirstOutIndex, i);                            // Самопроизвольное открытие Крана 51 [AS]
APS_Processing(algKC.Kr51_selfOF, 1.0, unlock, KC_APS.Kr51_selfOF, KC_APS_Internal.Kr51_selfOF, KC_FirstOutIndex, i);                            // Самопроизвольное закрытие Крана 51 [AS]
APS_Processing(algKC.Kr52_selfON, 1.0, unlock, KC_APS.Kr52_selfON, KC_APS_Internal.Kr52_selfON, KC_FirstOutIndex, i);                            // Самопроизвольное открытие Крана 52 [AS]
APS_Processing(algKC.Kr52_selfOF, 1.0, unlock, KC_APS.Kr52_selfOF, KC_APS_Internal.Kr52_selfOF, KC_FirstOutIndex, i);                            // Самопроизвольное закрытие Крана 52 [AS]
APS_Processing(algKC.Kr53_selfON, 1.0, unlock, KC_APS.Kr53_selfON, KC_APS_Internal.Kr53_selfON, KC_FirstOutIndex, i);                            // Самопроизвольное открытие Крана 53 [AS]
APS_Processing(algKC.Kr53_selfOF, 1.0, unlock, KC_APS.Kr53_selfOF, KC_APS_Internal.Kr53_selfOF, KC_FirstOutIndex, i);                            // Самопроизвольное закрытие Крана 53 [AS]
APS_Processing(algKC.Kr53bp_selfON, 1.0, unlock, KC_APS.Kr53bp_selfON, KC_APS_Internal.Kr53bp_selfON, KC_FirstOutIndex, i);                      // Самопроизвольное открытие Крана 53бп [AS]
APS_Processing(algKC.Kr53bp_selfOF, 1.0, unlock, KC_APS.Kr53bp_selfOF, KC_APS_Internal.Kr53bp_selfOF, KC_FirstOutIndex, i);                      // Самопроизвольное закрытие Крана 53бп [AS]
APS_Processing(algKC.Kr54_selfON, 1.0, unlock, KC_APS.Kr54_selfON, KC_APS_Internal.Kr54_selfON, KC_FirstOutIndex, i);                            // Самопроизвольное открытие Крана 54 [AS]
APS_Processing(algKC.Kr54_selfOF, 1.0, unlock, KC_APS.Kr54_selfOF, KC_APS_Internal.Kr54_selfOF, KC_FirstOutIndex, i);                            // Самопроизвольное закрытие Крана 54 [AS]
APS_Processing(algKC.Kr54bp_selfON, 1.0, unlock, KC_APS.Kr54bp_selfON, KC_APS_Internal.Kr54bp_selfON, KC_FirstOutIndex, i);                      // Самопроизвольное открытие Крана 54бп [AS]
APS_Processing(algKC.Kr54bp_selfOF, 1.0, unlock, KC_APS.Kr54bp_selfOF, KC_APS_Internal.Kr54bp_selfOF, KC_FirstOutIndex, i);                      // Самопроизвольное закрытие Крана 54бп [AS]
APS_Processing(KC_DI.Dver_US_open, 1.0, unlock, KC_APS.Dver_US_open, KC_APS_Internal.Dver_US_open, KC_FirstOutIndex, i);                         // Дверь УС открыта  [PS]
APS_Processing(KC_DI.U_AC220_UK, 1.0, unlock, KC_APS.U_AC220_UK, KC_APS_Internal.U_AC220_UK, KC_FirstOutIndex, i);                               //  Нет  ~220В в УК  [PS]
APS_Processing(KC_DI.T_US_25v, 1.0, unlock, KC_APS.T_US_25v, KC_APS_Internal.T_US_25v, KC_FirstOutIndex, i);                                     //  Температура в УС больше 25 °С  [PS]
APS_Processing(KC_DI.Vn_P1_Alarm, 1.0, unlock, KC_APS.Vn_P1_Alarm, KC_APS_Internal.Vn_P1_Alarm, KC_FirstOutIndex, i);                            // Авария вентсистемы П1  [PS]
APS_Processing(KC_DI.Vn_P4_Alarm, 1.0, unlock, KC_APS.Vn_P4_Alarm, KC_APS_Internal.Vn_P4_Alarm, KC_FirstOutIndex, i);                            // Авария вентсистемы П4 [PS]
APS_Processing(KC_DI.Lm_R1_v, 1.0, unlock, KC_APS.Lm_R1_v, KC_APS_Internal.Lm_R1_v, KC_FirstOutIndex, i);                                        // Верхний уровень в резервуаре Р1 для дренажа масла нагнетателя  ГПА4 [PS]
APS_Processing(KC_DI.Lm_R4_v, 1.0, unlock, KC_APS.Lm_R4_v, KC_APS_Internal.Lm_R4_v, KC_FirstOutIndex, i);                                        // Верхний уровень в резервуаре Р4 для отработанного масла двигателя ГПА4 [PS]
APS_Processing(KC_DI.Lm_R2_v, 1.0, unlock, KC_APS.Lm_R2_v, KC_APS_Internal.Lm_R2_v, KC_FirstOutIndex, i);                                        // Верхний уровень в резервуаре Р2 для дренажа масла нагнетателя ГПА5 [PS]
APS_Processing(KC_DI.Lm_R5_v, 1.0, unlock, KC_APS.Lm_R5_v, KC_APS_Internal.Lm_R5_v, KC_FirstOutIndex, i);                                        // Верхний уровень в резервуаре Р5 для отработанного масла двигателя ГПА5 [PS]
APS_Processing(KC_DI.Lm_R3_v, 1.0, unlock, KC_APS.Lm_R3_v, KC_APS_Internal.Lm_R3_v, KC_FirstOutIndex, i);                                        // Верхний уровень в резервуаре Р3 для дренажа масла нагнетателя ГПА6 [PS]
APS_Processing(KC_DI.Lm_R6_v, 1.0, unlock, KC_APS.Lm_R6_v, KC_APS_Internal.Lm_R6_v, KC_FirstOutIndex, i);                                        // Верхний уровень в резервуаре Р6 для отработанного масла двигателя ГПА6 [PS]
APS_Processing(KC_DI.Vn_V4_Alarm, 1.0, unlock, KC_APS.Vn_V4_Alarm, KC_APS_Internal.Vn_V4_Alarm, KC_FirstOutIndex, i);                            // Авария вентсистемы В4 [PS]
APS_Processing(algKC.Lf_R1_v, 1.0, unlock, KC_APS.Lf_R1_v, KC_APS_Internal.Lf_R1_v, KC_FirstOutIndex, i);                                        // Верхний уровень в Р1 для дизтоплива [PS]
APS_Processing(algKC.Lf_R2a_v, 1.0, unlock, KC_APS.Lf_R2a_v, KC_APS_Internal.Lf_R2a_v, KC_FirstOutIndex, i);                                     // Верхний уровень в Р2 для аварийного слива топлива [PS]
APS_Processing(KC_DI.Cabin_open, 1.0, unlock, KC_APS.Cabin_open, KC_APS_Internal.Cabin_open, KC_FirstOutIndex, i);                               // Двери САУ КЦ открыты [PS]
APS_Processing(KC_DI.Dver_UK_open, 1.0, unlock, KC_APS.Dver_UK_open, KC_APS_Internal.Dver_UK_open, KC_FirstOutIndex, i);                         // Дверь УК открыта [PS]
APS_Processing(KC_DI.UPG_Gas1, 1.0, unlock, KC_APS.UPG_Gas1, KC_APS_Internal.UPG_Gas1, KC_FirstOutIndex, i);                                     // Загазованность в УПГ более 1% [PS]
APS_Processing(KC_DI.GPA4_GAS10, 1.0, unlock, KC_APS.GPA4_GAS10, KC_APS_Internal.GPA4_GAS10, KC_FirstOutIndex, i);                               // Загазованность предупредительная (10%) ГПА4 [PS]
APS_Processing(KC_DI.GPA5_GAS10, 1.0, unlock, KC_APS.GPA5_GAS10, KC_APS_Internal.GPA5_GAS10, KC_FirstOutIndex, i);                               // Загазованность предупредительная (10%) ГПА5 [PS]
APS_Processing(KC_DI.GPA6_GAS10, 1.0, unlock, KC_APS.GPA6_GAS10, KC_APS_Internal.GPA6_GAS10, KC_FirstOutIndex, i);                               // Загазованность предупредительная (10%) ГПА6 [PS]
APS_Processing(KC_DI.UPG_GAS10, 1.0, unlock, KC_APS.UPG_GAS10, KC_APS_Internal.UPG_GAS10, KC_FirstOutIndex, i);                                  // Загазованность предупредительная (10%) УПГ [PS]
APS_Processing(KC_DI.UZ1_Bad, 1.0, unlock, KC_APS.UZ1_Bad, KC_APS_Internal.UZ1_Bad, KC_FirstOutIndex, i);                                        // Неисправность UZ1  [PS]
APS_Processing(KC_DI.UZ1_Bad_KCD, 1.0, unlock, KC_APS.UZ1_Bad_KCD, KC_APS_Internal.UZ1_Bad_KCD, KC_FirstOutIndex, i);                            // Неисправность UZ1. КЦД   [PS]
APS_Processing(KC_DI.UZ2_Bad, 1.0, unlock, KC_APS.UZ2_Bad, KC_APS_Internal.UZ2_Bad, KC_FirstOutIndex, i);                                        // Неисправность UZ2  [PS]
APS_Processing(KC_DI.UZ2_Bad_KCD, 1.0, unlock, KC_APS.UZ2_Bad_KCD, KC_APS_Internal.UZ2_Bad_KCD, KC_FirstOutIndex, i);                            // Неисправность UZ2. КЦД   [PS]
APS_Processing(KC_DI.GPA6_ASPS_Bad, 1.0, unlock, KC_APS.GPA6_ASPS_Bad, KC_APS_Internal.GPA6_ASPS_Bad, KC_FirstOutIndex, i);                      // Неисправность АСПС, КЗ и ПТ ГПА6 [PS]
APS_Processing(KC_DI.GPA4_ASPS_Bad, 1.0, unlock, KC_APS.GPA4_ASPS_Bad, KC_APS_Internal.GPA4_ASPS_Bad, KC_FirstOutIndex, i);                      // Неисправность АСПС, КЗ и ПТ ГПА4 [PS]
APS_Processing(KC_DI.GPA5_ASPS_Bad, 1.0, unlock, KC_APS.GPA5_ASPS_Bad, KC_APS_Internal.GPA5_ASPS_Bad, KC_FirstOutIndex, i);                      // Неисправность АСПС, КЗ и ПТ ГПА5 [PS]
APS_Processing(KC_DI.UPG_ASPS_Bad, 1.0, unlock, KC_APS.UPG_ASPS_Bad, KC_APS_Internal.UPG_ASPS_Bad, KC_FirstOutIndex, i);                         // Неисправность АСПС, КЗ и ПТ УПГ [PS]
APS_Processing(KC_DI.URM_ASPS_Bad, 1.0, unlock, KC_APS.URM_ASPS_Bad, KC_APS_Internal.URM_ASPS_Bad, KC_FirstOutIndex, i);                         // Неисправность АСПС, КЗ и ПТ УРМ [PS]
APS_Processing(KC_DI.PLC_GPA4_Bad, 1.0, unlock, KC_APS.PLC_GPA4_Bad, KC_APS_Internal.PLC_GPA4_Bad, KC_FirstOutIndex, i);                         // Неисправность контроллера САУ ГПА4 [PS]
APS_Processing(KC_DI.PLC_GPA5_Bad, 1.0, unlock, KC_APS.PLC_GPA5_Bad, KC_APS_Internal.PLC_GPA5_Bad, KC_FirstOutIndex, i);                         // Неисправность контроллера САУ ГПА5 [PS]
APS_Processing(KC_DI.PLC_GPA6_Bad, 1.0, unlock, KC_APS.PLC_GPA6_Bad, KC_APS_Internal.PLC_GPA6_Bad, KC_FirstOutIndex, i);                         // Неисправность контроллера САУ ГПА6 [PS]
APS_Processing(not KC_DI.DC24osn_Ext1_ok, 1.0, unlock, KC_APS.DC24osn_Ext1_Bad, KC_APS_Internal.DC24osn_Ext1_Bad, KC_FirstOutIndex, i);          // Неисправность осн. ИП =24В внешних цепей [PS]
APS_Processing(not KC_DI.DC24osn_Ext2_ok, 1.0, unlock, KC_APS.DC24osn_Ext2_Bad, KC_APS_Internal.DC24osn_Ext2_Bad, KC_FirstOutIndex, i);          // Неисправность осн. ИП =24В внешних цепей [PS]
APS_Processing(not KC_DI.DC24osn_Int_ok, 1.0, unlock, KC_APS.DC24osn_Int_Bad, KC_APS_Internal.DC24osn_Int_Bad, KC_FirstOutIndex, i);             // Неисправность осн. ИП =24В внутренних цепей [PS]
APS_Processing(not KC_DI.DC24rez_Ext1_ok, 1.0, unlock, KC_APS.DC24rez_Ext1_Bad, KC_APS_Internal.DC24rez_Ext1_Bad, KC_FirstOutIndex, i);          // Неисправность рез. ИП =24В внешних цепей [PS]
APS_Processing(not KC_DI.DC24rez_Ext2_ok, 1.0, unlock, KC_APS.DC24rez_Ext2_Bad, KC_APS_Internal.DC24rez_Ext2_Bad, KC_FirstOutIndex, i);          // Неисправность рез. ИП =24В внешних цепей [PS]
APS_Processing(not KC_DI.DC24rez_Int_ok, 1.0, unlock, KC_APS.DC24rez_Int_Bad, KC_APS_Internal.DC24rez_Int_Bad, KC_FirstOutIndex, i);             // Неисправность рез. ИП =24В внутренних цепей [PS] 
APS_Processing(KC_DI.SAPS_Bad, 1.0, unlock, KC_APS.SAPS_Bad, KC_APS_Internal.SAPS_Bad, KC_FirstOutIndex, i);                                     // Неисправность САПС обобщенный [PS]
APS_Processing(KC_DI.SAU_UPG_Bad, 1.0, unlock, KC_APS.SAU_UPG_Bad, KC_APS_Internal.SAU_UPG_Bad, KC_FirstOutIndex, i);                            // Неисправность САУ УПГ [PS]
APS_Processing(KC_DI.U_AC220_US, 1.0, unlock, KC_APS.U_AC220_US, KC_APS_Internal.U_AC220_US, KC_FirstOutIndex, i);                               // Нет ~220В в УC  [PS]
APS_Processing(KC_DI.Chk_razr, 1.0, unlock, KC_APS.Chk_razr, KC_APS_Internal.Chk_razr, KC_FirstOutIndex, i);                                     // Нет исправности разрядников [PS]
APS_Processing(KC_DI.Chk_AC220_SAU, 1.0, unlock, KC_APS.Chk_AC220_SAU, KC_APS_Internal.Chk_AC220_SAU, KC_FirstOutIndex, i);                      // Нет основного питания  ~220 В [PS]
APS_Processing(KC_DI.Chk_DC220_Kr, 1.0, unlock, KC_APS.Chk_DC220_Kr, KC_APS_Internal.Chk_DC220_Kr, KC_FirstOutIndex, i);                         // Нет питания кранов =220В [PS]
APS_Processing(KC_DI.Chk_DC220_SAU, 1.0, unlock, KC_APS.Chk_DC220_SAU, KC_APS_Internal.Chk_DC220_SAU, KC_FirstOutIndex, i);                      // Нет резервного питания  =220 В [PS]
APS_Processing(algKC.Lf_R1_n, 1.0, unlock, KC_APS.Lf_R1_n, KC_APS_Internal.Lf_R1_n, KC_FirstOutIndex, i);                                        // Нижний уровень в Р1 для дизтоплива [PS]
APS_Processing(KC_ANB.Tg_out_KC_Pv, 1.0, unlock, KC_APS.Tg_out_KC_Pv, KC_APS_Internal.Tg_out_KC_Pv, KC_FirstOutIndex, i);                        // Повышенная температура на выходе КЦ [PS]
APS_Processing(KC_ANB.Pg_out_KC_Pv, 1.0, unlock, KC_APS.Pg_out_KC_Pv, KC_APS_Internal.Pg_out_KC_Pv, KC_FirstOutIndex, i);                        // Повышенное давление на выходе КЦ [PS]
APS_Processing(KC_DI.U_hi, 1.0, unlock, KC_APS.U_hi, KC_APS_Internal.U_hi, KC_FirstOutIndex, i);                                                 // Повышенное напряжение  [PS]
APS_Processing(KC_DI.U_lo, 1.0, unlock, KC_APS.U_lo, KC_APS_Internal.U_lo, KC_FirstOutIndex, i);                                                 // Пониженное напряжение [PS]
APS_Processing(KC_DI.UK_Bad, 1.0, unlock, KC_APS.UK_Bad, KC_APS_Internal.UK_Bad, KC_FirstOutIndex, i);                                           // УК неисправен [PS]
APS_Processing(KC_DI.UTUO_Gas10, 1.0, unlock, KC_APS.UTUO_Gas10, KC_APS_Internal.UTUO_Gas10, KC_FirstOutIndex, i);                               // УТУО. Загазованность по метану более 10% НКПР [PS]
APS_Processing(KC_DI.UTUO_No_U, 1.0, unlock, KC_APS.UTUO_No_U, KC_APS_Internal.UTUO_No_U, KC_FirstOutIndex, i);                                  // УТУО. Исчезновение напряжения питания [PS]
APS_Processing(KC_DI.UTUO_Kl_ots_OF, 1.0, unlock, KC_APS.UTUO_Kl_ots_OF, KC_APS_Internal.UTUO_Kl_ots_OF, KC_FirstOutIndex, i);                   // УТУО. Срабатывание отсечного клапана на подводящем газопроводе [PS]
APS_Processing(algKC.Fire_object_more2, 1.0, unlock, KC_APS.Fire_in_2obj, KC_APS_Internal.Fire_in_2obj, KC_FirstOutIndex, i);                    // Пожар в двух и более помещениях [AOss]
APS_Processing(algKC.Fire_GPA_more2, 1.0, unlock, KC_APS.Fire_in_2GPA, KC_APS_Internal.Fire_in_2GPA, KC_FirstOutIndex, i);                       // Пожар на двух и более ГПА [AOss]
APS_Processing(algKC.Gas_GPA_more2, 1.0, unlock, KC_APS.Gas_in_2GPA, KC_APS_Internal.Gas_in_2GPA, KC_FirstOutIndex, i);                          // Аварийная загазованность на двух и более ГПА [AOss]
//= добавлены сенсорные кнопки с ПРУ
APS_Processing(PRU.AOss_BTN, 1.0, unlock, KC_APS.PRU_AOss_BTN, KC_APS_Internal.PRU_AOss_BTN, KC_FirstOutIndex, i);                            	 // АОcc от ПРУ КЦ (сенсорная кнопка) [AOss]
APS_Processing(PRU.AObs_BTN, 1.0, unlock, KC_APS.PRU_AObs_BTN, KC_APS_Internal.PRU_AObs_BTN, KC_FirstOutIndex, i);                            	 // АОбc от ПРУ КЦ (сенсорная кнопка) [AObs]

//==============================================================================================================================================
//= добавлена сигнализация от смежных подсистем - Котельной и Пульсара

//=============== КОТЕЛЬНАЯ ==========================================
APS_Processing(KC_KOT_mb_DI.zagaz_CH_10_NKPV, 1.0, unlock, KC_APS.zagaz_CH_10_NKPV, KC_APS_Internal.zagaz_CH_10_NKPV, KC_FirstOutIndex, i);      // Котельная: Загазованность СН 10% НКПВ [AS]
APS_Processing(KC_KOT_mb_DI.zagaz_CO_100_2, 1.0, unlock, KC_APS.zagaz_CO_100_2, KC_APS_Internal.zagaz_CO_100_2, KC_FirstOutIndex, i);      // Котельная: Загазованность СО 100 мГ/м3 2-й порог [AS]
APS_Processing(KC_KOT_mb_DI.P_obr_v_AvLow, 1.0, unlock, KC_APS.P_obr_v_AvLow, KC_APS_Internal.P_obr_v_AvLow, KC_FirstOutIndex, i);      // Котельная: Давление обратной воды аварийно низкое [AS]
APS_Processing(KC_KOT_mb_DI.Pozhar, 1.0, unlock, KC_APS.Pozhar, KC_APS_Internal.Pozhar, KC_FirstOutIndex, i);      // Котельная: Пожар в котельной [AS]
APS_Processing(KC_KOT_mb_DI.P_gaza_Fault, 1.0, unlock, KC_APS.P_gaza_Fault, KC_APS_Internal.P_gaza_Fault, KC_FirstOutIndex, i);      // Котельная: Давление газа не в норме [AS]
APS_Processing(KC_KOT_mb_DI.P_obr_v_AvHi, 1.0, unlock, KC_APS.P_obr_v_AvHi, KC_APS_Internal.P_obr_v_AvHi, KC_FirstOutIndex, i);      // Котельная: Давление обратной воды аварийно высокое [AS]
APS_Processing(KC_KOT_mb_DI.P_prym_sv_AvHi, 1.0, unlock, KC_APS.P_prym_sv_AvHi, KC_APS_Internal.P_prym_sv_AvHi, KC_FirstOutIndex, i);      // Котельная: Давление прямой сетевой воды аварийно высокое [AS]
APS_Processing(KC_KOT_mb_DI.AVR_SN_Fault, 1.0, unlock, KC_APS.AVR_SN_Fault, KC_APS_Internal.AVR_SN_Fault, KC_FirstOutIndex, i);      // Котельная: Не сработал АВР сетевых насосов [AS]
APS_Processing(KC_KOT_mb_DI.Avar_v_APV, 1.0, unlock, KC_APS.Avar_v_APV, KC_APS_Internal.Avar_v_APV, KC_FirstOutIndex, i);      // Котельная: Авария в системе АПВ [AS]
APS_Processing(KC_KOT_mb_DI.Avar_VRU, 1.0, unlock, KC_APS.Avar_VRU, KC_APS_Internal.Avar_VRU, KC_FirstOutIndex, i);      // Котельная: Авария ВРУ [AS]
APS_Processing(KC_KOT_mb_DI.Stop_Kotel1, 1.0, unlock, KC_APS.Stop_Kotel1, KC_APS_Internal.Stop_Kotel1, KC_FirstOutIndex, i);      // Котельная: Аварийно остановился котел №1 [AS]
APS_Processing(KC_KOT_mb_DI.Stop_Kotel2, 1.0, unlock, KC_APS.Stop_Kotel2, KC_APS_Internal.Stop_Kotel2, KC_FirstOutIndex, i);      // Котельная: Аварийно остановился котел №2 [AS]

APS_Processing(KC_KOT_mb_DI.EKV_vh_NIV_max, 1.0, unlock, KC_APS.EKV_vh_NIV_max, KC_APS_Internal.EKV_vh_NIV_max, KC_FirstOutIndex, i);  // Котельная: ЭКМ на выходе НИВ максимум [PS]
APS_Processing(KC_KOT_mb_DI.EKV_vh_NIV_min, 1.0, unlock, KC_APS.EKV_vh_NIV_min, KC_APS_Internal.EKV_vh_NIV_min, KC_FirstOutIndex, i);  // Котельная: ЭКМ на выходе НИВ минимум [PS]
APS_Processing(KC_KOT_mb_DI.zagaz_CO_20_1, 1.0, unlock, KC_APS.zagaz_CO_20_1, KC_APS_Internal.zagaz_CO_20_1, KC_FirstOutIndex, i);  // Котельная: Загазованность СО 20 мГ/м3 1-й порог [PS]
APS_Processing(KC_KOT_mb_DI.AVR_SN_ON, 1.0, unlock, KC_APS.AVR_SN_ON, KC_APS_Internal.AVR_SN_ON, KC_FirstOutIndex, i);  // Котельная: Работал АВР сетевых насосов [PS]
APS_Processing(KC_KOT_mb_DI.Reagent_Low, 1.0, unlock, KC_APS.Reagent_Low, KC_APS_Internal.Reagent_Low, KC_FirstOutIndex, i);  // Котельная: Заканчивается реагент в бачке [PS]
APS_Processing(KC_KOT_mb_DI.Fault_OPS, 1.0, unlock, KC_APS.Fault_OPS, KC_APS_Internal.Fault_OPS, KC_FirstOutIndex, i);  // Котельная: Неисправность ОПС [PS]
APS_Processing(KC_KOT_mb_DI.P_obr_v_Low, 1.0, unlock, KC_APS.P_obr_v_Low, KC_APS_Internal.P_obr_v_Low, KC_FirstOutIndex, i);  // Котельная: Давление обратной воды понижено [PS]
APS_Processing(KC_KOT_mb_DI.P_obr_v_Hi, 1.0, unlock, KC_APS.P_obr_v_Hi, KC_APS_Internal.P_obr_v_Hi, KC_FirstOutIndex, i);  // Котельная: Давление обратной воды повышено [PS]
APS_Processing(KC_KOT_mb_DI.NIV_P_Low, 1.0, unlock, KC_APS.NIV_P_Low, KC_APS_Internal.NIV_P_Low, KC_FirstOutIndex, i);  // Котельная: Насос НИВ не набрал давления [PS]



//==============================================================================================================================================
//------------------- Звук --------------------------------
(*
for i:=1 to 120 do
	new_wrn := KC_APS.Arr[i] and not KC_APS_Internal.Arr[i].pr_value and KC_APS_Internal.Arr[i].target > 3 or new_wrn;
	new_crs := KC_APS.Arr[i] and not KC_APS_Internal.Arr[i].pr_value and KC_APS_Internal.Arr[i].target < 4 or new_crs; 
	KC_APS_Internal.Arr[i].pr_value  := KC_APS.Arr[i];
end_for;
*)
KC_Sound.alarm := (new_wrn or ps_im) or KC_Sound.alarm and not (KC_BTN.Sound_Off or unlock); // сигн. тревога
KC_Sound.crash := new_crs or KC_Sound.crash and not (KC_BTN.Sound_Off or unlock); // сигн. авария
//признак отключения звука
KC_SS.mute := (AlarmTarget[1] or AlarmTarget[2] or AlarmTarget[3] or AlarmTarget[4] or AlarmTarget[5])  and not KC_Sound.crash  or 
			  (AlarmTarget[6] or AlarmTarget[7]) and not KC_Sound.alarm;]]></ST>
            </Function>
            <Function UUID="JRWJCZBU4NHJNB6ORKLXITPVMQ" Name="APS_Init" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables />
                <ST><![CDATA[
if not init then 
(*Fire := 1; // Пожар
Alarms.AOs := 2; // Аварийный останов со стравливанием
AObs := 3; // Аварийный останов без стравливания
AS	:= 4; // Аварийная сигнализация без останова
PS	:= 5; // Предупредительная сигнализация
//OS := 6; // Ограничительная сигнализация*)

Alarms.Fire := 1; // Пожар
Alarms.AOs := 2; // Аварийный останов со стравливанием
Alarms.AOb := 3; // Аварийный останов без стравливания
Alarms.VOs := 4; // Вынужденный останов со стравливанием
Alarms.VOb := 5; // Вынужденный останов без стравливания
Alarms.AS  := 6; // Аварийная сигнализация без останова
Alarms.PS  := 7; // Предупредительная сигнализация
Alarms.OS  := 8; // Ограничительная сигнализация

KC_APS_Internal.Kn_AOss_PRU.target          := Alarms.AOs;  // АОcc от ПРУ КЦ
KC_APS_Internal.Kn_AOss_HMI.target          := Alarms.AOs;  // АОcc c АРМ оператора
KC_APS_Internal.Kn_AObs_PRU.target          := Alarms.AOb;  // АОбc от ПРУ КЦ
KC_APS_Internal.Kn_AObs_HMI.target          := Alarms.AOb;  // АОбc c АРМ оператора
KC_APS_Internal.Kn_EO_PRU.target            := Alarms.AOs;  // ЭО от ПРУ КЦ
KC_APS_Internal.Tg_out_KC_Av.target         := Alarms.AOb;  // Высокая температура на выходе КЦ
KC_APS_Internal.Pg_out_KC_Av.target         := Alarms.AOb;  // Высокое давление на выходе КЦ
KC_APS_Internal.GPA5_GAS20.target           := Alarms.AS;  // Загазованность аварийная (20%) ГПА5
KC_APS_Internal.GPA6_GAS20.target           := Alarms.AS;  // Загазованность аварийная (20%) ГПА6
KC_APS_Internal.GPA4_GAS20.target           := Alarms.AS;  // Загазованность аварийная (20%) ГПА4
KC_APS_Internal.UPG_GAS20.target            := Alarms.AOb;  // Загазованность аварийная (20%) УПГ
KC_APS_Internal.ASPS_Bad.target             := Alarms.AS;  // Неисправность ПС
KC_APS_Internal.Fire_in_ADES.target         := Alarms.AS;  // Пожар в аварийной дизельной электростанции
KC_APS_Internal.Fire_in_BB_BVVUP.target     := Alarms.AS;  // Пожар в ББ БВВ УП
KC_APS_Internal.Fire_in_EXZ.target          := Alarms.AS;  // Пожар в БКУ ЭХЗ "Антик"
KC_APS_Internal.Fire_in_Oil_Atanks.target   := Alarms.AS;  // Пожар в емкости для аварийного слива масла
KC_APS_Internal.Fire_in_Fuel_ATanks2.target := Alarms.AS;  // Пожар в емкости для аварийного слива топлива
KC_APS_Internal.Fire_in_MetanolTank.target  := Alarms.AS;  // Пожар в емкости метанола
KC_APS_Internal.Fire_in_ZADES.target        := Alarms.AS;  // Пожар в здании АДЭС
KC_APS_Internal.Fire_in_Kot.target          := Alarms.PS;  // Пожар в здании котельной
KC_APS_Internal.Fire_in_NasOil.target       := Alarms.AS;  // Пожар в здании насосной масел
KC_APS_Internal.Fire_in_NasMet.target       := Alarms.AS;  // Пожар в здании насосной метанола
KC_APS_Internal.Fire_in_NasPPV.target       := Alarms.PS;  // Пожар в здании насосной противопожарного водоснабжения
KC_APS_Internal.Fire_in_Wwplant.target      := Alarms.PS;  // Пожар в здании очистных сооружений сточных вод
KC_APS_Internal.Fire_in_ZdGate.target       := Alarms.PS;  // Пожар в здании проходной
KC_APS_Internal.Fire_in_PEB.target          := Alarms.AS;  // Пожар в здании ПЭБ
KC_APS_Internal.Fire_in_REB.target          := Alarms.PS;  // Пожар в здании РЭБ
KC_APS_Internal.Fire_in_UZRG.target         := Alarms.AS;  // Пожар в здании УЗРГ
KC_APS_Internal.Fire_in_ZdUPG.target        := Alarms.AOs;  // Пожар в здании УПГ
KC_APS_Internal.Fire_in_UTO.target          := Alarms.AS;  // Пожар в здании УТО
KC_APS_Internal.Fire_in_Vkompr.target       := Alarms.AS;  // Пожар в компрессорной сжатого воздуха
KC_APS_Internal.Fire_in_NasOil2.target      := Alarms.PS;  // Пожар в насосной масел
KC_APS_Internal.Fire_in_DainTank.target     := Alarms.AS;  // Пожар в подземной дренажной емкости
KC_APS_Internal.Fire_in_Gate.target         := Alarms.AS;  // Пожар в проходной
KC_APS_Internal.Fire_in_Fuel_Atanks.target  := Alarms.AS;  // Пожар в резервуаре для аварийного слива топлива
KC_APS_Internal.Fire_in_FuelTanks.target    := Alarms.AS;  // Пожар в резервуарном парке для хранения дизтоплива
KC_APS_Internal.Fire_in_Eblock.target       := Alarms.AS;  // Пожар в энергоблоке
KC_APS_Internal.Fire_in_GPA.target          := Alarms.AS;  // Пожар ГПА
KC_APS_Internal.Fire_in_GPA5.target         := Alarms.AS;  // Пожар ГПА5
KC_APS_Internal.Fire_in_GPA6.target         := Alarms.AS;  // Пожар ГПА6
KC_APS_Internal.Fire_in_GPA4.target         := Alarms.AS;  // Пожар ГПА4
KC_APS_Internal.Fire_in_OilTanks.target     := Alarms.AS;  // Пожар на площадке блока резервуаров 2x10 м куб.
KC_APS_Internal.Fire_in_FuelTanks2.target   := Alarms.AS;  // Пожар на площадке резервуара для дизтоплива 25 м куб.
KC_APS_Internal.Fire_in_MetanolSklad.target := Alarms.AS;  // Пожар на складе метанола
KC_APS_Internal.Fire_in_UDK.target          := Alarms.AS;  // Пожар на установке дожимных компрессоров
KC_APS_Internal.Fire_in_RegenMetanol.target := Alarms.AS;  // Пожар на установке регенерации метанола
KC_APS_Internal.Fire_in_URM.target          := Alarms.AS;  // Пожар УРМ
KC_APS_Internal.Gasmain_in_KC_brk.target    := Alarms.AOb;  // Прорыв трубопровода на входе в КЦ
KC_APS_Internal.Gasmain_out_KC_brk.target   := Alarms.AOb;  // Прорыв трубопровода на выходе в КЦ
KC_APS_Internal.UTUO_Alarm.target           := Alarms.AS;  // УТУО. Обобщенный сигнал аварии
KC_APS_Internal.Kr51_selfON.target          := Alarms.AS;  // Самопроизвольное открытие Крана 51
KC_APS_Internal.Kr51_selfOF.target          := Alarms.AS;  // Самопроизвольное закрытие Крана 51
KC_APS_Internal.Kr52_selfON.target          := Alarms.AS;  // Самопроизвольное открытие Крана 52
KC_APS_Internal.Kr52_selfOF.target          := Alarms.AS;  // Самопроизвольное закрытие Крана 52
KC_APS_Internal.Kr53_selfON.target          := Alarms.AS;  // Самопроизвольное открытие Крана 53
KC_APS_Internal.Kr53_selfOF.target          := Alarms.AS;  // Самопроизвольное закрытие Крана 53
KC_APS_Internal.Kr53bp_selfON.target        := Alarms.AS;  // Самопроизвольное открытие Крана 53бп
KC_APS_Internal.Kr53bp_selfOF.target        := Alarms.AS;  // Самопроизвольное закрытие Крана 53бп
KC_APS_Internal.Kr54_selfON.target          := Alarms.AS;  // Самопроизвольное открытие Крана 54
KC_APS_Internal.Kr54_selfOF.target          := Alarms.AS;  // Самопроизвольное закрытие Крана 54
KC_APS_Internal.Kr54bp_selfON.target        := Alarms.AS;  // Самопроизвольное открытие Крана 54бп
KC_APS_Internal.Kr54bp_selfOF.target        := Alarms.AS;  // Самопроизвольное закрытие Крана 54бп
KC_APS_Internal.Dver_US_open.target         := Alarms.PS;  // Дверь УС открыта
KC_APS_Internal.U_AC220_UK.target           := Alarms.PS;  // Нет ~220В в УК
KC_APS_Internal.T_US_25v.target             := Alarms.PS;  // Температура в УС больше 25 °С
KC_APS_Internal.Vn_P1_Alarm.target          := Alarms.PS;  // Авария вентсистемы П1
KC_APS_Internal.Vn_P4_Alarm.target          := Alarms.PS;  // Авария вентсистемы П4
KC_APS_Internal.Lm_R1_v.target              := Alarms.PS;  // Верхний уровень в резервуаре Р1 для дренажа масла нагнетателя ГПА4
KC_APS_Internal.Lm_R4_v.target              := Alarms.PS;  // Верхний уровень в резервуаре Р4 для отработанного масла двигателя ГПА4
KC_APS_Internal.Lm_R2_v.target              := Alarms.PS;  // Верхний уровень в резервуаре Р2 для дренажа масла нагнетателя ГПА5
KC_APS_Internal.Lm_R5_v.target              := Alarms.PS;  // Верхний уровень в резервуаре Р5 для отработанного масла двигателя ГПА5
KC_APS_Internal.Lm_R3_v.target              := Alarms.PS;  // Верхний уровень в резервуаре Р3 для дренажа масла нагнетателя ГПА6
KC_APS_Internal.Lm_R6_v.target              := Alarms.PS;  // Верхний уровень в резервуаре Р6 для отработанного масла двигателя ГПА6
KC_APS_Internal.Vn_V4_Alarm.target          := Alarms.PS;  // Авария вентсистемы В4
KC_APS_Internal.Lf_R1_v.target              := Alarms.PS;  // Верхний уровень в Р1 для дизтоплива
KC_APS_Internal.Lf_R2a_v.target             := Alarms.PS;  // Верхний уровень в Р2 для аварийного слива топлива
KC_APS_Internal.Cabin_open.target           := Alarms.PS;  // Двери САУ КЦ открыты
KC_APS_Internal.Dver_UK_open.target         := Alarms.PS;  // Дверь УК открыта
KC_APS_Internal.UPG_Gas1.target             := Alarms.PS;  // Загазованность в УПГ более 1%
KC_APS_Internal.GPA4_GAS10.target           := Alarms.PS;  // Загазованность предупредительная (10%) ГПА4
KC_APS_Internal.GPA5_GAS10.target           := Alarms.PS;  // Загазованность предупредительная (10%) ГПА5
KC_APS_Internal.GPA6_GAS10.target           := Alarms.PS;  // Загазованность предупредительная (10%) ГПА6
KC_APS_Internal.UPG_GAS10.target            := Alarms.PS;  // Загазованность предупредительная (10%) УПГ
KC_APS_Internal.UZ1_Bad.target              := Alarms.PS;  // Неисправность UZ1
KC_APS_Internal.UZ1_Bad_KCD.target          := Alarms.PS;  // Неисправность UZ1. КЦД
KC_APS_Internal.UZ2_Bad.target              := Alarms.PS;  // Неисправность UZ2
KC_APS_Internal.UZ2_Bad_KCD.target          := Alarms.PS;  // Неисправность UZ2. КЦД
KC_APS_Internal.GPA6_ASPS_Bad.target        := Alarms.PS;  // Неисправность АСПС, КЗ и ПТ ГПА6
KC_APS_Internal.GPA4_ASPS_Bad.target        := Alarms.PS;  // Неисправность АСПС, КЗ и ПТ ГПА4
KC_APS_Internal.GPA5_ASPS_Bad.target        := Alarms.PS;  // Неисправность АСПС, КЗ и ПТ ГПА5
KC_APS_Internal.UPG_ASPS_Bad.target         := Alarms.PS;  // Неисправность АСПС, КЗ и ПТ УПГ
KC_APS_Internal.URM_ASPS_Bad.target         := Alarms.PS;  // Неисправность АСПС, КЗ и ПТ УРМ
KC_APS_Internal.PLC_GPA4_Bad.target         := Alarms.PS;  // Неисправность контроллера САУ ГПА №1
KC_APS_Internal.PLC_GPA5_Bad.target         := Alarms.PS;  // Неисправность контроллера САУ ГПА №2
KC_APS_Internal.PLC_GPA6_Bad.target         := Alarms.PS;  // Неисправность контроллера САУ ГПА №3
KC_APS_Internal.DC24osn_Ext1_Bad.target     := Alarms.PS;  // Неисправность осн. ИП =24В внешних цепей
KC_APS_Internal.DC24osn_Ext2_Bad.target     := Alarms.PS;  // Неисправность осн. ИП =24В внешних цепей
KC_APS_Internal.DC24osn_Int_Bad.target      := Alarms.PS;  // Неисправность осн. ИП =24В внутренних цепей
KC_APS_Internal.DC24rez_Ext1_Bad.target     := Alarms.PS;  // Неисправность рез. ИП =24В внешних цепей
KC_APS_Internal.DC24rez_Ext2_Bad.target     := Alarms.PS;  // Неисправность рез. ИП =24В внешних цепей
KC_APS_Internal.DC24rez_Int_Bad.target      := Alarms.PS;  // Неисправность рез. ИП =24В внутренних цепей
KC_APS_Internal.SAPS_Bad.target             := Alarms.PS;  // Неисправность САПС обобщенный
KC_APS_Internal.SAU_UPG_Bad.target          := Alarms.PS;  // Неисправность САУ УПГ
KC_APS_Internal.U_AC220_US.target           := Alarms.PS;  // Нет ~220В в УC
KC_APS_Internal.Chk_razr.target             := Alarms.PS;  // Нет исправности разрядников
KC_APS_Internal.Chk_AC220_SAU.target        := Alarms.PS;  // Нет основного питания ~220 В
KC_APS_Internal.Chk_DC220_Kr.target         := Alarms.PS;  // Нет питания кранов =220В
KC_APS_Internal.Chk_DC220_SAU.target        := Alarms.PS;  // Нет резервного питания =220 В
KC_APS_Internal.Lf_R1_n.target              := Alarms.PS;  // Нижний уровень в Р1 для дизтоплива
KC_APS_Internal.Tg_out_KC_Pv.target         := Alarms.PS;  // Повышенная температура на выходе КЦ
KC_APS_Internal.Pg_out_KC_Pv.target         := Alarms.PS;  // Повышенное давление на выходе КЦ
KC_APS_Internal.U_hi.target                 := Alarms.PS;  // Повышенное напряжение
KC_APS_Internal.U_lo.target                 := Alarms.PS;  // Пониженное напряжение
KC_APS_Internal.UK_Bad.target               := Alarms.PS;  // УК неисправен
KC_APS_Internal.UTUO_Gas10.target           := Alarms.PS;  // УТУО. Загазованность по метану более 10% НКПР
KC_APS_Internal.UTUO_No_U.target            := Alarms.PS;  // УТУО. Исчезновение напряжения питания
KC_APS_Internal.UTUO_Kl_ots_OF.target       := Alarms.PS;  // УТУО. Срабатывание отсечного клапана на подводящем газопроводе
KC_APS_Internal.Fire_in_2obj.target         := Alarms.AOs;  // Пожар в двух и более помещениях
KC_APS_Internal.Fire_in_2GPA.target         := Alarms.AOs;  // Пожар на двух и более ГПА
KC_APS_Internal.Gas_in_2GPA.target          := Alarms.AOs;  // Аварийная загазованность на двух и более ГПА
//= добавлены сенсорные кнопки с ПРУ
KC_APS_Internal.PRU_AOss_BTN.target          := Alarms.AOs;  // АОcc от ПРУ КЦ (сенсорная кнопка)
KC_APS_Internal.PRU_AObs_BTN.target          := Alarms.AOb;  // АОбc от ПРУ КЦ (сенсорная кнопка)
//==============================================================================================================================================
//= добавлена сигнализация от смежных подсистем - Котельной и Пульсара

//=============== КОТЕЛЬНАЯ ==========================================
KC_APS_Internal.zagaz_CH_10_NKPV.target      := Alarms.AS;  // Котельная: Загазованность СН 10% НКПВ
KC_APS_Internal.zagaz_CO_100_2.target        := Alarms.AS;  // Котельная: Загазованность СО 100 мГ/м3 2-й порог
KC_APS_Internal.P_obr_v_AvLow.target         := Alarms.AS;  // Котельная: Давление обратной воды аварийно низкое
KC_APS_Internal.Pozhar.target         		 := Alarms.AS;	// Котельная: Пожар в котельной
KC_APS_Internal.P_gaza_Fault.target          := Alarms.AS;  // Котельная: Давление газа не в норме
KC_APS_Internal.P_obr_v_AvHi.target          := Alarms.AS;  // Котельная: Давление обратной воды аварийно высокое
KC_APS_Internal.P_prym_sv_AvHi.target        := Alarms.AS;  // Котельная: Давление прямой сетевой воды аварийно высокое
KC_APS_Internal.AVR_SN_Fault.target          := Alarms.AS;  // Котельная: Не сработал АВР сетевых насосов
KC_APS_Internal.Avar_v_APV.target         	 := Alarms.AS;  // Котельная: Авария в системе АПВ
KC_APS_Internal.Avar_VRU.target         	 := Alarms.AS;  // Котельная: Авария ВРУ
KC_APS_Internal.Stop_Kotel1.target         	 := Alarms.AS;  // Котельная: Аварийно остановился котел №1
KC_APS_Internal.Stop_Kotel2.target         	 := Alarms.AS;  // Котельная: Аварийно остановился котел №2

KC_APS_Internal.EKV_vh_NIV_max.target      	 := Alarms.PS;  // Котельная: ЭКМ на выходе НИВ максимум
KC_APS_Internal.EKV_vh_NIV_min.target      	 := Alarms.PS;  // Котельная: ЭКМ на выходе НИВ минимум
KC_APS_Internal.zagaz_CO_20_1.target      	 := Alarms.PS;  // Котельная: Загазованность СО 20 мГ/м3 1-й порог
KC_APS_Internal.AVR_SN_ON.target      		 := Alarms.PS;  // Котельная: Работал АВР сетевых насосов
KC_APS_Internal.Reagent_Low.target      	 := Alarms.PS;  // Котельная: Заканчивается реагент в бачке
KC_APS_Internal.Fault_OPS.target      		 := Alarms.PS;  // Котельная: Неисправность ОПС
KC_APS_Internal.P_obr_v_Low.target      	 := Alarms.PS;  // Котельная: Давление обратной воды понижено
KC_APS_Internal.P_obr_v_Hi.target      		 := Alarms.PS;  // Котельная: Давление обратной воды повышено
KC_APS_Internal.NIV_P_Low.target      		 := Alarms.PS;  // Котельная: Насос НИВ не набрал давления

//=============== ПУЛЬСАР ==========================================
(* Закомментировано, пока нет сигналов от Пульсара

KC_APS_Internal.Osn_R11.target := Alarms.PS; // Пульсар: Осн. R пластины 1 в т. 1 (N1-1) > 11 Ом
KC_APS_Internal.Osn_R12.target := Alarms.PS; // Пульсар: Осн. R пластины 2 в т. 1 (N1-2) > 11 Ом
KC_APS_Internal.Osn_R13.target := Alarms.PS; // Пульсар: Осн. R пластины 3 в т. 1 (N1-3) > 11 Ом
KC_APS_Internal.Osn_R21.target := Alarms.PS; // Пульсар: Осн. R пластины 1 в т. 2 (N2-1) > 11 Ом
KC_APS_Internal.Osn_R22.target := Alarms.PS; // Пульсар: Осн. R пластины 2 в т. 2 (N2-2) > 11 Ом
KC_APS_Internal.Osn_R23.target := Alarms.PS; // Пульсар: Осн. R пластины 3 в т. 2 (N2-3) > 11 Ом
KC_APS_Internal.Osn_R31.target := Alarms.PS; // Пульсар: Осн. R пластины 1 в т. 3 (N3-1) > 11 Ом
KC_APS_Internal.Osn_R32.target := Alarms.PS; // Пульсар: Осн. R пластины 2 в т. 3 (N3-2) > 11 Ом
KC_APS_Internal.Osn_R33.target := Alarms.PS; // Пульсар: Осн. R пластины 3 в т. 3 (N3-3) > 11 Ом
KC_APS_Internal.Osn_R41.target := Alarms.PS; // Пульсар: Осн. R пластины 1 в т. 4 (N4-1) > 11 Ом
KC_APS_Internal.Osn_R42.target := Alarms.PS; // Пульсар: Осн. R пластины 2 в т. 4 (N4-2) > 11 Ом
KC_APS_Internal.Osn_R43.target := Alarms.PS; // Пульсар: Осн. R пластины 3 в т. 4 (N4-3) > 11 Ом
KC_APS_Internal.Osn_R51.target := Alarms.PS; // Пульсар: Осн. R пластины 1 в т. 5 (N5-1) > 11 Ом
KC_APS_Internal.Osn_R52.target := Alarms.PS; // Пульсар: Осн. R пластины 2 в т. 5 (N5-2) > 11 Ом
KC_APS_Internal.Osn_R53.target := Alarms.PS; // Пульсар: Осн. R пластины 3 в т. 5 (N5-3) > 11 Ом
KC_APS_Internal.Osn_R61.target := Alarms.PS; // Пульсар: Осн. R пластины 1 в т. 6 (N6-1) > 11 Ом
KC_APS_Internal.Osn_R62.target := Alarms.PS; // Пульсар: Осн. R пластины 2 в т. 6 (N6-2) > 11 Ом
KC_APS_Internal.Osn_R63.target := Alarms.PS; // Пульсар: Осн. R пластины 3 в т. 6 (N6-3) > 11 Ом
KC_APS_Internal.Osn_R71.target := Alarms.PS; // Пульсар: Осн. R пластины 1 в т. 7 (N7-1) > 11 Ом
KC_APS_Internal.Osn_R72.target := Alarms.PS; // Пульсар: Осн. R пластины 2 в т. 7 (N7-2) > 11 Ом
KC_APS_Internal.Osn_R73.target := Alarms.PS; // Пульсар: Осн. R пластины 3 в т. 7 (N7-3) > 11 Ом
KC_APS_Internal.Osn_R81.target := Alarms.PS; // Пульсар: Осн. R пластины 1 в т. 8 (N8-1) > 11 Ом
KC_APS_Internal.Osn_R82.target := Alarms.PS; // Пульсар: Осн. R пластины 2 в т. 8 (N8-2) > 11 Ом
KC_APS_Internal.Osn_R83.target := Alarms.PS; // Пульсар: Осн. R пластины 3 в т. 8 (N8-3) > 11 Ом
KC_APS_Internal.Osn_KIP_open.target := Alarms.PS; // Пульсар: Осн. КИП вскрыт
KC_APS_Internal.Osn_BB_open.target := Alarms.PS; // Пульсар: Осн. б/б вскрыт
KC_APS_Internal.Osn_No_U_EXZ.target := Alarms.PS; // Пульсар: Осн. нет 220 В на апп. ЭХЗ
KC_APS_Internal.Osn_Smodul1_bad.target := Alarms.PS; // Пульсар: Осн. силовой модуль 1 неисправен
KC_APS_Internal.Osn_Smodul2_bad.target := Alarms.PS; // Пульсар: Осн. силовой модуль 2 неисправен
KC_APS_Internal.Osn_Smodul3_bad.target := Alarms.PS; // Пульсар: Осн. силовой модуль 3 неисправен
KC_APS_Internal.Osn_Smodul4_bad.target := Alarms.PS; // Пульсар: Осн. силовой модуль 4 неисправен
KC_APS_Internal.Osn_Smodul5_bad.target := Alarms.PS; // Пульсар: Осн. силовой модуль 5 неисправен
KC_APS_Internal.Osn_Smodul6_bad.target := Alarms.PS; // Пульсар: Осн. силовой модуль 6 неисправен
KC_APS_Internal.Osn_Smodul7_bad.target := Alarms.PS; // Пульсар: Осн. силовой модуль 7 неисправен
KC_APS_Internal.Osn_Smodul8_bad.target := Alarms.PS; // Пульсар: Осн. силовой модуль 8 неисправен
KC_APS_Internal.Osn_Smodul9_bad.target := Alarms.PS; // Пульсар: Осн. силовой модуль 9 неисправен
KC_APS_Internal.Osn_Smodul10_bad.target := Alarms.PS; // Пульсар: Осн. силовой модуль 10 неисправен
KC_APS_Internal.Osn_Smodul11_bad.target := Alarms.PS; // Пульсар: Осн. силовой модуль 11 неисправен
KC_APS_Internal.Osn_Smodul12_bad.target := Alarms.PS; // Пульсар: Осн. силовой модуль 12 неисправен
KC_APS_Internal.Osn_1ch_ResOn.target := Alarms.PS; // Пульсар: Осн. 1 канал в работе резерв. сил. модуль
KC_APS_Internal.Osn_2ch_ResOn.target := Alarms.PS; // Пульсар: Осн. 2 канал в работе резерв. сил. модуль
KC_APS_Internal.Osn_3ch_ResOn.target := Alarms.PS; // Пульсар: Осн. 3 канал в работе резерв. сил. модуль
KC_APS_Internal.Osn_4ch_ResOn.target := Alarms.PS; // Пульсар: Осн. 4 канал в работе резерв. сил. модуль
KC_APS_Internal.Osn_5ch_ResOn.target := Alarms.PS; // Пульсар: Осн. 5 канал в работе резерв. сил. модуль
KC_APS_Internal.Osn_6ch_ResOn.target := Alarms.PS; // Пульсар: Осн. 6 канал в работе резерв. сил. модуль
KC_APS_Internal.Rez_R11.target := Alarms.PS; // Пульсар: Рез. R пластины 1 в т. 1 (N1-1) > 11 Ом
KC_APS_Internal.Rez_R12.target := Alarms.PS; // Пульсар: Рез. R пластины 2 в т. 1 (N1-2) > 11 Ом
KC_APS_Internal.Rez_R13.target := Alarms.PS; // Пульсар: Рез. R пластины 3 в т. 1 (N1-3) > 11 Ом
KC_APS_Internal.Rez_R21.target := Alarms.PS; // Пульсар: Рез. R пластины 1 в т. 2 (N2-1) > 11 Ом
KC_APS_Internal.Rez_R22.target := Alarms.PS; // Пульсар: Рез. R пластины 2 в т. 2 (N2-2) > 11 Ом
KC_APS_Internal.Rez_R23.target := Alarms.PS; // Пульсар: Рез. R пластины 3 в т. 2 (N2-3) > 11 Ом
KC_APS_Internal.Rez_R31.target := Alarms.PS; // Пульсар: Рез. R пластины 1 в т. 3 (N3-1) > 11 Ом
KC_APS_Internal.Rez_R32.target := Alarms.PS; // Пульсар: Рез. R пластины 2 в т. 3 (N3-2) > 11 Ом
KC_APS_Internal.Rez_R33.target := Alarms.PS; // Пульсар: Рез. R пластины 3 в т. 3 (N3-3) > 11 Ом
KC_APS_Internal.Rez_R41.target := Alarms.PS; // Пульсар: Рез. R пластины 1 в т. 4 (N4-1) > 11 Ом
KC_APS_Internal.Rez_R42.target := Alarms.PS; // Пульсар: Рез. R пластины 2 в т. 4 (N4-2) > 11 Ом
KC_APS_Internal.Rez_R43.target := Alarms.PS; // Пульсар: Рез. R пластины 3 в т. 4 (N4-3) > 11 Ом
KC_APS_Internal.Rez_R51.target := Alarms.PS; // Пульсар: Рез. R пластины 1 в т. 5 (N5-1) > 11 Ом
KC_APS_Internal.Rez_R52.target := Alarms.PS; // Пульсар: Рез. R пластины 2 в т. 5 (N5-2) > 11 Ом
KC_APS_Internal.Rez_R53.target := Alarms.PS; // Пульсар: Рез. R пластины 3 в т. 5 (N5-3) > 11 Ом
KC_APS_Internal.Rez_R61.target := Alarms.PS; // Пульсар: Рез. R пластины 1 в т. 6 (N6-1) > 11 Ом
KC_APS_Internal.Rez_R62.target := Alarms.PS; // Пульсар: Рез. R пластины 2 в т. 6 (N6-2) > 11 Ом
KC_APS_Internal.Rez_R63.target := Alarms.PS; // Пульсар: Рез. R пластины 3 в т. 6 (N6-3) > 11 Ом
KC_APS_Internal.Rez_R71.target := Alarms.PS; // Пульсар: Рез. R пластины 1 в т. 7 (N7-1) > 11 Ом
KC_APS_Internal.Rez_R72.target := Alarms.PS; // Пульсар: Рез. R пластины 2 в т. 7 (N7-2) > 11 Ом
KC_APS_Internal.Rez_R73.target := Alarms.PS; // Пульсар: Рез. R пластины 3 в т. 7 (N7-3) > 11 Ом
KC_APS_Internal.Rez_R81.target := Alarms.PS; // Пульсар: Рез. R пластины 1 в т. 8 (N8-1) > 11 Ом
KC_APS_Internal.Rez_R82.target := Alarms.PS; // Пульсар: Рез. R пластины 2 в т. 8 (N8-2) > 11 Ом
KC_APS_Internal.Rez_R83.target := Alarms.PS; // Пульсар: Рез. R пластины 3 в т. 8 (N8-3) > 11 Ом
KC_APS_Internal.Rez_KIP_open.target := Alarms.PS; // Пульсар: Рез. КИП вскрыт
KC_APS_Internal.Rez_BB_open.target := Alarms.PS; // Пульсар: Рез. б/б вскрыт
KC_APS_Internal.Rez_No_U_EXZ.target := Alarms.PS; // Пульсар: Рез. нет 220 В на апп. ЭХЗ
KC_APS_Internal.Rez_Smodul1_bad.target := Alarms.PS; // Пульсар: Рез. силовой модуль 1 неисправен
KC_APS_Internal.Rez_Smodul2_bad.target := Alarms.PS; // Пульсар: Рез. силовой модуль 2 неисправен
KC_APS_Internal.Rez_Smodul3_bad.target := Alarms.PS; // Пульсар: Рез. силовой модуль 3 неисправен
KC_APS_Internal.Rez_Smodul4_bad.target := Alarms.PS; // Пульсар: Рез. силовой модуль 4 неисправен
KC_APS_Internal.Rez_Smodul5_bad.target := Alarms.PS; // Пульсар: Рез. силовой модуль 5 неисправен
KC_APS_Internal.Rez_Smodul6_bad.target := Alarms.PS; // Пульсар: Рез. силовой модуль 6 неисправен
KC_APS_Internal.Rez_Smodul7_bad.target := Alarms.PS; // Пульсар: Рез. силовой модуль 7 неисправен
KC_APS_Internal.Rez_Smodul8_bad.target := Alarms.PS; // Пульсар: Рез. силовой модуль 8 неисправен
KC_APS_Internal.Rez_Smodul9_bad.target := Alarms.PS; // Пульсар: Рез. силовой модуль 9 неисправен
KC_APS_Internal.Rez_Smodul10_bad.target := Alarms.PS; // Пульсар: Рез. силовой модуль 10 неисправен
KC_APS_Internal.Rez_Smodul11_bad.target := Alarms.PS; // Пульсар: Рез. силовой модуль 11 неисправен
KC_APS_Internal.Rez_Smodul12_bad.target := Alarms.PS; // Пульсар: Рез. силовой модуль 12 неисправен
KC_APS_Internal.Rez_1ch_ResOn.target := Alarms.PS; // Пульсар: Рез. 1 канал в работе резерв. сил. модуль
KC_APS_Internal.Rez_2ch_ResOn.target := Alarms.PS; // Пульсар: Рез. 2 канал в работе резерв. сил. модуль
KC_APS_Internal.Rez_3ch_ResOn.target := Alarms.PS; // Пульсар: Рез. 3 канал в работе резерв. сил. модуль
KC_APS_Internal.Rez_4ch_ResOn.target := Alarms.PS; // Пульсар: Рез. 4 канал в работе резерв. сил. модуль
KC_APS_Internal.Rez_5ch_ResOn.target := Alarms.PS; // Пульсар: Рез. 5 канал в работе резерв. сил. модуль
KC_APS_Internal.Rez_6ch_ResOn.target := Alarms.PS; // Пульсар: Рез. 6 канал в работе резерв. сил. модуль
KC_APS_Internal.Osn_SKZ1.target := Alarms.PS; // Пульсар: Осн. режим стабилизации СКЗ-1
KC_APS_Internal.Osn_SKZ2.target := Alarms.PS; // Пульсар: Осн. режим стабилизации СКЗ-2
KC_APS_Internal.Osn_SKZ3.target := Alarms.PS; // Пульсар: Осн. режим стабилизации СКЗ-3
KC_APS_Internal.Osn_SKZ4.target := Alarms.PS; // Пульсар: Осн. режим стабилизации СКЗ-4
KC_APS_Internal.Osn_SKZ5.target := Alarms.PS; // Пульсар: Осн. режим стабилизации СКЗ-5
KC_APS_Internal.Osn_SKZ6.target := Alarms.PS; // Пульсар: Осн. режим стабилизации СКЗ-6
KC_APS_Internal.Res_SKZ1.target := Alarms.PS; // Пульсар: Рез. режим стабилизации СКЗ-1
KC_APS_Internal.Res_SKZ2.target := Alarms.PS; // Пульсар: Рез. режим стабилизации СКЗ-2
KC_APS_Internal.Res_SKZ3.target := Alarms.PS; // Пульсар: Рез. режим стабилизации СКЗ-3
KC_APS_Internal.Res_SKZ4.target := Alarms.PS; // Пульсар: Рез. режим стабилизации СКЗ-4
KC_APS_Internal.Res_SKZ5.target := Alarms.PS; // Пульсар: Рез. режим стабилизации СКЗ-5
KC_APS_Internal.Res_SKZ6.target := Alarms.PS; // Пульсар: Рез. режим стабилизации СКЗ-6
*)

//==============================================================================================================================================
end_if;
]]></ST>
            </Function>
            <Function UUID="5JNGGSG7TFAZNF652CWSBV7ITU" Name="APS_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="XUPU5QSBXZB3VKJC3T2JHCQBBE" Name="cnd" Comment="условие защиты" Type="BOOL" Usage="input" />
                    <Variable UUID="JGZ43QLS3Y3ULHFPRNURAOQSIY" Name="delay" Comment="задержка, с" Type="REAL" Usage="input" />
                    <Variable UUID="6ZQWFLESTWCE5BISEPM5ARCL5U" Name="reset" Comment="сброс защиты" Type="BOOL" Usage="input" />
                    <Variable UUID="DGLQLOIG5VHVZKGYZCFYXHHMA4" Name="alr" Comment="выход аларма" Type="BOOL" Usage="inout" />
                    <Variable UUID="VBXXK6DJKZDA3NVMCEXSSROBZQ" Name="var" Type="T_APS_Internal" TypeUUID="Y2SUFYR34WCUVAETREJRLVIA74" Usage="inout" />
                    <Variable UUID="GPPVQEL7KXYEDFUOLVBG2MOKWM" Name="firstoutIndex" Comment="Индекс первопричины" Type="INT" Usage="inout" />
                    <Variable UUID="ZBDBYGOJVK6ENPJDBDHCVBPHWI" Name="index" Type="INT" Usage="inout" />
                    <Variable UUID="DOG25IAFZXWEDOJTOTSF2Z6EL4" Name="av" Type="BOOL" Usage="internal" />
                </Variables>
                <ST><![CDATA[if cnd
	then if var.tmr <= delay then var.tmr := var.tmr + tim.cycle; end_if;  //отсчет задержки
	else var.tmr := 0.0; 
end_if;
av := var.tmr > delay ; //срабатывание аварии
//-- детектирование нового аларма (для звука)
new_wrn := av and not var.pr_value and var.target >= Alarms.AS or new_wrn; // новое предупреждение
new_crs := av and not var.pr_value and var.target <= Alarms.VOb or new_crs; //новая авария
var.pr_value := av;
//-- 
alr := av or alr and not reset; //выдача аларма
AlarmTarget[var.target] := AlarmTarget[var.target] or alr; //срабатывание защиты в алгоритм
//первопричина
if var.target >= Alarms.AS or firstoutIndex <> 0 then return; end_if;
index := index + 1;
if alr then firstoutIndex := index; end_if;	]]></ST>
            </Function>
        </Folder>
        <Folder Name="Алгоритм" Comment="" Data="" UUID="JVAMV7KHIDKEJEOZAOV6C43KQY">
            <Function UUID="ML2IACWZS7CEHJOW6R5PEBGND4" Name="Alg_KC" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="735SXQ62M52UBDQSD3ADAHK4Q4" Name="DeblockFlag" Type="BOOL" Usage="input" />
                </Variables>
                <ST><![CDATA[(*
DRM_Call_StopMode();
DRM_Call_SubMode();
init.DRM := true;
*)
//===================================================================================================


//Загазованность на двух и более ГПА
algKC.Gas_GPA_more2 := (BOOL_TO_INT(KC_DI.GPA4_GAS20) + BOOL_TO_INT(KC_DI.GPA5_GAS20) + BOOL_TO_INT(KC_DI.GPA6_GAS20)
					  + BOOL_TO_INT(KC_GPA1_mb_DI.Zgz)+ BOOL_TO_INT(KC_GPA2_mb_DI.Zgz)+ BOOL_TO_INT(KC_GPA3_mb_DI.Zgz)) > 1;
//Пожар двух и более ГПА
algKC.Fire_GPA_more2 := (BOOL_TO_INT(KC_DI.Fire_in_GPA4) + BOOL_TO_INT(KC_DI.Fire_in_GPA5) + BOOL_TO_INT(KC_DI.Fire_in_GPA6)
					   + BOOL_TO_INT(KC_GPA1_mb_DI.Fire) + BOOL_TO_INT(KC_GPA2_mb_DI.Fire) + BOOL_TO_INT(KC_GPA3_mb_DI.Fire)) > 1; 
//Пожар в двух и более помещениях (объектах)
algKC.Fire_object_more2 := (BOOL_TO_INT(KC_DI.Fire_in_ZdGate) +	//Пожар в здании проходной
							BOOL_TO_INT(KC_DI.Fire_in_NasPPV) +	//Пожар в здании насосной противопожарного водоснабжения
							BOOL_TO_INT(KC_DI.Fire_in_REB) +	//Пожар в здании РЭБ 
							BOOL_TO_INT(KC_DI.Fire_in_WWplant) +	//Пожар в здании очистных сооружений сточных вод
							BOOL_TO_INT(KC_DI.Fire_in_Kot) +	//Пожар в здании котельной
							BOOL_TO_INT(KC_DI.Fire_in_ZADES) +	//Пожар в здании АДЭС 
							BOOL_TO_INT(KC_DI.Fire_in_PEB) +	//Пожар в здании ПЭБ
							BOOL_TO_INT(KC_DI.Fire_in_NasOil) +	//Пожар в здании насосной масел
							BOOL_TO_INT(KC_DI.Fire_in_UDK) +	//Пожар на установке дожимных компрессоров
							BOOL_TO_INT(KC_DI.Fire_in_Eblock) +	//Пожар в энергоблоке
							BOOL_TO_INT(KC_DI.Fire_in_ADES) +	//Пожар в аварийной дизельной электростанции
							BOOL_TO_INT(KC_DI.Fire_in_BB_BVVUP) +	//Пожар в б/б БВВ УП
							BOOL_TO_INT(KC_DI.Fire_in_Oil_Atanks) +	//Пожар в емкости для аварийного слива масла (НМ)
							BOOL_TO_INT(KC_DI.Fire_in_FuelTanks) +	//Пожар в резервуарном парке для хранения дизтоплива
							BOOL_TO_INT(KC_DI.Fire_in_Fuel_ATanks) +	//Пожар в резервуаре для аварийного слива топлива
							BOOL_TO_INT(KC_DI.Fire_in_MetanolSklad) +	//Пожар на складе метанола
							BOOL_TO_INT(KC_DI.Fire_in_NasMet) +	//Пожар в здании насосной метанола
							BOOL_TO_INT(KC_DI.Fire_in_DainTank) +	//Пожар в подземной дренажной емкости
							BOOL_TO_INT(KC_DI.Fire_in_RegenMetanol) +	//Пожар на установке регенерации метанола
							BOOL_TO_INT(KC_DI.Fire_in_MetanolTank) +	//Пожар в емкости метанола 
							BOOL_TO_INT(KC_DI.Fire_in_UTO) +	//Пожар в здании УТО
							BOOL_TO_INT(KC_DI.Fire_in_ZdUPG) +	//Пожар в здании УПГ
							BOOL_TO_INT(KC_DI.Fire_in_UZRG) +	//Пожар в здании УЗРГ
							BOOL_TO_INT(KC_DI.Fire_in_Gate) +	//Пожар в проходной
							BOOL_TO_INT(KC_DI.Fire_in_NasOil2) +	//Пожар в насосной масел
							BOOL_TO_INT(KC_DI.Fire_in_EXZ) +	//Пожар в БКУ ЭХЗ
							BOOL_TO_INT(KC_DI.Fire_in_VKompr) +	//Пожар в компрессорной сжатого воздуха
							//= дополнительные
							BOOL_TO_INT(KC_DI.Fire_in_OilTanks) +	//Пожар на площадке блока резервуаров масла (НМ)
							BOOL_TO_INT(KC_DI.Fire_in_Fuel_ATanks2) +	//Пожар в емкости для аварийного слива топлива (АДЭС)
							BOOL_TO_INT(KC_DI.Fire_in_FuelTanks2) +	//Пожар на площадке резервуара для дизтоплива (АДЭС)
							BOOL_TO_INT(KC_DI.Fire_in_UPG) +	//Пожар УПГ
							BOOL_TO_INT(KC_DI.Fire_in_URM)) > 1;	//Пожар УРМ

//= Самопроизвольные перестановки Кранов
algKC.Kr51_selfON := KC_AM.Kr51.fSelfOn;     //	Самопроизвольное открытие Крана 51
algKC.Kr51_selfOF := KC_AM.Kr51.fSelfOff;	 //	Самопроизвольное закрытие Крана 51
algKC.Kr52_selfON := KC_AM.Kr52.fSelfOn;	 //	Самопроизвольное открытие Крана 52
algKC.Kr52_selfOF := KC_AM.Kr52.fSelfOff;	 //	Самопроизвольное закрытие Крана 52
algKC.Kr53_selfON := KC_AM.Kr53.fSelfOn;	 //	Самопроизвольное открытие Крана 53
algKC.Kr53_selfOF := KC_AM.Kr53.fSelfOff;	 //	Самопроизвольное закрытие Крана 53
algKC.Kr53bp_selfON := KC_AM.Kr53b.fSelfOn; //	Самопроизвольное открытие Крана 53бп
algKC.Kr53bp_selfOF := KC_AM.Kr53b.fSelfOff;//	Самопроизвольное закрытие Крана 53бп
algKC.Kr54_selfON := KC_AM.Kr54.fSelfOn;	 //	Самопроизвольное открытие Крана 54
algKC.Kr54_selfOF := KC_AM.Kr54.fSelfOff;	 //	Самопроизвольное закрытие Крана 54
algKC.Kr54bp_selfON := KC_AM.Kr54b.fSelfOn; //	Самопроизвольное открытие Крана 54бп
algKC.Kr54bp_selfOF := KC_AM.Kr54b.fSelfOff;//	Самопроизвольное закрытие Крана 54бп

//= ГАЗ в Контуре			//= надо бы сделать через уставки "KC_ANB"
algKC.g_inLoop := (KC_AI_ToHMI.Pg_in_KC.PV > 0.5) OR (KC_AI_ToHMI.Pg_out_KC.PV > 0.5) OR algKC.g_inLoop AND NOT algKC.AOss;// есть газ в контуре
algKC.not_g_inLoop :=  (KC_AI_ToHMI.Pg_in_KC.PV <= 0.5) AND (KC_AI_ToHMI.Pg_out_KC.PV <= 0.5) AND NOT algKC.g_inLoop;// нет газа в контуре


//=======    Вычислим чуть позже:
(*
algKC.noActivMode := ;

algKC.Kn_AOss_HMI := ; // Кнопка АОсс со Скады
algKC.Kn_AObs_HMI := ; // Кнопка АОбс со Скады

algKC.Gasmain_in_KC_brk := ; //	Прорыв трубопровода на входе в КЦ (см. FB_Logic)
algKC.Gasmain_out_KC_brk := ; // Прорыв трубопровода на выходе в КЦ (см. FB_Logic)


algKC.Fire_in_GPA := ;	//	Пожар ГПА
*)
//===================================================================================================
//= формирование условий для Режимов
//= Пожар
algKC.Fire := KC_APS.Fire_in_2GPA or KC_APS.Fire_in_2obj (*//= or KC_APS.Fire_in_GPA *);
//===================================================================================================
//= АОсс
algKC.AOss := KC_APS.Fire_in_2GPA (*OR KC_APS.Fire_in_2obj*) OR KC_APS.Gas_in_2GPA OR KC_APS.Kn_AOss_HMI OR KC_APS.PRU_AOss_BTN OR KC_APS.Kn_AOss_PRU OR KC_APS.Kn_EO_PRU OR KC_APS.Fire_in_ZdUPG
			  OR algKC.AOss AND NOT KC_BTN.Deblock;
//= АОбс
algKC.AObs := (KC_APS.Gasmain_in_KC_brk OR KC_APS.Gasmain_out_KC_brk OR KC_APS.Tg_out_KC_Av OR KC_APS.Pg_out_KC_Av OR KC_APS.Kn_AObs_HMI OR KC_APS.PRU_AObs_BTN OR KC_APS.Kn_AObs_PRU OR KC_APS.UPG_GAS20
			  OR algKC.AObs AND NOT KC_BTN.Deblock) AND NOT algKC.AOss;
//= обобщённый сигнал АО
algKC.AO := algKC.AOss OR algKC.AObs;

//= Резерв
algKC.condReserve := not algKC.Inject and not algKC.Extract and not algKC.Fire and not algKC.AO;// условие Резерва
//= Закачка
algKC.Inject_Kr  := exchKC.Kr3_OF and exchKC.Kr1_12_OF and exchKC.Kr2_12_OF and exchKC.Kr1_10_ON and exchKC.Kr2_10_ON and exchKC.Kr3_10_ON and exchKC.Kr4_10_ON and exchKC.Kr5_10_ON and
					exchKC.Kr1_ON and exchKC.Kr2_ON and exchKC.Kr32_ON ;// Положение кранов при режиме "Закачка"
algKC.Inject  := not KC_Mode.EOKC and not KC_Mode.AOssKC and not KC_Mode.AObsKC and algKC.Inject_Kr  and exchKC.UZRG_Pin_35_v and exchKC.UZRG_Pout_35_v; //условия Закачки
//= Отбор
algKC.Extract_Kr := exchKC.Kr3_ON and exchKC.Kr1_12_ON and exchKC.Kr2_12_ON and exchKC.Kr1_10_ON and exchKC.Kr2_10_ON and exchKC.Kr3_10_ON and exchKC.Kr4_10_ON and exchKC.Kr5_10_ON and
					exchKC.Kr1_OF and exchKC.Kr2_OF and exchKC.Kr32_OF;// Положение кранов при режиме "Отбор"
algKC.Extract := not KC_Mode.EOKC and not KC_Mode.AOssKC and not KC_Mode.AObsKC and algKC.Extract_Kr and exchKC.UZRG_Pin_35_v and exchKC.UZRG_Pout_35_v; //условия Отбора

//===================================================================================================
drmKC.Fire.complete := KC_Mode.FireKC and not algKC.Fire; // and BTN_KC.Deblock;

drmKC.AOss.complete := KC_Mode.AOssKC and not algKC.AOss;

drmKC.AObs.complete := KC_Mode.AObsKC and not algKC.AObs;

//===================================================================================================

//= Уровни
algKC.Lf_R1_n := KC_DI.Lt_R1_ADES_n;	//	Нижний уровень в Р1 для дизтоплива, поз.LSA2
algKC.Lf_R1_v := KC_DI.Lt_R1_ADES_v;	//	Верхний уровень в Р1 для дизтоплива, поз.LSA1
algKC.Lf_R2a_v := KC_DI.Lt_R2_ADES_v;	//	Верхний уровень в Р2 для аварийного слива топлива, поз.LSA3
// Неисправности датчиков уровня
KC_SS.LSA1_Bad := NOT KC_DI.LSA1_GRA_ok AND KC_DI.LSA1_GPA_ok_KCD OR NOT KC_DI.Lm_R1_v_KCD;
KC_SS.LSA2_Bad := NOT KC_DI.LSA2_GPA_ok AND KC_DI.LSA2_GPA_ok_KCD OR NOT KC_DI.Lm_R2_v_KCD;
KC_SS.LSA3_Bad := NOT KC_DI.LSA3_GPA_ok AND KC_DI.LSA3_GPA_ok_KCD OR NOT KC_DI.Lm_R3_v_KCD;
KC_SS.LSA4_Bad := NOT KC_DI.LSA4_GPA_ok AND KC_DI.LSA4_GPA_ok_KCD OR NOT KC_DI.Lm_R4_v_KCD;
KC_SS.LSA5_Bad := NOT KC_DI.LSA5_GPA_ok AND KC_DI.LSA5_GPA_ok_KCD OR NOT KC_DI.Lm_R5_v_KCD;
KC_SS.LSA6_Bad := NOT KC_DI.LSA6_GPA_ok AND KC_DI.LSA6_GPA_ok_KCD OR NOT KC_DI.Lm_R6_v_KCD;
KC_SS.LSA1_ADES_Bad := NOT KC_DI.LSA1_ADES_ok AND KC_DI.LSA1_ADES_ok_KCD OR NOT KC_DI.Lt_R1_ADES_v_KCD;
KC_SS.LSA2_ADES_Bad := NOT KC_DI.LSA2_ADES_ok AND KC_DI.LSA2_ADES_ok_KCD OR NOT KC_DI.Lt_R1_ADES_n_KCD;
KC_SS.LSA3_ADES_Bad := NOT KC_DI.LSA3_ADES_ok AND KC_DI.LSA3_ADES_ok_KCD OR NOT KC_DI.Lt_R2_v_KCD;
//===================================================================================================
//= Передача Деблокировки
KC_FromKCtoLIS_mb_DO.Unlock_UNTS  := DeblockFlag; //= ЛИС УНТС
KC_FromKCtoLIS_mb_DO.Unlock_UZRG  := DeblockFlag; //= ЛИС УЗРГ
KC_FromKCtoLIS_mb_DO.Unlock_UPTIG := DeblockFlag; //= ЛИС УПТИГ
KC_FromKCtoLIS_mb_DO.Unlock_GSM   := DeblockFlag; //= ЛИС ГСМ
KC_FromKCtoLIS_mb_DO.Unlock_KOS   := DeblockFlag; //= ЛИС КОС
KC_FromKCtoLIS_mb_DO.Unlock_VOS   := DeblockFlag; //= ЛИС ВОС
KC_FromKCtoLIS_mb_DO.Unlock_NM    := DeblockFlag; //= ЛИС НМ
KC_FromKCtoLIS_mb_DO.Unlock_UPOU  := DeblockFlag; //= ЛИС УПОУ
//===================================================================================================
//= формирование сигналов АО
//= физический выход
KC_DO.AOss_KC := algKC.AOss;//= АОсс от САУ КЦ
KC_DO.AObs_KC := algKC.AObs;//= АОбс от САУ КЦ
//= индикация на ПРУ
KC_DO.AOss_LED_PRU := algKC.AOss;//= АОсс на ПРУ (1)
KC_DO.AOss_LED_PRU2 := algKC.AOss;//= АОсс на ПРУ (2)
KC_DO.AObs_LED_PRU := algKC.AObs;//= АОбс на ПРУ (1)
KC_DO.AObs_LED_PRU2 := algKC.AObs;//= АОбс на ПРУ (2)


//= передача сигналов АО
//= в САУ ГПА1,2,3
KC_DO.AO_GPA1 := algKC.AO; //= ГПА1
KC_GPA1_mb_DO.AO := algKC.AO; //= ГПА1 (по интерфейсу)
KC_DO.AO_GPA2 := algKC.AO; //= ГПА2
KC_GPA2_mb_DO.AO := algKC.AO; //= ГПА2 (по интерфейсу)
KC_DO.AO_GPA3 := algKC.AO; //= ГПА3
KC_GPA3_mb_DO.AO := algKC.AO; //= ГПА3 (по интерфейсу)
//= в САУ ГПА4,5,6
KC_DO.AO_GPA4 := algKC.AO; //= ГПА4
KC_DO.AO_GPA5 := algKC.AO; //= ГПА5
KC_DO.AO_GPA6 := algKC.AO; //= ГПА6

//= в локальные САУ КЦ 
KC_DO.AO_UPA := algKC.AO; //= УПА
KC_DO.AO_UVI := algKC.AO; //= УВИ
KC_DO.AO_TSK := algKC.AO; //= ТСк
KC_DO.AO_NMS := algKC.AO; //= НМс
KC_DO.AO_UPG := algKC.AO; //= УПГ
KC_DO.AO_BVKS := algKC.AO; //= БВКС
//= в ЛИС5000
//= ГСМ
KC_DO.AO_GSM := algKC.AO; //= ЛИС ГСМ
KC_FromKCtoLIS_mb_DO.AO_GSM := algKC.AO; //= ЛИС ГСМ (по интерфейсу)
//= УПТИГ
KC_DO.AO_UPTIG := algKC.AO; //= ЛИС УПТИГ
KC_FromKCtoLIS_mb_DO.AOss_UPTIG := algKC.AOss; //= ЛИС УПТИГ (по интерфейсу) АОсс
KC_FromKCtoLIS_mb_DO.AObs_UPTIG := algKC.AObs; //= ЛИС УПТИГ (по интерфейсу) АОбс
//= КОС
KC_DO.AO_KOS := algKC.AO; //= ЛИС КОС
KC_FromKCtoLIS_mb_DO.AO_KOS := algKC.AO; //= ЛИС КОС (по интерфейсу)
//= НМ
KC_DO.AO_NM := algKC.AO; //= ЛИС НМ
KC_FromKCtoLIS_mb_DO.AO_NM := algKC.AO; //= ЛИС НМ (по интерфейсу)
//= УНТС
KC_DO.AO_UNTS := algKC.AO; //= ЛИС УНТС
KC_FromKCtoLIS_mb_DO.AOss_UNTS := algKC.AOss; //= ЛИС УНТС (по интерфейсу) АОсс
KC_FromKCtoLIS_mb_DO.AObs_UNTS := algKC.AObs; //= ЛИС УНТС (по интерфейсу) АОбс
//= УЗРГ
KC_DO.AO_UZRG := algKC.AO; //= ЛИС УЗРГ
KC_FromKCtoLIS_mb_DO.AO_UZRG := algKC.AO; //= ЛИС УЗРГ (по интерфейсу)
//= УПОУ
KC_DO.AOss_UPOU_osn := algKC.AOss; //= ЛИС УПОУ (осн.) АОсс
KC_DO.AOss_UPOU_rez := algKC.AOss; //= ЛИС УПОУ (рез.) АОсс
KC_DO.AObs_UPOU_osn := algKC.AObs; //= ЛИС УПОУ (осн.) АОбс
KC_DO.AObs_UPOU_rez := algKC.AObs; //= ЛИС УПОУ (рез.) АОбс
KC_FromKCtoLIS_mb_DO.AOss_UPOU := algKC.AOss; //= ЛИС УПОУ (по интерфейсу) АОсс
KC_FromKCtoLIS_mb_DO.AObs_UPOU := algKC.AObs; //= ЛИС УПОУ (по интерфейсу) АОбс
//= ВОС
KC_FromKCtoLIS_mb_DO.AO_VOS := algKC.AO; //= ЛИС ВОС (по интерфейсу)

//= формирование сигналов ЭО
//= физический выход
KC_DO.EO_KC := KC_DI.Kn_EO_PRU;//= ЭО от САУ КЦ
//= индикация
KC_DO.EO_LED_PRU := KC_DI.Kn_EO_PRU;  //= Инд. ЭО КЦ на ПРУ
KC_DO.EO_LED_KC := KC_DI.Kn_EO_PRU;  //= Инд. ЭО от САУ КЦ
//===================================================================================================
//= формирование команд на ИМы
//Кран 51.2
KC_AM.Kr51_2.algOn	:=	algKC.AOss;  //Логическая команда на откр.(вкл.)
//Кран 52.2
KC_AM.Kr52_2.algOn	:=	algKC.AOss;  //Логическая команда на откр.(вкл.)

//steam
KC_CRS.AOs := algKC.AOss;//= АОсс от САУ КЦ к абонентам
KC_CRS.AOb := algKC.AObs;//= АОбс от САУ КЦ к абонентам










]]></ST>
            </Function>
            <FunctionBlock UUID="A5QOB42PZQYEHPHLD7ZVFE3PDQ" Name="FB_Analysis_AI_calc">
                <Variables>
                    <Variable UUID="IBEFJOK4ECXEVGPT77BJQZUNFI" Name="AI" Type="T_AI_ToHMI" TypeUUID="J74RQIZG5I6EZDCM32A6SZRKIM" Usage="input" />
                    <Variable UUID="P6BKQZ7MI25UDJIST5T52XERPA" Name="Permit" Type="BOOL" Usage="input" />
                    <Variable UUID="CJCVKV4F2FXUZJJFEGUHM2ZF54" Name="AI_Mas" Type="REAL" Size="6" Array="TRUE" Usage="internal" />
                    <Variable UUID="ORZM5S5J6CPEXAMFOV6BULTLLA" Name="i" Type="INT" Usage="internal" />
                    <Variable UUID="D6222PTTKLKU7I3KDPT77ZEVQM" Name="Calc" Type="BOOL" Usage="internal" />
                    <Variable UUID="3USJGVYCVSJURLM7U7QLQPXXNI" Name="Calc_Ch" Type="REAL" Usage="internal" />
                    <Variable UUID="JRTQI3O6F5EEPES2TG3KM6KM2M" Name="Alarm_out" Type="BOOL" Usage="output" />
                    <Variable UUID="VDF66YWVE42ETOP4IQPIPVOXTU" Name="Ust" Type="REAL" Usage="input" />
                </Variables>
                <ST><![CDATA[IF NOT AI.fault_common AND Permit THEN //= fault

Calc:= TRUE;
FOR i:=0 TO 5 DO
 IF AI_Mas[i] = 0.0 THEN  Calc:= FALSE; END_IF;
END_FOR;

AI_Mas[5]:= AI.PV;

FOR i:=0 TO 4 DO
 AI_Mas[i] := AI_Mas[i+1] ;
END_FOR;

IF Calc THEN Calc_Ch := (100.0*(AI_Mas[0] - AI_Mas[4]))/AI_Mas[0]; END_IF; 

Alarm_out := Calc_Ch > Ust;






ELSE
  Calc_Ch := 0.0;
  Alarm_out := FALSE;
  Calc := FALSE; 
FOR i:=0 TO 5 DO
  AI_Mas[i]:= 0.0;
END_FOR;

END_IF;

]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="YFVWCR36G4AULLUU4VNZS6SAEA" Name="FB_Logic">
                <Variables>
                    <Variable UUID="MPEJOQ6TUKCUVNPNAXN2N4O6BI" Name="Kn_DU_IM" Type="FB_Ttrg" TypeUUID="JH6E2RDLE37ULL4MOUYCEZKSHQ" Usage="internal" />
                    <Variable UUID="CCNUMEIVF3XUHGSX4OYQ3EAFQE" Name="Proc_Disruption_in_line_KC" Type="FB_Analysis_AI_calc" TypeUUID="A5QOB42PZQYEHPHLD7ZVFE3PDQ" Usage="internal" />
                    <Variable UUID="SUD3UZW2VYDURJSS6D4IYQDDRA" Name="Proc_Disruption_out_line_KC" Type="FB_Analysis_AI_calc" TypeUUID="A5QOB42PZQYEHPHLD7ZVFE3PDQ" Usage="internal" />
                </Variables>
                <ST><![CDATA[//Включение ДУ для ИМ по кнопке
KC_SS.Prm_DU_IM := KC_Mode.ReserveKC AND NOT algKC.Fire; //разрешение кнопки
Kn_DU_IM(KC_BTN.DU_IM, NOT KC_SS.Prm_DU_IM, KC_TS.DU_IM); //включение ДУ для ИМ (пропадпне KC_SS.Prm_DU_IM сбросит флаг ДУ KC_TS.DU_IM в ноль

//= Определение Разрыва газопровода (из Новгородского проекта)
Proc_Disruption_in_line_KC(AI := KC_AI_ToHMI.Pg_in_KC, Permit:= (algKC.g_inLoop) , Ust := 10.0, Alarm_out => algKC.Gasmain_in_KC_brk);//Прорыв трубопровода на входе КЦ
Proc_Disruption_out_line_KC(AI := KC_AI_ToHMI.Pg_out_KC, Permit:= (algKC.g_inLoop) , Ust := 10.0, Alarm_out => algKC.Gasmain_out_KC_brk);//Прорыв трубопровода на выходе КЦ
]]></ST>
            </FunctionBlock>
        </Folder>
        <Folder Name="Драйверы" Comment="" Data="" UUID="YBNLIK3SILRUHPQ2CIF36HF5HY">
            <Folder Name="ВК" Comment="" Data="" UUID="4OVMIPBZHI6UVD3RRQCPGBRCEY">
                <Folder Name="AI" Comment="" Data="" UUID="AATEQBLFFXGE5FDEIGFIQHRKTM">
                    <Function UUID="HTEAYAWEJS7POCSHB2MOWHRS3E" Name="KC_BK_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
KC_BK_AI_ToHMI.Qg_out.manual := tmpPermit; //Расход газа на выходе потребителю  ,Ст.м3/ч;
KC_BK_AI_ToHMI.Sum_Qg.manual := tmpPermit; //Суммарное количество газа  ,м3;
KC_BK_AI_ToHMI.Tpd1.manual := tmpPermit; //Температура точки росы после 010А01  ,°C;
KC_BK_AI_ToHMI.Pout_st.manual := tmpPermit; //Давление на выходе станции  ,МПа;
KC_BK_AI_ToHMI.P_flow.manual := tmpPermit; //Давление в контуре расходомер  ,МПа;
KC_BK_AI_ToHMI.P_res.manual := tmpPermit; //Давление в ресивере  ,МПа;
KC_BK_AI_ToHMI.T_in_F1.manual := tmpPermit; //Температура перед фильтрами после 01КМ01  ,°C;
KC_BK_AI_ToHMI.T_flow.manual := tmpPermit; //Температура в контуре расходомера  ,°C;
KC_BK_AI_ToHMI.T_in_K1.manual := tmpPermit; //Температура на всасе компрессора 01КМ01  ,°C;
KC_BK_AI_ToHMI.Tpd2.manual := tmpPermit; //Температура точки росы после 020А01  ,°C;
KC_BK_AI_ToHMI.T_in_F2.manual := tmpPermit; //Температура перед фильтрами после 02КМ01  ,°C;
KC_BK_AI_ToHMI.T_in_K2.manual := tmpPermit; //Температура на всасе компрессора 02КМ01  ,°C;
KC_BK_AI_ToHMI.Nar_01KM01.manual := tmpPermit; //Наработка 01KM01  ,ч;
KC_BK_AI_ToHMI.Nar_01OA01.manual := tmpPermit; //Наработка 01ОА01  ,ч;
KC_BK_AI_ToHMI.Nar_02KM01.manual := tmpPermit; //Наработка 02КМ01  ,ч;
KC_BK_AI_ToHMI.Nar_02OA01.manual := tmpPermit; //Наработка 02ОА01  ,ч;
KC_BK_AI_ToHMI.EL_Count_I.manual := tmpPermit; //Счетчик электрообогрева ресивера и конденсатопровода: Текущий ток  ,А;
KC_BK_AI_ToHMI.EL_Count_U.manual := tmpPermit; //Счетчик электрообогрева ресивера и конденсатопровода: Текущее напряжение  ,В;
KC_BK_AI_ToHMI.EL_Count_Pow.manual := tmpPermit; //Счетчик электрообогрева ресивера и конденсатопровода: Текущая мощность  ,Вт;
KC_BK_AI_ToHMI.EL_BB_Count_I.manual := tmpPermit; //Счетчик электрообогрева ресивера и конденсатопровода блок-бокса: Текущий ток  ,А;
KC_BK_AI_ToHMI.EL_BB_Count_U.manual := tmpPermit; //Счетчик электрообогрева ресивера и конденсатопровода блок-бокса:  Текущее напряжение  ,В;
KC_BK_AI_ToHMI.EL_BB_Count_Pow.manual := tmpPermit; //Счетчик электрообогрева ресивера и конденсатопровода блок-бокса:  Текущее мощность  ,Вт;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <FunctionBlock UUID="V3MVFPQKUQVUBMCUABHCV5ESB4" Name="KC_BK_mb_AI_CallAll_FB">
                        <Variables>
                            <Variable UUID="4AGHVSJESZ5U5M7BFP2XM7O4XQ" Name="Proc_TMR_ON" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                            <Variable UUID="FBUCFHPHTVYETNWIGEAIBFONIY" Name="TMO_ON" Type="BOOL" Usage="internal" />
                            <Variable UUID="53TD23KS4Z3U7PL4I2TKNKYDME" Name="TMR_ON" Type="TIME" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[Proc_TMR_ON(TRUE, T#15s, TMO_ON, TMR_ON);
IF not TMO_ON THEN
//	init.AI := true;
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода mb_AI_init
//Расход газа на выходе потребителю  ,Ст.м3/ч
mb_AI_init(KC_BK_AI_Settings.Qg_out,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,0);
//Суммарное количество газа  ,м3
mb_AI_init(KC_BK_AI_Settings.Sum_Qg,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,1);
//Температура точки росы после 010А01  ,°C
mb_AI_init(KC_BK_AI_Settings.Tpd1,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,2);
//Давление на выходе станции  ,МПа
mb_AI_init(KC_BK_AI_Settings.Pout_st,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,3);
//Давление в контуре расходомер  ,МПа
mb_AI_init(KC_BK_AI_Settings.P_flow,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,4);
//Давление в ресивере  ,МПа
mb_AI_init(KC_BK_AI_Settings.P_res,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,5);
//Температура перед фильтрами после 01КМ01  ,°C
mb_AI_init(KC_BK_AI_Settings.T_in_F1,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,6);
//Температура в контуре расходомера  ,°C
mb_AI_init(KC_BK_AI_Settings.T_flow,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,7);
//Температура на всасе компрессора 01КМ01  ,°C
mb_AI_init(KC_BK_AI_Settings.T_in_K1,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,8);
//Температура точки росы после 020А01  ,°C
mb_AI_init(KC_BK_AI_Settings.Tpd2,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,9);
//Температура перед фильтрами после 02КМ01  ,°C
mb_AI_init(KC_BK_AI_Settings.T_in_F2,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,10);
//Температура на всасе компрессора 02КМ01  ,°C
mb_AI_init(KC_BK_AI_Settings.T_in_K2,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,11);
//Наработка 01KM01  ,ч
mb_AI_init(KC_BK_AI_Settings.Nar_01KM01,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,12);
//Наработка 01ОА01  ,ч
mb_AI_init(KC_BK_AI_Settings.Nar_01OA01,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,13);
//Наработка 02КМ01  ,ч
mb_AI_init(KC_BK_AI_Settings.Nar_02KM01,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,14);
//Наработка 02ОА01  ,ч
mb_AI_init(KC_BK_AI_Settings.Nar_02OA01,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,15);
//Счетчик электрообогрева ресивера и конденсатопровода: Текущий ток  ,А
mb_AI_init(KC_BK_AI_Settings.EL_Count_I,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,16);
//Счетчик электрообогрева ресивера и конденсатопровода: Текущее напряжение  ,В
mb_AI_init(KC_BK_AI_Settings.EL_Count_U,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,5,0.0,0.0,0.0,17);
//Счетчик электрообогрева ресивера и конденсатопровода: Текущая мощность  ,Вт
mb_AI_init(KC_BK_AI_Settings.EL_Count_Pow,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,5,0.0,0.0,0.0,18);
//Счетчик электрообогрева ресивера и конденсатопровода блок-бокса: Текущий ток  ,А
mb_AI_init(KC_BK_AI_Settings.EL_BB_Count_I,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,5,0.0,0.0,0.0,19);
//Счетчик электрообогрева ресивера и конденсатопровода блок-бокса:  Текущее напряжение  ,В
mb_AI_init(KC_BK_AI_Settings.EL_BB_Count_U,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,5,0.0,0.0,0.0,20);
//Счетчик электрообогрева ресивера и конденсатопровода блок-бокса:  Текущее мощность  ,Вт
mb_AI_init(KC_BK_AI_Settings.EL_BB_Count_Pow,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,5,0.0,0.0,0.0,21);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода mb_AI_Processing
//Расход газа на выходе потребителю  ,Ст.м3/ч
mb_AI_Processing(KC_BK_mb_AI_DRV.Qg_out,KC_BK_AI_Settings.Qg_out,KC_BK_AI_FromHMI.Qg_out,KC_BK_AI_ToHMI.Qg_out);
//Суммарное количество газа  ,м3
mb_AI_Processing(KC_BK_mb_AI_DRV.Sum_Qg,KC_BK_AI_Settings.Sum_Qg,KC_BK_AI_FromHMI.Sum_Qg,KC_BK_AI_ToHMI.Sum_Qg);
//Температура точки росы после 010А01  ,°C
mb_AI_Processing(KC_BK_mb_AI_DRV.Tpd1,KC_BK_AI_Settings.Tpd1,KC_BK_AI_FromHMI.Tpd1,KC_BK_AI_ToHMI.Tpd1);
//Давление на выходе станции  ,МПа
mb_AI_Processing(KC_BK_mb_AI_DRV.Pout_st,KC_BK_AI_Settings.Pout_st,KC_BK_AI_FromHMI.Pout_st,KC_BK_AI_ToHMI.Pout_st);
//Давление в контуре расходомер  ,МПа
mb_AI_Processing(KC_BK_mb_AI_DRV.P_flow,KC_BK_AI_Settings.P_flow,KC_BK_AI_FromHMI.P_flow,KC_BK_AI_ToHMI.P_flow);
//Давление в ресивере  ,МПа
mb_AI_Processing(KC_BK_mb_AI_DRV.P_res,KC_BK_AI_Settings.P_res,KC_BK_AI_FromHMI.P_res,KC_BK_AI_ToHMI.P_res);
//Температура перед фильтрами после 01КМ01  ,°C
mb_AI_Processing(KC_BK_mb_AI_DRV.T_in_F1,KC_BK_AI_Settings.T_in_F1,KC_BK_AI_FromHMI.T_in_F1,KC_BK_AI_ToHMI.T_in_F1);
//Температура в контуре расходомера  ,°C
mb_AI_Processing(KC_BK_mb_AI_DRV.T_flow,KC_BK_AI_Settings.T_flow,KC_BK_AI_FromHMI.T_flow,KC_BK_AI_ToHMI.T_flow);
//Температура на всасе компрессора 01КМ01  ,°C
mb_AI_Processing(KC_BK_mb_AI_DRV.T_in_K1,KC_BK_AI_Settings.T_in_K1,KC_BK_AI_FromHMI.T_in_K1,KC_BK_AI_ToHMI.T_in_K1);
//Температура точки росы после 020А01  ,°C
mb_AI_Processing(KC_BK_mb_AI_DRV.Tpd2,KC_BK_AI_Settings.Tpd2,KC_BK_AI_FromHMI.Tpd2,KC_BK_AI_ToHMI.Tpd2);
//Температура перед фильтрами после 02КМ01  ,°C
mb_AI_Processing(KC_BK_mb_AI_DRV.T_in_F2,KC_BK_AI_Settings.T_in_F2,KC_BK_AI_FromHMI.T_in_F2,KC_BK_AI_ToHMI.T_in_F2);
//Температура на всасе компрессора 02КМ01  ,°C
mb_AI_Processing(KC_BK_mb_AI_DRV.T_in_K2,KC_BK_AI_Settings.T_in_K2,KC_BK_AI_FromHMI.T_in_K2,KC_BK_AI_ToHMI.T_in_K2);
//Наработка 01KM01  ,ч
mb_AI_Processing(KC_BK_mb_AI_DRV.Nar_01KM01,KC_BK_AI_Settings.Nar_01KM01,KC_BK_AI_FromHMI.Nar_01KM01,KC_BK_AI_ToHMI.Nar_01KM01);
//Наработка 01ОА01  ,ч
mb_AI_Processing(KC_BK_mb_AI_DRV.Nar_01OA01,KC_BK_AI_Settings.Nar_01OA01,KC_BK_AI_FromHMI.Nar_01OA01,KC_BK_AI_ToHMI.Nar_01OA01);
//Наработка 02КМ01  ,ч
mb_AI_Processing(KC_BK_mb_AI_DRV.Nar_02KM01,KC_BK_AI_Settings.Nar_02KM01,KC_BK_AI_FromHMI.Nar_02KM01,KC_BK_AI_ToHMI.Nar_02KM01);
//Наработка 02ОА01  ,ч
mb_AI_Processing(KC_BK_mb_AI_DRV.Nar_02OA01,KC_BK_AI_Settings.Nar_02OA01,KC_BK_AI_FromHMI.Nar_02OA01,KC_BK_AI_ToHMI.Nar_02OA01);
//Счетчик электрообогрева ресивера и конденсатопровода: Текущий ток  ,А
mb_AI_Processing(KC_BK_mb_AI_DRV.EL_Count_I,KC_BK_AI_Settings.EL_Count_I,KC_BK_AI_FromHMI.EL_Count_I,KC_BK_AI_ToHMI.EL_Count_I);
//Счетчик электрообогрева ресивера и конденсатопровода: Текущее напряжение  ,В
mb_AI_Processing(INT_TO_REAL(KC_BK_mb_AI_DRV.EL_Count_U),KC_BK_AI_Settings.EL_Count_U,KC_BK_AI_FromHMI.EL_Count_U,KC_BK_AI_ToHMI.EL_Count_U);
//Счетчик электрообогрева ресивера и конденсатопровода: Текущая мощность  ,Вт
mb_AI_Processing(INT_TO_REAL(KC_BK_mb_AI_DRV.EL_Count_Pow),KC_BK_AI_Settings.EL_Count_Pow,KC_BK_AI_FromHMI.EL_Count_Pow,KC_BK_AI_ToHMI.EL_Count_Pow);
//Счетчик электрообогрева ресивера и конденсатопровода блок-бокса: Текущий ток  ,А
mb_AI_Processing(INT_TO_REAL(KC_BK_mb_AI_DRV.EL_BB_Count_I),KC_BK_AI_Settings.EL_BB_Count_I,KC_BK_AI_FromHMI.EL_BB_Count_I,KC_BK_AI_ToHMI.EL_BB_Count_I);
//Счетчик электрообогрева ресивера и конденсатопровода блок-бокса:  Текущее напряжение  ,В
mb_AI_Processing(INT_TO_REAL(KC_BK_mb_AI_DRV.EL_BB_Count_U),KC_BK_AI_Settings.EL_BB_Count_U,KC_BK_AI_FromHMI.EL_BB_Count_U,KC_BK_AI_ToHMI.EL_BB_Count_U);
//Счетчик электрообогрева ресивера и конденсатопровода блок-бокса:  Текущее мощность  ,Вт
mb_AI_Processing(INT_TO_REAL(KC_BK_mb_AI_DRV.EL_BB_Count_Pow),KC_BK_AI_Settings.EL_BB_Count_Pow,KC_BK_AI_FromHMI.EL_BB_Count_Pow,KC_BK_AI_ToHMI.EL_BB_Count_Pow);
//Конец сгенерированного кода
]]></ST>
                    </FunctionBlock>
                </Folder>
                <Folder Name="DI" Comment="" Data="" UUID="P3MVU4X4AKXUNJLIQZJSVKDCZ4">
                    <Function UUID="E3D7DMWXJMX45UIF5OKBHHML3M" Name="KC_BK2_DI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода DI_Permit
KC_BK2_DI_ToHMI.First_Line_main.manual := tmpPermit; //Выбрана первая линия;
KC_BK2_DI_ToHMI.Second_Line_main.manual := tmpPermit; //Выбрана вторая линия;
KC_BK2_DI_ToHMI.Reservation_On.manual := tmpPermit; //Резервирование включено;
KC_BK2_DI_ToHMI.AVR_fault.manual := tmpPermit; //АВР отказ;
KC_BK2_DI_ToHMI.AVR_not_ready.manual := tmpPermit; //АВР не готов;
KC_BK2_DI_ToHMI.AVR_On.manual := tmpPermit; //АВР включен;
KC_BK2_DI_ToHMI.AV_Rasc.manual := tmpPermit; //АВ питания отключения независимых расцепителей;
KC_BK2_DI_ToHMI.AV_Heat_Cond_On.manual := tmpPermit; //Включен АВ электрообогрева и конденсатопровода;
KC_BK2_DI_ToHMI.Heat_Cond_fault.manual := tmpPermit; //Неисправность электрообогрева и конденсатопровода;
KC_BK2_DI_ToHMI.AV_Heat_Cond_BB_On.manual := tmpPermit; //Включен АВ электрообогрева и конденсатопровода блок-бокса;
KC_BK2_DI_ToHMI.QF03_On.manual := tmpPermit; //QF03. Включен;
KC_BK2_DI_ToHMI.QF03_Off.manual := tmpPermit; //QF03. Отключен;
KC_BK2_DI_ToHMI.AV_10_15_On.manual := tmpPermit; //Включен АВ 10ВВ10, 10ВВ11 10ВВ15;
KC_BK2_DI_ToHMI.OPS_fault.manual := tmpPermit; //ОПС. Неисправность;
KC_BK2_DI_ToHMI.OPS_fire.manual := tmpPermit; //ОПС. Пожар;
KC_BK2_DI_ToHMI.INP1_fault.manual := tmpPermit; //Неисправность вводного выключателя 1;
KC_BK2_DI_ToHMI.QF01_Off.manual := tmpPermit; //QF01. Отключен;
KC_BK2_DI_ToHMI.QF01_On.manual := tmpPermit; //QF01. Включен;
KC_BK2_DI_ToHMI.QF02_Off.manual := tmpPermit; //QF02. Отключен;
KC_BK2_DI_ToHMI.QF02_On.manual := tmpPermit; //QF02. Включен;
KC_BK2_DI_ToHMI.Section_switch_fault.manual := tmpPermit; //Неисправность секционного выключателя;
KC_BK2_DI_ToHMI.UZIP_fault.manual := tmpPermit; //УЗИП. Неисправность;
KC_BK2_DI_ToHMI.U_chain_fault.manual := tmpPermit; //Неисправность цепи питания 10ВВ10, 10ВВ11 10ВВ15;
KC_BK2_DI_ToHMI.Station_mode.manual := tmpPermit; //Режим работы станции: 0-Авто, 1-РУ;
KC_BK2_DI_ToHMI.Vent_mode.manual := tmpPermit; //Режим работы вентиляции: 0-Авто, 1-РУ;
KC_BK2_DI_ToHMI.U_1_section.manual := tmpPermit; //Наличие напряжения на 1 секции;
KC_BK2_DI_ToHMI.U_2_section.manual := tmpPermit; //Наличие напряжения на 2 секции;
KC_BK2_DI_ToHMI.Station_On.manual := tmpPermit; //Станция запущена;
KC_BK2_DI_ToHMI.Station_Control_Blocked.manual := tmpPermit; //Управление станцией заблокировано;
KC_BK2_DI_ToHMI.Btn_AO.manual := tmpPermit; //Нажата аварийная кнопка;
KC_BK2_DI_ToHMI.U_cab.manual := tmpPermit; //Наличие питания на шкафу АСУ;
KC_BK2_DI_ToHMI.T_ots1_hi.manual := tmpPermit; //10TS10. Высокая температура в отсеке 1;
KC_BK2_DI_ToHMI.T_ots2_hi.manual := tmpPermit; //10TS11. Высокая температура в отсеке 2;
KC_BK2_DI_ToHMI.T_ap_hi.manual := tmpPermit; //10TS15. Высокая температура в аппаратной;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="N4ETTZQTII55GZYUCOCZBE4OZE" Name="KC_BK2_mb_DI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[//-------- Обработка дискретных входов полученных по сети --------------
//Начало сгенерированного кода mb_DI_Processing
//Выбрана первая линия
mb_DI_Processing(KC_BK2_mb_DI_DRV.First_Line_main,KC_BK2_DI_FromHMI.First_Line_main,KC_BK2_DI_ToHMI.First_Line_main,KC_BK2_DI.First_Line_main);
//Выбрана вторая линия
mb_DI_Processing(KC_BK2_mb_DI_DRV.Second_Line_main,KC_BK2_DI_FromHMI.Second_Line_main,KC_BK2_DI_ToHMI.Second_Line_main,KC_BK2_DI.Second_Line_main);
//Резервирование включено
mb_DI_Processing(KC_BK2_mb_DI_DRV.Reservation_On,KC_BK2_DI_FromHMI.Reservation_On,KC_BK2_DI_ToHMI.Reservation_On,KC_BK2_DI.Reservation_On);
//АВР отказ
mb_DI_Processing(KC_BK2_mb_DI_DRV.AVR_fault,KC_BK2_DI_FromHMI.AVR_fault,KC_BK2_DI_ToHMI.AVR_fault,KC_BK2_DI.AVR_fault);
//АВР не готов
mb_DI_Processing(KC_BK2_mb_DI_DRV.AVR_not_ready,KC_BK2_DI_FromHMI.AVR_not_ready,KC_BK2_DI_ToHMI.AVR_not_ready,KC_BK2_DI.AVR_not_ready);
//АВР включен
mb_DI_Processing(KC_BK2_mb_DI_DRV.AVR_On,KC_BK2_DI_FromHMI.AVR_On,KC_BK2_DI_ToHMI.AVR_On,KC_BK2_DI.AVR_On);
//АВ питания отключения независимых расцепителей
mb_DI_Processing(KC_BK2_mb_DI_DRV.AV_Rasc,KC_BK2_DI_FromHMI.AV_Rasc,KC_BK2_DI_ToHMI.AV_Rasc,KC_BK2_DI.AV_Rasc);
//Включен АВ электрообогрева и конденсатопровода
mb_DI_Processing(KC_BK2_mb_DI_DRV.AV_Heat_Cond_On,KC_BK2_DI_FromHMI.AV_Heat_Cond_On,KC_BK2_DI_ToHMI.AV_Heat_Cond_On,KC_BK2_DI.AV_Heat_Cond_On);
//Неисправность электрообогрева и конденсатопровода
mb_DI_Processing(KC_BK2_mb_DI_DRV.Heat_Cond_fault,KC_BK2_DI_FromHMI.Heat_Cond_fault,KC_BK2_DI_ToHMI.Heat_Cond_fault,KC_BK2_DI.Heat_Cond_fault);
//Включен АВ электрообогрева и конденсатопровода блок-бокса
mb_DI_Processing(KC_BK2_mb_DI_DRV.AV_Heat_Cond_BB_On,KC_BK2_DI_FromHMI.AV_Heat_Cond_BB_On,KC_BK2_DI_ToHMI.AV_Heat_Cond_BB_On,KC_BK2_DI.AV_Heat_Cond_BB_On);
//QF03. Включен
mb_DI_Processing(KC_BK2_mb_DI_DRV.QF03_On,KC_BK2_DI_FromHMI.QF03_On,KC_BK2_DI_ToHMI.QF03_On,KC_BK2_DI.QF03_On);
//QF03. Отключен
mb_DI_Processing(KC_BK2_mb_DI_DRV.QF03_Off,KC_BK2_DI_FromHMI.QF03_Off,KC_BK2_DI_ToHMI.QF03_Off,KC_BK2_DI.QF03_Off);
//Включен АВ 10ВВ10, 10ВВ11 10ВВ15
mb_DI_Processing(KC_BK2_mb_DI_DRV.AV_10_15_On,KC_BK2_DI_FromHMI.AV_10_15_On,KC_BK2_DI_ToHMI.AV_10_15_On,KC_BK2_DI.AV_10_15_On);
//ОПС. Неисправность
mb_DI_Processing(KC_BK2_mb_DI_DRV.OPS_fault,KC_BK2_DI_FromHMI.OPS_fault,KC_BK2_DI_ToHMI.OPS_fault,KC_BK2_DI.OPS_fault);
//ОПС. Пожар
mb_DI_Processing(KC_BK2_mb_DI_DRV.OPS_fire,KC_BK2_DI_FromHMI.OPS_fire,KC_BK2_DI_ToHMI.OPS_fire,KC_BK2_DI.OPS_fire);
//Неисправность вводного выключателя 1
mb_DI_Processing(KC_BK2_mb_DI_DRV.INP1_fault,KC_BK2_DI_FromHMI.INP1_fault,KC_BK2_DI_ToHMI.INP1_fault,KC_BK2_DI.INP1_fault);
//QF01. Отключен
mb_DI_Processing(KC_BK2_mb_DI_DRV.QF01_Off,KC_BK2_DI_FromHMI.QF01_Off,KC_BK2_DI_ToHMI.QF01_Off,KC_BK2_DI.QF01_Off);
//QF01. Включен
mb_DI_Processing(KC_BK2_mb_DI_DRV.QF01_On,KC_BK2_DI_FromHMI.QF01_On,KC_BK2_DI_ToHMI.QF01_On,KC_BK2_DI.QF01_On);
//QF02. Отключен
mb_DI_Processing(KC_BK2_mb_DI_DRV.QF02_Off,KC_BK2_DI_FromHMI.QF02_Off,KC_BK2_DI_ToHMI.QF02_Off,KC_BK2_DI.QF02_Off);
//QF02. Включен
mb_DI_Processing(KC_BK2_mb_DI_DRV.QF02_On,KC_BK2_DI_FromHMI.QF02_On,KC_BK2_DI_ToHMI.QF02_On,KC_BK2_DI.QF02_On);
//Неисправность секционного выключателя
mb_DI_Processing(KC_BK2_mb_DI_DRV.Section_switch_fault,KC_BK2_DI_FromHMI.Section_switch_fault,KC_BK2_DI_ToHMI.Section_switch_fault,KC_BK2_DI.Section_switch_fault);
//УЗИП. Неисправность
mb_DI_Processing(KC_BK2_mb_DI_DRV.UZIP_fault,KC_BK2_DI_FromHMI.UZIP_fault,KC_BK2_DI_ToHMI.UZIP_fault,KC_BK2_DI.UZIP_fault);
//Неисправность цепи питания 10ВВ10, 10ВВ11 10ВВ15
mb_DI_Processing(KC_BK2_mb_DI_DRV.U_chain_fault,KC_BK2_DI_FromHMI.U_chain_fault,KC_BK2_DI_ToHMI.U_chain_fault,KC_BK2_DI.U_chain_fault);
//Режим работы станции: 0-Авто, 1-РУ
mb_DI_Processing(KC_BK2_mb_DI_DRV.Station_mode,KC_BK2_DI_FromHMI.Station_mode,KC_BK2_DI_ToHMI.Station_mode,KC_BK2_DI.Station_mode);
//Режим работы вентиляции: 0-Авто, 1-РУ
mb_DI_Processing(KC_BK2_mb_DI_DRV.Vent_mode,KC_BK2_DI_FromHMI.Vent_mode,KC_BK2_DI_ToHMI.Vent_mode,KC_BK2_DI.Vent_mode);
//Наличие напряжения на 1 секции
mb_DI_Processing(KC_BK2_mb_DI_DRV.U_1_section,KC_BK2_DI_FromHMI.U_1_section,KC_BK2_DI_ToHMI.U_1_section,KC_BK2_DI.U_1_section);
//Наличие напряжения на 2 секции
mb_DI_Processing(KC_BK2_mb_DI_DRV.U_2_section,KC_BK2_DI_FromHMI.U_2_section,KC_BK2_DI_ToHMI.U_2_section,KC_BK2_DI.U_2_section);
//Станция запущена
mb_DI_Processing(KC_BK2_mb_DI_DRV.Station_On,KC_BK2_DI_FromHMI.Station_On,KC_BK2_DI_ToHMI.Station_On,KC_BK2_DI.Station_On);
//Управление станцией заблокировано
mb_DI_Processing(KC_BK2_mb_DI_DRV.Station_Control_Blocked,KC_BK2_DI_FromHMI.Station_Control_Blocked,KC_BK2_DI_ToHMI.Station_Control_Blocked,KC_BK2_DI.Station_Control_Blocked);
//Нажата аварийная кнопка
mb_DI_Processing(KC_BK2_mb_DI_DRV.Btn_AO,KC_BK2_DI_FromHMI.Btn_AO,KC_BK2_DI_ToHMI.Btn_AO,KC_BK2_DI.Btn_AO);
//Наличие питания на шкафу АСУ
mb_DI_Processing(KC_BK2_mb_DI_DRV.U_cab,KC_BK2_DI_FromHMI.U_cab,KC_BK2_DI_ToHMI.U_cab,KC_BK2_DI.U_cab);
//10TS10. Высокая температура в отсеке 1
mb_DI_Processing(KC_BK2_mb_DI_DRV.T_ots1_hi,KC_BK2_DI_FromHMI.T_ots1_hi,KC_BK2_DI_ToHMI.T_ots1_hi,KC_BK2_DI.T_ots1_hi);
//10TS11. Высокая температура в отсеке 2
mb_DI_Processing(KC_BK2_mb_DI_DRV.T_ots2_hi,KC_BK2_DI_FromHMI.T_ots2_hi,KC_BK2_DI_ToHMI.T_ots2_hi,KC_BK2_DI.T_ots2_hi);
//10TS15. Высокая температура в аппаратной
mb_DI_Processing(KC_BK2_mb_DI_DRV.T_ap_hi,KC_BK2_DI_FromHMI.T_ap_hi,KC_BK2_DI_ToHMI.T_ap_hi,KC_BK2_DI.T_ap_hi);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="ODURNHQ7IY6I4LWMS2LVNGNJKA" Name="KC_BK_DI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода DI_Permit
KC_BK_DI_ToHMI.Station_Stopped.manual := tmpPermit; //Состояние станции:Станция остановлена;
KC_BK_DI_ToHMI.Station_Reg_On.manual := tmpPermit; //Состояние станции:Включается регулятор;
KC_BK_DI_ToHMI.Station_Check_P.manual := tmpPermit; //Состояние станции:Проверка давления на выходе;
KC_BK_DI_ToHMI.Station_Start_K.manual := tmpPermit; //Состояние станции:Запуск осушителя и компрессора;
KC_BK_DI_ToHMI.Station_Work1.manual := tmpPermit; //Состояние станции:Станция работает;
KC_BK_DI_ToHMI.Station_Work2.manual := tmpPermit; //Состояние станции:Станция работает;
KC_BK_DI_ToHMI.Station_Go_waiting1.manual := tmpPermit; //Состояние станции:Переход в ожидание, останов компрессора и осушителя;
KC_BK_DI_ToHMI.Station_Go_waiting2.manual := tmpPermit; //Состояние станции:Переход в ожидание, останов компрессора и осушителя;
KC_BK_DI_ToHMI.Station_Waiting.manual := tmpPermit; //Состояние станции:Ожидание;
KC_BK_DI_ToHMI.Station_Stop_K1.manual := tmpPermit; //Состояние станции:Остановка компрессора и осушителя;
KC_BK_DI_ToHMI.Station_Stop_K2.manual := tmpPermit; //Состояние станции:Остановка компрессора и осушителя;
KC_BK_DI_ToHMI.Station_Stop_Reg.manual := tmpPermit; //Состояние станции:Выключается регулятор;
KC_BK_DI_ToHMI.OV2_Stopped.manual := tmpPermit; //Общеобменная вентиляция 02KM01:Остановлен;
KC_BK_DI_ToHMI.OV2_Starting.manual := tmpPermit; //Общеобменная вентиляция 02KM01:Запускается;
KC_BK_DI_ToHMI.OV2_Work.manual := tmpPermit; //Общеобменная вентиляция 02KM01:Работает;
KC_BK_DI_ToHMI.OV2_Stopping.manual := tmpPermit; //Общеобменная вентиляция 02KM01:Останавливается;
KC_BK_DI_ToHMI.OV2_Fault.manual := tmpPermit; //Общеобменная вентиляция 02KM01:Отказ;
KC_BK_DI_ToHMI.OV2_Blocked.manual := tmpPermit; //Общеобменная вентиляция 02KM01:Заблокирован;
KC_BK_DI_ToHMI.OV1_Stopped.manual := tmpPermit; //Общеобменная вентиляция 01KM01:Остановлен;
KC_BK_DI_ToHMI.OV1_Starting.manual := tmpPermit; //Общеобменная вентиляция 01KM01:Запускается;
KC_BK_DI_ToHMI.OV1_Work.manual := tmpPermit; //Общеобменная вентиляция 01KM01:Работает;
KC_BK_DI_ToHMI.OV1_Stopping.manual := tmpPermit; //Общеобменная вентиляция 01KM01:Останавливается;
KC_BK_DI_ToHMI.OV1_Fault.manual := tmpPermit; //Общеобменная вентиляция 01KM01:Отказ;
KC_BK_DI_ToHMI.OV1_Blocked.manual := tmpPermit; //Общеобменная вентиляция  отсек осушки:Заблокирован;
KC_BK_DI_ToHMI.OV_Ots_Os_Stopped.manual := tmpPermit; //Общеобменная вентиляция  отсек осушки:Остановлен;
KC_BK_DI_ToHMI.OV_Ots_Os_Starting.manual := tmpPermit; //Общеобменная вентиляция  отсек осушки:Запускается;
KC_BK_DI_ToHMI.OV_Ots_Os_Work.manual := tmpPermit; //Общеобменная вентиляция  отсек осушки:Работает;
KC_BK_DI_ToHMI.OV_Ots_Os_Stopping.manual := tmpPermit; //Общеобменная вентиляция  отсек осушки:Останавливается;
KC_BK_DI_ToHMI.OV_Ots_Os_Fault.manual := tmpPermit; //Общеобменная вентиляция  отсек осушки:Отказ;
KC_BK_DI_ToHMI.OV_Ots_Os_Blocked.manual := tmpPermit; //Общеобменная вентиляция  отсек осушки:Заблокирован;
KC_BK_DI_ToHMI.Vlv_01EK01_Init_state.manual := tmpPermit; //Клапан 01ЭК01:Исходное состояние;
KC_BK_DI_ToHMI.Vlv_01EK01_Opening.manual := tmpPermit; //Клапан 01ЭК01:Открывается;
KC_BK_DI_ToHMI.Vlv_01EK01_Opened.manual := tmpPermit; //Клапан 01ЭК01:Открыт;
KC_BK_DI_ToHMI.Vlv_01EK01_Closing.manual := tmpPermit; //Клапан 01ЭК01:Закрывается;
KC_BK_DI_ToHMI.Vlv_01EK01_Closed.manual := tmpPermit; //Клапан 01ЭК01:Закрыт;
KC_BK_DI_ToHMI.Vlv_01EK01_Fault.manual := tmpPermit; //Клапан 01ЭК01:Отказ;
KC_BK_DI_ToHMI.Vlv_01EK01_Blocked.manual := tmpPermit; //Клапан 01ЭК01:Заблокирован;
KC_BK_DI_ToHMI.Vlv_01EK02_Init_state.manual := tmpPermit; //Клапан 01ЭК02:Исходное состояние;
KC_BK_DI_ToHMI.Vlv_01EK02_Opening.manual := tmpPermit; //Клапан 01ЭК02:Открывается;
KC_BK_DI_ToHMI.Vlv_01EK02_Opened.manual := tmpPermit; //Клапан 01ЭК02:Открыт;
KC_BK_DI_ToHMI.Vlv_01EK02_Closing.manual := tmpPermit; //Клапан 01ЭК02:Закрывается;
KC_BK_DI_ToHMI.Vlv_01EK02_Closed.manual := tmpPermit; //Клапан 01ЭК02:Закрыт;
KC_BK_DI_ToHMI.Vlv_01EK02_Fault.manual := tmpPermit; //Клапан 01ЭК02:Отказ;
KC_BK_DI_ToHMI.Vlv_01EK02_Blocked.manual := tmpPermit; //Клапан 01ЭК02:Заблокирован;
KC_BK_DI_ToHMI.Vlv_01KLP01_Init_state.manual := tmpPermit; //Клапан 01КЛП01:Исходное состояние;
KC_BK_DI_ToHMI.Vlv_01KLP01_Opening.manual := tmpPermit; //Клапан 01КЛП01:Открывается;
KC_BK_DI_ToHMI.Vlv_01KLP01_Opened.manual := tmpPermit; //Клапан 01КЛП01:Открыт;
KC_BK_DI_ToHMI.Vlv_01KLP01_Closing.manual := tmpPermit; //Клапан 01КЛП01:Закрывается;
KC_BK_DI_ToHMI.Vlv_01KLP01_Closed.manual := tmpPermit; //Клапан 01КЛП01:Закрыт;
KC_BK_DI_ToHMI.Vlv_01KLP01_Fault.manual := tmpPermit; //Клапан 01КЛП01:Отказ;
KC_BK_DI_ToHMI.Vlv_01KLP01_Blocked.manual := tmpPermit; //Клапан 01КЛП01:Заблокирован;
KC_BK_DI_ToHMI.Vlv_01KLP02_Init_state.manual := tmpPermit; //Клапан 01КЛП02:Исходное состояние;
KC_BK_DI_ToHMI.Vlv_01KLP02_Opening.manual := tmpPermit; //Клапан 01КЛП02:Открывается;
KC_BK_DI_ToHMI.Vlv_01KLP02_Opened.manual := tmpPermit; //Клапан 01КЛП02:Открыт;
KC_BK_DI_ToHMI.Vlv_01KLP02_Closing.manual := tmpPermit; //Клапан 01КЛП02:Закрывается;
KC_BK_DI_ToHMI.Vlv_01KLP02_Closed.manual := tmpPermit; //Клапан 01КЛП02:Закрыт;
KC_BK_DI_ToHMI.Vlv_01KLP02_Fault.manual := tmpPermit; //Клапан 01КЛП02:Отказ;
KC_BK_DI_ToHMI.Vlv_01KLP02_Blocked.manual := tmpPermit; //Клапан 01КЛП02:Заблокирован;
KC_BK_DI_ToHMI.Vlv_01KLR01_Init_state.manual := tmpPermit; //Клапан 01КЛP01:Исходное состояние;
KC_BK_DI_ToHMI.Vlv_01KLR01_Opening.manual := tmpPermit; //Клапан 01КЛP01:Открывается;
KC_BK_DI_ToHMI.Vlv_01KLR01_Opened.manual := tmpPermit; //Клапан 01КЛP01:Открыт;
KC_BK_DI_ToHMI.Vlv_01KLR01_Closing.manual := tmpPermit; //Клапан 01КЛP01:Закрывается;
KC_BK_DI_ToHMI.Vlv_01KLR01_Closed.manual := tmpPermit; //Клапан 01КЛP01:Закрыт;
KC_BK_DI_ToHMI.Vlv_01KLR01_Fault.manual := tmpPermit; //Клапан 01КЛP01:Отказ;
KC_BK_DI_ToHMI.Vlv_01KLR01_Blocked.manual := tmpPermit; //Клапан 01КЛP01:Заблокирован;
KC_BK_DI_ToHMI.Vlv_01KLS01_Init_state.manual := tmpPermit; //Клапан 01КЛC01:Исходное состояние;
KC_BK_DI_ToHMI.Vlv_01KLS01_Opening.manual := tmpPermit; //Клапан 01КЛC01:Открывается;
KC_BK_DI_ToHMI.Vlv_01KLS01_Opened.manual := tmpPermit; //Клапан 01КЛC01:Открыт;
KC_BK_DI_ToHMI.Vlv_01KLS01_Closing.manual := tmpPermit; //Клапан 01КЛC01:Закрывается;
KC_BK_DI_ToHMI.Vlv_01KLS01_Closed.manual := tmpPermit; //Клапан 01КЛC01:Закрыт;
KC_BK_DI_ToHMI.Vlv_01KLS01_Fault.manual := tmpPermit; //Клапан 01КЛC01:Отказ;
KC_BK_DI_ToHMI.Vlv_01KLS01_Blocked.manual := tmpPermit; //Клапан 01КЛC01:Заблокирован;
KC_BK_DI_ToHMI.State_01KM01_Stopped.manual := tmpPermit; //Состояние 01КМ01:Остановлен;
KC_BK_DI_ToHMI.State_01KM01_Starting.manual := tmpPermit; //Состояние 01КМ01:Запускается;
KC_BK_DI_ToHMI.State_01KM01_Work.manual := tmpPermit; //Состояние 01КМ01:Работает;
KC_BK_DI_ToHMI.State_01KM01_Stoping.manual := tmpPermit; //Состояние 01КМ01:Останавливается;
KC_BK_DI_ToHMI.State_01KM01_Fault.manual := tmpPermit; //Состояние 01КМ01:Отказ;
KC_BK_DI_ToHMI.State_01KM01_Blocked.manual := tmpPermit; //Состояние 01КМ01:Заблокирован;
KC_BK_DI_ToHMI.State_01OA01_Stopped.manual := tmpPermit; //Состояние 01ОА01:Остановлен;
KC_BK_DI_ToHMI.State_01OA01_Starting.manual := tmpPermit; //Состояние 01ОА01:Запускается;
KC_BK_DI_ToHMI.State_01OA01_Work.manual := tmpPermit; //Состояние 01ОА01:Работает;
KC_BK_DI_ToHMI.State_01OA01_Stoping.manual := tmpPermit; //Состояние 01ОА01:Останавливается;
KC_BK_DI_ToHMI.State_01OA01_Fault.manual := tmpPermit; //Состояние 01ОА01:Отказ;
KC_BK_DI_ToHMI.State_01OA01_Blocked.manual := tmpPermit; //Состояние 01ОА01:Заблокирован;
KC_BK_DI_ToHMI.Vlv_02EK01_Init_state.manual := tmpPermit; //Клапан 02ЭК01:Исходное состояние;
KC_BK_DI_ToHMI.Vlv_02EK01_Opening.manual := tmpPermit; //Клапан 02ЭК01:Открывается;
KC_BK_DI_ToHMI.Vlv_02EK01_Opened.manual := tmpPermit; //Клапан 02ЭК01:Открыт;
KC_BK_DI_ToHMI.Vlv_02EK01_Closing.manual := tmpPermit; //Клапан 02ЭК01:Закрывается;
KC_BK_DI_ToHMI.Vlv_02EK01_Closed.manual := tmpPermit; //Клапан 02ЭК01:Закрыт;
KC_BK_DI_ToHMI.Vlv_02EK01_Fault.manual := tmpPermit; //Клапан 02ЭК01:Отказ;
KC_BK_DI_ToHMI.Vlv_02EK01_Blocked.manual := tmpPermit; //Клапан 02ЭК01:Заблокирован;
KC_BK_DI_ToHMI.Vlv_02EK02_Init_state.manual := tmpPermit; //Клапан 02ЭК02:Исходное состояние;
KC_BK_DI_ToHMI.Vlv_02EK02_Opening.manual := tmpPermit; //Клапан 02ЭК02:Открывается;
KC_BK_DI_ToHMI.Vlv_02EK02_Opened.manual := tmpPermit; //Клапан 02ЭК02:Открыт;
KC_BK_DI_ToHMI.Vlv_02EK02_Closing.manual := tmpPermit; //Клапан 02ЭК02:Закрывается;
KC_BK_DI_ToHMI.Vlv_02EK02_Closed.manual := tmpPermit; //Клапан 02ЭК02:Закрыт;
KC_BK_DI_ToHMI.Vlv_02EK02_Fault.manual := tmpPermit; //Клапан 02ЭК02:Отказ;
KC_BK_DI_ToHMI.Vlv_02EK02_Blocked.manual := tmpPermit; //Клапан 02ЭК02:Заблокирован;
KC_BK_DI_ToHMI.Vlv_02KLP01_Init_state.manual := tmpPermit; //Клапан 02КЛП01:Исходное состояние;
KC_BK_DI_ToHMI.Vlv_02KLP01_Opening.manual := tmpPermit; //Клапан 02КЛП01:Открывается;
KC_BK_DI_ToHMI.Vlv_02KLP01_Opened.manual := tmpPermit; //Клапан 02КЛП01:Открыт;
KC_BK_DI_ToHMI.Vlv_02KLP01_Closing.manual := tmpPermit; //Клапан 02КЛП01:Закрывается;
KC_BK_DI_ToHMI.Vlv_02KLP01_Closed.manual := tmpPermit; //Клапан 02КЛП01:Закрыт;
KC_BK_DI_ToHMI.Vlv_02KLP01_Fault.manual := tmpPermit; //Клапан 02КЛП01:Отказ;
KC_BK_DI_ToHMI.Vlv_02KLP01_Blocked.manual := tmpPermit; //Клапан 02КЛП01:Заблокирован;
KC_BK_DI_ToHMI.Vlv_02KLP02_Init_state.manual := tmpPermit; //Клапан 02КЛП02:Исходное состояние;
KC_BK_DI_ToHMI.Vlv_02KLP02_Opening.manual := tmpPermit; //Клапан 02КЛП02:Открывается;
KC_BK_DI_ToHMI.Vlv_02KLP02_Opened.manual := tmpPermit; //Клапан 02КЛП02:Открыт;
KC_BK_DI_ToHMI.Vlv_02KLP02_Closing.manual := tmpPermit; //Клапан 02КЛП02:Закрывается;
KC_BK_DI_ToHMI.Vlv_02KLP02_Closed.manual := tmpPermit; //Клапан 02КЛП02:Закрыт;
KC_BK_DI_ToHMI.Vlv_02KLP02_Fault.manual := tmpPermit; //Клапан 02КЛП02:Отказ;
KC_BK_DI_ToHMI.Vlv_02KLP02_Blocked.manual := tmpPermit; //Клапан 02КЛП02:Заблокирован;
KC_BK_DI_ToHMI.Vlv_02KLR01_Init_state.manual := tmpPermit; //Клапан 02КЛР01:Исходное состояние;
KC_BK_DI_ToHMI.Vlv_02KLR01_Opening.manual := tmpPermit; //Клапан 02КЛР01:Открывается;
KC_BK_DI_ToHMI.Vlv_02KLR01_Opened.manual := tmpPermit; //Клапан 02КЛР01:Открыт;
KC_BK_DI_ToHMI.Vlv_02KLR01_Closing.manual := tmpPermit; //Клапан 02КЛР01:Закрывается;
KC_BK_DI_ToHMI.Vlv_02KLR01_Closed.manual := tmpPermit; //Клапан 02КЛР01:Закрыт;
KC_BK_DI_ToHMI.Vlv_02KLR01_Fault.manual := tmpPermit; //Клапан 02КЛР01:Отказ;
KC_BK_DI_ToHMI.Vlv_02KLR01_Blocked.manual := tmpPermit; //Клапан 02КЛР01:Заблокирован;
KC_BK_DI_ToHMI.Vlv_02KLS01_Init_state.manual := tmpPermit; //Клапан 02КЛC01:Исходное состояние;
KC_BK_DI_ToHMI.Vlv_02KLS01_Opening.manual := tmpPermit; //Клапан 02КЛC01:Открывается;
KC_BK_DI_ToHMI.Vlv_02KLS01_Opened.manual := tmpPermit; //Клапан 02КЛC01:Открыт;
KC_BK_DI_ToHMI.Vlv_02KLS01_Closing.manual := tmpPermit; //Клапан 02КЛC01:Закрывается;
KC_BK_DI_ToHMI.Vlv_02KLS01_Closed.manual := tmpPermit; //Клапан 02КЛC01:Закрыт;
KC_BK_DI_ToHMI.Vlv_02KLS01_Fault.manual := tmpPermit; //Клапан 02КЛC01:Отказ;
KC_BK_DI_ToHMI.Vlv_02KLS01_Blocked.manual := tmpPermit; //Клапан 02КЛC01:Заблокирован;
KC_BK_DI_ToHMI.State_02KM01_Stopped.manual := tmpPermit; //Состояние 02КМ01: Остановлен;
KC_BK_DI_ToHMI.State_02KM01_Starting.manual := tmpPermit; //Состояние 02КМ01: Запускается;
KC_BK_DI_ToHMI.State_02KM01_Work.manual := tmpPermit; //Состояние 02КМ01: Работает;
KC_BK_DI_ToHMI.State_02KM01_Stoping.manual := tmpPermit; //Состояние 02КМ01: Отсанавливается;
KC_BK_DI_ToHMI.State_02KM01_Fault.manual := tmpPermit; //Состояние 02КМ01: Отказ;
KC_BK_DI_ToHMI.State_02KM01_Blocked.manual := tmpPermit; //Состояние 02КМ01:Заблокирован;
KC_BK_DI_ToHMI.State_02OA01_Stopped.manual := tmpPermit; //Состояние 02ОА01: Остановлен;
KC_BK_DI_ToHMI.State_02OA01_Starting.manual := tmpPermit; //Состояние 02ОА01: Запускается;
KC_BK_DI_ToHMI.State_02OA01_Work.manual := tmpPermit; //Состояние 02ОА01: Работает;
KC_BK_DI_ToHMI.State_02OA01_Stoping.manual := tmpPermit; //Состояние 02ОА01: Отсанавливается;
KC_BK_DI_ToHMI.State_02OA01_Fault.manual := tmpPermit; //Состояние 02ОА01: Отказ;
KC_BK_DI_ToHMI.State_02OA01_Blocked.manual := tmpPermit; //Состояние 02ОА01:Заблокирован;
KC_BK_DI_ToHMI.Vlv_10KLP10_Init_state.manual := tmpPermit; //Клапан 10КЛП10: Исходное состояние;
KC_BK_DI_ToHMI.Vlv_10KLP10_Opening.manual := tmpPermit; //Клапан 10КЛП10: Открывается;
KC_BK_DI_ToHMI.Vlv_10KLP10_Opened.manual := tmpPermit; //Клапан 10КЛП10: Открыт;
KC_BK_DI_ToHMI.Vlv_10KLP10_Closing.manual := tmpPermit; //Клапан 10КЛП10: Закрывается;
KC_BK_DI_ToHMI.Vlv_10KLP10_Closed.manual := tmpPermit; //Клапан 10КЛП10: Закрыт;
KC_BK_DI_ToHMI.Vlv_10KLP10_Fault.manual := tmpPermit; //Клапан 10КЛП10: Отказ;
KC_BK_DI_ToHMI.Vlv_10KLP10_Blocked.manual := tmpPermit; //Клапан 10КЛП10: Заблокирован;
KC_BK_DI_ToHMI.Vlv_10KLP11_Init_state.manual := tmpPermit; //Клапан 10КЛП11: Исходное состояние;
KC_BK_DI_ToHMI.Vlv_10KLP11_Opening.manual := tmpPermit; //Клапан 10КЛП11: Открывается;
KC_BK_DI_ToHMI.Vlv_10KLP11_Opened.manual := tmpPermit; //Клапан 10КЛП11: Открыт;
KC_BK_DI_ToHMI.Vlv_10KLP11_Closing.manual := tmpPermit; //Клапан 10КЛП11: Закрывается;
KC_BK_DI_ToHMI.Vlv_10KLP11_Closed.manual := tmpPermit; //Клапан 10КЛП11: Закрыт;
KC_BK_DI_ToHMI.Vlv_10KLP11_Fault.manual := tmpPermit; //Клапан 10КЛП11: Отказ;
KC_BK_DI_ToHMI.Vlv_10KLP11_Blocked.manual := tmpPermit; //Клапан 10КЛП11: Заблокирован;
KC_BK_DI_ToHMI.Vlv_10KLP15_Init_state.manual := tmpPermit; //Клапан 10КЛП15: Исходное состояние;
KC_BK_DI_ToHMI.Vlv_10KLP15_Opening.manual := tmpPermit; //Клапан 10КЛП15: Открывается;
KC_BK_DI_ToHMI.Vlv_10KLP15_Opened.manual := tmpPermit; //Клапан 10КЛП15: Открыт;
KC_BK_DI_ToHMI.Vlv_10KLP15_Closing.manual := tmpPermit; //Клапан 10КЛП15: Закрывается;
KC_BK_DI_ToHMI.Vlv_10KLP15_Closed.manual := tmpPermit; //Клапан 10КЛП15: Закрыт;
KC_BK_DI_ToHMI.Vlv_10KLP15_Fault.manual := tmpPermit; //Клапан 10КЛП15: Отказ;
KC_BK_DI_ToHMI.Vlv_10KLP15_Blocked.manual := tmpPermit; //Клапан 10КЛП15: Заблокирован;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="ONJ4VAVBIWFAW73WWKRSRQXBUQ" Name="KC_BK_mb_DI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[//-------- Обработка дискретных входов полученных по сети --------------
//Начало сгенерированного кода mb_DI_Processing
//Состояние станции:Станция остановлена
mb_DI_Processing(KC_BK_mb_DI_DRV.Station_Stopped,KC_BK_DI_FromHMI.Station_Stopped,KC_BK_DI_ToHMI.Station_Stopped,KC_BK_DI.Station_Stopped);
//Состояние станции:Включается регулятор
mb_DI_Processing(KC_BK_mb_DI_DRV.Station_Reg_On,KC_BK_DI_FromHMI.Station_Reg_On,KC_BK_DI_ToHMI.Station_Reg_On,KC_BK_DI.Station_Reg_On);
//Состояние станции:Проверка давления на выходе
mb_DI_Processing(KC_BK_mb_DI_DRV.Station_Check_P,KC_BK_DI_FromHMI.Station_Check_P,KC_BK_DI_ToHMI.Station_Check_P,KC_BK_DI.Station_Check_P);
//Состояние станции:Запуск осушителя и компрессора
mb_DI_Processing(KC_BK_mb_DI_DRV.Station_Start_K,KC_BK_DI_FromHMI.Station_Start_K,KC_BK_DI_ToHMI.Station_Start_K,KC_BK_DI.Station_Start_K);
//Состояние станции:Станция работает
mb_DI_Processing(KC_BK_mb_DI_DRV.Station_Work1,KC_BK_DI_FromHMI.Station_Work1,KC_BK_DI_ToHMI.Station_Work1,KC_BK_DI.Station_Work1);
//Состояние станции:Станция работает
mb_DI_Processing(KC_BK_mb_DI_DRV.Station_Work2,KC_BK_DI_FromHMI.Station_Work2,KC_BK_DI_ToHMI.Station_Work2,KC_BK_DI.Station_Work2);
//Состояние станции:Переход в ожидание, останов компрессора и осушителя
mb_DI_Processing(KC_BK_mb_DI_DRV.Station_Go_waiting1,KC_BK_DI_FromHMI.Station_Go_waiting1,KC_BK_DI_ToHMI.Station_Go_waiting1,KC_BK_DI.Station_Go_waiting1);
//Состояние станции:Переход в ожидание, останов компрессора и осушителя
mb_DI_Processing(KC_BK_mb_DI_DRV.Station_Go_waiting2,KC_BK_DI_FromHMI.Station_Go_waiting2,KC_BK_DI_ToHMI.Station_Go_waiting2,KC_BK_DI.Station_Go_waiting2);
//Состояние станции:Ожидание
mb_DI_Processing(KC_BK_mb_DI_DRV.Station_Waiting,KC_BK_DI_FromHMI.Station_Waiting,KC_BK_DI_ToHMI.Station_Waiting,KC_BK_DI.Station_Waiting);
//Состояние станции:Остановка компрессора и осушителя
mb_DI_Processing(KC_BK_mb_DI_DRV.Station_Stop_K1,KC_BK_DI_FromHMI.Station_Stop_K1,KC_BK_DI_ToHMI.Station_Stop_K1,KC_BK_DI.Station_Stop_K1);
//Состояние станции:Остановка компрессора и осушителя
mb_DI_Processing(KC_BK_mb_DI_DRV.Station_Stop_K2,KC_BK_DI_FromHMI.Station_Stop_K2,KC_BK_DI_ToHMI.Station_Stop_K2,KC_BK_DI.Station_Stop_K2);
//Состояние станции:Выключается регулятор
mb_DI_Processing(KC_BK_mb_DI_DRV.Station_Stop_Reg,KC_BK_DI_FromHMI.Station_Stop_Reg,KC_BK_DI_ToHMI.Station_Stop_Reg,KC_BK_DI.Station_Stop_Reg);
//Общеобменная вентиляция 02KM01:Остановлен
mb_DI_Processing(KC_BK_mb_DI_DRV.OV2_Stopped,KC_BK_DI_FromHMI.OV2_Stopped,KC_BK_DI_ToHMI.OV2_Stopped,KC_BK_DI.OV2_Stopped);
//Общеобменная вентиляция 02KM01:Запускается
mb_DI_Processing(KC_BK_mb_DI_DRV.OV2_Starting,KC_BK_DI_FromHMI.OV2_Starting,KC_BK_DI_ToHMI.OV2_Starting,KC_BK_DI.OV2_Starting);
//Общеобменная вентиляция 02KM01:Работает
mb_DI_Processing(KC_BK_mb_DI_DRV.OV2_Work,KC_BK_DI_FromHMI.OV2_Work,KC_BK_DI_ToHMI.OV2_Work,KC_BK_DI.OV2_Work);
//Общеобменная вентиляция 02KM01:Останавливается
mb_DI_Processing(KC_BK_mb_DI_DRV.OV2_Stopping,KC_BK_DI_FromHMI.OV2_Stopping,KC_BK_DI_ToHMI.OV2_Stopping,KC_BK_DI.OV2_Stopping);
//Общеобменная вентиляция 02KM01:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.OV2_Fault,KC_BK_DI_FromHMI.OV2_Fault,KC_BK_DI_ToHMI.OV2_Fault,KC_BK_DI.OV2_Fault);
//Общеобменная вентиляция 02KM01:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.OV2_Blocked,KC_BK_DI_FromHMI.OV2_Blocked,KC_BK_DI_ToHMI.OV2_Blocked,KC_BK_DI.OV2_Blocked);
//Общеобменная вентиляция 01KM01:Остановлен
mb_DI_Processing(KC_BK_mb_DI_DRV.OV1_Stopped,KC_BK_DI_FromHMI.OV1_Stopped,KC_BK_DI_ToHMI.OV1_Stopped,KC_BK_DI.OV1_Stopped);
//Общеобменная вентиляция 01KM01:Запускается
mb_DI_Processing(KC_BK_mb_DI_DRV.OV1_Starting,KC_BK_DI_FromHMI.OV1_Starting,KC_BK_DI_ToHMI.OV1_Starting,KC_BK_DI.OV1_Starting);
//Общеобменная вентиляция 01KM01:Работает
mb_DI_Processing(KC_BK_mb_DI_DRV.OV1_Work,KC_BK_DI_FromHMI.OV1_Work,KC_BK_DI_ToHMI.OV1_Work,KC_BK_DI.OV1_Work);
//Общеобменная вентиляция 01KM01:Останавливается
mb_DI_Processing(KC_BK_mb_DI_DRV.OV1_Stopping,KC_BK_DI_FromHMI.OV1_Stopping,KC_BK_DI_ToHMI.OV1_Stopping,KC_BK_DI.OV1_Stopping);
//Общеобменная вентиляция 01KM01:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.OV1_Fault,KC_BK_DI_FromHMI.OV1_Fault,KC_BK_DI_ToHMI.OV1_Fault,KC_BK_DI.OV1_Fault);
//Общеобменная вентиляция  отсек осушки:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.OV1_Blocked,KC_BK_DI_FromHMI.OV1_Blocked,KC_BK_DI_ToHMI.OV1_Blocked,KC_BK_DI.OV1_Blocked);
//Общеобменная вентиляция  отсек осушки:Остановлен
mb_DI_Processing(KC_BK_mb_DI_DRV.OV_Ots_Os_Stopped,KC_BK_DI_FromHMI.OV_Ots_Os_Stopped,KC_BK_DI_ToHMI.OV_Ots_Os_Stopped,KC_BK_DI.OV_Ots_Os_Stopped);
//Общеобменная вентиляция  отсек осушки:Запускается
mb_DI_Processing(KC_BK_mb_DI_DRV.OV_Ots_Os_Starting,KC_BK_DI_FromHMI.OV_Ots_Os_Starting,KC_BK_DI_ToHMI.OV_Ots_Os_Starting,KC_BK_DI.OV_Ots_Os_Starting);
//Общеобменная вентиляция  отсек осушки:Работает
mb_DI_Processing(KC_BK_mb_DI_DRV.OV_Ots_Os_Work,KC_BK_DI_FromHMI.OV_Ots_Os_Work,KC_BK_DI_ToHMI.OV_Ots_Os_Work,KC_BK_DI.OV_Ots_Os_Work);
//Общеобменная вентиляция  отсек осушки:Останавливается
mb_DI_Processing(KC_BK_mb_DI_DRV.OV_Ots_Os_Stopping,KC_BK_DI_FromHMI.OV_Ots_Os_Stopping,KC_BK_DI_ToHMI.OV_Ots_Os_Stopping,KC_BK_DI.OV_Ots_Os_Stopping);
//Общеобменная вентиляция  отсек осушки:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.OV_Ots_Os_Fault,KC_BK_DI_FromHMI.OV_Ots_Os_Fault,KC_BK_DI_ToHMI.OV_Ots_Os_Fault,KC_BK_DI.OV_Ots_Os_Fault);
//Общеобменная вентиляция  отсек осушки:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.OV_Ots_Os_Blocked,KC_BK_DI_FromHMI.OV_Ots_Os_Blocked,KC_BK_DI_ToHMI.OV_Ots_Os_Blocked,KC_BK_DI.OV_Ots_Os_Blocked);
//Клапан 01ЭК01:Исходное состояние
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01EK01_Init_state,KC_BK_DI_FromHMI.Vlv_01EK01_Init_state,KC_BK_DI_ToHMI.Vlv_01EK01_Init_state,KC_BK_DI.Vlv_01EK01_Init_state);
//Клапан 01ЭК01:Открывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01EK01_Opening,KC_BK_DI_FromHMI.Vlv_01EK01_Opening,KC_BK_DI_ToHMI.Vlv_01EK01_Opening,KC_BK_DI.Vlv_01EK01_Opening);
//Клапан 01ЭК01:Открыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01EK01_Opened,KC_BK_DI_FromHMI.Vlv_01EK01_Opened,KC_BK_DI_ToHMI.Vlv_01EK01_Opened,KC_BK_DI.Vlv_01EK01_Opened);
//Клапан 01ЭК01:Закрывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01EK01_Closing,KC_BK_DI_FromHMI.Vlv_01EK01_Closing,KC_BK_DI_ToHMI.Vlv_01EK01_Closing,KC_BK_DI.Vlv_01EK01_Closing);
//Клапан 01ЭК01:Закрыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01EK01_Closed,KC_BK_DI_FromHMI.Vlv_01EK01_Closed,KC_BK_DI_ToHMI.Vlv_01EK01_Closed,KC_BK_DI.Vlv_01EK01_Closed);
//Клапан 01ЭК01:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01EK01_Fault,KC_BK_DI_FromHMI.Vlv_01EK01_Fault,KC_BK_DI_ToHMI.Vlv_01EK01_Fault,KC_BK_DI.Vlv_01EK01_Fault);
//Клапан 01ЭК01:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01EK01_Blocked,KC_BK_DI_FromHMI.Vlv_01EK01_Blocked,KC_BK_DI_ToHMI.Vlv_01EK01_Blocked,KC_BK_DI.Vlv_01EK01_Blocked);
//Клапан 01ЭК02:Исходное состояние
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01EK02_Init_state,KC_BK_DI_FromHMI.Vlv_01EK02_Init_state,KC_BK_DI_ToHMI.Vlv_01EK02_Init_state,KC_BK_DI.Vlv_01EK02_Init_state);
//Клапан 01ЭК02:Открывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01EK02_Opening,KC_BK_DI_FromHMI.Vlv_01EK02_Opening,KC_BK_DI_ToHMI.Vlv_01EK02_Opening,KC_BK_DI.Vlv_01EK02_Opening);
//Клапан 01ЭК02:Открыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01EK02_Opened,KC_BK_DI_FromHMI.Vlv_01EK02_Opened,KC_BK_DI_ToHMI.Vlv_01EK02_Opened,KC_BK_DI.Vlv_01EK02_Opened);
//Клапан 01ЭК02:Закрывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01EK02_Closing,KC_BK_DI_FromHMI.Vlv_01EK02_Closing,KC_BK_DI_ToHMI.Vlv_01EK02_Closing,KC_BK_DI.Vlv_01EK02_Closing);
//Клапан 01ЭК02:Закрыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01EK02_Closed,KC_BK_DI_FromHMI.Vlv_01EK02_Closed,KC_BK_DI_ToHMI.Vlv_01EK02_Closed,KC_BK_DI.Vlv_01EK02_Closed);
//Клапан 01ЭК02:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01EK02_Fault,KC_BK_DI_FromHMI.Vlv_01EK02_Fault,KC_BK_DI_ToHMI.Vlv_01EK02_Fault,KC_BK_DI.Vlv_01EK02_Fault);
//Клапан 01ЭК02:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01EK02_Blocked,KC_BK_DI_FromHMI.Vlv_01EK02_Blocked,KC_BK_DI_ToHMI.Vlv_01EK02_Blocked,KC_BK_DI.Vlv_01EK02_Blocked);
//Клапан 01КЛП01:Исходное состояние
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLP01_Init_state,KC_BK_DI_FromHMI.Vlv_01KLP01_Init_state,KC_BK_DI_ToHMI.Vlv_01KLP01_Init_state,KC_BK_DI.Vlv_01KLP01_Init_state);
//Клапан 01КЛП01:Открывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLP01_Opening,KC_BK_DI_FromHMI.Vlv_01KLP01_Opening,KC_BK_DI_ToHMI.Vlv_01KLP01_Opening,KC_BK_DI.Vlv_01KLP01_Opening);
//Клапан 01КЛП01:Открыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLP01_Opened,KC_BK_DI_FromHMI.Vlv_01KLP01_Opened,KC_BK_DI_ToHMI.Vlv_01KLP01_Opened,KC_BK_DI.Vlv_01KLP01_Opened);
//Клапан 01КЛП01:Закрывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLP01_Closing,KC_BK_DI_FromHMI.Vlv_01KLP01_Closing,KC_BK_DI_ToHMI.Vlv_01KLP01_Closing,KC_BK_DI.Vlv_01KLP01_Closing);
//Клапан 01КЛП01:Закрыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLP01_Closed,KC_BK_DI_FromHMI.Vlv_01KLP01_Closed,KC_BK_DI_ToHMI.Vlv_01KLP01_Closed,KC_BK_DI.Vlv_01KLP01_Closed);
//Клапан 01КЛП01:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLP01_Fault,KC_BK_DI_FromHMI.Vlv_01KLP01_Fault,KC_BK_DI_ToHMI.Vlv_01KLP01_Fault,KC_BK_DI.Vlv_01KLP01_Fault);
//Клапан 01КЛП01:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLP01_Blocked,KC_BK_DI_FromHMI.Vlv_01KLP01_Blocked,KC_BK_DI_ToHMI.Vlv_01KLP01_Blocked,KC_BK_DI.Vlv_01KLP01_Blocked);
//Клапан 01КЛП02:Исходное состояние
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLP02_Init_state,KC_BK_DI_FromHMI.Vlv_01KLP02_Init_state,KC_BK_DI_ToHMI.Vlv_01KLP02_Init_state,KC_BK_DI.Vlv_01KLP02_Init_state);
//Клапан 01КЛП02:Открывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLP02_Opening,KC_BK_DI_FromHMI.Vlv_01KLP02_Opening,KC_BK_DI_ToHMI.Vlv_01KLP02_Opening,KC_BK_DI.Vlv_01KLP02_Opening);
//Клапан 01КЛП02:Открыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLP02_Opened,KC_BK_DI_FromHMI.Vlv_01KLP02_Opened,KC_BK_DI_ToHMI.Vlv_01KLP02_Opened,KC_BK_DI.Vlv_01KLP02_Opened);
//Клапан 01КЛП02:Закрывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLP02_Closing,KC_BK_DI_FromHMI.Vlv_01KLP02_Closing,KC_BK_DI_ToHMI.Vlv_01KLP02_Closing,KC_BK_DI.Vlv_01KLP02_Closing);
//Клапан 01КЛП02:Закрыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLP02_Closed,KC_BK_DI_FromHMI.Vlv_01KLP02_Closed,KC_BK_DI_ToHMI.Vlv_01KLP02_Closed,KC_BK_DI.Vlv_01KLP02_Closed);
//Клапан 01КЛП02:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLP02_Fault,KC_BK_DI_FromHMI.Vlv_01KLP02_Fault,KC_BK_DI_ToHMI.Vlv_01KLP02_Fault,KC_BK_DI.Vlv_01KLP02_Fault);
//Клапан 01КЛП02:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLP02_Blocked,KC_BK_DI_FromHMI.Vlv_01KLP02_Blocked,KC_BK_DI_ToHMI.Vlv_01KLP02_Blocked,KC_BK_DI.Vlv_01KLP02_Blocked);
//Клапан 01КЛP01:Исходное состояние
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLR01_Init_state,KC_BK_DI_FromHMI.Vlv_01KLR01_Init_state,KC_BK_DI_ToHMI.Vlv_01KLR01_Init_state,KC_BK_DI.Vlv_01KLR01_Init_state);
//Клапан 01КЛP01:Открывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLR01_Opening,KC_BK_DI_FromHMI.Vlv_01KLR01_Opening,KC_BK_DI_ToHMI.Vlv_01KLR01_Opening,KC_BK_DI.Vlv_01KLR01_Opening);
//Клапан 01КЛP01:Открыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLR01_Opened,KC_BK_DI_FromHMI.Vlv_01KLR01_Opened,KC_BK_DI_ToHMI.Vlv_01KLR01_Opened,KC_BK_DI.Vlv_01KLR01_Opened);
//Клапан 01КЛP01:Закрывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLR01_Closing,KC_BK_DI_FromHMI.Vlv_01KLR01_Closing,KC_BK_DI_ToHMI.Vlv_01KLR01_Closing,KC_BK_DI.Vlv_01KLR01_Closing);
//Клапан 01КЛP01:Закрыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLR01_Closed,KC_BK_DI_FromHMI.Vlv_01KLR01_Closed,KC_BK_DI_ToHMI.Vlv_01KLR01_Closed,KC_BK_DI.Vlv_01KLR01_Closed);
//Клапан 01КЛP01:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLR01_Fault,KC_BK_DI_FromHMI.Vlv_01KLR01_Fault,KC_BK_DI_ToHMI.Vlv_01KLR01_Fault,KC_BK_DI.Vlv_01KLR01_Fault);
//Клапан 01КЛP01:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLR01_Blocked,KC_BK_DI_FromHMI.Vlv_01KLR01_Blocked,KC_BK_DI_ToHMI.Vlv_01KLR01_Blocked,KC_BK_DI.Vlv_01KLR01_Blocked);
//Клапан 01КЛC01:Исходное состояние
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLS01_Init_state,KC_BK_DI_FromHMI.Vlv_01KLS01_Init_state,KC_BK_DI_ToHMI.Vlv_01KLS01_Init_state,KC_BK_DI.Vlv_01KLS01_Init_state);
//Клапан 01КЛC01:Открывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLS01_Opening,KC_BK_DI_FromHMI.Vlv_01KLS01_Opening,KC_BK_DI_ToHMI.Vlv_01KLS01_Opening,KC_BK_DI.Vlv_01KLS01_Opening);
//Клапан 01КЛC01:Открыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLS01_Opened,KC_BK_DI_FromHMI.Vlv_01KLS01_Opened,KC_BK_DI_ToHMI.Vlv_01KLS01_Opened,KC_BK_DI.Vlv_01KLS01_Opened);
//Клапан 01КЛC01:Закрывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLS01_Closing,KC_BK_DI_FromHMI.Vlv_01KLS01_Closing,KC_BK_DI_ToHMI.Vlv_01KLS01_Closing,KC_BK_DI.Vlv_01KLS01_Closing);
//Клапан 01КЛC01:Закрыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLS01_Closed,KC_BK_DI_FromHMI.Vlv_01KLS01_Closed,KC_BK_DI_ToHMI.Vlv_01KLS01_Closed,KC_BK_DI.Vlv_01KLS01_Closed);
//Клапан 01КЛC01:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLS01_Fault,KC_BK_DI_FromHMI.Vlv_01KLS01_Fault,KC_BK_DI_ToHMI.Vlv_01KLS01_Fault,KC_BK_DI.Vlv_01KLS01_Fault);
//Клапан 01КЛC01:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_01KLS01_Blocked,KC_BK_DI_FromHMI.Vlv_01KLS01_Blocked,KC_BK_DI_ToHMI.Vlv_01KLS01_Blocked,KC_BK_DI.Vlv_01KLS01_Blocked);
//Состояние 01КМ01:Остановлен
mb_DI_Processing(KC_BK_mb_DI_DRV.State_01KM01_Stopped,KC_BK_DI_FromHMI.State_01KM01_Stopped,KC_BK_DI_ToHMI.State_01KM01_Stopped,KC_BK_DI.State_01KM01_Stopped);
//Состояние 01КМ01:Запускается
mb_DI_Processing(KC_BK_mb_DI_DRV.State_01KM01_Starting,KC_BK_DI_FromHMI.State_01KM01_Starting,KC_BK_DI_ToHMI.State_01KM01_Starting,KC_BK_DI.State_01KM01_Starting);
//Состояние 01КМ01:Работает
mb_DI_Processing(KC_BK_mb_DI_DRV.State_01KM01_Work,KC_BK_DI_FromHMI.State_01KM01_Work,KC_BK_DI_ToHMI.State_01KM01_Work,KC_BK_DI.State_01KM01_Work);
//Состояние 01КМ01:Останавливается
mb_DI_Processing(KC_BK_mb_DI_DRV.State_01KM01_Stoping,KC_BK_DI_FromHMI.State_01KM01_Stoping,KC_BK_DI_ToHMI.State_01KM01_Stoping,KC_BK_DI.State_01KM01_Stoping);
//Состояние 01КМ01:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.State_01KM01_Fault,KC_BK_DI_FromHMI.State_01KM01_Fault,KC_BK_DI_ToHMI.State_01KM01_Fault,KC_BK_DI.State_01KM01_Fault);
//Состояние 01КМ01:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.State_01KM01_Blocked,KC_BK_DI_FromHMI.State_01KM01_Blocked,KC_BK_DI_ToHMI.State_01KM01_Blocked,KC_BK_DI.State_01KM01_Blocked);
//Состояние 01ОА01:Остановлен
mb_DI_Processing(KC_BK_mb_DI_DRV.State_01OA01_Stopped,KC_BK_DI_FromHMI.State_01OA01_Stopped,KC_BK_DI_ToHMI.State_01OA01_Stopped,KC_BK_DI.State_01OA01_Stopped);
//Состояние 01ОА01:Запускается
mb_DI_Processing(KC_BK_mb_DI_DRV.State_01OA01_Starting,KC_BK_DI_FromHMI.State_01OA01_Starting,KC_BK_DI_ToHMI.State_01OA01_Starting,KC_BK_DI.State_01OA01_Starting);
//Состояние 01ОА01:Работает
mb_DI_Processing(KC_BK_mb_DI_DRV.State_01OA01_Work,KC_BK_DI_FromHMI.State_01OA01_Work,KC_BK_DI_ToHMI.State_01OA01_Work,KC_BK_DI.State_01OA01_Work);
//Состояние 01ОА01:Останавливается
mb_DI_Processing(KC_BK_mb_DI_DRV.State_01OA01_Stoping,KC_BK_DI_FromHMI.State_01OA01_Stoping,KC_BK_DI_ToHMI.State_01OA01_Stoping,KC_BK_DI.State_01OA01_Stoping);
//Состояние 01ОА01:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.State_01OA01_Fault,KC_BK_DI_FromHMI.State_01OA01_Fault,KC_BK_DI_ToHMI.State_01OA01_Fault,KC_BK_DI.State_01OA01_Fault);
//Состояние 01ОА01:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.State_01OA01_Blocked,KC_BK_DI_FromHMI.State_01OA01_Blocked,KC_BK_DI_ToHMI.State_01OA01_Blocked,KC_BK_DI.State_01OA01_Blocked);
//Клапан 02ЭК01:Исходное состояние
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02EK01_Init_state,KC_BK_DI_FromHMI.Vlv_02EK01_Init_state,KC_BK_DI_ToHMI.Vlv_02EK01_Init_state,KC_BK_DI.Vlv_02EK01_Init_state);
//Клапан 02ЭК01:Открывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02EK01_Opening,KC_BK_DI_FromHMI.Vlv_02EK01_Opening,KC_BK_DI_ToHMI.Vlv_02EK01_Opening,KC_BK_DI.Vlv_02EK01_Opening);
//Клапан 02ЭК01:Открыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02EK01_Opened,KC_BK_DI_FromHMI.Vlv_02EK01_Opened,KC_BK_DI_ToHMI.Vlv_02EK01_Opened,KC_BK_DI.Vlv_02EK01_Opened);
//Клапан 02ЭК01:Закрывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02EK01_Closing,KC_BK_DI_FromHMI.Vlv_02EK01_Closing,KC_BK_DI_ToHMI.Vlv_02EK01_Closing,KC_BK_DI.Vlv_02EK01_Closing);
//Клапан 02ЭК01:Закрыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02EK01_Closed,KC_BK_DI_FromHMI.Vlv_02EK01_Closed,KC_BK_DI_ToHMI.Vlv_02EK01_Closed,KC_BK_DI.Vlv_02EK01_Closed);
//Клапан 02ЭК01:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02EK01_Fault,KC_BK_DI_FromHMI.Vlv_02EK01_Fault,KC_BK_DI_ToHMI.Vlv_02EK01_Fault,KC_BK_DI.Vlv_02EK01_Fault);
//Клапан 02ЭК01:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02EK01_Blocked,KC_BK_DI_FromHMI.Vlv_02EK01_Blocked,KC_BK_DI_ToHMI.Vlv_02EK01_Blocked,KC_BK_DI.Vlv_02EK01_Blocked);
//Клапан 02ЭК02:Исходное состояние
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02EK02_Init_state,KC_BK_DI_FromHMI.Vlv_02EK02_Init_state,KC_BK_DI_ToHMI.Vlv_02EK02_Init_state,KC_BK_DI.Vlv_02EK02_Init_state);
//Клапан 02ЭК02:Открывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02EK02_Opening,KC_BK_DI_FromHMI.Vlv_02EK02_Opening,KC_BK_DI_ToHMI.Vlv_02EK02_Opening,KC_BK_DI.Vlv_02EK02_Opening);
//Клапан 02ЭК02:Открыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02EK02_Opened,KC_BK_DI_FromHMI.Vlv_02EK02_Opened,KC_BK_DI_ToHMI.Vlv_02EK02_Opened,KC_BK_DI.Vlv_02EK02_Opened);
//Клапан 02ЭК02:Закрывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02EK02_Closing,KC_BK_DI_FromHMI.Vlv_02EK02_Closing,KC_BK_DI_ToHMI.Vlv_02EK02_Closing,KC_BK_DI.Vlv_02EK02_Closing);
//Клапан 02ЭК02:Закрыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02EK02_Closed,KC_BK_DI_FromHMI.Vlv_02EK02_Closed,KC_BK_DI_ToHMI.Vlv_02EK02_Closed,KC_BK_DI.Vlv_02EK02_Closed);
//Клапан 02ЭК02:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02EK02_Fault,KC_BK_DI_FromHMI.Vlv_02EK02_Fault,KC_BK_DI_ToHMI.Vlv_02EK02_Fault,KC_BK_DI.Vlv_02EK02_Fault);
//Клапан 02ЭК02:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02EK02_Blocked,KC_BK_DI_FromHMI.Vlv_02EK02_Blocked,KC_BK_DI_ToHMI.Vlv_02EK02_Blocked,KC_BK_DI.Vlv_02EK02_Blocked);
//Клапан 02КЛП01:Исходное состояние
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLP01_Init_state,KC_BK_DI_FromHMI.Vlv_02KLP01_Init_state,KC_BK_DI_ToHMI.Vlv_02KLP01_Init_state,KC_BK_DI.Vlv_02KLP01_Init_state);
//Клапан 02КЛП01:Открывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLP01_Opening,KC_BK_DI_FromHMI.Vlv_02KLP01_Opening,KC_BK_DI_ToHMI.Vlv_02KLP01_Opening,KC_BK_DI.Vlv_02KLP01_Opening);
//Клапан 02КЛП01:Открыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLP01_Opened,KC_BK_DI_FromHMI.Vlv_02KLP01_Opened,KC_BK_DI_ToHMI.Vlv_02KLP01_Opened,KC_BK_DI.Vlv_02KLP01_Opened);
//Клапан 02КЛП01:Закрывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLP01_Closing,KC_BK_DI_FromHMI.Vlv_02KLP01_Closing,KC_BK_DI_ToHMI.Vlv_02KLP01_Closing,KC_BK_DI.Vlv_02KLP01_Closing);
//Клапан 02КЛП01:Закрыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLP01_Closed,KC_BK_DI_FromHMI.Vlv_02KLP01_Closed,KC_BK_DI_ToHMI.Vlv_02KLP01_Closed,KC_BK_DI.Vlv_02KLP01_Closed);
//Клапан 02КЛП01:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLP01_Fault,KC_BK_DI_FromHMI.Vlv_02KLP01_Fault,KC_BK_DI_ToHMI.Vlv_02KLP01_Fault,KC_BK_DI.Vlv_02KLP01_Fault);
//Клапан 02КЛП01:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLP01_Blocked,KC_BK_DI_FromHMI.Vlv_02KLP01_Blocked,KC_BK_DI_ToHMI.Vlv_02KLP01_Blocked,KC_BK_DI.Vlv_02KLP01_Blocked);
//Клапан 02КЛП02:Исходное состояние
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLP02_Init_state,KC_BK_DI_FromHMI.Vlv_02KLP02_Init_state,KC_BK_DI_ToHMI.Vlv_02KLP02_Init_state,KC_BK_DI.Vlv_02KLP02_Init_state);
//Клапан 02КЛП02:Открывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLP02_Opening,KC_BK_DI_FromHMI.Vlv_02KLP02_Opening,KC_BK_DI_ToHMI.Vlv_02KLP02_Opening,KC_BK_DI.Vlv_02KLP02_Opening);
//Клапан 02КЛП02:Открыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLP02_Opened,KC_BK_DI_FromHMI.Vlv_02KLP02_Opened,KC_BK_DI_ToHMI.Vlv_02KLP02_Opened,KC_BK_DI.Vlv_02KLP02_Opened);
//Клапан 02КЛП02:Закрывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLP02_Closing,KC_BK_DI_FromHMI.Vlv_02KLP02_Closing,KC_BK_DI_ToHMI.Vlv_02KLP02_Closing,KC_BK_DI.Vlv_02KLP02_Closing);
//Клапан 02КЛП02:Закрыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLP02_Closed,KC_BK_DI_FromHMI.Vlv_02KLP02_Closed,KC_BK_DI_ToHMI.Vlv_02KLP02_Closed,KC_BK_DI.Vlv_02KLP02_Closed);
//Клапан 02КЛП02:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLP02_Fault,KC_BK_DI_FromHMI.Vlv_02KLP02_Fault,KC_BK_DI_ToHMI.Vlv_02KLP02_Fault,KC_BK_DI.Vlv_02KLP02_Fault);
//Клапан 02КЛП02:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLP02_Blocked,KC_BK_DI_FromHMI.Vlv_02KLP02_Blocked,KC_BK_DI_ToHMI.Vlv_02KLP02_Blocked,KC_BK_DI.Vlv_02KLP02_Blocked);
//Клапан 02КЛР01:Исходное состояние
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLR01_Init_state,KC_BK_DI_FromHMI.Vlv_02KLR01_Init_state,KC_BK_DI_ToHMI.Vlv_02KLR01_Init_state,KC_BK_DI.Vlv_02KLR01_Init_state);
//Клапан 02КЛР01:Открывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLR01_Opening,KC_BK_DI_FromHMI.Vlv_02KLR01_Opening,KC_BK_DI_ToHMI.Vlv_02KLR01_Opening,KC_BK_DI.Vlv_02KLR01_Opening);
//Клапан 02КЛР01:Открыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLR01_Opened,KC_BK_DI_FromHMI.Vlv_02KLR01_Opened,KC_BK_DI_ToHMI.Vlv_02KLR01_Opened,KC_BK_DI.Vlv_02KLR01_Opened);
//Клапан 02КЛР01:Закрывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLR01_Closing,KC_BK_DI_FromHMI.Vlv_02KLR01_Closing,KC_BK_DI_ToHMI.Vlv_02KLR01_Closing,KC_BK_DI.Vlv_02KLR01_Closing);
//Клапан 02КЛР01:Закрыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLR01_Closed,KC_BK_DI_FromHMI.Vlv_02KLR01_Closed,KC_BK_DI_ToHMI.Vlv_02KLR01_Closed,KC_BK_DI.Vlv_02KLR01_Closed);
//Клапан 02КЛР01:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLR01_Fault,KC_BK_DI_FromHMI.Vlv_02KLR01_Fault,KC_BK_DI_ToHMI.Vlv_02KLR01_Fault,KC_BK_DI.Vlv_02KLR01_Fault);
//Клапан 02КЛР01:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLR01_Blocked,KC_BK_DI_FromHMI.Vlv_02KLR01_Blocked,KC_BK_DI_ToHMI.Vlv_02KLR01_Blocked,KC_BK_DI.Vlv_02KLR01_Blocked);
//Клапан 02КЛC01:Исходное состояние
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLS01_Init_state,KC_BK_DI_FromHMI.Vlv_02KLS01_Init_state,KC_BK_DI_ToHMI.Vlv_02KLS01_Init_state,KC_BK_DI.Vlv_02KLS01_Init_state);
//Клапан 02КЛC01:Открывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLS01_Opening,KC_BK_DI_FromHMI.Vlv_02KLS01_Opening,KC_BK_DI_ToHMI.Vlv_02KLS01_Opening,KC_BK_DI.Vlv_02KLS01_Opening);
//Клапан 02КЛC01:Открыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLS01_Opened,KC_BK_DI_FromHMI.Vlv_02KLS01_Opened,KC_BK_DI_ToHMI.Vlv_02KLS01_Opened,KC_BK_DI.Vlv_02KLS01_Opened);
//Клапан 02КЛC01:Закрывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLS01_Closing,KC_BK_DI_FromHMI.Vlv_02KLS01_Closing,KC_BK_DI_ToHMI.Vlv_02KLS01_Closing,KC_BK_DI.Vlv_02KLS01_Closing);
//Клапан 02КЛC01:Закрыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLS01_Closed,KC_BK_DI_FromHMI.Vlv_02KLS01_Closed,KC_BK_DI_ToHMI.Vlv_02KLS01_Closed,KC_BK_DI.Vlv_02KLS01_Closed);
//Клапан 02КЛC01:Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLS01_Fault,KC_BK_DI_FromHMI.Vlv_02KLS01_Fault,KC_BK_DI_ToHMI.Vlv_02KLS01_Fault,KC_BK_DI.Vlv_02KLS01_Fault);
//Клапан 02КЛC01:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_02KLS01_Blocked,KC_BK_DI_FromHMI.Vlv_02KLS01_Blocked,KC_BK_DI_ToHMI.Vlv_02KLS01_Blocked,KC_BK_DI.Vlv_02KLS01_Blocked);
//Состояние 02КМ01: Остановлен
mb_DI_Processing(KC_BK_mb_DI_DRV.State_02KM01_Stopped,KC_BK_DI_FromHMI.State_02KM01_Stopped,KC_BK_DI_ToHMI.State_02KM01_Stopped,KC_BK_DI.State_02KM01_Stopped);
//Состояние 02КМ01: Запускается
mb_DI_Processing(KC_BK_mb_DI_DRV.State_02KM01_Starting,KC_BK_DI_FromHMI.State_02KM01_Starting,KC_BK_DI_ToHMI.State_02KM01_Starting,KC_BK_DI.State_02KM01_Starting);
//Состояние 02КМ01: Работает
mb_DI_Processing(KC_BK_mb_DI_DRV.State_02KM01_Work,KC_BK_DI_FromHMI.State_02KM01_Work,KC_BK_DI_ToHMI.State_02KM01_Work,KC_BK_DI.State_02KM01_Work);
//Состояние 02КМ01: Отсанавливается
mb_DI_Processing(KC_BK_mb_DI_DRV.State_02KM01_Stoping,KC_BK_DI_FromHMI.State_02KM01_Stoping,KC_BK_DI_ToHMI.State_02KM01_Stoping,KC_BK_DI.State_02KM01_Stoping);
//Состояние 02КМ01: Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.State_02KM01_Fault,KC_BK_DI_FromHMI.State_02KM01_Fault,KC_BK_DI_ToHMI.State_02KM01_Fault,KC_BK_DI.State_02KM01_Fault);
//Состояние 02КМ01:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.State_02KM01_Blocked,KC_BK_DI_FromHMI.State_02KM01_Blocked,KC_BK_DI_ToHMI.State_02KM01_Blocked,KC_BK_DI.State_02KM01_Blocked);
//Состояние 02ОА01: Остановлен
mb_DI_Processing(KC_BK_mb_DI_DRV.State_02OA01_Stopped,KC_BK_DI_FromHMI.State_02OA01_Stopped,KC_BK_DI_ToHMI.State_02OA01_Stopped,KC_BK_DI.State_02OA01_Stopped);
//Состояние 02ОА01: Запускается
mb_DI_Processing(KC_BK_mb_DI_DRV.State_02OA01_Starting,KC_BK_DI_FromHMI.State_02OA01_Starting,KC_BK_DI_ToHMI.State_02OA01_Starting,KC_BK_DI.State_02OA01_Starting);
//Состояние 02ОА01: Работает
mb_DI_Processing(KC_BK_mb_DI_DRV.State_02OA01_Work,KC_BK_DI_FromHMI.State_02OA01_Work,KC_BK_DI_ToHMI.State_02OA01_Work,KC_BK_DI.State_02OA01_Work);
//Состояние 02ОА01: Отсанавливается
mb_DI_Processing(KC_BK_mb_DI_DRV.State_02OA01_Stoping,KC_BK_DI_FromHMI.State_02OA01_Stoping,KC_BK_DI_ToHMI.State_02OA01_Stoping,KC_BK_DI.State_02OA01_Stoping);
//Состояние 02ОА01: Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.State_02OA01_Fault,KC_BK_DI_FromHMI.State_02OA01_Fault,KC_BK_DI_ToHMI.State_02OA01_Fault,KC_BK_DI.State_02OA01_Fault);
//Состояние 02ОА01:Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.State_02OA01_Blocked,KC_BK_DI_FromHMI.State_02OA01_Blocked,KC_BK_DI_ToHMI.State_02OA01_Blocked,KC_BK_DI.State_02OA01_Blocked);
//Клапан 10КЛП10: Исходное состояние
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP10_Init_state,KC_BK_DI_FromHMI.Vlv_10KLP10_Init_state,KC_BK_DI_ToHMI.Vlv_10KLP10_Init_state,KC_BK_DI.Vlv_10KLP10_Init_state);
//Клапан 10КЛП10: Открывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP10_Opening,KC_BK_DI_FromHMI.Vlv_10KLP10_Opening,KC_BK_DI_ToHMI.Vlv_10KLP10_Opening,KC_BK_DI.Vlv_10KLP10_Opening);
//Клапан 10КЛП10: Открыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP10_Opened,KC_BK_DI_FromHMI.Vlv_10KLP10_Opened,KC_BK_DI_ToHMI.Vlv_10KLP10_Opened,KC_BK_DI.Vlv_10KLP10_Opened);
//Клапан 10КЛП10: Закрывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP10_Closing,KC_BK_DI_FromHMI.Vlv_10KLP10_Closing,KC_BK_DI_ToHMI.Vlv_10KLP10_Closing,KC_BK_DI.Vlv_10KLP10_Closing);
//Клапан 10КЛП10: Закрыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP10_Closed,KC_BK_DI_FromHMI.Vlv_10KLP10_Closed,KC_BK_DI_ToHMI.Vlv_10KLP10_Closed,KC_BK_DI.Vlv_10KLP10_Closed);
//Клапан 10КЛП10: Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP10_Fault,KC_BK_DI_FromHMI.Vlv_10KLP10_Fault,KC_BK_DI_ToHMI.Vlv_10KLP10_Fault,KC_BK_DI.Vlv_10KLP10_Fault);
//Клапан 10КЛП10: Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP10_Blocked,KC_BK_DI_FromHMI.Vlv_10KLP10_Blocked,KC_BK_DI_ToHMI.Vlv_10KLP10_Blocked,KC_BK_DI.Vlv_10KLP10_Blocked);
//Клапан 10КЛП11: Исходное состояние
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP11_Init_state,KC_BK_DI_FromHMI.Vlv_10KLP11_Init_state,KC_BK_DI_ToHMI.Vlv_10KLP11_Init_state,KC_BK_DI.Vlv_10KLP11_Init_state);
//Клапан 10КЛП11: Открывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP11_Opening,KC_BK_DI_FromHMI.Vlv_10KLP11_Opening,KC_BK_DI_ToHMI.Vlv_10KLP11_Opening,KC_BK_DI.Vlv_10KLP11_Opening);
//Клапан 10КЛП11: Открыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP11_Opened,KC_BK_DI_FromHMI.Vlv_10KLP11_Opened,KC_BK_DI_ToHMI.Vlv_10KLP11_Opened,KC_BK_DI.Vlv_10KLP11_Opened);
//Клапан 10КЛП11: Закрывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP11_Closing,KC_BK_DI_FromHMI.Vlv_10KLP11_Closing,KC_BK_DI_ToHMI.Vlv_10KLP11_Closing,KC_BK_DI.Vlv_10KLP11_Closing);
//Клапан 10КЛП11: Закрыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP11_Closed,KC_BK_DI_FromHMI.Vlv_10KLP11_Closed,KC_BK_DI_ToHMI.Vlv_10KLP11_Closed,KC_BK_DI.Vlv_10KLP11_Closed);
//Клапан 10КЛП11: Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP11_Fault,KC_BK_DI_FromHMI.Vlv_10KLP11_Fault,KC_BK_DI_ToHMI.Vlv_10KLP11_Fault,KC_BK_DI.Vlv_10KLP11_Fault);
//Клапан 10КЛП11: Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP11_Blocked,KC_BK_DI_FromHMI.Vlv_10KLP11_Blocked,KC_BK_DI_ToHMI.Vlv_10KLP11_Blocked,KC_BK_DI.Vlv_10KLP11_Blocked);
//Клапан 10КЛП15: Исходное состояние
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP15_Init_state,KC_BK_DI_FromHMI.Vlv_10KLP15_Init_state,KC_BK_DI_ToHMI.Vlv_10KLP15_Init_state,KC_BK_DI.Vlv_10KLP15_Init_state);
//Клапан 10КЛП15: Открывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP15_Opening,KC_BK_DI_FromHMI.Vlv_10KLP15_Opening,KC_BK_DI_ToHMI.Vlv_10KLP15_Opening,KC_BK_DI.Vlv_10KLP15_Opening);
//Клапан 10КЛП15: Открыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP15_Opened,KC_BK_DI_FromHMI.Vlv_10KLP15_Opened,KC_BK_DI_ToHMI.Vlv_10KLP15_Opened,KC_BK_DI.Vlv_10KLP15_Opened);
//Клапан 10КЛП15: Закрывается
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP15_Closing,KC_BK_DI_FromHMI.Vlv_10KLP15_Closing,KC_BK_DI_ToHMI.Vlv_10KLP15_Closing,KC_BK_DI.Vlv_10KLP15_Closing);
//Клапан 10КЛП15: Закрыт
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP15_Closed,KC_BK_DI_FromHMI.Vlv_10KLP15_Closed,KC_BK_DI_ToHMI.Vlv_10KLP15_Closed,KC_BK_DI.Vlv_10KLP15_Closed);
//Клапан 10КЛП15: Отказ
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP15_Fault,KC_BK_DI_FromHMI.Vlv_10KLP15_Fault,KC_BK_DI_ToHMI.Vlv_10KLP15_Fault,KC_BK_DI.Vlv_10KLP15_Fault);
//Клапан 10КЛП15: Заблокирован
mb_DI_Processing(KC_BK_mb_DI_DRV.Vlv_10KLP15_Blocked,KC_BK_DI_FromHMI.Vlv_10KLP15_Blocked,KC_BK_DI_ToHMI.Vlv_10KLP15_Blocked,KC_BK_DI.Vlv_10KLP15_Blocked);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                </Folder>
                <Folder Name="DO" Comment="" Data="" UUID="GGVBY2POWTDUXK63SDQQNJHI6I">
                    <Function UUID="QVJI6V2CJ2QZU5EU6WE3FMHTNM" Name="KC_BK_DO_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[//----------- Обработка дискретных выходов ---------------
//Начало сгенерированного кода DO_Processing
//Выбрать первую линию основной
DO_Processing(KC_BK_DO.Set_first_line,KC_BK_DO_FromHMI.Set_first_line,KC_BK_DO_ToHMI.Set_first_line,KC_BK_DO_DRV.Set_first_line);
//Выбрать вторую линию основной
DO_Processing(KC_BK_DO.Set_second_line,KC_BK_DO_FromHMI.Set_second_line,KC_BK_DO_ToHMI.Set_second_line,KC_BK_DO_DRV.Set_second_line);
//Включить горяее резервирование
DO_Processing(KC_BK_DO.Set_reservation_on,KC_BK_DO_FromHMI.Set_reservation_on,KC_BK_DO_ToHMI.Set_reservation_on,KC_BK_DO_DRV.Set_reservation_on);
//Запустить станцию
DO_Processing(KC_BK_DO.Set_station_on,KC_BK_DO_FromHMI.Set_station_on,KC_BK_DO_ToHMI.Set_station_on,KC_BK_DO_DRV.Set_station_on);
//Остановить станцию
DO_Processing(KC_BK_DO.Set_station_off,KC_BK_DO_FromHMI.Set_station_off,KC_BK_DO_ToHMI.Set_station_off,KC_BK_DO_DRV.Set_station_off);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="6R3VWWFCILJ5LAFRYCIK3QCDJU" Name="KC_BK_DO_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода DO_Permit
KC_BK_DO_ToHMI.Set_first_line.forsPermit := tmpPermit; //Выбрать первую линию основной;
KC_BK_DO_ToHMI.Set_second_line.forsPermit := tmpPermit; //Выбрать вторую линию основной;
KC_BK_DO_ToHMI.Set_reservation_on.forsPermit := tmpPermit; //Включить горяее резервирование;
KC_BK_DO_ToHMI.Set_station_on.forsPermit := tmpPermit; //Запустить станцию;
KC_BK_DO_ToHMI.Set_station_off.forsPermit := tmpPermit; //Остановить станцию;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                </Folder>
            </Folder>
            <Folder Name="ГПА1_3" Comment="" Data="" UUID="YHJX47XRMAREXNRCYD6PVE4TRI">
                <Folder Name="AI" Comment="" Data="" UUID="NDY24WNYTH7EFIYBPN5IJDKZ7U">
                    <Function UUID="HBNRVSZXIBWKGIKOB2QWNNCWVU" Name="KC_GPA1_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
KC_GPA1_mb_AI_ToHMI.N_ST.manual := tmpPermit; //Текущие обороты СТ;
KC_GPA1_mb_AI_ToHMI.N_VD.manual := tmpPermit; //Текущие обороты ВД;
KC_GPA1_mb_AI_ToHMI.Pg_inN.manual := tmpPermit; //Давление на входе нагнетателя;
KC_GPA1_mb_AI_ToHMI.Pg_outN.manual := tmpPermit; //Давление на выходе нагнетателя;
KC_GPA1_mb_AI_ToHMI.Tg_inN.manual := tmpPermit; //Температура на входе нагнетателя;
KC_GPA1_mb_AI_ToHMI.Tg_outN.manual := tmpPermit; //Температура на выходе нагнетателя;
KC_GPA1_mb_AI_ToHMI.prod.manual := tmpPermit; //Расход технологического газа;
KC_GPA1_mb_AI_ToHMI.loLimRes.manual := tmpPermit; //Запас до нижнего ограничения;
KC_GPA1_mb_AI_ToHMI.hiLimRes.manual := tmpPermit; //Запас до верхнего ограничения;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="ATAGINRLIV6X3BLL267DB5IX64" Name="KC_GPA1_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Текущие обороты СТ
mb_AI_init(KC_GPA1_mb_AI_Settings.N_ST,0.0,15000.0,-450.0,15450.0,-900.0,15900.0,1,0.0,0.0,0.0,0);
//Текущие обороты ВД
mb_AI_init(KC_GPA1_mb_AI_Settings.N_VD,0.0,15000.0,-450.0,15450.0,-900.0,15900.0,1,0.0,0.0,0.0,1);
//Давление на входе нагнетателя
mb_AI_init(KC_GPA1_mb_AI_Settings.Pg_inN,0.0,10.0,-0.3,10.3,-0.6,10.6,1,0.0,0.0,0.0,2);
//Давление на выходе нагнетателя
mb_AI_init(KC_GPA1_mb_AI_Settings.Pg_outN,0.0,25.0,-0.75,25.75,-1.5,26.5,1,0.0,0.0,0.0,3);
//Температура на входе нагнетателя
mb_AI_init(KC_GPA1_mb_AI_Settings.Tg_inN,-50.0,200.0,-57.5,207.5,-65.0,215.0,1,0.0,0.0,0.0,4);
//Температура на выходе нагнетателя
mb_AI_init(KC_GPA1_mb_AI_Settings.Tg_outN,-50.0,200.0,-57.5,207.5,-65.0,215.0,1,0.0,0.0,0.0,5);
//Расход технологического газа
mb_AI_init(KC_GPA1_mb_AI_Settings.prod,0.0,160.0,-4.8,164.8,-9.6,169.6,1,0.0,0.0,0.0,6);
//Запас до нижнего ограничения
mb_AI_init(KC_GPA1_mb_AI_Settings.loLimRes,0.0,100.0,-3.0,103.0,-6.0,106.0,1,0.0,0.0,0.0,7);
//Запас до верхнего ограничения
mb_AI_init(KC_GPA1_mb_AI_Settings.hiLimRes,0.0,100.0,-3.0,103.0,-6.0,106.0,1,0.0,0.0,0.0,8);
//Конец сгенерированного кода

//= Добавлено 27.08.2020 ОАЕ
//Помпажный запас
mb_AI_init(KC_GPA1_mb_AI_Settings.SurgeRez,0.0,100.0,-3.0,103.0,-6.0,106.0,1,0.0,0.0,0.0,8);
//Положение АПК
mb_AI_init(KC_GPA1_mb_AI_Settings.PosAPK,0.0,100.0,-3.0,103.0,-6.0,106.0,1,0.0,0.0,0.0,8);

end_if;
//Начало сгенерированного кода AI_Processing
//Текущие обороты СТ
mb_AI_Processing(KC_GPA1_mb_AI_DRV.N_ST,KC_GPA1_mb_AI_Settings.N_ST,KC_GPA1_mb_AI_FromHMI.N_ST,KC_GPA1_mb_AI_ToHMI.N_ST);
//Текущие обороты ВД
mb_AI_Processing(KC_GPA1_mb_AI_DRV.N_VD,KC_GPA1_mb_AI_Settings.N_VD,KC_GPA1_mb_AI_FromHMI.N_VD,KC_GPA1_mb_AI_ToHMI.N_VD);
//Давление на входе нагнетателя
mb_AI_Processing(KC_GPA1_mb_AI_DRV.Pg_inN,KC_GPA1_mb_AI_Settings.Pg_inN,KC_GPA1_mb_AI_FromHMI.Pg_inN,KC_GPA1_mb_AI_ToHMI.Pg_inN);
//Давление на выходе нагнетателя
mb_AI_Processing(KC_GPA1_mb_AI_DRV.Pg_outN,KC_GPA1_mb_AI_Settings.Pg_outN,KC_GPA1_mb_AI_FromHMI.Pg_outN,KC_GPA1_mb_AI_ToHMI.Pg_outN);
//Температура на входе нагнетателя
mb_AI_Processing(KC_GPA1_mb_AI_DRV.Tg_inN,KC_GPA1_mb_AI_Settings.Tg_inN,KC_GPA1_mb_AI_FromHMI.Tg_inN,KC_GPA1_mb_AI_ToHMI.Tg_inN);
//Температура на выходе нагнетателя
mb_AI_Processing(KC_GPA1_mb_AI_DRV.Tg_outN,KC_GPA1_mb_AI_Settings.Tg_outN,KC_GPA1_mb_AI_FromHMI.Tg_outN,KC_GPA1_mb_AI_ToHMI.Tg_outN);
//Расход технологического газа
mb_AI_Processing(KC_GPA1_mb_AI_DRV.prod,KC_GPA1_mb_AI_Settings.prod,KC_GPA1_mb_AI_FromHMI.prod,KC_GPA1_mb_AI_ToHMI.prod);
//Запас до нижнего ограничения
mb_AI_Processing(KC_GPA1_mb_AI_DRV.loLimRes,KC_GPA1_mb_AI_Settings.loLimRes,KC_GPA1_mb_AI_FromHMI.loLimRes,KC_GPA1_mb_AI_ToHMI.loLimRes);
//Запас до верхнего ограничения
mb_AI_Processing(KC_GPA1_mb_AI_DRV.hiLimRes,KC_GPA1_mb_AI_Settings.hiLimRes,KC_GPA1_mb_AI_FromHMI.hiLimRes,KC_GPA1_mb_AI_ToHMI.hiLimRes);
//Конец сгенерированного кода

//= Добавлено 27.08.2020 ОАЕ
//Помпажный запас
mb_AI_Processing(KC_GPA1_mb_AI_DRV.SurgeRez,KC_GPA1_mb_AI_Settings.SurgeRez,KC_GPA1_mb_AI_FromHMI.SurgeRez,KC_GPA1_mb_AI_ToHMI.SurgeRez);
//Положение АПК
mb_AI_Processing(KC_GPA1_mb_AI_DRV.PosAPK,KC_GPA1_mb_AI_Settings.PosAPK,KC_GPA1_mb_AI_FromHMI.PosAPK,KC_GPA1_mb_AI_ToHMI.PosAPK);]]></ST>
                    </Function>
                    <Function UUID="P4XLAJDUIJAOV77RTKHX3XPKKM" Name="KC_GPA2_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
KC_GPA2_mb_AI_ToHMI.N_ST.manual := tmpPermit; //Текущие обороты СТ;
KC_GPA2_mb_AI_ToHMI.N_VD.manual := tmpPermit; //Текущие обороты ВД;
KC_GPA2_mb_AI_ToHMI.Pg_inN.manual := tmpPermit; //Давление на входе нагнетателя;
KC_GPA2_mb_AI_ToHMI.Pg_outN.manual := tmpPermit; //Давление на выходе нагнетателя;
KC_GPA2_mb_AI_ToHMI.Tg_inN.manual := tmpPermit; //Температура на входе нагнетателя;
KC_GPA2_mb_AI_ToHMI.Tg_outN.manual := tmpPermit; //Температура на выходе нагнетателя;
KC_GPA2_mb_AI_ToHMI.prod.manual := tmpPermit; //Расход технологического газа;
KC_GPA2_mb_AI_ToHMI.loLimRes.manual := tmpPermit; //Запас до нижнего ограничения;
KC_GPA2_mb_AI_ToHMI.hiLimRes.manual := tmpPermit; //Запас до верхнего ограничения;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="MPH3M6QKINDC2SJJWOJZ7BWMIE" Name="KC_GPA2_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Текущие обороты СТ
mb_AI_init(KC_GPA2_mb_AI_Settings.N_ST,0.0,15000.0,-450.0,15450.0,-900.0,15900.0,1,0.0,0.0,0.0,0);
//Текущие обороты ВД
mb_AI_init(KC_GPA2_mb_AI_Settings.N_VD,0.0,15000.0,-450.0,15450.0,-900.0,15900.0,1,0.0,0.0,0.0,1);
//Давление на входе нагнетателя
mb_AI_init(KC_GPA2_mb_AI_Settings.Pg_inN,0.0,10.0,-0.3,10.3,-0.6,10.6,1,0.0,0.0,0.0,2);
//Давление на выходе нагнетателя
mb_AI_init(KC_GPA2_mb_AI_Settings.Pg_outN,0.0,25.0,-0.75,25.75,-1.5,26.5,1,0.0,0.0,0.0,3);
//Температура на входе нагнетателя
mb_AI_init(KC_GPA2_mb_AI_Settings.Tg_inN,-50.0,200.0,-57.5,207.5,-65.0,215.0,1,0.0,0.0,0.0,4);
//Температура на выходе нагнетателя
mb_AI_init(KC_GPA2_mb_AI_Settings.Tg_outN,-50.0,200.0,-57.5,207.5,-65.0,215.0,1,0.0,0.0,0.0,5);
//Расход технологического газа
mb_AI_init(KC_GPA2_mb_AI_Settings.prod,0.0,160.0,-4.8,164.8,-9.6,169.6,1,0.0,0.0,0.0,6);
//Запас до нижнего ограничения
mb_AI_init(KC_GPA2_mb_AI_Settings.loLimRes,0.0,100.0,-3.0,103.0,-6.0,106.0,1,0.0,0.0,0.0,7);
//Запас до верхнего ограничения
mb_AI_init(KC_GPA2_mb_AI_Settings.hiLimRes,0.0,100.0,-3.0,103.0,-6.0,106.0,1,0.0,0.0,0.0,8);
//Конец сгенерированного кода

//= Добавлено 27.08.2020 ОАЕ
//Помпажный запас
mb_AI_init(KC_GPA2_mb_AI_Settings.SurgeRez,0.0,100.0,-3.0,103.0,-6.0,106.0,1,0.0,0.0,0.0,8);
//Положение АПК
mb_AI_init(KC_GPA2_mb_AI_Settings.PosAPK,0.0,100.0,-3.0,103.0,-6.0,106.0,1,0.0,0.0,0.0,8);

end_if;
//Начало сгенерированного кода AI_Processing
//Текущие обороты СТ
mb_AI_Processing(KC_GPA2_mb_AI_DRV.N_ST,KC_GPA2_mb_AI_Settings.N_ST,KC_GPA2_mb_AI_FromHMI.N_ST,KC_GPA2_mb_AI_ToHMI.N_ST);
//Текущие обороты ВД
mb_AI_Processing(KC_GPA2_mb_AI_DRV.N_VD,KC_GPA2_mb_AI_Settings.N_VD,KC_GPA2_mb_AI_FromHMI.N_VD,KC_GPA2_mb_AI_ToHMI.N_VD);
//Давление на входе нагнетателя
mb_AI_Processing(KC_GPA2_mb_AI_DRV.Pg_inN,KC_GPA2_mb_AI_Settings.Pg_inN,KC_GPA2_mb_AI_FromHMI.Pg_inN,KC_GPA2_mb_AI_ToHMI.Pg_inN);
//Давление на выходе нагнетателя
mb_AI_Processing(KC_GPA2_mb_AI_DRV.Pg_outN,KC_GPA2_mb_AI_Settings.Pg_outN,KC_GPA2_mb_AI_FromHMI.Pg_outN,KC_GPA2_mb_AI_ToHMI.Pg_outN);
//Температура на входе нагнетателя
mb_AI_Processing(KC_GPA2_mb_AI_DRV.Tg_inN,KC_GPA2_mb_AI_Settings.Tg_inN,KC_GPA2_mb_AI_FromHMI.Tg_inN,KC_GPA2_mb_AI_ToHMI.Tg_inN);
//Температура на выходе нагнетателя
mb_AI_Processing(KC_GPA2_mb_AI_DRV.Tg_outN,KC_GPA2_mb_AI_Settings.Tg_outN,KC_GPA2_mb_AI_FromHMI.Tg_outN,KC_GPA2_mb_AI_ToHMI.Tg_outN);
//Расход технологического газа
mb_AI_Processing(KC_GPA2_mb_AI_DRV.prod,KC_GPA2_mb_AI_Settings.prod,KC_GPA2_mb_AI_FromHMI.prod,KC_GPA2_mb_AI_ToHMI.prod);
//Запас до нижнего ограничения
mb_AI_Processing(KC_GPA2_mb_AI_DRV.loLimRes,KC_GPA2_mb_AI_Settings.loLimRes,KC_GPA2_mb_AI_FromHMI.loLimRes,KC_GPA2_mb_AI_ToHMI.loLimRes);
//Запас до верхнего ограничения
mb_AI_Processing(KC_GPA2_mb_AI_DRV.hiLimRes,KC_GPA2_mb_AI_Settings.hiLimRes,KC_GPA2_mb_AI_FromHMI.hiLimRes,KC_GPA2_mb_AI_ToHMI.hiLimRes);
//Конец сгенерированного кода

//= Добавлено 27.08.2020 ОАЕ
//Помпажный запас
mb_AI_Processing(KC_GPA2_mb_AI_DRV.SurgeRez,KC_GPA2_mb_AI_Settings.SurgeRez,KC_GPA2_mb_AI_FromHMI.SurgeRez,KC_GPA2_mb_AI_ToHMI.SurgeRez);
//Положение АПК
mb_AI_Processing(KC_GPA2_mb_AI_DRV.PosAPK,KC_GPA2_mb_AI_Settings.PosAPK,KC_GPA2_mb_AI_FromHMI.PosAPK,KC_GPA2_mb_AI_ToHMI.PosAPK);]]></ST>
                    </Function>
                    <Function UUID="2BRJ7JBOJSVBLWI5R6QCL4NC74" Name="KC_GPA3_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
KC_GPA3_mb_AI_ToHMI.N_ST.manual := tmpPermit; //Текущие обороты СТ;
KC_GPA3_mb_AI_ToHMI.N_VD.manual := tmpPermit; //Текущие обороты ВД;
KC_GPA3_mb_AI_ToHMI.Pg_inN.manual := tmpPermit; //Давление на входе нагнетателя;
KC_GPA3_mb_AI_ToHMI.Pg_outN.manual := tmpPermit; //Давление на выходе нагнетателя;
KC_GPA3_mb_AI_ToHMI.Tg_inN.manual := tmpPermit; //Температура на входе нагнетателя;
KC_GPA3_mb_AI_ToHMI.Tg_outN.manual := tmpPermit; //Температура на выходе нагнетателя;
KC_GPA3_mb_AI_ToHMI.prod.manual := tmpPermit; //Расход технологического газа;
KC_GPA3_mb_AI_ToHMI.loLimRes.manual := tmpPermit; //Запас до нижнего ограничения;
KC_GPA3_mb_AI_ToHMI.hiLimRes.manual := tmpPermit; //Запас до верхнего ограничения;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="I3YGUSNKJPNTQLHWWCOC36YNIA" Name="KC_GPA3_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Текущие обороты СТ
mb_AI_init(KC_GPA3_mb_AI_Settings.N_ST,0.0,15000.0,-450.0,15450.0,-900.0,15900.0,1,0.0,0.0,0.0,0);
//Текущие обороты ВД
mb_AI_init(KC_GPA3_mb_AI_Settings.N_VD,0.0,15000.0,-450.0,15450.0,-900.0,15900.0,1,0.0,0.0,0.0,1);
//Давление на входе нагнетателя
mb_AI_init(KC_GPA3_mb_AI_Settings.Pg_inN,0.0,10.0,-0.3,10.3,-0.6,10.6,1,0.0,0.0,0.0,2);
//Давление на выходе нагнетателя
mb_AI_init(KC_GPA3_mb_AI_Settings.Pg_outN,0.0,25.0,-0.75,25.75,-1.5,26.5,1,0.0,0.0,0.0,3);
//Температура на входе нагнетателя
mb_AI_init(KC_GPA3_mb_AI_Settings.Tg_inN,-50.0,200.0,-57.5,207.5,-65.0,215.0,1,0.0,0.0,0.0,4);
//Температура на выходе нагнетателя
mb_AI_init(KC_GPA3_mb_AI_Settings.Tg_outN,-50.0,200.0,-57.5,207.5,-65.0,215.0,1,0.0,0.0,0.0,5);
//Расход технологического газа
mb_AI_init(KC_GPA3_mb_AI_Settings.prod,0.0,160.0,-4.8,164.8,-9.6,169.6,1,0.0,0.0,0.0,6);
//Запас до нижнего ограничения
mb_AI_init(KC_GPA3_mb_AI_Settings.loLimRes,0.0,100.0,-3.0,103.0,-6.0,106.0,1,0.0,0.0,0.0,7);
//Запас до верхнего ограничения
mb_AI_init(KC_GPA3_mb_AI_Settings.hiLimRes,0.0,100.0,-3.0,103.0,-6.0,106.0,1,0.0,0.0,0.0,8);
//Конец сгенерированного кода

//= Добавлено 27.08.2020 ОАЕ
//Помпажный запас
mb_AI_init(KC_GPA3_mb_AI_Settings.SurgeRez,0.0,100.0,-3.0,103.0,-6.0,106.0,1,0.0,0.0,0.0,8);
//Положение АПК
mb_AI_init(KC_GPA3_mb_AI_Settings.PosAPK,0.0,100.0,-3.0,103.0,-6.0,106.0,1,0.0,0.0,0.0,8);

end_if;
//Начало сгенерированного кода AI_Processing
//Текущие обороты СТ
mb_AI_Processing(KC_GPA3_mb_AI_DRV.N_ST,KC_GPA3_mb_AI_Settings.N_ST,KC_GPA3_mb_AI_FromHMI.N_ST,KC_GPA3_mb_AI_ToHMI.N_ST);
//Текущие обороты ВД
mb_AI_Processing(KC_GPA3_mb_AI_DRV.N_VD,KC_GPA3_mb_AI_Settings.N_VD,KC_GPA3_mb_AI_FromHMI.N_VD,KC_GPA3_mb_AI_ToHMI.N_VD);
//Давление на входе нагнетателя
mb_AI_Processing(KC_GPA3_mb_AI_DRV.Pg_inN,KC_GPA3_mb_AI_Settings.Pg_inN,KC_GPA3_mb_AI_FromHMI.Pg_inN,KC_GPA3_mb_AI_ToHMI.Pg_inN);
//Давление на выходе нагнетателя
mb_AI_Processing(KC_GPA3_mb_AI_DRV.Pg_outN,KC_GPA3_mb_AI_Settings.Pg_outN,KC_GPA3_mb_AI_FromHMI.Pg_outN,KC_GPA3_mb_AI_ToHMI.Pg_outN);
//Температура на входе нагнетателя
mb_AI_Processing(KC_GPA3_mb_AI_DRV.Tg_inN,KC_GPA3_mb_AI_Settings.Tg_inN,KC_GPA3_mb_AI_FromHMI.Tg_inN,KC_GPA3_mb_AI_ToHMI.Tg_inN);
//Температура на выходе нагнетателя
mb_AI_Processing(KC_GPA3_mb_AI_DRV.Tg_outN,KC_GPA3_mb_AI_Settings.Tg_outN,KC_GPA3_mb_AI_FromHMI.Tg_outN,KC_GPA3_mb_AI_ToHMI.Tg_outN);
//Расход технологического газа
mb_AI_Processing(KC_GPA3_mb_AI_DRV.prod,KC_GPA3_mb_AI_Settings.prod,KC_GPA3_mb_AI_FromHMI.prod,KC_GPA3_mb_AI_ToHMI.prod);
//Запас до нижнего ограничения
mb_AI_Processing(KC_GPA3_mb_AI_DRV.loLimRes,KC_GPA3_mb_AI_Settings.loLimRes,KC_GPA3_mb_AI_FromHMI.loLimRes,KC_GPA3_mb_AI_ToHMI.loLimRes);
//Запас до верхнего ограничения
mb_AI_Processing(KC_GPA3_mb_AI_DRV.hiLimRes,KC_GPA3_mb_AI_Settings.hiLimRes,KC_GPA3_mb_AI_FromHMI.hiLimRes,KC_GPA3_mb_AI_ToHMI.hiLimRes);
//Конец сгенерированного кода

//= Добавлено 27.08.2020 ОАЕ
//Помпажный запас
mb_AI_Processing(KC_GPA3_mb_AI_DRV.SurgeRez,KC_GPA3_mb_AI_Settings.SurgeRez,KC_GPA3_mb_AI_FromHMI.SurgeRez,KC_GPA3_mb_AI_ToHMI.SurgeRez);
//Положение АПК
mb_AI_Processing(KC_GPA3_mb_AI_DRV.PosAPK,KC_GPA3_mb_AI_Settings.PosAPK,KC_GPA3_mb_AI_FromHMI.PosAPK,KC_GPA3_mb_AI_ToHMI.PosAPK);]]></ST>
                    </Function>
                </Folder>
                <Folder Name="AO" Comment="" Data="" UUID="6ETNTJNG65XUVLW6GD65RL5EZ4">
                    <Function UUID="ODM2PI6YI65AERVEGOOU6KK25E" Name="KC_GPA1_AO_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AO_Permit
KC_GPA1_mb_AO_ToHMI.Nst_Set.forsPermit := tmpPermit; //Задание на обороты ГПА от САУ КЦ;
KC_GPA1_mb_AO_ToHMI.TypeTurn.forsPermit := tmpPermit; //Тип изменения оборотов (1-импульсный, 2-ан.задание);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="IFXHP63QJSYHTO3GWWXNHOSSO4" Name="KC_GPA1_mb_AO_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpInt" Type="INT" Usage="internal" />
                            <Variable UUID="F7ROL4LK5AJERJMGP6FYOKRNLY" Name="tmpReal" Type="REAL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
//										min - Нижний порог ан.выхода в физ.единицах
//										|	max - Верхний порог ан.выхода в физ.единицах
//										|	|	 dataType - Тип данных для модбаса
//										|	|	 | set1 - Настройка 1 (множитель или мин. ранжирования
//										|	|	 | | set2 - Настройка 2 (максимум ранжирования)
//										|	|	 | | | id - Номер по порядку
//AO_init(UPG_UPG_mb_AO_Settings.Res_0,0.0,100.0,2,0,0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AO_init
//Задание на обороты ГПА от САУ КЦ
mb_AO_init(KC_GPA1_mb_AO_Settings.Nst_Set,0.0,10000.0,0,0.0,0.0,0);
//Тип изменения оборотов (1-импульсный, 2-ан.задание)
mb_AO_init(KC_GPA1_mb_AO_Settings.TypeTurn,1.0,2.0,0,0.0,0.0,1);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AO_Processing
//Задание на обороты ГПА от САУ КЦ
mb_AO_Processing(KC_GPA1_mb_AO.Nst_Set,KC_GPA1_mb_AO_Settings.Nst_Set,KC_GPA1_mb_AO_FromHMI.Nst_Set,KC_GPA1_mb_AO_ToHMI.Nst_Set,tmpReal,tmpInt);
KC_GPA1_mb_AO_DRV.Nst_Set := tmpReal; //Задание на обороты ГПА от САУ КЦ;
//Тип изменения оборотов (1-импульсный, 2-ан.задание)
mb_AO_Processing(KC_GPA1_mb_AO.TypeTurn,KC_GPA1_mb_AO_Settings.TypeTurn,KC_GPA1_mb_AO_FromHMI.TypeTurn,KC_GPA1_mb_AO_ToHMI.TypeTurn,tmpReal,tmpInt);
KC_GPA1_mb_AO_DRV.TypeTurn := tmpReal; //Тип изменения оборотов (1-импульсный, 2-ан.задание);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="7ETASCR7IV2QAFPBT23ZHV5PEE" Name="KC_GPA2_AO_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AO_Permit
KC_GPA2_mb_AO_ToHMI.Nst_Set.forsPermit := tmpPermit; //Задание на обороты ГПА от САУ КЦ;
KC_GPA2_mb_AO_ToHMI.TypeTurn.forsPermit := tmpPermit; //Тип изменения оборотов (1-импульсный, 2-ан.задание);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="OMJMSIEWJH6S34MH6WLSMHPABY" Name="KC_GPA2_mb_AO_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpInt" Type="INT" Usage="internal" />
                            <Variable UUID="F7ROL4LK5AJERJMGP6FYOKRNLY" Name="tmpReal" Type="REAL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
//										min - Нижний порог ан.выхода в физ.единицах
//										|	max - Верхний порог ан.выхода в физ.единицах
//										|	|	 dataType - Тип данных для модбаса
//										|	|	 | set1 - Настройка 1 (множитель или мин. ранжирования
//										|	|	 | | set2 - Настройка 2 (максимум ранжирования)
//										|	|	 | | | id - Номер по порядку
//AO_init(UPG_UPG_mb_AO_Settings.Res_0,0.0,100.0,2,0,0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AO_init
//Задание на обороты ГПА от САУ КЦ
mb_AO_init(KC_GPA2_mb_AO_Settings.Nst_Set,0.0,10000.0,0,0.0,0.0,0);
//Тип изменения оборотов (1-импульсный, 2-ан.задание)
mb_AO_init(KC_GPA2_mb_AO_Settings.TypeTurn,1.0,2.0,0,0.0,0.0,1);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AO_Processing
//Задание на обороты ГПА от САУ КЦ
mb_AO_Processing(KC_GPA2_mb_AO.Nst_Set,KC_GPA2_mb_AO_Settings.Nst_Set,KC_GPA2_mb_AO_FromHMI.Nst_Set,KC_GPA2_mb_AO_ToHMI.Nst_Set,tmpReal,tmpInt);
KC_GPA2_mb_AO_DRV.Nst_Set := tmpReal; //Задание на обороты ГПА от САУ КЦ;
//Тип изменения оборотов (1-импульсный, 2-ан.задание)
mb_AO_Processing(KC_GPA2_mb_AO.TypeTurn,KC_GPA2_mb_AO_Settings.TypeTurn,KC_GPA2_mb_AO_FromHMI.TypeTurn,KC_GPA2_mb_AO_ToHMI.TypeTurn,tmpReal,tmpInt);
KC_GPA2_mb_AO_DRV.TypeTurn := tmpReal; //Тип изменения оборотов (1-импульсный, 2-ан.задание);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="H4TJMKQXJ3CPYG4A7GSOPZWG4M" Name="KC_GPA3_AO_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AO_Permit
KC_GPA3_mb_AO_ToHMI.Nst_Set.forsPermit := tmpPermit; //Задание на обороты ГПА от САУ КЦ;
KC_GPA3_mb_AO_ToHMI.TypeTurn.forsPermit := tmpPermit; //Тип изменения оборотов (1-импульсный, 2-ан.задание);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="JQZCTTK4JYTA4KXATSFHC3NTUI" Name="KC_GPA3_mb_AO_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpInt" Type="INT" Usage="internal" />
                            <Variable UUID="F7ROL4LK5AJERJMGP6FYOKRNLY" Name="tmpReal" Type="REAL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
//										min - Нижний порог ан.выхода в физ.единицах
//										|	max - Верхний порог ан.выхода в физ.единицах
//										|	|	 dataType - Тип данных для модбаса
//										|	|	 | set1 - Настройка 1 (множитель или мин. ранжирования
//										|	|	 | | set2 - Настройка 2 (максимум ранжирования)
//										|	|	 | | | id - Номер по порядку
//AO_init(UPG_UPG_mb_AO_Settings.Res_0,0.0,100.0,2,0,0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AO_init
//Задание на обороты ГПА от САУ КЦ
mb_AO_init(KC_GPA3_mb_AO_Settings.Nst_Set,0.0,10000.0,0,0.0,0.0,0);
//Тип изменения оборотов (1-импульсный, 2-ан.задание)
mb_AO_init(KC_GPA3_mb_AO_Settings.TypeTurn,1.0,2.0,0,0.0,0.0,1);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AO_Processing
//Задание на обороты ГПА от САУ КЦ
mb_AO_Processing(KC_GPA3_mb_AO.Nst_Set,KC_GPA3_mb_AO_Settings.Nst_Set,KC_GPA3_mb_AO_FromHMI.Nst_Set,KC_GPA3_mb_AO_ToHMI.Nst_Set,tmpReal,tmpInt);
KC_GPA3_mb_AO_DRV.Nst_Set := tmpReal; //Задание на обороты ГПА от САУ КЦ;
//Тип изменения оборотов (1-импульсный, 2-ан.задание)
mb_AO_Processing(KC_GPA3_mb_AO.TypeTurn,KC_GPA3_mb_AO_Settings.TypeTurn,KC_GPA3_mb_AO_FromHMI.TypeTurn,KC_GPA3_mb_AO_ToHMI.TypeTurn,tmpReal,tmpInt);
KC_GPA3_mb_AO_DRV.TypeTurn := tmpReal; //Тип изменения оборотов (1-импульсный, 2-ан.задание);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                </Folder>
                <Folder Name="DI" Comment="" Data="" UUID="RBA6M4W53WUUDKM5DVZSH6E7HY">
                    <Function UUID="KVC5PGURIQMXWFDR5KDDMWGJP4" Name="KC_GPA1_DI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода DI_Permit
KC_GPA1_mb_DI_ToHMI.mde_M.manual := tmpPermit; //Режим работы ГПА "Магистраль";
KC_GPA1_mb_DI_ToHMI.mde_K.manual := tmpPermit; //Режим работы ГПА "Кольцо";
KC_GPA1_mb_DI_ToHMI.shopReg_ON.manual := tmpPermit; //Признак включеного цехового регулирования в ГПА;
KC_GPA1_mb_DI_ToHMI.fault.manual := tmpPermit; //Неисправность;
KC_GPA1_mb_DI_ToHMI.Fire.manual := tmpPermit; //Пожар;
KC_GPA1_mb_DI_ToHMI.Zgz.manual := tmpPermit; //Загазованность;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="R5QWWP23JX2OHWEEW2PZVDTJ6M" Name="KC_GPA1_mb_DI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[//-------- Обработка дискретных входов полученных по сети --------------
//Начало сгенерированного кода DI_Processing
//Режим работы ГПА "Магистраль"
mb_DI_Processing(KC_GPA1_mb_DI_DRV.mde_M,KC_GPA1_mb_DI_FromHMI.mde_M,KC_GPA1_mb_DI_ToHMI.mde_M,KC_GPA1_mb_DI.mde_M);
//Режим работы ГПА "Кольцо"
mb_DI_Processing(KC_GPA1_mb_DI_DRV.mde_K,KC_GPA1_mb_DI_FromHMI.mde_K,KC_GPA1_mb_DI_ToHMI.mde_K,KC_GPA1_mb_DI.mde_K);
//Признак включеного цехового регулирования в ГПА
mb_DI_Processing(KC_GPA1_mb_DI_DRV.shopReg_ON,KC_GPA1_mb_DI_FromHMI.shopReg_ON,KC_GPA1_mb_DI_ToHMI.shopReg_ON,KC_GPA1_mb_DI.shopReg_ON);
//Неисправность
mb_DI_Processing(KC_GPA1_mb_DI_DRV.fault,KC_GPA1_mb_DI_FromHMI.fault,KC_GPA1_mb_DI_ToHMI.fault,KC_GPA1_mb_DI.fault);
//Пожар
mb_DI_Processing(KC_GPA1_mb_DI_DRV.Fire,KC_GPA1_mb_DI_FromHMI.Fire,KC_GPA1_mb_DI_ToHMI.Fire,KC_GPA1_mb_DI.Fire);
//Загазованность
mb_DI_Processing(KC_GPA1_mb_DI_DRV.Zgz,KC_GPA1_mb_DI_FromHMI.Zgz,KC_GPA1_mb_DI_ToHMI.Zgz,KC_GPA1_mb_DI.Zgz);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="CYMIDC2BI27BLL26SCA2GKZRSA" Name="KC_GPA2_DI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода DI_Permit
KC_GPA2_mb_DI_ToHMI.mde_M.manual := tmpPermit; //Режим работы ГПА "Магистраль";
KC_GPA2_mb_DI_ToHMI.mde_K.manual := tmpPermit; //Режим работы ГПА "Кольцо";
KC_GPA2_mb_DI_ToHMI.shopReg_ON.manual := tmpPermit; //Признак включеного цехового регулирования в ГПА;
KC_GPA2_mb_DI_ToHMI.fault.manual := tmpPermit; //Неисправность;
KC_GPA2_mb_DI_ToHMI.Fire.manual := tmpPermit; //Пожар;
KC_GPA2_mb_DI_ToHMI.Zgz.manual := tmpPermit; //Загазованность;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="KHUKGA57J7ZDBX457W3H3NOGWE" Name="KC_GPA2_mb_DI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[//-------- Обработка дискретных входов полученных по сети --------------
//Начало сгенерированного кода DI_Processing
//Режим работы ГПА "Магистраль"
mb_DI_Processing(KC_GPA2_mb_DI_DRV.mde_M,KC_GPA2_mb_DI_FromHMI.mde_M,KC_GPA2_mb_DI_ToHMI.mde_M,KC_GPA2_mb_DI.mde_M);
//Режим работы ГПА "Кольцо"
mb_DI_Processing(KC_GPA2_mb_DI_DRV.mde_K,KC_GPA2_mb_DI_FromHMI.mde_K,KC_GPA2_mb_DI_ToHMI.mde_K,KC_GPA2_mb_DI.mde_K);
//Признак включеного цехового регулирования в ГПА
mb_DI_Processing(KC_GPA2_mb_DI_DRV.shopReg_ON,KC_GPA2_mb_DI_FromHMI.shopReg_ON,KC_GPA2_mb_DI_ToHMI.shopReg_ON,KC_GPA2_mb_DI.shopReg_ON);
//Неисправность
mb_DI_Processing(KC_GPA2_mb_DI_DRV.fault,KC_GPA2_mb_DI_FromHMI.fault,KC_GPA2_mb_DI_ToHMI.fault,KC_GPA2_mb_DI.fault);
//Пожар
mb_DI_Processing(KC_GPA2_mb_DI_DRV.Fire,KC_GPA2_mb_DI_FromHMI.Fire,KC_GPA2_mb_DI_ToHMI.Fire,KC_GPA2_mb_DI.Fire);
//Загазованность
mb_DI_Processing(KC_GPA2_mb_DI_DRV.Zgz,KC_GPA2_mb_DI_FromHMI.Zgz,KC_GPA2_mb_DI_ToHMI.Zgz,KC_GPA2_mb_DI.Zgz);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="2XJSYOHAJMBL5ZGIGK2YBZYHIQ" Name="KC_GPA3_DI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода DI_Permit
KC_GPA3_mb_DI_ToHMI.mde_M.manual := tmpPermit; //Режим работы ГПА "Магистраль";
KC_GPA3_mb_DI_ToHMI.mde_K.manual := tmpPermit; //Режим работы ГПА "Кольцо";
KC_GPA3_mb_DI_ToHMI.shopReg_ON.manual := tmpPermit; //Признак включеного цехового регулирования в ГПА;
KC_GPA3_mb_DI_ToHMI.fault.manual := tmpPermit; //Неисправность;
KC_GPA3_mb_DI_ToHMI.Fire.manual := tmpPermit; //Пожар;
KC_GPA3_mb_DI_ToHMI.Zgz.manual := tmpPermit; //Загазованность;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="YVG2W3LKJN5MX7XO5CL2XKXT3I" Name="KC_GPA3_mb_DI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[//-------- Обработка дискретных входов полученных по сети --------------
//Начало сгенерированного кода DI_Processing
//Режим работы ГПА "Магистраль"
mb_DI_Processing(KC_GPA3_mb_DI_DRV.mde_M,KC_GPA3_mb_DI_FromHMI.mde_M,KC_GPA3_mb_DI_ToHMI.mde_M,KC_GPA3_mb_DI.mde_M);
//Режим работы ГПА "Кольцо"
mb_DI_Processing(KC_GPA3_mb_DI_DRV.mde_K,KC_GPA3_mb_DI_FromHMI.mde_K,KC_GPA3_mb_DI_ToHMI.mde_K,KC_GPA3_mb_DI.mde_K);
//Признак включеного цехового регулирования в ГПА
mb_DI_Processing(KC_GPA3_mb_DI_DRV.shopReg_ON,KC_GPA3_mb_DI_FromHMI.shopReg_ON,KC_GPA3_mb_DI_ToHMI.shopReg_ON,KC_GPA3_mb_DI.shopReg_ON);
//Неисправность
mb_DI_Processing(KC_GPA3_mb_DI_DRV.fault,KC_GPA3_mb_DI_FromHMI.fault,KC_GPA3_mb_DI_ToHMI.fault,KC_GPA3_mb_DI.fault);
//Пожар
mb_DI_Processing(KC_GPA3_mb_DI_DRV.Fire,KC_GPA3_mb_DI_FromHMI.Fire,KC_GPA3_mb_DI_ToHMI.Fire,KC_GPA3_mb_DI.Fire);
//Загазованность
mb_DI_Processing(KC_GPA3_mb_DI_DRV.Zgz,KC_GPA3_mb_DI_FromHMI.Zgz,KC_GPA3_mb_DI_ToHMI.Zgz,KC_GPA3_mb_DI.Zgz);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                </Folder>
                <Folder Name="DO" Comment="" Data="" UUID="HHQOERZZT54EBDPLXPUHUD5JC4">
                    <Function UUID="ZTTOEFV7IFXIGKHLDWOHO6HR7Q" Name="KC_GPA1_DO_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода DO_Permit
KC_GPA1_mb_DO_ToHMI.Nst_UP.forsPermit := tmpPermit; //Поднятие оборотов ГПА;
KC_GPA1_mb_DO_ToHMI.Nst_DN.forsPermit := tmpPermit; //Снижение оборотов ГПА;
KC_GPA1_mb_DO_ToHMI.shopReg.forsPermit := tmpPermit; //Признак включенного регултрования в САУ КЦ;
KC_GPA1_mb_DO_ToHMI.AO.forsPermit := tmpPermit; //АО (от САУ КЦ);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="QCQWWRQ2IHDJ57TKEKUYAQ3A3A" Name="KC_GPA1_mb_DO_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[//----------- Обработка дискретных выходов ---------------
//Начало сгенерированного кода DO_Processing
//Поднятие оборотов ГПА
mb_DO_Processing(KC_GPA1_mb_DO.Nst_UP,KC_GPA1_mb_DO_FromHMI.Nst_UP,KC_GPA1_mb_DO_ToHMI.Nst_UP,KC_GPA1_mb_DO_DRV.Nst_UP);
//Снижение оборотов ГПА
mb_DO_Processing(KC_GPA1_mb_DO.Nst_DN,KC_GPA1_mb_DO_FromHMI.Nst_DN,KC_GPA1_mb_DO_ToHMI.Nst_DN,KC_GPA1_mb_DO_DRV.Nst_DN);
//Признак включенного регултрования в САУ КЦ
mb_DO_Processing(KC_GPA1_mb_DO.shopReg,KC_GPA1_mb_DO_FromHMI.shopReg,KC_GPA1_mb_DO_ToHMI.shopReg,KC_GPA1_mb_DO_DRV.shopReg);
//АО (от САУ КЦ)
mb_DO_Processing(KC_GPA1_mb_DO.AO,KC_GPA1_mb_DO_FromHMI.AO,KC_GPA1_mb_DO_ToHMI.AO,KC_GPA1_mb_DO_DRV.AO);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="N3J2UB5EIMLTA6OEX2HT57H7G4" Name="KC_GPA2_DO_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода DO_Permit
KC_GPA2_mb_DO_ToHMI.Nst_UP.forsPermit := tmpPermit; //Поднятие оборотов ГПА;
KC_GPA2_mb_DO_ToHMI.Nst_DN.forsPermit := tmpPermit; //Снижение оборотов ГПА;
KC_GPA2_mb_DO_ToHMI.shopReg.forsPermit := tmpPermit; //Признак включенного регултрования в САУ КЦ;
KC_GPA2_mb_DO_ToHMI.AO.forsPermit := tmpPermit; //АО (от САУ КЦ);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="AKKGHC2SIBCOHRYBNKV6TBVXCM" Name="KC_GPA2_mb_DO_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[//----------- Обработка дискретных выходов ---------------
//Начало сгенерированного кода DO_Processing
//Поднятие оборотов ГПА
mb_DO_Processing(KC_GPA2_mb_DO.Nst_UP,KC_GPA2_mb_DO_FromHMI.Nst_UP,KC_GPA2_mb_DO_ToHMI.Nst_UP,KC_GPA2_mb_DO_DRV.Nst_UP);
//Снижение оборотов ГПА
mb_DO_Processing(KC_GPA2_mb_DO.Nst_DN,KC_GPA2_mb_DO_FromHMI.Nst_DN,KC_GPA2_mb_DO_ToHMI.Nst_DN,KC_GPA2_mb_DO_DRV.Nst_DN);
//Признак включенного регултрования в САУ КЦ
mb_DO_Processing(KC_GPA2_mb_DO.shopReg,KC_GPA2_mb_DO_FromHMI.shopReg,KC_GPA2_mb_DO_ToHMI.shopReg,KC_GPA2_mb_DO_DRV.shopReg);
//АО (от САУ КЦ)
mb_DO_Processing(KC_GPA2_mb_DO.AO,KC_GPA2_mb_DO_FromHMI.AO,KC_GPA2_mb_DO_ToHMI.AO,KC_GPA2_mb_DO_DRV.AO);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="BXV6H4Z5IXDDEZP2KGGSKUCQO4" Name="KC_GPA3_DO_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода DO_Permit
KC_GPA3_mb_DO_ToHMI.Nst_UP.forsPermit := tmpPermit; //Поднятие оборотов ГПА;
KC_GPA3_mb_DO_ToHMI.Nst_DN.forsPermit := tmpPermit; //Снижение оборотов ГПА;
KC_GPA3_mb_DO_ToHMI.shopReg.forsPermit := tmpPermit; //Признак включенного регултрования в САУ КЦ;
KC_GPA3_mb_DO_ToHMI.AO.forsPermit := tmpPermit; //АО (от САУ КЦ);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="JYPXFWMVI6SB7RE64WYBLP6PLU" Name="KC_GPA3_mb_DO_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[//----------- Обработка дискретных выходов ---------------
//Начало сгенерированного кода DO_Processing
//Поднятие оборотов ГПА
mb_DO_Processing(KC_GPA3_mb_DO.Nst_UP,KC_GPA3_mb_DO_FromHMI.Nst_UP,KC_GPA3_mb_DO_ToHMI.Nst_UP,KC_GPA3_mb_DO_DRV.Nst_UP);
//Снижение оборотов ГПА
mb_DO_Processing(KC_GPA3_mb_DO.Nst_DN,KC_GPA3_mb_DO_FromHMI.Nst_DN,KC_GPA3_mb_DO_ToHMI.Nst_DN,KC_GPA3_mb_DO_DRV.Nst_DN);
//Признак включенного регултрования в САУ КЦ
mb_DO_Processing(KC_GPA3_mb_DO.shopReg,KC_GPA3_mb_DO_FromHMI.shopReg,KC_GPA3_mb_DO_ToHMI.shopReg,KC_GPA3_mb_DO_DRV.shopReg);
//АО (от САУ КЦ)
mb_DO_Processing(KC_GPA3_mb_DO.AO,KC_GPA3_mb_DO_FromHMI.AO,KC_GPA3_mb_DO_ToHMI.AO,KC_GPA3_mb_DO_DRV.AO);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                </Folder>
                <FunctionBlock UUID="P7YX4V6ER2JULAGKVADRC4WIE4" Name="FB_DLink_GPA123">
                    <Variables>
                        <Variable UUID="NYOIBYLAXUXELJTQWSAPH3RKDM" Name="Pulse" Type="FB_Pulse" TypeUUID="LCERBCVHMURELEDEHKKNKLUZNQ" Usage="internal" />
                        <Variable UUID="5XRSARNWEQVUZEG66OCTB3ZLII" Name="tmr_GPA1_Link" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                        <Variable UUID="CJVS7OIJJHQEVC3U2H7GUYYTIA" Name="tmr_GPA2_Link" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                        <Variable UUID="HBJ6XLX3QX5U3BOXHGR3ORQEJM" Name="tmr_GPA3_Link" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[//================================================================================================
//================================================================================================
//========================== Диагностика связи с ГПА1-3 ==========================================
//================================================================================================
(*
//= Нет связи с ГПА1
algKC.GPA1_NoLink := 	KC_GPA1_mb_AI_ToHMI.N_ST.break
					and KC_GPA1_mb_AI_ToHMI.N_VD.break
					and KC_GPA1_mb_AI_ToHMI.Pg_inN.break
					and KC_GPA1_mb_AI_ToHMI.Pg_outN.break
					and KC_GPA1_mb_AI_ToHMI.Tg_inN.break
					and KC_GPA1_mb_AI_ToHMI.Tg_outN.break;
//= Нет связи с ГПА2
algKC.GPA2_NoLink := 	KC_GPA2_mb_AI_ToHMI.N_ST.break
					and KC_GPA2_mb_AI_ToHMI.N_VD.break
					and KC_GPA2_mb_AI_ToHMI.Pg_inN.break
					and KC_GPA2_mb_AI_ToHMI.Pg_outN.break
					and KC_GPA2_mb_AI_ToHMI.Tg_inN.break
					and KC_GPA2_mb_AI_ToHMI.Tg_outN.break;
//= Нет связи с ГПА3
algKC.GPA3_NoLink := 	KC_GPA3_mb_AI_ToHMI.N_ST.break
					and KC_GPA3_mb_AI_ToHMI.N_VD.break
					and KC_GPA3_mb_AI_ToHMI.Pg_inN.break
					and KC_GPA3_mb_AI_ToHMI.Pg_outN.break
					and KC_GPA3_mb_AI_ToHMI.Tg_inN.break
					and KC_GPA3_mb_AI_ToHMI.Tg_outN.break;
*)
//================================================================================================
//= Диагностика связи с ГПА1
algKC.GPA1_CntrlSumm1 :=  KC_GPA1_mb_AI_DRV.N_ST			//= текущая контрольная сумма аналоговых параметров
						+ KC_GPA1_mb_AI_DRV.N_VD
						+ KC_GPA1_mb_AI_DRV.Pg_inN
						+ KC_GPA1_mb_AI_DRV.Pg_outN
						+ KC_GPA1_mb_AI_DRV.Tg_inN
						+ KC_GPA1_mb_AI_DRV.Tg_outN;

tmr_GPA1_Link(IN := algKC.GPA1_CntrlSumm1 = algKC.GPA1_CntrlSumm2, PT := T#1s); //= взводим таймер, если предыдущая сумма равна текущей
algKC.GPA1_NoLink := tmr_GPA1_Link.Q (*or KC_GPA1_mb_AI_ToHMI.N_ST.break			//= Нет связи с ГПА1
									 and KC_GPA1_mb_AI_ToHMI.N_VD.break
									 and KC_GPA1_mb_AI_ToHMI.Pg_inN.break
									 and KC_GPA1_mb_AI_ToHMI.Pg_outN.break
									 and KC_GPA1_mb_AI_ToHMI.Tg_inN.break
									 and KC_GPA1_mb_AI_ToHMI.Tg_outN.break*); 
algKC.GPA1_CntrlSumm2 := algKC.GPA1_CntrlSumm1; //= запоминаем текущую сумму

Pulse(not algKC.GPA1_NoLink, T#1s, KC_SS.GPA1_HeartBit); //= диагностический меандр выдаётся, если предыдущая и текущая контрольные суммы различаются
//================================================================================================
//= Диагностика связи с ГПА2
algKC.GPA2_CntrlSumm1 :=  KC_GPA2_mb_AI_DRV.N_ST			//= текущая контрольная сумма аналоговых параметров
						+ KC_GPA2_mb_AI_DRV.N_VD
						+ KC_GPA2_mb_AI_DRV.Pg_inN
						+ KC_GPA2_mb_AI_DRV.Pg_outN
						+ KC_GPA2_mb_AI_DRV.Tg_inN
						+ KC_GPA2_mb_AI_DRV.Tg_outN;

tmr_GPA2_Link(IN := algKC.GPA2_CntrlSumm1 = algKC.GPA2_CntrlSumm2, PT := T#1s); //= взводим таймер, если предыдущая сумма равна текущей
algKC.GPA2_NoLink := tmr_GPA2_Link.Q (*or KC_GPA2_mb_AI_ToHMI.N_ST.break			//= Нет связи с ГПА2
									 and KC_GPA2_mb_AI_ToHMI.N_VD.break
									 and KC_GPA2_mb_AI_ToHMI.Pg_inN.break
									 and KC_GPA2_mb_AI_ToHMI.Pg_outN.break
									 and KC_GPA2_mb_AI_ToHMI.Tg_inN.break
									 and KC_GPA2_mb_AI_ToHMI.Tg_outN.break*); 
algKC.GPA2_CntrlSumm2 := algKC.GPA2_CntrlSumm1; //= запоминаем текущую сумму

Pulse(not algKC.GPA2_NoLink, T#1s, KC_SS.GPA2_HeartBit); //= диагностический меандр выдаётся, если предыдущая и текущая контрольные суммы различаются
//================================================================================================
//= Диагностика связи с ГПА3
algKC.GPA3_CntrlSumm1 :=  KC_GPA3_mb_AI_DRV.N_ST			//= текущая контрольная сумма аналоговых параметров
						+ KC_GPA3_mb_AI_DRV.N_VD
						+ KC_GPA3_mb_AI_DRV.Pg_inN
						+ KC_GPA3_mb_AI_DRV.Pg_outN
						+ KC_GPA3_mb_AI_DRV.Tg_inN
						+ KC_GPA3_mb_AI_DRV.Tg_outN;

tmr_GPA3_Link(IN := algKC.GPA3_CntrlSumm1 = algKC.GPA3_CntrlSumm2, PT := T#1s); //= взводим таймер, если предыдущая сумма равна текущей
algKC.GPA3_NoLink := tmr_GPA3_Link.Q (*or KC_GPA3_mb_AI_ToHMI.N_ST.break			//= Нет связи с ГПА3
									 and KC_GPA3_mb_AI_ToHMI.N_VD.break
									 and KC_GPA3_mb_AI_ToHMI.Pg_inN.break
									 and KC_GPA3_mb_AI_ToHMI.Pg_outN.break
									 and KC_GPA3_mb_AI_ToHMI.Tg_inN.break
									 and KC_GPA3_mb_AI_ToHMI.Tg_outN.break*); 
algKC.GPA3_CntrlSumm2 := algKC.GPA3_CntrlSumm1; //= запоминаем текущую сумму

Pulse(not algKC.GPA3_NoLink, T#1s, KC_SS.GPA3_HeartBit); //= диагностический меандр выдаётся, если предыдущая и текущая контрольные суммы различаются
//================================================================================================]]></ST>
                </FunctionBlock>
                <FunctionBlock UUID="2VBNFJ3FGN7UZF3NDJBDGJQJAM" Name="FB_Link_CR">
                    <Variables />
                    <ST><![CDATA[//========================= Обмен данными с САР (Цеховым Регулятором) ============================
//================================================================================================
//ГПА1
//= входные в ЦР
//= SAR_KC_GPA1.online := надо добавить	;	// связь с ГПА1 исправна
SAR_KC_GPA1.run		:= KC_GPA1_mb_DI_DRV.mde_M; 	// режим ГПА1 магистраль
SAR_KC_GPA1.remote	:= KC_GPA1_mb_DI_DRV.shopReg_ON; 	// ГПА1 переведен в режим управления от САР
SAR_KC_GPA1.Q		:= KC_GPA1_mb_AI_DRV.prod	;	// приведенный расход переводим в реальный
SAR_KC_GPA1.Ein		:= KC_GPA1_mb_AI_DRV.Pg_inN; 	// давление газа на входе ГПА1
SAR_KC_GPA1.Eout	:= KC_GPA1_mb_AI_DRV.Pg_outN	; 	// давление газа на выходе ГПА1
//= SAR_KC_GPA1.EoutEin	:= надо добавить в перечень передаваемых параметров от ГПА	;	// степень сжатия через ГПА1
SAR_KC_GPA1.S		:= KC_GPA1_mb_AI_DRV.SurgeRez	; 	// запас по помпажу ГПА1
SAR_KC_GPA1.Nst		:= KC_GPA1_mb_AI_DRV.N_ST; 	// обороты СТ ГПА1
//= SAR_KC_GPA1.Nvd_r	:= надо добавить в перечень передаваемых параметров от ГПА	SAR_KC_GPA1.Nvd_r	:= KC_GPA1_mb_AI_DRV.N_VD; 	// обороты приведенные ВД ГПА1
//= SAR_KC_GPA1.SP_Nst	:= надо добавить в перечень передаваемых параметров от ГПА	; 	// задание по оборотам СТ ГПА1

//= выходные от ЦР
KC_GPA1_mb_AO_DRV.Nst_Set := SAR_KC_MB_WRITE_GPA1.SP_cv;  // задание по оборотам СТ от САР в ГПА1
//================================================================================================
//================================================================================================
//ГПА2
//= входные в ЦР
//= SAR_KC_GPA2.online := надо добавить	;	// связь с ГПА2 исправна
SAR_KC_GPA2.run		:= KC_GPA2_mb_DI_DRV.mde_M; 	// режим ГПА2 магистраль
SAR_KC_GPA2.remote	:= KC_GPA2_mb_DI_DRV.shopReg_ON; 	// ГПА2 переведен в режим управления от САР
SAR_KC_GPA2.Q		:= KC_GPA2_mb_AI_DRV.prod	;	// приведенный расход переводим в реальный
SAR_KC_GPA2.Ein		:= KC_GPA2_mb_AI_DRV.Pg_inN; 	// давление газа на входе ГПА2
SAR_KC_GPA2.Eout	:= KC_GPA2_mb_AI_DRV.Pg_outN	; 	// давление газа на выходе ГПА2
//= SAR_KC_GPA2.EoutEin	:= надо добавить в перечень передаваемых параметров от ГПА	;	// степень сжатия через ГПА2
SAR_KC_GPA2.S		:= KC_GPA2_mb_AI_DRV.SurgeRez	; 	// запас по помпажу ГПА2
SAR_KC_GPA2.Nst		:= KC_GPA2_mb_AI_DRV.N_ST; 	// обороты СТ ГПА2
//= SAR_KC_GPA2.Nvd_r	:= надо добавить в перечень передаваемых параметров от ГПА	SAR_KC_GPA2.Nvd_r	:= KC_GPA2_mb_AI_DRV.N_VD; 	// обороты приведенные ВД ГПА2
//= SAR_KC_GPA2.SP_Nst	:= надо добавить в перечень передаваемых параметров от ГПА	; 	// задание по оборотам СТ ГПА2

//= выходные от ЦР
KC_GPA2_mb_AO_DRV.Nst_Set := SAR_KC_MB_WRITE_GPA2.SP_cv;  // задание по оборотам СТ от САР в ГПА2
//================================================================================================
//================================================================================================
//ГПА3
//= входные в ЦР
//= SAR_KC_GPA3.online := надо добавить	;	// связь с ГПА3 исправна
SAR_KC_GPA3.run		:= KC_GPA3_mb_DI_DRV.mde_M; 	// режим ГПА3 магистраль
SAR_KC_GPA3.remote	:= KC_GPA3_mb_DI_DRV.shopReg_ON; 	// ГПА3 переведен в режим управления от САР
SAR_KC_GPA3.Q		:= KC_GPA3_mb_AI_DRV.prod	;	// приведенный расход переводим в реальный
SAR_KC_GPA3.Ein		:= KC_GPA3_mb_AI_DRV.Pg_inN; 	// давление газа на входе ГПА3
SAR_KC_GPA3.Eout	:= KC_GPA3_mb_AI_DRV.Pg_outN	; 	// давление газа на выходе ГПА3
//= SAR_KC_GPA3.EoutEin	:= надо добавить в перечень передаваемых параметров от ГПА	;	// степень сжатия через ГПА3
SAR_KC_GPA3.S		:= KC_GPA3_mb_AI_DRV.SurgeRez	; 	// запас по помпажу ГПА3
SAR_KC_GPA3.Nst		:= KC_GPA3_mb_AI_DRV.N_ST; 	// обороты СТ ГПА3
//= SAR_KC_GPA3.Nvd_r	:= надо добавить в перечень передаваемых параметров от ГПА	SAR_KC_GPA3.Nvd_r	:= KC_GPA3_mb_AI_DRV.N_VD; 	// обороты приведенные ВД ГПА3
//= SAR_KC_GPA3.SP_Nst	:= надо добавить в перечень передаваемых параметров от ГПА	; 	// задание по оборотам СТ ГПА3

//= выходные от ЦР
KC_GPA3_mb_AO_DRV.Nst_Set := SAR_KC_MB_WRITE_GPA3.SP_cv;  // задание по оборотам СТ от САР в ГПА3
//================================================================================================]]></ST>
                </FunctionBlock>
            </Folder>
            <Folder Name="ЕК270" Comment="" Data="" UUID="JVQXWPBVREXEZELL5K6UYY3LO4">
                <Folder Name="AI" Comment="" Data="" UUID="7C6PTEJX4F4U7I4GMNQPYTU4GA">
                    <Function UUID="DHMHYPDIITA7ZXMKAOSVIUIWMY" Name="KC_EK270_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
KC_EK270_AI_ToHMI.pb301.manual := tmpPermit; //Давление, Бар;
KC_EK270_AI_ToHMI.Tb303.manual := tmpPermit; //Температура, °C;
KC_EK270_AI_ToHMI.p_Abs305.manual := tmpPermit; //Абсолютное давление, Бар;
KC_EK270_AI_ToHMI.p_Mes307.manual := tmpPermit; //Измеренное давление, Бар;
KC_EK270_AI_ToHMI.T_Mes309.manual := tmpPermit; //Измеренная температура, °C;
KC_EK270_AI_ToHMI.C311.manual := tmpPermit; //Коэффициент коррекции, Бар;
KC_EK270_AI_ToHMI.K313.manual := tmpPermit; //Коэффициент сжимаемости газа;
KC_EK270_AI_ToHMI.p_F315.manual := tmpPermit; //Подстановочное значение давления, Бар;
KC_EK270_AI_ToHMI.T_F317.manual := tmpPermit; //Подстановочное значение температуры, °C;
KC_EK270_AI_ToHMI.N2_319.manual := tmpPermit; //Содержание азота, %;
KC_EK270_AI_ToHMI.H2_321.manual := tmpPermit; //Содержание водорода, %;
KC_EK270_AI_ToHMI.CO2_323.manual := tmpPermit; //Содержание двуокиси углерода, %;
KC_EK270_AI_ToHMI.Rhob325.manual := tmpPermit; //Плотность газа при нормальных условиях, кг/м3;
KC_EK270_AI_ToHMI.Q327.manual := tmpPermit; //Рабочий расход газа, м3/ч;
KC_EK270_AI_ToHMI.Qb329.manual := tmpPermit; //Стандартный расход газа, м3/ч;
KC_EK270_AI_ToHMI.P331.manual := tmpPermit; //Мощность, kВт;
KC_EK270_AI_ToHMI.Ho_b333.manual := tmpPermit; //Теплотворная способность, kВтч/м3;
KC_EK270_AI_ToHMI.dr335.manual := tmpPermit; //Коэффициент плотности;
KC_EK270_AI_ToHMI.p337.manual := tmpPermit; //Давление_1, Бар;
KC_EK270_AI_ToHMI.T339.manual := tmpPermit; //Температура,_1 °C;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <FunctionBlock UUID="S22Q5OE6VZ3UPPIHMUAT2AQL6A" Name="KC_EK270_mb_AI_CallAll_FB">
                        <Variables>
                            <Variable UUID="VEGJVTHD2CGENEPFBC2PXXVVFA" Name="Proc_TMR_ON" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                            <Variable UUID="M7SAABFHMGRU5ERTP7XONMGAMQ" Name="TMO_ON" Type="BOOL" Usage="internal" />
                            <Variable UUID="ADNAXIDPWYHENDBS4AWMCPARVE" Name="TMR_ON" Type="TIME" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//if init.AI = false then
Proc_TMR_ON(TRUE, T#15s, TMO_ON, TMR_ON);
IF not TMO_ON THEN
//	init.AI := true;
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода mb_AI_init
//Давление, Бар
mb_AI_init(KC_EK270_AI_Settings.pb301,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,0);
//Температура, °C
mb_AI_init(KC_EK270_AI_Settings.Tb303,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,1);
//Абсолютное давление, Бар
mb_AI_init(KC_EK270_AI_Settings.p_Abs305,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,2);
//Измеренное давление, Бар
mb_AI_init(KC_EK270_AI_Settings.p_Mes307,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,3);
//Измеренная температура, °C
mb_AI_init(KC_EK270_AI_Settings.T_Mes309,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,4);
//Коэффициент коррекции, Бар
mb_AI_init(KC_EK270_AI_Settings.C311,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,5);
//Коэффициент сжимаемости газа
mb_AI_init(KC_EK270_AI_Settings.K313,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,6);
//Подстановочное значение давления, Бар
mb_AI_init(KC_EK270_AI_Settings.p_F315,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,7);
//Подстановочное значение температуры, °C
mb_AI_init(KC_EK270_AI_Settings.T_F317,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,8);
//Содержание азота, %
mb_AI_init(KC_EK270_AI_Settings.N2_319,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,9);
//Содержание водорода, %
mb_AI_init(KC_EK270_AI_Settings.H2_321,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,10);
//Содержание двуокиси углерода, %
mb_AI_init(KC_EK270_AI_Settings.CO2_323,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,11);
//Плотность газа при нормальных условиях, кг/м3
mb_AI_init(KC_EK270_AI_Settings.Rhob325,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,12);
//Рабочий расход газа, м3/ч
mb_AI_init(KC_EK270_AI_Settings.Q327,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,13);
//Стандартный расход газа, м3/ч
mb_AI_init(KC_EK270_AI_Settings.Qb329,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,14);
//Мощность, kВт
mb_AI_init(KC_EK270_AI_Settings.P331,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,15);
//Теплотворная способность, kВтч/м3
mb_AI_init(KC_EK270_AI_Settings.Ho_b333,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,16);
//Коэффициент плотности
mb_AI_init(KC_EK270_AI_Settings.dr335,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,17);
//Давление_1, Бар
mb_AI_init(KC_EK270_AI_Settings.p337,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,18);
//Температура,_1 °C
mb_AI_init(KC_EK270_AI_Settings.T339,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,1,0.0,0.0,0.0,19);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода mb_AI_Processing
//Давление, Бар
mb_AI_Processing(KC_EK270_AI_DRV.pb301,KC_EK270_AI_Settings.pb301,KC_EK270_AI_FromHMI.pb301,KC_EK270_AI_ToHMI.pb301);
//Температура, °C
mb_AI_Processing(KC_EK270_AI_DRV.Tb303,KC_EK270_AI_Settings.Tb303,KC_EK270_AI_FromHMI.Tb303,KC_EK270_AI_ToHMI.Tb303);
//Абсолютное давление, Бар
mb_AI_Processing(KC_EK270_AI_DRV.p_Abs305,KC_EK270_AI_Settings.p_Abs305,KC_EK270_AI_FromHMI.p_Abs305,KC_EK270_AI_ToHMI.p_Abs305);
//Измеренное давление, Бар
mb_AI_Processing(KC_EK270_AI_DRV.p_Mes307,KC_EK270_AI_Settings.p_Mes307,KC_EK270_AI_FromHMI.p_Mes307,KC_EK270_AI_ToHMI.p_Mes307);
//Измеренная температура, °C
mb_AI_Processing(KC_EK270_AI_DRV.T_Mes309,KC_EK270_AI_Settings.T_Mes309,KC_EK270_AI_FromHMI.T_Mes309,KC_EK270_AI_ToHMI.T_Mes309);
//Коэффициент коррекции, Бар
mb_AI_Processing(KC_EK270_AI_DRV.C311,KC_EK270_AI_Settings.C311,KC_EK270_AI_FromHMI.C311,KC_EK270_AI_ToHMI.C311);
//Коэффициент сжимаемости газа
mb_AI_Processing(KC_EK270_AI_DRV.K313,KC_EK270_AI_Settings.K313,KC_EK270_AI_FromHMI.K313,KC_EK270_AI_ToHMI.K313);
//Подстановочное значение давления, Бар
mb_AI_Processing(KC_EK270_AI_DRV.p_F315,KC_EK270_AI_Settings.p_F315,KC_EK270_AI_FromHMI.p_F315,KC_EK270_AI_ToHMI.p_F315);
//Подстановочное значение температуры, °C
mb_AI_Processing(KC_EK270_AI_DRV.T_F317,KC_EK270_AI_Settings.T_F317,KC_EK270_AI_FromHMI.T_F317,KC_EK270_AI_ToHMI.T_F317);
//Содержание азота, %
mb_AI_Processing(KC_EK270_AI_DRV.N2_319,KC_EK270_AI_Settings.N2_319,KC_EK270_AI_FromHMI.N2_319,KC_EK270_AI_ToHMI.N2_319);
//Содержание водорода, %
mb_AI_Processing(KC_EK270_AI_DRV.H2_321,KC_EK270_AI_Settings.H2_321,KC_EK270_AI_FromHMI.H2_321,KC_EK270_AI_ToHMI.H2_321);
//Содержание двуокиси углерода, %
mb_AI_Processing(KC_EK270_AI_DRV.CO2_323,KC_EK270_AI_Settings.CO2_323,KC_EK270_AI_FromHMI.CO2_323,KC_EK270_AI_ToHMI.CO2_323);
//Плотность газа при нормальных условиях, кг/м3
mb_AI_Processing(KC_EK270_AI_DRV.Rhob325,KC_EK270_AI_Settings.Rhob325,KC_EK270_AI_FromHMI.Rhob325,KC_EK270_AI_ToHMI.Rhob325);
//Рабочий расход газа, м3/ч
mb_AI_Processing(KC_EK270_AI_DRV.Q327,KC_EK270_AI_Settings.Q327,KC_EK270_AI_FromHMI.Q327,KC_EK270_AI_ToHMI.Q327);
//Стандартный расход газа, м3/ч
mb_AI_Processing(KC_EK270_AI_DRV.Qb329,KC_EK270_AI_Settings.Qb329,KC_EK270_AI_FromHMI.Qb329,KC_EK270_AI_ToHMI.Qb329);
//Мощность, kВт
mb_AI_Processing(KC_EK270_AI_DRV.P331,KC_EK270_AI_Settings.P331,KC_EK270_AI_FromHMI.P331,KC_EK270_AI_ToHMI.P331);
//Теплотворная способность, kВтч/м3
mb_AI_Processing(KC_EK270_AI_DRV.Ho_b333,KC_EK270_AI_Settings.Ho_b333,KC_EK270_AI_FromHMI.Ho_b333,KC_EK270_AI_ToHMI.Ho_b333);
//Коэффициент плотности
mb_AI_Processing(KC_EK270_AI_DRV.dr335,KC_EK270_AI_Settings.dr335,KC_EK270_AI_FromHMI.dr335,KC_EK270_AI_ToHMI.dr335);
//Давление_1, Бар
mb_AI_Processing(KC_EK270_AI_DRV.p337,KC_EK270_AI_Settings.p337,KC_EK270_AI_FromHMI.p337,KC_EK270_AI_ToHMI.p337);
//Температура,_1 °C
mb_AI_Processing(KC_EK270_AI_DRV.T339,KC_EK270_AI_Settings.T339,KC_EK270_AI_FromHMI.T339,KC_EK270_AI_ToHMI.T339);
//Конец сгенерированного кода
]]></ST>
                    </FunctionBlock>
                </Folder>
                <FunctionBlock UUID="H7ZPOOBYU7EE5MY2A7M2LHABHU" Name="EKG270" Comment="Вспомогательные вычисления ">
                    <Variables />
                    <ST><![CDATA[//Вычисления для корректора газа ЕК-270
//
//Рабочий объем VT_calc = VT101 + VT3*0.0001 нм3. Формат LREAL
KC_EKG270_mb.VT_calc := DINT_TO_LREAL(KC_EKG270_mb.VT101) + UINT_TO_LREAL(KC_EKG270_mb.VT3)*LREAL#0.0001; 

//Стандартный объем VbT_calc = VT103 + VT4*0.0001 нм3. Формат LREAL
KC_EKG270_mb.VbT_calc := DINT_TO_LREAL(KC_EKG270_mb.VbT103) + UINT_TO_LREAL(KC_EKG270_mb.VbT4)*LREAL#0.0001; 

//Энергия W_T_calc = W_T105 + W_T5*0.0001 нм3. Формат LREAL  
KC_EKG270_mb.W_T_calc := DINT_TO_LREAL(KC_EKG270_mb.W_T105) + UINT_TO_LREAL(KC_EKG270_mb.W_T5)*LREAL#0.0001; 

//Преобразуем полученные значения из BCD в человеческие: 2017, 1409, 1145
KC_EKG270_mb.Time813.r1 := WORD_BCD_TO_UINT(KC_EKG270_mb.Time813.arr_word[0]); //год
KC_EKG270_mb.Time813.r2 := WORD_BCD_TO_UINT(KC_EKG270_mb.Time813.arr_word[1]); //месяц-число
KC_EKG270_mb.Time813.r3 := WORD_BCD_TO_UINT(KC_EKG270_mb.Time813.arr_word[2]); //часы-минуты

//Вычисление рабочего объема:
KC_EKG270_mb.VT801.r1	:= WORD_BCD_TO_UINT(KC_EKG270_mb.VT801.arr_word[0]); //целая часть
KC_EKG270_mb.VT801.r2	:= WORD_BCD_TO_UINT(KC_EKG270_mb.VT801.arr_word[1]); //целая часть
KC_EKG270_mb.VT801.r3	:= WORD_BCD_TO_UINT(KC_EKG270_mb.VT801.arr_word[2]); //дробная часть
KC_EKG270_mb.VT801.r4	:= WORD_BCD_TO_UINT(KC_EKG270_mb.VT801.arr_word[3]); //дробная часть

//Вычисление стандартного объема:
KC_EKG270_mb.VbT805.r1 := WORD_BCD_TO_UINT(KC_EKG270_mb.VbT805.arr_word[0]); //целая часть
KC_EKG270_mb.VbT805.r2 := WORD_BCD_TO_UINT(KC_EKG270_mb.VbT805.arr_word[1]); //целая часть
KC_EKG270_mb.VbT805.r3 := WORD_BCD_TO_UINT(KC_EKG270_mb.VbT805.arr_word[2]); //дробная часть
KC_EKG270_mb.VbT805.r4 := WORD_BCD_TO_UINT(KC_EKG270_mb.VbT805.arr_word[3]); //дробная часть

//Энергия: 
KC_EKG270_mb.W_T809.r1 := WORD_BCD_TO_UINT(KC_EKG270_mb.W_T809.arr_word[0]); //целая часть
KC_EKG270_mb.W_T809.r2 := WORD_BCD_TO_UINT(KC_EKG270_mb.W_T809.arr_word[1]); //целая часть
KC_EKG270_mb.W_T809.r3 := WORD_BCD_TO_UINT(KC_EKG270_mb.W_T809.arr_word[2]); //дробная часть
KC_EKG270_mb.W_T809.r4 := WORD_BCD_TO_UINT(KC_EKG270_mb.W_T809.arr_word[3]); //дробная часть

//перессылка
KC_EK270_AI_DRV.pb301:=KC_EKG270_mb.pb301;
KC_EK270_AI_DRV.Tb303:=KC_EKG270_mb.Tb303;
KC_EK270_AI_DRV.p_Abs305:=KC_EKG270_mb.p_Abs305;
KC_EK270_AI_DRV.p_Mes307:=KC_EKG270_mb.p_Mes307;
KC_EK270_AI_DRV.T_Mes309:=KC_EKG270_mb.T_Mes309;
KC_EK270_AI_DRV.C311:=KC_EKG270_mb.C311;
KC_EK270_AI_DRV.K313:=KC_EKG270_mb.K313;
KC_EK270_AI_DRV.p_F315:=KC_EKG270_mb.p_F315;
KC_EK270_AI_DRV.T_F317:=KC_EKG270_mb.T_F317;
KC_EK270_AI_DRV.N2_319:=KC_EKG270_mb.N2_319;
KC_EK270_AI_DRV.H2_321:=KC_EKG270_mb.H2_321;
KC_EK270_AI_DRV.CO2_323:=KC_EKG270_mb.CO2_323;
KC_EK270_AI_DRV.Rhob325:=KC_EKG270_mb.Rhob325;
KC_EK270_AI_DRV.Q327:=KC_EKG270_mb.Q327;
KC_EK270_AI_DRV.Qb329:=KC_EKG270_mb.Qb329;
KC_EK270_AI_DRV.P331:=KC_EKG270_mb.P331;
KC_EK270_AI_DRV.Ho_b333:=KC_EKG270_mb.Ho_b333;
KC_EK270_AI_DRV.dr335:=KC_EKG270_mb.dr335;
KC_EK270_AI_DRV.p337:=KC_EKG270_mb.p337;
KC_EK270_AI_DRV.T339:=KC_EKG270_mb.T339;
]]></ST>
                </FunctionBlock>
            </Folder>
            <Folder Name="Котельная" Comment="" Data="" UUID="GY2LPFUTRJDE5P3DGIT34NTJ5A">
                <Folder Name="AI" Comment="" Data="" UUID="HY5SCA4Q2LPEHAM6CAK7KOWAME">
                    <Function UUID="DOAZT2CHIJ6ENNJNICW6WYNRWQ" Name="KC_KOT_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
KC_KOT_mb_AI_ToHMI.T_prym_set_v.manual := tmpPermit; //Температура прЯмой сет. воды;
KC_KOT_mb_AI_ToHMI.T_vozduh.manual := tmpPermit; //Температура воздуха на улице;
KC_KOT_mb_AI_ToHMI.T_vh_v_kotl.manual := tmpPermit; //Температура на входе в котлы;
KC_KOT_mb_AI_ToHMI.P_vpusk_kollector_SN.manual := tmpPermit; //Давление в впускном коллекторе СН;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="WZMLXY3PJYS65XZBB63U6T3JBE" Name="KC_KOT_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура прЯмой сет. воды
mb_AI_init(KC_KOT_mb_AI_Settings.T_prym_set_v,0.0,50.0,-1.5,51.5,-3.0,53.0,1,0.0,0.0,0.0,0);
//Температура воздуха на улице
mb_AI_init(KC_KOT_mb_AI_Settings.T_vozduh,0.0,30.0,-0.9,30.9,-1.8,31.8,1,0.0,0.0,0.0,1);
//Температура на входе в котлы
mb_AI_init(KC_KOT_mb_AI_Settings.T_vh_v_kotl,0.0,50.0,-1.5,51.5,-3.0,53.0,1,0.0,0.0,0.0,2);
//Давление в впускном коллекторе СН
mb_AI_init(KC_KOT_mb_AI_Settings.P_vpusk_kollector_SN,0.0,30.0,-0.9,30.9,-1.8,31.8,1,0.0,0.0,0.0,3);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура прЯмой сет. воды
mb_AI_Processing(KC_KOT_mb_AI_DRV.T_prym_set_v,KC_KOT_mb_AI_Settings.T_prym_set_v,KC_KOT_mb_AI_FromHMI.T_prym_set_v,KC_KOT_mb_AI_ToHMI.T_prym_set_v);
//Температура воздуха на улице
mb_AI_Processing(KC_KOT_mb_AI_DRV.T_vozduh,KC_KOT_mb_AI_Settings.T_vozduh,KC_KOT_mb_AI_FromHMI.T_vozduh,KC_KOT_mb_AI_ToHMI.T_vozduh);
//Температура на входе в котлы
mb_AI_Processing(KC_KOT_mb_AI_DRV.T_vh_v_kotl,KC_KOT_mb_AI_Settings.T_vh_v_kotl,KC_KOT_mb_AI_FromHMI.T_vh_v_kotl,KC_KOT_mb_AI_ToHMI.T_vh_v_kotl);
//Давление в впускном коллекторе СН
mb_AI_Processing(KC_KOT_mb_AI_DRV.P_vpusk_kollector_SN,KC_KOT_mb_AI_Settings.P_vpusk_kollector_SN,KC_KOT_mb_AI_FromHMI.P_vpusk_kollector_SN,KC_KOT_mb_AI_ToHMI.P_vpusk_kollector_SN);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                </Folder>
                <Folder Name="DI" Comment="" Data="" UUID="CAYJJ4W23TEEPOR6PYQE6GIR2M">
                    <Function UUID="GVMNTAMXILPKRLPIZOGQJ3GXSE" Name="KC_KOT_DI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода DI_Permit
KC_KOT_mb_DI_ToHMI.EKV_vh_NIV_max.manual := tmpPermit; //ЭКМ на выходе НИВ максимум (разр.включ. если нет);
KC_KOT_mb_DI_ToHMI.EKV_vh_NIV_min.manual := tmpPermit; //ЭКМ на выходе НИВ минимум (отключ. если не набрал);
KC_KOT_mb_DI_ToHMI.Regener_HVO.manual := tmpPermit; //Датчик регенерации ХВО;
KC_KOT_mb_DI_ToHMI.Rezhim_Kl_podpit_T2.manual := tmpPermit; //Режим работы клапана подпитки Т2;
KC_KOT_mb_DI_ToHMI.Rezhim_Kl_perepusk.manual := tmpPermit; //Режим работы клапана перепуска;
KC_KOT_mb_DI_ToHMI.Kotel1_ON.manual := tmpPermit; //Включен котел №1;
KC_KOT_mb_DI_ToHMI.Kotel2_ON.manual := tmpPermit; //Включен котел №2;
KC_KOT_mb_DI_ToHMI.Kl_BGK_ON.manual := tmpPermit; //Клапан БГК открыт;
KC_KOT_mb_DI_ToHMI.SN1_ON.manual := tmpPermit; //Сетевой насос №1 включен;
KC_KOT_mb_DI_ToHMI.SN2_ON.manual := tmpPermit; //Сетевой насос №2 включен;
KC_KOT_mb_DI_ToHMI.NR1_ON.manual := tmpPermit; //Насос рециркулЯции №1 включен;
KC_KOT_mb_DI_ToHMI.NR2_ON.manual := tmpPermit; //Насос рециркулЯции №2 включен;
KC_KOT_mb_DI_ToHMI.NIV_ON.manual := tmpPermit; //Насос НИВ включен;
KC_KOT_mb_DI_ToHMI.KL_T2_ON.manual := tmpPermit; //Клапан подпитки Т2 - Открыт;
KC_KOT_mb_DI_ToHMI.KL_BGK_OFF.manual := tmpPermit; //Отключение клапана БГК;
KC_KOT_mb_DI_ToHMI.zagaz_CO_20_1.manual := tmpPermit; //Загазованность СО 20 мГ/м3 1-й порог;
KC_KOT_mb_DI_ToHMI.AVR_SN_ON.manual := tmpPermit; //Работал АВР сетевых насосов;
KC_KOT_mb_DI_ToHMI.Reagent_Low.manual := tmpPermit; //ЗаканчиваетсЯ реагент в бачке;
KC_KOT_mb_DI_ToHMI.Fault_OPS.manual := tmpPermit; //Неисправность ОПС;
KC_KOT_mb_DI_ToHMI.P_obr_v_Low.manual := tmpPermit; //Давление обратной воды понижено;
KC_KOT_mb_DI_ToHMI.P_obr_v_Hi.manual := tmpPermit; //Давление обратной воды повышено;
KC_KOT_mb_DI_ToHMI.P_v_V1_Low.manual := tmpPermit; //Давление воды В1 понижено;
KC_KOT_mb_DI_ToHMI.NIV_P_Low.manual := tmpPermit; //Насос НИВ не набрал давлениЯ;
KC_KOT_mb_DI_ToHMI.rezerv_1.manual := tmpPermit; //Резерв;
KC_KOT_mb_DI_ToHMI.rezerv_2.manual := tmpPermit; //Резерв;
KC_KOT_mb_DI_ToHMI.rezerv_3.manual := tmpPermit; //Резерв;
KC_KOT_mb_DI_ToHMI.rezerv_4.manual := tmpPermit; //Резерв;
KC_KOT_mb_DI_ToHMI.rezerv_5.manual := tmpPermit; //Резерв;
KC_KOT_mb_DI_ToHMI.rezerv_6.manual := tmpPermit; //Резерв;
KC_KOT_mb_DI_ToHMI.rezerv_7.manual := tmpPermit; //Резерв;
KC_KOT_mb_DI_ToHMI.rezerv_8.manual := tmpPermit; //Резерв;
KC_KOT_mb_DI_ToHMI.zagaz_CH_10_NKPV.manual := tmpPermit; //Загазованность СН 10% НКПВ;
KC_KOT_mb_DI_ToHMI.zagaz_CO_100_2.manual := tmpPermit; //Загазованность СО 100 мГ/м3 2-й порог;
KC_KOT_mb_DI_ToHMI.P_obr_v_AvLow.manual := tmpPermit; //Давление обратной воды аварийно низкое;
KC_KOT_mb_DI_ToHMI.Pozhar.manual := tmpPermit; //Пожар в котельной;
KC_KOT_mb_DI_ToHMI.P_gaza_Fault.manual := tmpPermit; //Давление газа не в норме;
KC_KOT_mb_DI_ToHMI.P_obr_v_AvHi.manual := tmpPermit; //Давление обратной воды аварийно высокое;
KC_KOT_mb_DI_ToHMI.P_prym_sv_AvHi.manual := tmpPermit; //Давление прЯмой сетевой воды аварийно высокое;
KC_KOT_mb_DI_ToHMI.AVR_SN_Fault.manual := tmpPermit; //Не сработал АВР сетевых насосов;
KC_KOT_mb_DI_ToHMI.Avar_v_APV.manual := tmpPermit; //АвариЯ в системе АПВ;
KC_KOT_mb_DI_ToHMI.Avar_VRU.manual := tmpPermit; //АвариЯ ВРУ;
KC_KOT_mb_DI_ToHMI.Stop_Kotel1.manual := tmpPermit; //Аварийно остановилсЯ котел №1;
KC_KOT_mb_DI_ToHMI.Stop_Kotel2.manual := tmpPermit; //Аварийно остановилсЯ котел №2;
KC_KOT_mb_DI_ToHMI.rezerv_9.manual := tmpPermit; //Резерв;
KC_KOT_mb_DI_ToHMI.rezerv_10.manual := tmpPermit; //Резерв;
KC_KOT_mb_DI_ToHMI.rezerv_11.manual := tmpPermit; //Резерв;
KC_KOT_mb_DI_ToHMI.rezerv_12.manual := tmpPermit; //Резерв;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="A4UAPBTGIETIINQMTKLLPHCPHI" Name="KC_KOT_mb_DI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[//-------- Обработка дискретных входов полученных по сети --------------
//Начало сгенерированного кода DI_Processing
//ЭКМ на выходе НИВ максимум (разр.включ. если нет)
mb_DI_Processing(KC_KOT_mb_DI_DRV.EKV_vh_NIV_max,KC_KOT_mb_DI_FromHMI.EKV_vh_NIV_max,KC_KOT_mb_DI_ToHMI.EKV_vh_NIV_max,KC_KOT_mb_DI.EKV_vh_NIV_max);
//ЭКМ на выходе НИВ минимум (отключ. если не набрал)
mb_DI_Processing(KC_KOT_mb_DI_DRV.EKV_vh_NIV_min,KC_KOT_mb_DI_FromHMI.EKV_vh_NIV_min,KC_KOT_mb_DI_ToHMI.EKV_vh_NIV_min,KC_KOT_mb_DI.EKV_vh_NIV_min);
//Датчик регенерации ХВО
mb_DI_Processing(KC_KOT_mb_DI_DRV.Regener_HVO,KC_KOT_mb_DI_FromHMI.Regener_HVO,KC_KOT_mb_DI_ToHMI.Regener_HVO,KC_KOT_mb_DI.Regener_HVO);
//Режим работы клапана подпитки Т2
mb_DI_Processing(KC_KOT_mb_DI_DRV.Rezhim_Kl_podpit_T2,KC_KOT_mb_DI_FromHMI.Rezhim_Kl_podpit_T2,KC_KOT_mb_DI_ToHMI.Rezhim_Kl_podpit_T2,KC_KOT_mb_DI.Rezhim_Kl_podpit_T2);
//Режим работы клапана перепуска
mb_DI_Processing(KC_KOT_mb_DI_DRV.Rezhim_Kl_perepusk,KC_KOT_mb_DI_FromHMI.Rezhim_Kl_perepusk,KC_KOT_mb_DI_ToHMI.Rezhim_Kl_perepusk,KC_KOT_mb_DI.Rezhim_Kl_perepusk);
//Включен котел №1
mb_DI_Processing(KC_KOT_mb_DI_DRV.Kotel1_ON,KC_KOT_mb_DI_FromHMI.Kotel1_ON,KC_KOT_mb_DI_ToHMI.Kotel1_ON,KC_KOT_mb_DI.Kotel1_ON);
//Включен котел №2
mb_DI_Processing(KC_KOT_mb_DI_DRV.Kotel2_ON,KC_KOT_mb_DI_FromHMI.Kotel2_ON,KC_KOT_mb_DI_ToHMI.Kotel2_ON,KC_KOT_mb_DI.Kotel2_ON);
//Клапан БГК открыт
mb_DI_Processing(KC_KOT_mb_DI_DRV.Kl_BGK_ON,KC_KOT_mb_DI_FromHMI.Kl_BGK_ON,KC_KOT_mb_DI_ToHMI.Kl_BGK_ON,KC_KOT_mb_DI.Kl_BGK_ON);
//Сетевой насос №1 включен
mb_DI_Processing(KC_KOT_mb_DI_DRV.SN1_ON,KC_KOT_mb_DI_FromHMI.SN1_ON,KC_KOT_mb_DI_ToHMI.SN1_ON,KC_KOT_mb_DI.SN1_ON);
//Сетевой насос №2 включен
mb_DI_Processing(KC_KOT_mb_DI_DRV.SN2_ON,KC_KOT_mb_DI_FromHMI.SN2_ON,KC_KOT_mb_DI_ToHMI.SN2_ON,KC_KOT_mb_DI.SN2_ON);
//Насос рециркулЯции №1 включен
mb_DI_Processing(KC_KOT_mb_DI_DRV.NR1_ON,KC_KOT_mb_DI_FromHMI.NR1_ON,KC_KOT_mb_DI_ToHMI.NR1_ON,KC_KOT_mb_DI.NR1_ON);
//Насос рециркулЯции №2 включен
mb_DI_Processing(KC_KOT_mb_DI_DRV.NR2_ON,KC_KOT_mb_DI_FromHMI.NR2_ON,KC_KOT_mb_DI_ToHMI.NR2_ON,KC_KOT_mb_DI.NR2_ON);
//Насос НИВ включен
mb_DI_Processing(KC_KOT_mb_DI_DRV.NIV_ON,KC_KOT_mb_DI_FromHMI.NIV_ON,KC_KOT_mb_DI_ToHMI.NIV_ON,KC_KOT_mb_DI.NIV_ON);
//Клапан подпитки Т2 - Открыт
mb_DI_Processing(KC_KOT_mb_DI_DRV.KL_T2_ON,KC_KOT_mb_DI_FromHMI.KL_T2_ON,KC_KOT_mb_DI_ToHMI.KL_T2_ON,KC_KOT_mb_DI.KL_T2_ON);
//Отключение клапана БГК
mb_DI_Processing(KC_KOT_mb_DI_DRV.KL_BGK_OFF,KC_KOT_mb_DI_FromHMI.KL_BGK_OFF,KC_KOT_mb_DI_ToHMI.KL_BGK_OFF,KC_KOT_mb_DI.KL_BGK_OFF);
//Загазованность СО 20 мГ/м3 1-й порог
mb_DI_Processing(KC_KOT_mb_DI_DRV.zagaz_CO_20_1,KC_KOT_mb_DI_FromHMI.zagaz_CO_20_1,KC_KOT_mb_DI_ToHMI.zagaz_CO_20_1,KC_KOT_mb_DI.zagaz_CO_20_1);
//Работал АВР сетевых насосов
mb_DI_Processing(KC_KOT_mb_DI_DRV.AVR_SN_ON,KC_KOT_mb_DI_FromHMI.AVR_SN_ON,KC_KOT_mb_DI_ToHMI.AVR_SN_ON,KC_KOT_mb_DI.AVR_SN_ON);
//ЗаканчиваетсЯ реагент в бачке
mb_DI_Processing(KC_KOT_mb_DI_DRV.Reagent_Low,KC_KOT_mb_DI_FromHMI.Reagent_Low,KC_KOT_mb_DI_ToHMI.Reagent_Low,KC_KOT_mb_DI.Reagent_Low);
//Неисправность ОПС
mb_DI_Processing(KC_KOT_mb_DI_DRV.Fault_OPS,KC_KOT_mb_DI_FromHMI.Fault_OPS,KC_KOT_mb_DI_ToHMI.Fault_OPS,KC_KOT_mb_DI.Fault_OPS);
//Давление обратной воды понижено
mb_DI_Processing(KC_KOT_mb_DI_DRV.P_obr_v_Low,KC_KOT_mb_DI_FromHMI.P_obr_v_Low,KC_KOT_mb_DI_ToHMI.P_obr_v_Low,KC_KOT_mb_DI.P_obr_v_Low);
//Давление обратной воды повышено
mb_DI_Processing(KC_KOT_mb_DI_DRV.P_obr_v_Hi,KC_KOT_mb_DI_FromHMI.P_obr_v_Hi,KC_KOT_mb_DI_ToHMI.P_obr_v_Hi,KC_KOT_mb_DI.P_obr_v_Hi);
//Давление воды В1 понижено
mb_DI_Processing(KC_KOT_mb_DI_DRV.P_v_V1_Low,KC_KOT_mb_DI_FromHMI.P_v_V1_Low,KC_KOT_mb_DI_ToHMI.P_v_V1_Low,KC_KOT_mb_DI.P_v_V1_Low);
//Насос НИВ не набрал давлениЯ
mb_DI_Processing(KC_KOT_mb_DI_DRV.NIV_P_Low,KC_KOT_mb_DI_FromHMI.NIV_P_Low,KC_KOT_mb_DI_ToHMI.NIV_P_Low,KC_KOT_mb_DI.NIV_P_Low);
//Резерв
mb_DI_Processing(KC_KOT_mb_DI_DRV.rezerv_1,KC_KOT_mb_DI_FromHMI.rezerv_1,KC_KOT_mb_DI_ToHMI.rezerv_1,KC_KOT_mb_DI.rezerv_1);
//Резерв
mb_DI_Processing(KC_KOT_mb_DI_DRV.rezerv_2,KC_KOT_mb_DI_FromHMI.rezerv_2,KC_KOT_mb_DI_ToHMI.rezerv_2,KC_KOT_mb_DI.rezerv_2);
//Резерв
mb_DI_Processing(KC_KOT_mb_DI_DRV.rezerv_3,KC_KOT_mb_DI_FromHMI.rezerv_3,KC_KOT_mb_DI_ToHMI.rezerv_3,KC_KOT_mb_DI.rezerv_3);
//Резерв
mb_DI_Processing(KC_KOT_mb_DI_DRV.rezerv_4,KC_KOT_mb_DI_FromHMI.rezerv_4,KC_KOT_mb_DI_ToHMI.rezerv_4,KC_KOT_mb_DI.rezerv_4);
//Резерв
mb_DI_Processing(KC_KOT_mb_DI_DRV.rezerv_5,KC_KOT_mb_DI_FromHMI.rezerv_5,KC_KOT_mb_DI_ToHMI.rezerv_5,KC_KOT_mb_DI.rezerv_5);
//Резерв
mb_DI_Processing(KC_KOT_mb_DI_DRV.rezerv_6,KC_KOT_mb_DI_FromHMI.rezerv_6,KC_KOT_mb_DI_ToHMI.rezerv_6,KC_KOT_mb_DI.rezerv_6);
//Резерв
mb_DI_Processing(KC_KOT_mb_DI_DRV.rezerv_7,KC_KOT_mb_DI_FromHMI.rezerv_7,KC_KOT_mb_DI_ToHMI.rezerv_7,KC_KOT_mb_DI.rezerv_7);
//Резерв
mb_DI_Processing(KC_KOT_mb_DI_DRV.rezerv_8,KC_KOT_mb_DI_FromHMI.rezerv_8,KC_KOT_mb_DI_ToHMI.rezerv_8,KC_KOT_mb_DI.rezerv_8);
//Загазованность СН 10% НКПВ
mb_DI_Processing(KC_KOT_mb_DI_DRV.zagaz_CH_10_NKPV,KC_KOT_mb_DI_FromHMI.zagaz_CH_10_NKPV,KC_KOT_mb_DI_ToHMI.zagaz_CH_10_NKPV,KC_KOT_mb_DI.zagaz_CH_10_NKPV);
//Загазованность СО 100 мГ/м3 2-й порог
mb_DI_Processing(KC_KOT_mb_DI_DRV.zagaz_CO_100_2,KC_KOT_mb_DI_FromHMI.zagaz_CO_100_2,KC_KOT_mb_DI_ToHMI.zagaz_CO_100_2,KC_KOT_mb_DI.zagaz_CO_100_2);
//Давление обратной воды аварийно низкое
mb_DI_Processing(KC_KOT_mb_DI_DRV.P_obr_v_AvLow,KC_KOT_mb_DI_FromHMI.P_obr_v_AvLow,KC_KOT_mb_DI_ToHMI.P_obr_v_AvLow,KC_KOT_mb_DI.P_obr_v_AvLow);
//Пожар в котельной
mb_DI_Processing(KC_KOT_mb_DI_DRV.Pozhar,KC_KOT_mb_DI_FromHMI.Pozhar,KC_KOT_mb_DI_ToHMI.Pozhar,KC_KOT_mb_DI.Pozhar);
//Давление газа не в норме
mb_DI_Processing(KC_KOT_mb_DI_DRV.P_gaza_Fault,KC_KOT_mb_DI_FromHMI.P_gaza_Fault,KC_KOT_mb_DI_ToHMI.P_gaza_Fault,KC_KOT_mb_DI.P_gaza_Fault);
//Давление обратной воды аварийно высокое
mb_DI_Processing(KC_KOT_mb_DI_DRV.P_obr_v_AvHi,KC_KOT_mb_DI_FromHMI.P_obr_v_AvHi,KC_KOT_mb_DI_ToHMI.P_obr_v_AvHi,KC_KOT_mb_DI.P_obr_v_AvHi);
//Давление прЯмой сетевой воды аварийно высокое
mb_DI_Processing(KC_KOT_mb_DI_DRV.P_prym_sv_AvHi,KC_KOT_mb_DI_FromHMI.P_prym_sv_AvHi,KC_KOT_mb_DI_ToHMI.P_prym_sv_AvHi,KC_KOT_mb_DI.P_prym_sv_AvHi);
//Не сработал АВР сетевых насосов
mb_DI_Processing(KC_KOT_mb_DI_DRV.AVR_SN_Fault,KC_KOT_mb_DI_FromHMI.AVR_SN_Fault,KC_KOT_mb_DI_ToHMI.AVR_SN_Fault,KC_KOT_mb_DI.AVR_SN_Fault);
//АвариЯ в системе АПВ
mb_DI_Processing(KC_KOT_mb_DI_DRV.Avar_v_APV,KC_KOT_mb_DI_FromHMI.Avar_v_APV,KC_KOT_mb_DI_ToHMI.Avar_v_APV,KC_KOT_mb_DI.Avar_v_APV);
//АвариЯ ВРУ
mb_DI_Processing(KC_KOT_mb_DI_DRV.Avar_VRU,KC_KOT_mb_DI_FromHMI.Avar_VRU,KC_KOT_mb_DI_ToHMI.Avar_VRU,KC_KOT_mb_DI.Avar_VRU);
//Аварийно остановилсЯ котел №1
mb_DI_Processing(KC_KOT_mb_DI_DRV.Stop_Kotel1,KC_KOT_mb_DI_FromHMI.Stop_Kotel1,KC_KOT_mb_DI_ToHMI.Stop_Kotel1,KC_KOT_mb_DI.Stop_Kotel1);
//Аварийно остановилсЯ котел №2
mb_DI_Processing(KC_KOT_mb_DI_DRV.Stop_Kotel2,KC_KOT_mb_DI_FromHMI.Stop_Kotel2,KC_KOT_mb_DI_ToHMI.Stop_Kotel2,KC_KOT_mb_DI.Stop_Kotel2);
//Резерв
mb_DI_Processing(KC_KOT_mb_DI_DRV.rezerv_9,KC_KOT_mb_DI_FromHMI.rezerv_9,KC_KOT_mb_DI_ToHMI.rezerv_9,KC_KOT_mb_DI.rezerv_9);
//Резерв
mb_DI_Processing(KC_KOT_mb_DI_DRV.rezerv_10,KC_KOT_mb_DI_FromHMI.rezerv_10,KC_KOT_mb_DI_ToHMI.rezerv_10,KC_KOT_mb_DI.rezerv_10);
//Резерв
mb_DI_Processing(KC_KOT_mb_DI_DRV.rezerv_11,KC_KOT_mb_DI_FromHMI.rezerv_11,KC_KOT_mb_DI_ToHMI.rezerv_11,KC_KOT_mb_DI.rezerv_11);
//Резерв
mb_DI_Processing(KC_KOT_mb_DI_DRV.rezerv_12,KC_KOT_mb_DI_FromHMI.rezerv_12,KC_KOT_mb_DI_ToHMI.rezerv_12,KC_KOT_mb_DI.rezerv_12);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                </Folder>
            </Folder>
            <Folder Name="ЛИС5000" Comment="" Data="" UUID="5NRLM45FPSEU7O4B3ITYGBGVUM">
                <Folder Name="AI" Comment="" Data="" UUID="GEYTIBBC74VUZFJY5ITV7FEKXE">
                    <Function UUID="PA5ZZH2EJX2S2BL3QSIQYQENZQ" Name="KC_FromLIStoKC_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
KC_FromLIStoKC_mb_AI_ToHMI.Patm_UPOU.manual := tmpPermit; //УПОУ: Давление атм. Воздуха;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_AtmPress.manual := tmpPermit; //УЗРГ: Атмосферное давление SF11;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_GuagePress.manual := tmpPermit; //УЗРГ: Избыточное давление SF11;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_AbsPress.manual := tmpPermit; //УЗРГ: Абсолютное давление SF11;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_DiffPress.manual := tmpPermit; //УЗРГ: Дифференциальное давление SF11;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Temperature.manual := tmpPermit; //УЗРГ: Температура SF11;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_FlowRate.manual := tmpPermit; //УЗРГ: Приведенный  объемный расход SF11;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Power.manual := tmpPermit; //УЗРГ: Расход энергии SF11;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Volume.manual := tmpPermit; //УЗРГ: Приведенный объем с начала контактного часа SF11;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Energy.manual := tmpPermit; //УЗРГ: Энергия с начала контактного часа SF11;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Density.manual := tmpPermit; //УЗРГ: Плотность газа при стандартных условиях SF11;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Caloricity.manual := tmpPermit; //УЗРГ: Объемная теплота сгорания газа SF11;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Mol_N2.manual := tmpPermit; //УЗРГ: Молярная доля N2 SF11;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Mol_CO2.manual := tmpPermit; //УЗРГ: Молярная дола СО2 SF11  ;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_AtmPress.manual := tmpPermit; //УЗРГ: Атмосферное давление SF12;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_GuagePress.manual := tmpPermit; //УЗРГ: Избыточное давление SF12;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_AbsPress.manual := tmpPermit; //УЗРГ: Абсолютное давление SF12;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_DiffPress.manual := tmpPermit; //УЗРГ: Дифференциальное давление SF12;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Temperature.manual := tmpPermit; //УЗРГ: Температура SF12;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_FlowRate.manual := tmpPermit; //УЗРГ: Приведенный  объемный расход SF12;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Power.manual := tmpPermit; //УЗРГ: Расход энергии SF12;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Volume.manual := tmpPermit; //УЗРГ: Приведенный объем с начала контактного часа SF12;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Energy.manual := tmpPermit; //УЗРГ: Энергия с начала контактного часа SF12;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Density.manual := tmpPermit; //УЗРГ: Плотность газа при стандартных условиях SF12;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Caloricity.manual := tmpPermit; //УЗРГ: Объемная теплота сгорания газа SF12;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Mol_N2.manual := tmpPermit; //УЗРГ: Молярная доля N2 SF12;
KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Mol_CO2.manual := tmpPermit; //УЗРГ: Молярная дола СО2 SF12;
//Конец сгенерированного кода
//Начало сгенерированного кода AI_Alter
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="MQDAN6CVJVY6GCD2I6MUDLEQ2M" Name="KC_FromLIStoKC_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//УПОУ: Давление атм. Воздуха
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.Patm_UPOU,0.0,160.0,-4.8,164.8,-9.6,169.6,3,0.0,0.0,0.0,0);
//УЗРГ: Атмосферное давление SF11
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_1_AtmPress   ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,1);
//УЗРГ: Избыточное давление SF11
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_1_GuagePress ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,2);
//УЗРГ: Абсолютное давление SF11
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_1_AbsPress   ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,3);
//УЗРГ: Дифференциальное давление SF11
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_1_DiffPress  ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,4);
//УЗРГ: Температура SF11
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Temperature,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,5);
//УЗРГ: Приведенный  объемный расход SF11
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_1_FlowRate   ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,6);
//УЗРГ: Расход энергии SF11
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Power      ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,7);
//УЗРГ: Приведенный объем с начала контактного часа SF11
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Volume     ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,8);
//УЗРГ: Энергия с начала контактного часа SF11
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Energy     ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,9);
//УЗРГ: Плотность газа при стандартных условиях SF11
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Density    ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,10);
//УЗРГ: Объемная теплота сгорания газа SF11
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Caloricity ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,11);
//УЗРГ: Молярная доля N2 SF11
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Mol_N2     ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,12);
//УЗРГ: Молярная доля СО2 SF11  
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Mol_CO2    ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,13);
//УЗРГ: Атмосферное давление SF12
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_2_AtmPress   ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,14);
//УЗРГ: Избыточное давление SF12
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_2_GuagePress ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,15);
//УЗРГ: Абсолютное давление SF12
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_2_AbsPress   ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,16);
//УЗРГ: Дифференциальное давление SF12
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_2_DiffPress  ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,17);
//УЗРГ: Температура SF12
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Temperature,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,18);
//УЗРГ: Приведенный  объемный расход SF12
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_2_FlowRate   ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,19);
//УЗРГ: Расход энергии SF12
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Power      ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,20);
//УЗРГ: Приведенный объем с начала контактного часа SF12
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Volume     ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,21);
//УЗРГ: Энергия с начала контактного часа SF12
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Energy     ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,22);
//УЗРГ: Плотность газа при стандартных условиях SF12
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Density    ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,23);
//УЗРГ: Объемная теплота сгорания газа SF12
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Caloricity ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,24);
//УЗРГ: Молярная доля N2 SF12
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Mol_N2     ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,25);
//УЗРГ: Молярная доля СО2 SF12
mb_AI_init(KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Mol_CO2    ,-1000.0,1000.0,-1060.0,1060.0,-1120.0,1120.0,3,0.0,0.0,0.0,26);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//УПОУ: Давление атм. Воздуха
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.Patm_UPOU,KC_FromLIStoKC_mb_AI_Settings.Patm_UPOU,KC_FromLIStoKC_mb_AI_FromHMI.Patm_UPOU,KC_FromLIStoKC_mb_AI_ToHMI.Patm_UPOU);
//УЗРГ: Атмосферное давление SF11
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_1_AtmPress   ,KC_FromLIStoKC_mb_AI_Settings.SF_1_1_AtmPress   ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_1_AtmPress   ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_AtmPress   );
//УЗРГ: Избыточное давление SF11
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_1_GuagePress ,KC_FromLIStoKC_mb_AI_Settings.SF_1_1_GuagePress ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_1_GuagePress ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_GuagePress );
//УЗРГ: Абсолютное давление SF11
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_1_AbsPress   ,KC_FromLIStoKC_mb_AI_Settings.SF_1_1_AbsPress   ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_1_AbsPress   ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_AbsPress   );
//УЗРГ: Дифференциальное давление SF11
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_1_DiffPress  ,KC_FromLIStoKC_mb_AI_Settings.SF_1_1_DiffPress  ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_1_DiffPress  ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_DiffPress  );
//УЗРГ: Температура SF11
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_1_Temperature,KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Temperature,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_1_Temperature,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Temperature);
//УЗРГ: Приведенный  объемный расход SF11
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_1_FlowRate   ,KC_FromLIStoKC_mb_AI_Settings.SF_1_1_FlowRate   ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_1_FlowRate   ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_FlowRate   );
//УЗРГ: Расход энергии SF11
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_1_Power      ,KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Power      ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_1_Power      ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Power      );
//УЗРГ: Приведенный объем с начала контактного часа SF11
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_1_Volume     ,KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Volume     ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_1_Volume     ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Volume     );
//УЗРГ: Энергия с начала контактного часа SF11
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_1_Energy     ,KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Energy     ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_1_Energy     ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Energy     );
//УЗРГ: Плотность газа при стандартных условиях SF11
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_1_Density    ,KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Density    ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_1_Density    ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Density    );
//УЗРГ: Объемная теплота сгорания газа SF11
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_1_Caloricity ,KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Caloricity ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_1_Caloricity ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Caloricity );
//УЗРГ: Молярная доля N2 SF11
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_1_Mol_N2     ,KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Mol_N2     ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_1_Mol_N2     ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Mol_N2     );
//УЗРГ: Молярная доля СО2 SF11  
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_1_Mol_CO2    ,KC_FromLIStoKC_mb_AI_Settings.SF_1_1_Mol_CO2    ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_1_Mol_CO2    ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_1_Mol_CO2    );
//УЗРГ: Атмосферное давление SF12
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_2_AtmPress   ,KC_FromLIStoKC_mb_AI_Settings.SF_1_2_AtmPress   ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_2_AtmPress   ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_AtmPress   );
//УЗРГ: Избыточное давление SF12
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_2_GuagePress ,KC_FromLIStoKC_mb_AI_Settings.SF_1_2_GuagePress ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_2_GuagePress ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_GuagePress );
//УЗРГ: Абсолютное давление SF12
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_2_AbsPress   ,KC_FromLIStoKC_mb_AI_Settings.SF_1_2_AbsPress   ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_2_AbsPress   ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_AbsPress   );
//УЗРГ: Дифференциальное давление SF12
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_2_DiffPress  ,KC_FromLIStoKC_mb_AI_Settings.SF_1_2_DiffPress  ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_2_DiffPress  ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_DiffPress  );
//УЗРГ: Температура SF12
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_2_Temperature,KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Temperature,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_2_Temperature,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Temperature);
//УЗРГ: Приведенный  объемный расход SF12
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_2_FlowRate   ,KC_FromLIStoKC_mb_AI_Settings.SF_1_2_FlowRate   ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_2_FlowRate   ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_FlowRate   );
//УЗРГ: Расход энергии SF12
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_2_Power      ,KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Power      ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_2_Power      ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Power      );
//УЗРГ: Приведенный объем с начала контактного часа SF12
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_2_Volume     ,KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Volume     ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_2_Volume     ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Volume     );
//УЗРГ: Энергия с начала контактного часа SF12
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_2_Energy     ,KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Energy     ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_2_Energy     ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Energy     );
//УЗРГ: Плотность газа при стандартных условиях SF12
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_2_Density    ,KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Density    ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_2_Density    ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Density    );
//УЗРГ: Объемная теплота сгорания газа SF12
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_2_Caloricity ,KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Caloricity ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_2_Caloricity ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Caloricity );
//УЗРГ: Молярная доля N2 SF12
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_2_Mol_N2     ,KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Mol_N2     ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_2_Mol_N2     ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Mol_N2     );
//УЗРГ: Молярная доля СО2 SF12
mb_AI_Processing(KC_FromLIStoKC_mb_AI_DRV.SF_1_2_Mol_CO2    ,KC_FromLIStoKC_mb_AI_Settings.SF_1_2_Mol_CO2    ,KC_FromLIStoKC_mb_AI_FromHMI.SF_1_2_Mol_CO2    ,KC_FromLIStoKC_mb_AI_ToHMI.SF_1_2_Mol_CO2    );
//Конец сгенерированного кода
]]></ST>
                    </Function>
                </Folder>
                <Folder Name="AO" Comment="" Data="" UUID="XW3YNCEFCH4UVGCCMZVSFPW6GE">
                    <Function UUID="N7X72TBSJ4EQLLUX7KUARID3MQ" Name="KC_FromKCtoLIS_AO_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AO_Permit
KC_FromKCtoLIS_mb_AO_ToHMI.P_in_KC_UPTIG.forsPermit := tmpPermit; //КЦ: Давление для регулятора в УПТИГ;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="BBQXAHMZJTN5JTKRJGNMAHXJCI" Name="KC_FromKCtoLIS_mb_AO_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpInt" Type="INT" Usage="internal" />
                            <Variable UUID="F7ROL4LK5AJERJMGP6FYOKRNLY" Name="tmpReal" Type="REAL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
//										min - Нижний порог ан.выхода в физ.единицах
//										|	max - Верхний порог ан.выхода в физ.единицах
//										|	|	 dataType - Тип данных для модбаса
//										|	|	 | set1 - Настройка 1 (множитель или мин. ранжирования
//										|	|	 | | set2 - Настройка 2 (максимум ранжирования)
//										|	|	 | | | id - Номер по порядку
//AO_init(UPG_UPG_mb_AO_Settings.Res_0,0.0,100.0,2,0,0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AO_init
//КЦ: Давление для регулятора в УПТИГ
mb_AO_init(KC_FromKCtoLIS_mb_AO_Settings.P_in_KC_UPTIG,0.0,6.0,3,0.0,0.0,0);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AO_Processing
//КЦ: Давление для регулятора в УПТИГ
mb_AO_Processing(KC_FromKCtoLIS_mb_AO.P_in_KC_UPTIG,KC_FromKCtoLIS_mb_AO_Settings.P_in_KC_UPTIG,KC_FromKCtoLIS_mb_AO_FromHMI.P_in_KC_UPTIG,KC_FromKCtoLIS_mb_AO_ToHMI.P_in_KC_UPTIG,tmpReal,tmpInt);
KC_FromKCtoLIS_mb_AO_DRV.P_in_KC_UPTIG := tmpReal; //КЦ: Давление для регулятора в УПТИГ;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                </Folder>
                <Folder Name="DI" Comment="" Data="" UUID="A3HDGP32AVYUTL6MS5Y4X3GLDI">
                    <Function UUID="MLJHZGHAI4A5KGPOICV23G47OE" Name="KC_FromLIStoKC_DI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода DI_Permit
KC_FromLIStoKC_mb_DI_ToHMI.AO_UNTS.manual := tmpPermit; //УНТС: АО по команде оператора;
KC_FromLIStoKC_mb_DI_ToHMI.IN_UZRG.manual := tmpPermit; //УЗРГ: Режим "Закачка";
KC_FromLIStoKC_mb_DI_ToHMI.OUT_UZRG.manual := tmpPermit; //УЗРГ: Режим "Отбор";
KC_FromLIStoKC_mb_DI_ToHMI.AO_UZRG.manual := tmpPermit; //УЗРГ: АО по команде оператора;
KC_FromLIStoKC_mb_DI_ToHMI.temp_UPTIG.manual := tmpPermit; //УПТИГ: temp;
KC_FromLIStoKC_mb_DI_ToHMI.Zgz_UPTIG.manual := tmpPermit; //УПТИГ: Загазованность 20%;
KC_FromLIStoKC_mb_DI_ToHMI.Unlock_GSM.manual := tmpPermit; //ГСМ: Деблокировка;
KC_FromLIStoKC_mb_DI_ToHMI.Unlock_KOS.manual := tmpPermit; //КОС: Деблокировка;
KC_FromLIStoKC_mb_DI_ToHMI.Unlock_VOS.manual := tmpPermit; //ВОС: Деблокировка;
KC_FromLIStoKC_mb_DI_ToHMI.Unlock_NM.manual := tmpPermit; //НМ: Деблокировка;
KC_FromLIStoKC_mb_DI_ToHMI.Patm_brk_UPOU.manual := tmpPermit; //УПОУ: Неиспр.канала измерения Ратм;
KC_FromLIStoKC_mb_DI_ToHMI.IN.manual := tmpPermit; //УЗРГ: (0.0) Режим "Закачка";
KC_FromLIStoKC_mb_DI_ToHMI.OUT.manual := tmpPermit; //УЗРГ: (0.1) Режим "Отбор";
KC_FromLIStoKC_mb_DI_ToHMI.AO_UZRG_2.manual := tmpPermit; //УЗРГ: (0.2) АО по команде оператора;
KC_FromLIStoKC_mb_DI_ToHMI.L_PU1_hi.manual := tmpPermit; //УЗРГ: Верхн.уровень конденсата в пылеуловителе 1.1 п.25=3;
KC_FromLIStoKC_mb_DI_ToHMI.L_PU2_hi.manual := tmpPermit; //УЗРГ: Верхн.уровень конденсата в пылеуловителе 1.2 п.26=4;
KC_FromLIStoKC_mb_DI_ToHMI.L_PU3_hi.manual := tmpPermit; //УЗРГ: Верхн.уровень конденсата в пылеуловителе 1.3 п.27=5;
KC_FromLIStoKC_mb_DI_ToHMI.L_PU4_hi.manual := tmpPermit; //УЗРГ: Верхн.уровень конденсата в ёмкоскти сбора конднсата=6;
KC_FromLIStoKC_mb_DI_ToHMI.Lsig_PU4_hi_ok.manual := tmpPermit; //УЗРГ: Исправность сигнализатора п.28=7;
KC_FromLIStoKC_mb_DI_ToHMI.Kr1_ON.manual := tmpPermit; //УЗРГ: Кран №1 открыт=8;
KC_FromLIStoKC_mb_DI_ToHMI.Kr1_OF.manual := tmpPermit; //УЗРГ: Кран №1 закрыт=9;
KC_FromLIStoKC_mb_DI_ToHMI.Kr2_ON.manual := tmpPermit; //УЗРГ: Кран №2 открыт=10;
KC_FromLIStoKC_mb_DI_ToHMI.Kr2_OF.manual := tmpPermit; //УЗРГ: Кран №2 закрыт=11;
KC_FromLIStoKC_mb_DI_ToHMI.Kr3_ON.manual := tmpPermit; //УЗРГ: Кран №3 открыт=12;
KC_FromLIStoKC_mb_DI_ToHMI.Kr3_OF.manual := tmpPermit; //УЗРГ: Кран №3 закрыт13;
KC_FromLIStoKC_mb_DI_ToHMI.Kr4_1_ON.manual := tmpPermit; //УЗРГ: Кран №4.1 открыт=14;
KC_FromLIStoKC_mb_DI_ToHMI.Kr4_1_OF.manual := tmpPermit; //УЗРГ: Кран №4.1 закрыт=15;
KC_FromLIStoKC_mb_DI_ToHMI.Kr4_2_ON.manual := tmpPermit; //УЗРГ: Кран №4.2 открыт=0;
KC_FromLIStoKC_mb_DI_ToHMI.Kr4_2_OF.manual := tmpPermit; //УЗРГ: Кран №4.2 закрыт=1;
KC_FromLIStoKC_mb_DI_ToHMI.Kr4_3_ON.manual := tmpPermit; //УЗРГ: Кран №4.3 открыт=2;
KC_FromLIStoKC_mb_DI_ToHMI.Kr4_3_OF.manual := tmpPermit; //УЗРГ: Кран №4.3 закрыт=3;
KC_FromLIStoKC_mb_DI_ToHMI.Kr4_4_ON.manual := tmpPermit; //УЗРГ: Кран №4.4 открыт=4;
KC_FromLIStoKC_mb_DI_ToHMI.Kr4_4_OF.manual := tmpPermit; //УЗРГ: Кран №4.4 закрыт=5;
KC_FromLIStoKC_mb_DI_ToHMI.Kr4_5_ON.manual := tmpPermit; //УЗРГ: Кран №4.5 открыт=6;
KC_FromLIStoKC_mb_DI_ToHMI.Kr4_5_OF.manual := tmpPermit; //УЗРГ: Кран №4.5 закрыт=7;
KC_FromLIStoKC_mb_DI_ToHMI.Kr4_6_ON.manual := tmpPermit; //УЗРГ: Кран №4.6 открыт=8;
KC_FromLIStoKC_mb_DI_ToHMI.Kr4_6_OF.manual := tmpPermit; //УЗРГ: Кран №4.6 закрыт=9;
KC_FromLIStoKC_mb_DI_ToHMI.Kr5_1_ON.manual := tmpPermit; //УЗРГ: Кран №5.1 открыт=10;
KC_FromLIStoKC_mb_DI_ToHMI.Kr5_1_OF.manual := tmpPermit; //УЗРГ: Кран №5.1 закрыт=11;
KC_FromLIStoKC_mb_DI_ToHMI.Kr5_2_ON.manual := tmpPermit; //УЗРГ: Кран №5.2 открыт=12;
KC_FromLIStoKC_mb_DI_ToHMI.Kr5_2_OF.manual := tmpPermit; //УЗРГ: Кран №5.2 закрыт=13;
KC_FromLIStoKC_mb_DI_ToHMI.Kr7_1_ON.manual := tmpPermit; //УЗРГ: Кран №7.1открыт=14;
KC_FromLIStoKC_mb_DI_ToHMI.Kr7_1_OF.manual := tmpPermit; //УЗРГ: Кран №7.1 закрыт=15;
KC_FromLIStoKC_mb_DI_ToHMI.Kr7_2_ON.manual := tmpPermit; //УЗРГ: Кран №7.2 открыт=0;
KC_FromLIStoKC_mb_DI_ToHMI.Kr7_2_OF.manual := tmpPermit; //УЗРГ: Кран №7.2 закрыт=1;
KC_FromLIStoKC_mb_DI_ToHMI.Kr6_1_ON.manual := tmpPermit; //УЗРГ: Кран №6.1 открыт=2;
KC_FromLIStoKC_mb_DI_ToHMI.Kr6_1_OF.manual := tmpPermit; //УЗРГ: Кран №6.1 закрыт=3;
KC_FromLIStoKC_mb_DI_ToHMI.Kr6_2_ON.manual := tmpPermit; //УЗРГ: Кран №6.2 открыт=4;
KC_FromLIStoKC_mb_DI_ToHMI.Kr6_2_OF.manual := tmpPermit; //УЗРГ: Кран №6.2 закрыт=5;
KC_FromLIStoKC_mb_DI_ToHMI.Kr6_3_ON.manual := tmpPermit; //УЗРГ: Кран №6.3 открыт=6;
KC_FromLIStoKC_mb_DI_ToHMI.Kr6_3_OF.manual := tmpPermit; //УЗРГ: Кран №6.3 закрыт=7;
KC_FromLIStoKC_mb_DI_ToHMI.dP_Kr4_4.manual := tmpPermit; //УЗРГ: Перепад давлениЯ на кране №4.4=8;
KC_FromLIStoKC_mb_DI_ToHMI.dP_Kr4_5.manual := tmpPermit; //УЗРГ: Перепад давлениЯ на кране №4.5=9;
KC_FromLIStoKC_mb_DI_ToHMI.dP_Kr4_6.manual := tmpPermit; //УЗРГ: Перепад давлениЯ на кране №4.6=10;
KC_FromLIStoKC_mb_DI_ToHMI.dP_Kr3.manual := tmpPermit; //УЗРГ: Перепад давлениЯ на кране №3=11;
KC_FromLIStoKC_mb_DI_ToHMI.dP_Kr1.manual := tmpPermit; //УЗРГ: Перепад давлениЯ на кране №1=12   ;
KC_FromLIStoKC_mb_DI_ToHMI.Reserve1.manual := tmpPermit; //Резерв 1;
KC_FromLIStoKC_mb_DI_ToHMI.Reserve2.manual := tmpPermit; //Резерв 2;
KC_FromLIStoKC_mb_DI_ToHMI.Reserve3.manual := tmpPermit; //Резерв 3;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="SR3LDMLZINJJF6QK2GHOPO6SDY" Name="KC_FromLIStoKC_mb_DI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[//-------- Обработка дискретных входов полученных по сети --------------
//Начало сгенерированного кода DI_Processing
//УНТС: АО по команде оператора
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.AO_UNTS,KC_FromLIStoKC_mb_DI_FromHMI.AO_UNTS,KC_FromLIStoKC_mb_DI_ToHMI.AO_UNTS,KC_FromLIStoKC_mb_DI.AO_UNTS);
//УЗРГ: Режим "Закачка"
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.IN_UZRG,KC_FromLIStoKC_mb_DI_FromHMI.IN_UZRG,KC_FromLIStoKC_mb_DI_ToHMI.IN_UZRG,KC_FromLIStoKC_mb_DI.IN_UZRG);
//УЗРГ: Режим "Отбор"
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.OUT_UZRG,KC_FromLIStoKC_mb_DI_FromHMI.OUT_UZRG,KC_FromLIStoKC_mb_DI_ToHMI.OUT_UZRG,KC_FromLIStoKC_mb_DI.OUT_UZRG);
//УЗРГ: АО по команде оператора
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.AO_UZRG,KC_FromLIStoKC_mb_DI_FromHMI.AO_UZRG,KC_FromLIStoKC_mb_DI_ToHMI.AO_UZRG,KC_FromLIStoKC_mb_DI.AO_UZRG);
//УПТИГ: temp
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.temp_UPTIG,KC_FromLIStoKC_mb_DI_FromHMI.temp_UPTIG,KC_FromLIStoKC_mb_DI_ToHMI.temp_UPTIG,KC_FromLIStoKC_mb_DI.temp_UPTIG);
//УПТИГ: Загазованность 20%
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Zgz_UPTIG,KC_FromLIStoKC_mb_DI_FromHMI.Zgz_UPTIG,KC_FromLIStoKC_mb_DI_ToHMI.Zgz_UPTIG,KC_FromLIStoKC_mb_DI.Zgz_UPTIG);
//ГСМ: Деблокировка
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Unlock_GSM,KC_FromLIStoKC_mb_DI_FromHMI.Unlock_GSM,KC_FromLIStoKC_mb_DI_ToHMI.Unlock_GSM,KC_FromLIStoKC_mb_DI.Unlock_GSM);
//КОС: Деблокировка
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Unlock_KOS,KC_FromLIStoKC_mb_DI_FromHMI.Unlock_KOS,KC_FromLIStoKC_mb_DI_ToHMI.Unlock_KOS,KC_FromLIStoKC_mb_DI.Unlock_KOS);
//ВОС: Деблокировка
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Unlock_VOS,KC_FromLIStoKC_mb_DI_FromHMI.Unlock_VOS,KC_FromLIStoKC_mb_DI_ToHMI.Unlock_VOS,KC_FromLIStoKC_mb_DI.Unlock_VOS);
//НМ: Деблокировка
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Unlock_NM,KC_FromLIStoKC_mb_DI_FromHMI.Unlock_NM,KC_FromLIStoKC_mb_DI_ToHMI.Unlock_NM,KC_FromLIStoKC_mb_DI.Unlock_NM);
//УПОУ: Неиспр.канала измерения Ратм
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Patm_brk_UPOU,KC_FromLIStoKC_mb_DI_FromHMI.Patm_brk_UPOU,KC_FromLIStoKC_mb_DI_ToHMI.Patm_brk_UPOU,KC_FromLIStoKC_mb_DI.Patm_brk_UPOU);
//УЗРГ: (0.0) Режим "Закачка"
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.IN,KC_FromLIStoKC_mb_DI_FromHMI.IN,KC_FromLIStoKC_mb_DI_ToHMI.IN,KC_FromLIStoKC_mb_DI.IN);
//УЗРГ: (0.1) Режим "Отбор"
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.OUT,KC_FromLIStoKC_mb_DI_FromHMI.OUT,KC_FromLIStoKC_mb_DI_ToHMI.OUT,KC_FromLIStoKC_mb_DI.OUT);
//УЗРГ: (0.2) АО по команде оператора
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.AO_UZRG_2,KC_FromLIStoKC_mb_DI_FromHMI.AO_UZRG_2,KC_FromLIStoKC_mb_DI_ToHMI.AO_UZRG_2,KC_FromLIStoKC_mb_DI.AO_UZRG_2);
//УЗРГ: Верхн.уровень конденсата в пылеуловителе 1.1 п.25=3
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.L_PU1_hi,KC_FromLIStoKC_mb_DI_FromHMI.L_PU1_hi,KC_FromLIStoKC_mb_DI_ToHMI.L_PU1_hi,KC_FromLIStoKC_mb_DI.L_PU1_hi);
//УЗРГ: Верхн.уровень конденсата в пылеуловителе 1.2 п.26=4
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.L_PU2_hi,KC_FromLIStoKC_mb_DI_FromHMI.L_PU2_hi,KC_FromLIStoKC_mb_DI_ToHMI.L_PU2_hi,KC_FromLIStoKC_mb_DI.L_PU2_hi);
//УЗРГ: Верхн.уровень конденсата в пылеуловителе 1.3 п.27=5
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.L_PU3_hi,KC_FromLIStoKC_mb_DI_FromHMI.L_PU3_hi,KC_FromLIStoKC_mb_DI_ToHMI.L_PU3_hi,KC_FromLIStoKC_mb_DI.L_PU3_hi);
//УЗРГ: Верхн.уровень конденсата в ёмкоскти сбора конднсата=6
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.L_PU4_hi,KC_FromLIStoKC_mb_DI_FromHMI.L_PU4_hi,KC_FromLIStoKC_mb_DI_ToHMI.L_PU4_hi,KC_FromLIStoKC_mb_DI.L_PU4_hi);
//УЗРГ: Исправность сигнализатора п.28=7
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Lsig_PU4_hi_ok,KC_FromLIStoKC_mb_DI_FromHMI.Lsig_PU4_hi_ok,KC_FromLIStoKC_mb_DI_ToHMI.Lsig_PU4_hi_ok,KC_FromLIStoKC_mb_DI.Lsig_PU4_hi_ok);
//УЗРГ: Кран №1 открыт=8
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr1_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr1_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr1_ON,KC_FromLIStoKC_mb_DI.Kr1_ON);
//УЗРГ: Кран №1 закрыт=9
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr1_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr1_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr1_OF,KC_FromLIStoKC_mb_DI.Kr1_OF);
//УЗРГ: Кран №2 открыт=10
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr2_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr2_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr2_ON,KC_FromLIStoKC_mb_DI.Kr2_ON);
//УЗРГ: Кран №2 закрыт=11
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr2_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr2_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr2_OF,KC_FromLIStoKC_mb_DI.Kr2_OF);
//УЗРГ: Кран №3 открыт=12
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr3_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr3_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr3_ON,KC_FromLIStoKC_mb_DI.Kr3_ON);
//УЗРГ: Кран №3 закрыт13
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr3_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr3_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr3_OF,KC_FromLIStoKC_mb_DI.Kr3_OF);
//УЗРГ: Кран №4.1 открыт=14
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr4_1_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr4_1_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr4_1_ON,KC_FromLIStoKC_mb_DI.Kr4_1_ON);
//УЗРГ: Кран №4.1 закрыт=15
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr4_1_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr4_1_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr4_1_OF,KC_FromLIStoKC_mb_DI.Kr4_1_OF);
//УЗРГ: Кран №4.2 открыт=0
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr4_2_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr4_2_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr4_2_ON,KC_FromLIStoKC_mb_DI.Kr4_2_ON);
//УЗРГ: Кран №4.2 закрыт=1
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr4_2_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr4_2_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr4_2_OF,KC_FromLIStoKC_mb_DI.Kr4_2_OF);
//УЗРГ: Кран №4.3 открыт=2
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr4_3_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr4_3_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr4_3_ON,KC_FromLIStoKC_mb_DI.Kr4_3_ON);
//УЗРГ: Кран №4.3 закрыт=3
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr4_3_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr4_3_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr4_3_OF,KC_FromLIStoKC_mb_DI.Kr4_3_OF);
//УЗРГ: Кран №4.4 открыт=4
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr4_4_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr4_4_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr4_4_ON,KC_FromLIStoKC_mb_DI.Kr4_4_ON);
//УЗРГ: Кран №4.4 закрыт=5
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr4_4_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr4_4_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr4_4_OF,KC_FromLIStoKC_mb_DI.Kr4_4_OF);
//УЗРГ: Кран №4.5 открыт=6
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr4_5_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr4_5_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr4_5_ON,KC_FromLIStoKC_mb_DI.Kr4_5_ON);
//УЗРГ: Кран №4.5 закрыт=7
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr4_5_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr4_5_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr4_5_OF,KC_FromLIStoKC_mb_DI.Kr4_5_OF);
//УЗРГ: Кран №4.6 открыт=8
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr4_6_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr4_6_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr4_6_ON,KC_FromLIStoKC_mb_DI.Kr4_6_ON);
//УЗРГ: Кран №4.6 закрыт=9
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr4_6_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr4_6_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr4_6_OF,KC_FromLIStoKC_mb_DI.Kr4_6_OF);
//УЗРГ: Кран №5.1 открыт=10
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr5_1_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr5_1_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr5_1_ON,KC_FromLIStoKC_mb_DI.Kr5_1_ON);
//УЗРГ: Кран №5.1 закрыт=11
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr5_1_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr5_1_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr5_1_OF,KC_FromLIStoKC_mb_DI.Kr5_1_OF);
//УЗРГ: Кран №5.2 открыт=12
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr5_2_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr5_2_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr5_2_ON,KC_FromLIStoKC_mb_DI.Kr5_2_ON);
//УЗРГ: Кран №5.2 закрыт=13
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr5_2_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr5_2_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr5_2_OF,KC_FromLIStoKC_mb_DI.Kr5_2_OF);
//УЗРГ: Кран №7.1открыт=14
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr7_1_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr7_1_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr7_1_ON,KC_FromLIStoKC_mb_DI.Kr7_1_ON);
//УЗРГ: Кран №7.1 закрыт=15
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr7_1_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr7_1_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr7_1_OF,KC_FromLIStoKC_mb_DI.Kr7_1_OF);
//УЗРГ: Кран №7.2 открыт=0
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr7_2_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr7_2_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr7_2_ON,KC_FromLIStoKC_mb_DI.Kr7_2_ON);
//УЗРГ: Кран №7.2 закрыт=1
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr7_2_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr7_2_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr7_2_OF,KC_FromLIStoKC_mb_DI.Kr7_2_OF);
//УЗРГ: Кран №6.1 открыт=2
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr6_1_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr6_1_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr6_1_ON,KC_FromLIStoKC_mb_DI.Kr6_1_ON);
//УЗРГ: Кран №6.1 закрыт=3
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr6_1_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr6_1_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr6_1_OF,KC_FromLIStoKC_mb_DI.Kr6_1_OF);
//УЗРГ: Кран №6.2 открыт=4
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr6_2_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr6_2_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr6_2_ON,KC_FromLIStoKC_mb_DI.Kr6_2_ON);
//УЗРГ: Кран №6.2 закрыт=5
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr6_2_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr6_2_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr6_2_OF,KC_FromLIStoKC_mb_DI.Kr6_2_OF);
//УЗРГ: Кран №6.3 открыт=6
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr6_3_ON,KC_FromLIStoKC_mb_DI_FromHMI.Kr6_3_ON,KC_FromLIStoKC_mb_DI_ToHMI.Kr6_3_ON,KC_FromLIStoKC_mb_DI.Kr6_3_ON);
//УЗРГ: Кран №6.3 закрыт=7
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Kr6_3_OF,KC_FromLIStoKC_mb_DI_FromHMI.Kr6_3_OF,KC_FromLIStoKC_mb_DI_ToHMI.Kr6_3_OF,KC_FromLIStoKC_mb_DI.Kr6_3_OF);
//УЗРГ: Перепад давлениЯ на кране №4.4=8
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.dP_Kr4_4,KC_FromLIStoKC_mb_DI_FromHMI.dP_Kr4_4,KC_FromLIStoKC_mb_DI_ToHMI.dP_Kr4_4,KC_FromLIStoKC_mb_DI.dP_Kr4_4);
//УЗРГ: Перепад давлениЯ на кране №4.5=9
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.dP_Kr4_5,KC_FromLIStoKC_mb_DI_FromHMI.dP_Kr4_5,KC_FromLIStoKC_mb_DI_ToHMI.dP_Kr4_5,KC_FromLIStoKC_mb_DI.dP_Kr4_5);
//УЗРГ: Перепад давлениЯ на кране №4.6=10
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.dP_Kr4_6,KC_FromLIStoKC_mb_DI_FromHMI.dP_Kr4_6,KC_FromLIStoKC_mb_DI_ToHMI.dP_Kr4_6,KC_FromLIStoKC_mb_DI.dP_Kr4_6);
//УЗРГ: Перепад давлениЯ на кране №3=11
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.dP_Kr3,KC_FromLIStoKC_mb_DI_FromHMI.dP_Kr3,KC_FromLIStoKC_mb_DI_ToHMI.dP_Kr3,KC_FromLIStoKC_mb_DI.dP_Kr3);
//УЗРГ: Перепад давлениЯ на кране №1=12   
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.dP_Kr1,KC_FromLIStoKC_mb_DI_FromHMI.dP_Kr1,KC_FromLIStoKC_mb_DI_ToHMI.dP_Kr1,KC_FromLIStoKC_mb_DI.dP_Kr1);
//Резерв 1
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Reserve1,KC_FromLIStoKC_mb_DI_FromHMI.Reserve1,KC_FromLIStoKC_mb_DI_ToHMI.Reserve1,KC_FromLIStoKC_mb_DI.Reserve1);
//Резерв 2
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Reserve2,KC_FromLIStoKC_mb_DI_FromHMI.Reserve2,KC_FromLIStoKC_mb_DI_ToHMI.Reserve2,KC_FromLIStoKC_mb_DI.Reserve2);
//Резерв 3
mb_DI_Processing(KC_FromLIStoKC_mb_DI_DRV.Reserve3,KC_FromLIStoKC_mb_DI_FromHMI.Reserve3,KC_FromLIStoKC_mb_DI_ToHMI.Reserve3,KC_FromLIStoKC_mb_DI.Reserve3);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                </Folder>
                <Folder Name="DO" Comment="" Data="" UUID="LLR3D6VSBY6EDHMPX5HSTVHKJ4">
                    <Function UUID="FUYDFAEIJIUQH3FW4CRZDLPPHA" Name="KC_FromKCtoLIS_DO_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода DO_Permit
KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_UNTS.forsPermit := tmpPermit; //КЦ: Деблокировка в ЛИС УНТС;
KC_FromKCtoLIS_mb_DO_ToHMI.AOss_UNTS.forsPermit := tmpPermit; //КЦ: АОcc от ЛИС КЦ в ЛИС УНТС;
KC_FromKCtoLIS_mb_DO_ToHMI.AObs_UNTS.forsPermit := tmpPermit; //КЦ: АОбc от ЛИС КЦ в ЛИС УНТС;
KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_UZRG.forsPermit := tmpPermit; //КЦ: Деблокировка в ЛИС УЗРГ;
KC_FromKCtoLIS_mb_DO_ToHMI.AO_UZRG.forsPermit := tmpPermit; //КЦ: АО от ЛИС КЦ в ЛИС УЗРГ;
KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_UPTIG.forsPermit := tmpPermit; //КЦ: Деблокировка в ЛИС УПТИГ;
KC_FromKCtoLIS_mb_DO_ToHMI.AObs_UPTIG.forsPermit := tmpPermit; //КЦ: АОбс от ЛИС КЦ в ЛИС УПТИГ;
KC_FromKCtoLIS_mb_DO_ToHMI.AOss_UPTIG.forsPermit := tmpPermit; //КЦ: АОсс от ЛИС КЦ в ЛИС УПТИГ;
KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_GSM.forsPermit := tmpPermit; //КЦ: Деблокировка в ЛИС ГСМ;
KC_FromKCtoLIS_mb_DO_ToHMI.AO_GSM.forsPermit := tmpPermit; //КЦ: АО от ЛИС КЦ в ЛИС ГСМ;
KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_KOS.forsPermit := tmpPermit; //КЦ: Деблокировка в ЛИС КОС;
KC_FromKCtoLIS_mb_DO_ToHMI.AO_KOS.forsPermit := tmpPermit; //КЦ: АО от ЛИС КЦ в ЛИС КОС;
KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_VOS.forsPermit := tmpPermit; //КЦ: Деблокировка в ЛИС ВОС;
KC_FromKCtoLIS_mb_DO_ToHMI.AO_VOS.forsPermit := tmpPermit; //КЦ: АО от ЛИС КЦ в ЛИС ВОС;
KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_NM.forsPermit := tmpPermit; //КЦ: Деблокировка в ЛИС НМ;
KC_FromKCtoLIS_mb_DO_ToHMI.AO_NM.forsPermit := tmpPermit; //КЦ: АО от ЛИС КЦ в ЛИС НМ;
KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_UPOU.forsPermit := tmpPermit; //КЦ: Деблокировка в ЛИС УПОУ;
KC_FromKCtoLIS_mb_DO_ToHMI.AOss_UPOU.forsPermit := tmpPermit; //КЦ: АОсс от ЛИС КЦ в ЛИС УПОУ;
KC_FromKCtoLIS_mb_DO_ToHMI.AObs_UPOU.forsPermit := tmpPermit; //КЦ: АОбс от ЛИС КЦ в ЛИС УПОУ;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="DBPOWVBRI4O4ZGASTKV5C5FRNI" Name="KC_FromKCtoLIS_mb_DO_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[//----------- Обработка дискретных выходов ---------------
//Начало сгенерированного кода DO_Processing
//КЦ: Деблокировка в ЛИС УНТС
DO_Processing(KC_FromKCtoLIS_mb_DO.Unlock_UNTS,KC_FromKCtoLIS_mb_DO_FromHMI.Unlock_UNTS,KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_UNTS,KC_FromKCtoLIS_mb_DO_DRV.Unlock_UNTS);
//КЦ: АОcc от ЛИС КЦ в ЛИС УНТС
DO_Processing(KC_FromKCtoLIS_mb_DO.AOss_UNTS,KC_FromKCtoLIS_mb_DO_FromHMI.AOss_UNTS,KC_FromKCtoLIS_mb_DO_ToHMI.AOss_UNTS,KC_FromKCtoLIS_mb_DO_DRV.AOss_UNTS);
//КЦ: АОбc от ЛИС КЦ в ЛИС УНТС
DO_Processing(KC_FromKCtoLIS_mb_DO.AObs_UNTS,KC_FromKCtoLIS_mb_DO_FromHMI.AObs_UNTS,KC_FromKCtoLIS_mb_DO_ToHMI.AObs_UNTS,KC_FromKCtoLIS_mb_DO_DRV.AObs_UNTS);
//КЦ: Деблокировка в ЛИС УЗРГ
DO_Processing(KC_FromKCtoLIS_mb_DO.Unlock_UZRG,KC_FromKCtoLIS_mb_DO_FromHMI.Unlock_UZRG,KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_UZRG,KC_FromKCtoLIS_mb_DO_DRV.Unlock_UZRG);
//КЦ: АО от ЛИС КЦ в ЛИС УЗРГ
DO_Processing(KC_FromKCtoLIS_mb_DO.AO_UZRG,KC_FromKCtoLIS_mb_DO_FromHMI.AO_UZRG,KC_FromKCtoLIS_mb_DO_ToHMI.AO_UZRG,KC_FromKCtoLIS_mb_DO_DRV.AO_UZRG);
//КЦ: Деблокировка в ЛИС УПТИГ
DO_Processing(KC_FromKCtoLIS_mb_DO.Unlock_UPTIG,KC_FromKCtoLIS_mb_DO_FromHMI.Unlock_UPTIG,KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_UPTIG,KC_FromKCtoLIS_mb_DO_DRV.Unlock_UPTIG);
//КЦ: АОбс от ЛИС КЦ в ЛИС УПТИГ
DO_Processing(KC_FromKCtoLIS_mb_DO.AObs_UPTIG,KC_FromKCtoLIS_mb_DO_FromHMI.AObs_UPTIG,KC_FromKCtoLIS_mb_DO_ToHMI.AObs_UPTIG,KC_FromKCtoLIS_mb_DO_DRV.AObs_UPTIG);
//КЦ: АОсс от ЛИС КЦ в ЛИС УПТИГ
DO_Processing(KC_FromKCtoLIS_mb_DO.AOss_UPTIG,KC_FromKCtoLIS_mb_DO_FromHMI.AOss_UPTIG,KC_FromKCtoLIS_mb_DO_ToHMI.AOss_UPTIG,KC_FromKCtoLIS_mb_DO_DRV.AOss_UPTIG);
//КЦ: Деблокировка в ЛИС ГСМ
DO_Processing(KC_FromKCtoLIS_mb_DO.Unlock_GSM,KC_FromKCtoLIS_mb_DO_FromHMI.Unlock_GSM,KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_GSM,KC_FromKCtoLIS_mb_DO_DRV.Unlock_GSM);
//КЦ: АО от ЛИС КЦ в ЛИС ГСМ
DO_Processing(KC_FromKCtoLIS_mb_DO.AO_GSM,KC_FromKCtoLIS_mb_DO_FromHMI.AO_GSM,KC_FromKCtoLIS_mb_DO_ToHMI.AO_GSM,KC_FromKCtoLIS_mb_DO_DRV.AO_GSM);
//КЦ: Деблокировка в ЛИС КОС
DO_Processing(KC_FromKCtoLIS_mb_DO.Unlock_KOS,KC_FromKCtoLIS_mb_DO_FromHMI.Unlock_KOS,KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_KOS,KC_FromKCtoLIS_mb_DO_DRV.Unlock_KOS);
//КЦ: АО от ЛИС КЦ в ЛИС КОС
DO_Processing(KC_FromKCtoLIS_mb_DO.AO_KOS,KC_FromKCtoLIS_mb_DO_FromHMI.AO_KOS,KC_FromKCtoLIS_mb_DO_ToHMI.AO_KOS,KC_FromKCtoLIS_mb_DO_DRV.AO_KOS);
//КЦ: Деблокировка в ЛИС ВОС
DO_Processing(KC_FromKCtoLIS_mb_DO.Unlock_VOS,KC_FromKCtoLIS_mb_DO_FromHMI.Unlock_VOS,KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_VOS,KC_FromKCtoLIS_mb_DO_DRV.Unlock_VOS);
//КЦ: АО от ЛИС КЦ в ЛИС ВОС
DO_Processing(KC_FromKCtoLIS_mb_DO.AO_VOS,KC_FromKCtoLIS_mb_DO_FromHMI.AO_VOS,KC_FromKCtoLIS_mb_DO_ToHMI.AO_VOS,KC_FromKCtoLIS_mb_DO_DRV.AO_VOS);
//КЦ: Деблокировка в ЛИС НМ
DO_Processing(KC_FromKCtoLIS_mb_DO.Unlock_NM,KC_FromKCtoLIS_mb_DO_FromHMI.Unlock_NM,KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_NM,KC_FromKCtoLIS_mb_DO_DRV.Unlock_NM);
//КЦ: АО от ЛИС КЦ в ЛИС НМ
DO_Processing(KC_FromKCtoLIS_mb_DO.AO_NM,KC_FromKCtoLIS_mb_DO_FromHMI.AO_NM,KC_FromKCtoLIS_mb_DO_ToHMI.AO_NM,KC_FromKCtoLIS_mb_DO_DRV.AO_NM);
//КЦ: Деблокировка в ЛИС УПОУ
DO_Processing(KC_FromKCtoLIS_mb_DO.Unlock_UPOU,KC_FromKCtoLIS_mb_DO_FromHMI.Unlock_UPOU,KC_FromKCtoLIS_mb_DO_ToHMI.Unlock_UPOU,KC_FromKCtoLIS_mb_DO_DRV.Unlock_UPOU);
//КЦ: АОсс от ЛИС КЦ в ЛИС УПОУ
DO_Processing(KC_FromKCtoLIS_mb_DO.AOss_UPOU,KC_FromKCtoLIS_mb_DO_FromHMI.AOss_UPOU,KC_FromKCtoLIS_mb_DO_ToHMI.AOss_UPOU,KC_FromKCtoLIS_mb_DO_DRV.AOss_UPOU);
//КЦ: АОбс от ЛИС КЦ в ЛИС УПОУ
DO_Processing(KC_FromKCtoLIS_mb_DO.AObs_UPOU,KC_FromKCtoLIS_mb_DO_FromHMI.AObs_UPOU,KC_FromKCtoLIS_mb_DO_ToHMI.AObs_UPOU,KC_FromKCtoLIS_mb_DO_DRV.AObs_UPOU);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                </Folder>
                <FunctionBlock UUID="KMIMX22WMQCUFHKY3MFFG256AU" Name="FB_DLink_LIS5000">
                    <Variables>
                        <Variable UUID="Z6XNWOUTEOME5J7D26KIVDZG3E" Name="tmr_UPTIG_Link" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                        <Variable UUID="UFP76CD54YNEHAGUA4VRQKVUUE" Name="tmr_UZRG_Link" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                        <Variable UUID="5PIPCL7OL4ZELM5BOXCORUUYYM" Name="tmr_UNTS_Link" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                        <Variable UUID="NNQHRLDOOMDE3A3IPB2YDI7MBY" Name="tmr_UPOU_Link" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                        <Variable UUID="MLFP7DDJU6QU7KCK5DKK2L5SKE" Name="tmr_NM_Link" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                        <Variable UUID="HV3YMAGXWHOETHOW5G2P2PWNNI" Name="tmr_GSM_Link" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                        <Variable UUID="DMHWSQBOWZIE3HBTO7S5Z7DHIE" Name="tmr_KOS_Link" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                        <Variable UUID="G7DXBHBAKHCEBGBYQOLZ7RE6RY" Name="tmr_VOS_Link" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                        <Variable UUID="AYEVOB7FBLMEJP7R7VH7RNNM5I" Name="Pulse" Type="FB_Pulse" TypeUUID="LCERBCVHMURELEDEHKKNKLUZNQ" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[//================================================================================================
//================================================================================================
//========================== Диагностика связи с ЛИС 5000 ========================================
//================================================================================================

//= Диагностика связи с ЛИС УПТИГ
//algKC.UPTIG_CntrlSumm1 := 		;	//= текущее значение контрольного параметра, полученного из драйвера
tmr_UPTIG_Link(IN := algKC.UPTIG_CntrlSumm1 = algKC.UPTIG_CntrlSumm2, PT := T#1s); //= взводим таймер, если контрольный параметр не изменился
algKC.UPTIG_NoLink := tmr_UPTIG_Link.Q;	//= Нет связи с ЛИС УПТИГ
algKC.UPTIG_CntrlSumm2 := algKC.UPTIG_CntrlSumm1; //= запоминаем значение текущего контрольного параметра

Pulse(not algKC.UPTIG_NoLink, T#1s, KC_SS.UPTIG_HeartBit); //= диагностический меандр выдаётся, если предыдущее и текущее значения контрольного параметра различаются
//= или так
UPTIG_AbStatus.NoLink_CPU := algKC.UPTIG_NoLink;
//================================================================================================
//= Диагностика связи с ЛИС УЗРГ
//algKC.UZRG_CntrlSumm1 := 		;	//= текущее значение контрольного параметра, полученного из драйвера
tmr_UZRG_Link(IN := algKC.UZRG_CntrlSumm1 = algKC.UZRG_CntrlSumm2, PT := T#1s); //= взводим таймер, если контрольный параметр не изменился
algKC.UZRG_NoLink := tmr_UZRG_Link.Q;	//= Нет связи с ЛИС УЗРГ
algKC.UZRG_CntrlSumm2 := algKC.UZRG_CntrlSumm1; //= запоминаем значение текущего контрольного параметра

Pulse(not algKC.UZRG_NoLink, T#1s, KC_SS.UZRG_HeartBit); //= диагностический меандр выдаётся, если предыдущее и текущее значения контрольного параметра различаются
//= или так
UZRG_AbStatus.NoLink_CPU := algKC.UZRG_NoLink;
//================================================================================================
//= Диагностика связи с ЛИС УНТС
//algKC.UNTS_CntrlSumm1 := 		;	//= текущее значение контрольного параметра, полученного из драйвера
tmr_UNTS_Link(IN := algKC.UNTS_CntrlSumm1 = algKC.UNTS_CntrlSumm2, PT := T#1s); //= взводим таймер, если контрольный параметр не изменился
algKC.UNTS_NoLink := tmr_UNTS_Link.Q;	//= Нет связи с ЛИС УНТС
algKC.UNTS_CntrlSumm2 := algKC.UNTS_CntrlSumm1; //= запоминаем значение текущего контрольного параметра

Pulse(not algKC.UNTS_NoLink, T#1s, KC_SS.UNTS_HeartBit); //= диагностический меандр выдаётся, если предыдущее и текущее значения контрольного параметра различаются
//= или так
UNTS_AbStatus.NoLink_CPU := algKC.UNTS_NoLink;
//================================================================================================
//= Диагностика связи с ЛИС УПОУ
//algKC.UPOU_CntrlSumm1 := 		;	//= текущее значение контрольного параметра, полученного из драйвера
tmr_UPOU_Link(IN := algKC.UPOU_CntrlSumm1 = algKC.UPOU_CntrlSumm2, PT := T#1s); //= взводим таймер, если контрольный параметр не изменился
algKC.UPOU_NoLink := tmr_UPOU_Link.Q;	//= Нет связи с ЛИС УПОУ
algKC.UPOU_CntrlSumm2 := algKC.UPOU_CntrlSumm1; //= запоминаем значение текущего контрольного параметра

Pulse(not algKC.UPOU_NoLink, T#1s, KC_SS.UPOU_HeartBit); //= диагностический меандр выдаётся, если предыдущее и текущее значения контрольного параметра различаются
//= или так
UPOU_AbStatus.NoLink_CPU := algKC.UPOU_NoLink;
//================================================================================================
//= Диагностика связи с ЛИС НМ
//algKC.NM_CntrlSumm1 := 		;	//= текущее значение контрольного параметра, полученного из драйвера
tmr_NM_Link(IN := algKC.NM_CntrlSumm1 = algKC.NM_CntrlSumm2, PT := T#1s); //= взводим таймер, если контрольный параметр не изменился
algKC.NM_NoLink := tmr_NM_Link.Q;	//= Нет связи с ЛИС НМ
algKC.NM_CntrlSumm2 := algKC.NM_CntrlSumm1; //= запоминаем значение текущего контрольного параметра

Pulse(not algKC.NM_NoLink, T#1s, KC_SS.NM_HeartBit); //= диагностический меандр выдаётся, если предыдущее и текущее значения контрольного параметра различаются
//= или так
NM_AbStatus.NoLink_CPU := algKC.NM_NoLink;
//================================================================================================
//= Диагностика связи с ЛИС ГСМ
//algKC.GSM_CntrlSumm1 := 		;	//= текущее значение контрольного параметра, полученного из драйвера
tmr_GSM_Link(IN := algKC.GSM_CntrlSumm1 = algKC.GSM_CntrlSumm2, PT := T#1s); //= взводим таймер, если контрольный параметр не изменился
algKC.GSM_NoLink := tmr_GSM_Link.Q;	//= Нет связи с ЛИС ГСМ
algKC.GSM_CntrlSumm2 := algKC.GSM_CntrlSumm1; //= запоминаем значение текущего контрольного параметра

Pulse(not algKC.GSM_NoLink, T#1s, KC_SS.GSM_HeartBit); //= диагностический меандр выдаётся, если предыдущее и текущее значения контрольного параметра различаются
//= или так
GSM_AbStatus.NoLink_CPU := algKC.GSM_NoLink;
//================================================================================================
//= Диагностика связи с ЛИС КОС
//algKC.KOS_CntrlSumm1 := 		;	//= текущее значение контрольного параметра, полученного из драйвера
tmr_KOS_Link(IN := algKC.KOS_CntrlSumm1 = algKC.KOS_CntrlSumm2, PT := T#1s); //= взводим таймер, если контрольный параметр не изменился
algKC.KOS_NoLink := tmr_KOS_Link.Q;	//= Нет связи с ЛИС КОС
algKC.KOS_CntrlSumm2 := algKC.KOS_CntrlSumm1; //= запоминаем значение текущего контрольного параметра

Pulse(not algKC.KOS_NoLink, T#1s, KC_SS.KOS_HeartBit); //= диагностический меандр выдаётся, если предыдущее и текущее значения контрольного параметра различаются
//= или так
KOS_AbStatus.NoLink_CPU := algKC.KOS_NoLink;
//================================================================================================
//= Диагностика связи с ЛИС ВОС
//algKC.VOS_CntrlSumm1 := 		;	//= текущее значение контрольного параметра, полученного из драйвера
tmr_VOS_Link(IN := algKC.VOS_CntrlSumm1 = algKC.VOS_CntrlSumm2, PT := T#1s); //= взводим таймер, если контрольный параметр не изменился
algKC.VOS_NoLink := tmr_VOS_Link.Q;	//= Нет связи с ЛИС ВОС
algKC.VOS_CntrlSumm2 := algKC.VOS_CntrlSumm1; //= запоминаем значение текущего контрольного параметра

Pulse(not algKC.VOS_NoLink, T#1s, KC_SS.VOS_HeartBit); //= диагностический меандр выдаётся, если предыдущее и текущее значения контрольного параметра различаются
//= или так
VOS_AbStatus.NoLink_CPU := algKC.VOS_NoLink;
//================================================================================================]]></ST>
                </FunctionBlock>
                <FunctionBlock UUID="QCMBFFWNKMXUREEXPMIV3X6L6A" Name="FB_mb_IM_UZRG">
                    <Variables />
                    <ST><![CDATA[//=====================================================================================================================================//
//===========================	ОБРАБОТКА СИГНАЛОВ ИМов	===============================================================================//
//===========================	ПЕРЕДАВАЕМЫХ по MODBUS	===============================================================================//
//=====================================================================================================================================//

//УЗРГ: Кран №1
UZRG_AM.Kr1.ON	:= KC_FromLIStoKC_mb_DI.Kr1_ON;//= открыт
UZRG_AM.Kr1.OFF	:= KC_FromLIStoKC_mb_DI.Kr1_OF;//= закрыт
UZRG_AM.Kr1.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr1_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr1_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr1.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr1.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr1.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr1.rOff;//= "Закрыть" в ДУ
*)
//=========================================================
//УЗРГ: Кран №2
UZRG_AM.Kr2.ON	:= KC_FromLIStoKC_mb_DI.Kr2_ON;//= открыт
UZRG_AM.Kr2.OFF	:= KC_FromLIStoKC_mb_DI.Kr2_OF;//= закрыт
UZRG_AM.Kr2.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr2_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr2_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr2.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr2.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr2.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr2.rOff;//= "Закрыть" в ДУ
*)
//=========================================================
//УЗРГ: Кран №3
UZRG_AM.Kr3.ON	:= KC_FromLIStoKC_mb_DI.Kr3_ON;//= открыт
UZRG_AM.Kr3.OFF	:= KC_FromLIStoKC_mb_DI.Kr3_OF;//= закрыт
UZRG_AM.Kr3.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr3_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr3_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr3.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr3.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr3.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr3.rOff;//= "Закрыть" в ДУ
*)
//=========================================================
//УЗРГ: Кран №4.1 
UZRG_AM.Kr4_1.ON	:= KC_FromLIStoKC_mb_DI.Kr4_1_ON;//= открыт
UZRG_AM.Kr4_1.OFF	:= KC_FromLIStoKC_mb_DI.Kr4_1_OF;//= закрыт
UZRG_AM.Kr4_1.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr4_1_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr4_1_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr4_1.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr4_1.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr4_1.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr4_1.rOff;//= "Закрыть" в ДУ
*)
//=========================================================
//УЗРГ: Кран №4.2 
UZRG_AM.Kr4_2.ON	:= KC_FromLIStoKC_mb_DI.Kr4_2_ON;//= открыт
UZRG_AM.Kr4_2.OFF	:= KC_FromLIStoKC_mb_DI.Kr4_2_OF;//= закрыт
UZRG_AM.Kr4_2.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr4_2_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr4_2_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr4_2.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr4_2.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr4_2.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr4_2.rOff;//= "Закрыть" в ДУ
*)
//=========================================================
//УЗРГ: Кран №4.3 
UZRG_AM.Kr4_3.ON	:= KC_FromLIStoKC_mb_DI.Kr4_3_ON;//= открыт
UZRG_AM.Kr4_3.OFF	:= KC_FromLIStoKC_mb_DI.Kr4_3_OF;//= закрыт
UZRG_AM.Kr4_3.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr4_3_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr4_3_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr4_3.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr4_3.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr4_3.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr4_3.rOff;//= "Закрыть" в ДУ
*)
//=========================================================
//УЗРГ: Кран №4.4
UZRG_AM.Kr4_4.ON	:= KC_FromLIStoKC_mb_DI.Kr4_4_ON;//= открыт
UZRG_AM.Kr4_4.OFF	:= KC_FromLIStoKC_mb_DI.Kr4_4_OF;//= закрыт
UZRG_AM.Kr4_4.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr4_4_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr4_4_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr4_4.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr4_4.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr4_4.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr4_4.rOff;//= "Закрыть" в ДУ
*)
//=========================================================
//УЗРГ: Кран №4.5
UZRG_AM.Kr4_5.ON	:= KC_FromLIStoKC_mb_DI.Kr4_5_ON;//= открыт
UZRG_AM.Kr4_5.OFF	:= KC_FromLIStoKC_mb_DI.Kr4_5_OF;//= закрыт
UZRG_AM.Kr4_5.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr4_5_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr4_5_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr4_5.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr4_5.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr4_5.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr4_5.rOff;//= "Закрыть" в ДУ
*)
//=========================================================
//УЗРГ: Кран №4.6
UZRG_AM.Kr4_6.ON	:= KC_FromLIStoKC_mb_DI.Kr4_6_ON;//= открыт
UZRG_AM.Kr4_6.OFF	:= KC_FromLIStoKC_mb_DI.Kr4_6_OF;//= закрыт
UZRG_AM.Kr4_6.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr4_6_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr4_6_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr4_6.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr4_6.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr4_6.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr4_6.rOff;//= "Закрыть" в ДУ
*)
//=========================================================
//УЗРГ: Кран №5.1
UZRG_AM.Kr5_1.ON	:= KC_FromLIStoKC_mb_DI.Kr5_1_ON;//= открыт
UZRG_AM.Kr5_1.OFF	:= KC_FromLIStoKC_mb_DI.Kr5_1_OF;//= закрыт
UZRG_AM.Kr5_1.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr5_1_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr5_1_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr5_1.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr5_1.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr5_1.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr5_1.rOff;//= "Закрыть" в ДУ
*)
//=========================================================
//УЗРГ: Кран №5.2
UZRG_AM.Kr5_2.ON	:= KC_FromLIStoKC_mb_DI.Kr5_2_ON;//= открыт
UZRG_AM.Kr5_2.OFF	:= KC_FromLIStoKC_mb_DI.Kr5_2_OF;//= закрыт
UZRG_AM.Kr5_2.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr5_2_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr5_2_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr5_2.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr5_2.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr5_2.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr5_2.rOff;//= "Закрыть" в ДУ
*)
//=========================================================
//УЗРГ: Кран №7.1
UZRG_AM.Kr7_1.ON	:= KC_FromLIStoKC_mb_DI.Kr7_1_ON;//= открыт
UZRG_AM.Kr7_1.OFF	:= KC_FromLIStoKC_mb_DI.Kr7_1_OF;//= закрыт
UZRG_AM.Kr7_1.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr7_1_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr7_1_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr7_1.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr7_1.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr7_1.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr7_1.rOff;//= "Закрыть" в ДУ
*)
//=========================================================
//УЗРГ: Кран №7.2
UZRG_AM.Kr7_2.ON	:= KC_FromLIStoKC_mb_DI.Kr7_2_ON;//= открыт
UZRG_AM.Kr7_2.OFF	:= KC_FromLIStoKC_mb_DI.Kr7_2_OF;//= закрыт
UZRG_AM.Kr7_2.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr7_2_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr7_2_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr7_2.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr7_2.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr7_2.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr7_2.rOff;//= "Закрыть" в ДУ
*)
//=========================================================
//УЗРГ: Кран №6.1
UZRG_AM.Kr6_1.ON	:= KC_FromLIStoKC_mb_DI.Kr6_1_ON;//= открыт
UZRG_AM.Kr6_1.OFF	:= KC_FromLIStoKC_mb_DI.Kr6_1_OF;//= закрыт
UZRG_AM.Kr6_1.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr6_1_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr6_1_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr1.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr6_1.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr6_1.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr6_1.rOff;//= "Закрыть" в ДУ
*)
//=========================================================
//УЗРГ: Кран №6.2
UZRG_AM.Kr6_2.ON	:= KC_FromLIStoKC_mb_DI.Kr6_2_ON;//= открыт
UZRG_AM.Kr6_2.OFF	:= KC_FromLIStoKC_mb_DI.Kr6_2_OF;//= закрыт
UZRG_AM.Kr6_2.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr6_2_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr6_2_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr6_2.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr6_2.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr6_2.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr6_2.rOff;//= "Закрыть" в ДУ
*)
//=========================================================
//УЗРГ: Кран №6.3
UZRG_AM.Kr6_3.ON	:= KC_FromLIStoKC_mb_DI.Kr6_3_ON;//= открыт
UZRG_AM.Kr6_3.OFF	:= KC_FromLIStoKC_mb_DI.Kr6_3_OF;//= закрыт
UZRG_AM.Kr6_3.general	:= KC_FromLIStoKC_mb_DI_ToHMI.Kr6_3_ON.fault_common or KC_FromLIStoKC_mb_DI_ToHMI.Kr6_3_OF.fault_common;//= обобщённая ошибка
(*
UZRG_AM.Kr6_3.ONOF	:= ;//= неисправность концевиков
:= UZRG_AM.Kr6_3.DA;//= режим управления (0 - автоматич., 1 - дистанционн.)
:= UZRG_AM.Kr6_3.rOn;//= "Открыть" в ДУ
:= UZRG_AM.Kr6_3.rOff;//= "Закрыть" в ДУ
*)
]]></ST>
                </FunctionBlock>
            </Folder>
            <Folder Name="ПРУ" Comment="" Data="" UUID="4G2STHXAGQIE7AMT6RLEKN37YQ">
                <Function UUID="OMUF3AU64KTEBD2WEDTIA4MTWQ" Name="FC_PRU" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables />
                    <ST><![CDATA[//BTN := PRU.AOss_BTN;//АО со стравливанием  ---Виртуальные кнопки
//BTN := PRU.AObs_BTN;//АО без стравливания  ---Виртуальные кнопки

PRU.Tg_in_KC := KC_AI_ToHMI.Tg_in_KC.PV; //Температура газа на входе КЦ
PRU.Tg_out_KC := KC_AI_ToHMI.Tg_out_KC.PV; //Температура газа на выходе КЦ
PRU.Pg_in_KC := KC_AI_ToHMI.Pg_in_KC.PV; //Давление газа на входе КЦ
PRU.Pg_out_KC := KC_AI_ToHMI.Pg_out_KC.PV; //Давление газа на выходе КЦ
PRU.Pg_in_kolKC := KC_AI_ToHMI.Pg1_in_Kol.PV; //Давление на входном коллекторе КЦ
PRU.Pg_out_kolKC := KC_AI_ToHMI.Pg2_in_Kol.PV; //Давление на выходном коллекторе КЦ

PRU.Rejim	:= rejim2int(KC_Mode.FaultKC, // 0-Нет режима
						 KC_Mode.AOssKC, //1-АО со стравливанием
						 KC_Mode.AObsKC, //2-АО без стравливания
						 KC_Mode.RepairKC, //3-	Ремонт
						 KC_Mode.ReserveKC, //4-Резерв
						 KC_Mode.InjectKC, //5-Закачка
						 KC_Mode.ExtractKC, //6-Отбор
						 KC_Mode.EOKC);//7-Экстренный останов

PRU.Kr51 := FC_kr_to_PRU(KC_AM.Kr51); //Кран Кр51
PRU.Kr52 := FC_kr_to_PRU(KC_AM.Kr52); //Кран Кр52
PRU.Kr51_2 := FC_kr_to_PRU(KC_AM.Kr51_2); //Кран Кр51.2
PRU.Kr52_2 := FC_kr_to_PRU(KC_AM.Kr52_2); //Кран Кр52.2
PRU.Kr53 := FC_kr_to_PRU(KC_AM.Kr53); //Кран Кр53
PRU.Kr53b := FC_kr_to_PRU(KC_AM.Kr53b); //Кран Кр53бп
PRU.Kr54 := FC_kr_to_PRU(KC_AM.Kr54); //Кран Кр54
PRU.Kr54b := FC_kr_to_PRU(KC_AM.Kr54b); //Кран Кр54бп
]]></ST>
                </Function>
                <Function UUID="ZWXPGTCNWOBUZLVMGNPS6NBBYY" Name="FC_kr_to_PRU" Comment="FC_kr_to_PRU" ResultTypeUUID="J2GLKR5SZATEPPS6SYYJ4FXRO4">
                    <Variables>
                        <Variable UUID="LDG5MFDNGN4UVNRMZQCF64AUFA" Name="AM_IN" Type="support_AM" TypeUUID="JOKANQL3O4QURP2EITPYYDMUV4" Usage="input" />
                    </Variables>
                    <ST><![CDATA[//1 - промежуток
//2- закрыт
//3- открыт
//4- 2 конечника
IF NOT AM_IN.iOn AND NOT AM_IN.iOff THEN FC_kr_to_PRU := 0; END_IF;
IF AM_IN.iOff THEN FC_kr_to_PRU := 1; END_IF;
IF AM_IN.iOn THEN FC_kr_to_PRU := 2; END_IF;
IF AM_IN.fFB THEN FC_kr_to_PRU := 3; END_IF;]]></ST>
                </Function>
                <Function UUID="GYQITT5LORKUVPX65JTPI2UT5E" Name="rejim2int" ResultTypeUUID="J2GLKR5SZATEPPS6SYYJ4FXRO4">
                    <Variables>
                        <Variable UUID="NG2TVYMHODWUXP5PRMXJLCLIAM" Name="R1" Type="BOOL" Usage="input" />
                        <Variable UUID="UANIPDLJRATELJP5S3HGIMNX4U" Name="R2" Type="BOOL" Usage="input" />
                        <Variable UUID="HY3PMY7SBPREFK7AS6G5BGIZFI" Name="R3" Type="BOOL" Usage="input" />
                        <Variable UUID="XNZ6JLEC2E3EJO5DOMA76OGWXY" Name="R4" Type="BOOL" Usage="input" />
                        <Variable UUID="CMFHMPPK5YSUJD6KRTRFQZUZV4" Name="R5" Type="BOOL" Usage="input" />
                        <Variable UUID="D3CMHBDIPX2UXIRRP25QZV4TDI" Name="R6" Type="BOOL" Usage="input" />
                        <Variable UUID="MGAEFPTC42IU5JFQOVMAIU454U" Name="R7" Type="BOOL" Usage="input" />
                        <Variable UUID="QHHMGIYEYJYUBEIPHICRBKZNFY" Name="R8" Type="BOOL" Usage="input" />
                    </Variables>
                    <ST><![CDATA[
IF R1 THEN rejim2int := 1; END_IF;
IF R2 THEN rejim2int := 2; END_IF;
IF R3 THEN rejim2int := 3; END_IF;
IF R4 THEN rejim2int := 4; END_IF;
IF R5 THEN rejim2int := 5; END_IF;
IF R6 THEN rejim2int := 6; END_IF;
IF R7 THEN rejim2int := 7; END_IF;
IF R8 THEN rejim2int := 8; END_IF;
]]></ST>
                </Function>
            </Folder>
            <Folder Name="СКМ" Comment="" Data="" UUID="663WLL2FO4AEXGNM4DYU7LBNO4">
                <Folder Name="AI" Comment="" Data="" UUID="Y5JBN3NQIWTUDFSERXUPRQ6FK4">
                    <Function UUID="KSM6LVVMJ5AA5UPUDCQ2NSD7QM" Name="KC_SKM2_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
KC_SKM2_AI_ToHMI.Cor_IKP1.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП1, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP2.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП2, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP3.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП3, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP4.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП4, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP5.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП5, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP6.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП6, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP7.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП7, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP8.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП8, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP9.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП9, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP10.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП10, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP11.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП11, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP12.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП12, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP13.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП13, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP14.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП14, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP15.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП15, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP16.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП16, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP17.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП17, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP18.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП18, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP19.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП19, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP20.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП20, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP21.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП21, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP22.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП22, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP23.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП23, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP24.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП24, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP25.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП25, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP26.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП26, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP27.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП27, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP28.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП28, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP29.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП29, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP30.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП30, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP31.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП31, мкм;
KC_SKM2_AI_ToHMI.Cor_IKP32.manual := tmpPermit; //Глубина коррозии НГК_БИ_ИКП32, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP1.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП1, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP2.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП2, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP3.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП3, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP4.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП4, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP5.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП5, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP6.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП6, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP7.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП7, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP8.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП8, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP9.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП9, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP10.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП10, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP11.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП11, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP12.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП12, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP13.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП13, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP14.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП14, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP15.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП15, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP16.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП16, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP17.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП17, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP18.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП18, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP19.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП19, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP20.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП20, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP21.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП21, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP22.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП22, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP23.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП23, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP24.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП24, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP25.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП25, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP26.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП26, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP27.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП27, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP28.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП28, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP29.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП29, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP30.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП30, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP31.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП31, мкм;
KC_SKM2_AI_ToHMI.S_Cor_IKP32.manual := tmpPermit; //Скорость коррозии НГК_БИ_ИКП32, мкм;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <FunctionBlock UUID="VOWK46AI7QLUHFBFAGNFZD3EFI" Name="KC_SKM2_mb_AI_CallAll_FB">
                        <Variables>
                            <Variable UUID="47X66WY22NFU3JRBMXVC4GMJJQ" Name="Proc_TMR_ON" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                            <Variable UUID="2JFOUUHSSIMUVHCFT2PC3Y56P4" Name="TMO_ON" Type="BOOL" Usage="internal" />
                            <Variable UUID="4COPXJHV67YUTDYDBQAIXZCA4Y" Name="TMR_ON" Type="TIME" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[Proc_TMR_ON(TRUE, T#15s, TMO_ON, TMR_ON);
IF not TMO_ON THEN

//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Глубина коррозии НГК_БИ_ИКП1, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP1,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,0);
//Глубина коррозии НГК_БИ_ИКП2, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP2,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,1);
//Глубина коррозии НГК_БИ_ИКП3, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP3,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,2);
//Глубина коррозии НГК_БИ_ИКП4, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP4,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,3);
//Глубина коррозии НГК_БИ_ИКП5, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP5,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,4);
//Глубина коррозии НГК_БИ_ИКП6, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP6,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,5);
//Глубина коррозии НГК_БИ_ИКП7, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP7,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,6);
//Глубина коррозии НГК_БИ_ИКП8, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP8,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,7);
//Глубина коррозии НГК_БИ_ИКП9, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP9,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,8);
//Глубина коррозии НГК_БИ_ИКП10, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP10,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,9);
//Глубина коррозии НГК_БИ_ИКП11, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP11,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,10);
//Глубина коррозии НГК_БИ_ИКП12, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP12,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,11);
//Глубина коррозии НГК_БИ_ИКП13, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP13,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,12);
//Глубина коррозии НГК_БИ_ИКП14, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP14,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,13);
//Глубина коррозии НГК_БИ_ИКП15, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP15,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,14);
//Глубина коррозии НГК_БИ_ИКП16, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP16,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,15);
//Глубина коррозии НГК_БИ_ИКП17, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP17,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,16);
//Глубина коррозии НГК_БИ_ИКП18, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP18,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,17);
//Глубина коррозии НГК_БИ_ИКП19, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP19,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,18);
//Глубина коррозии НГК_БИ_ИКП20, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP20,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,19);
//Глубина коррозии НГК_БИ_ИКП21, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP21,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,20);
//Глубина коррозии НГК_БИ_ИКП22, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP22,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,21);
//Глубина коррозии НГК_БИ_ИКП23, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP23,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,22);
//Глубина коррозии НГК_БИ_ИКП24, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP24,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,23);
//Глубина коррозии НГК_БИ_ИКП25, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP25,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,24);
//Глубина коррозии НГК_БИ_ИКП26, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP26,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,25);
//Глубина коррозии НГК_БИ_ИКП27, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP27,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,26);
//Глубина коррозии НГК_БИ_ИКП28, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP28,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,27);
//Глубина коррозии НГК_БИ_ИКП29, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP29,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,28);
//Глубина коррозии НГК_БИ_ИКП30, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP30,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,29);
//Глубина коррозии НГК_БИ_ИКП31, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP31,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,30);
//Глубина коррозии НГК_БИ_ИКП32, мкм
mb_AI_init(KC_SKM2_AI_Settings.Cor_IKP32,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,31);
//Скорость коррозии НГК_БИ_ИКП1, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP1,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,32);
//Скорость коррозии НГК_БИ_ИКП2, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP2,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,33);
//Скорость коррозии НГК_БИ_ИКП3, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP3,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,34);
//Скорость коррозии НГК_БИ_ИКП4, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP4,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,35);
//Скорость коррозии НГК_БИ_ИКП5, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP5,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,36);
//Скорость коррозии НГК_БИ_ИКП6, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP6,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,37);
//Скорость коррозии НГК_БИ_ИКП7, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP7,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,38);
//Скорость коррозии НГК_БИ_ИКП8, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP8,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,39);
//Скорость коррозии НГК_БИ_ИКП9, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP9,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,40);
//Скорость коррозии НГК_БИ_ИКП10, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP10,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,41);
//Скорость коррозии НГК_БИ_ИКП11, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP11,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,42);
//Скорость коррозии НГК_БИ_ИКП12, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP12,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,43);
//Скорость коррозии НГК_БИ_ИКП13, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP13,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,44);
//Скорость коррозии НГК_БИ_ИКП14, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP14,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,45);
//Скорость коррозии НГК_БИ_ИКП15, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP15,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,46);
//Скорость коррозии НГК_БИ_ИКП16, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP16,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,47);
//Скорость коррозии НГК_БИ_ИКП17, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP17,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,48);
//Скорость коррозии НГК_БИ_ИКП18, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP18,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,49);
//Скорость коррозии НГК_БИ_ИКП19, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP19,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,50);
//Скорость коррозии НГК_БИ_ИКП20, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP20,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,51);
//Скорость коррозии НГК_БИ_ИКП21, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP21,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,52);
//Скорость коррозии НГК_БИ_ИКП22, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP22,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,53);
//Скорость коррозии НГК_БИ_ИКП23, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP23,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,54);
//Скорость коррозии НГК_БИ_ИКП24, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP24,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,55);
//Скорость коррозии НГК_БИ_ИКП25, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP25,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,56);
//Скорость коррозии НГК_БИ_ИКП26, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP26,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,57);
//Скорость коррозии НГК_БИ_ИКП27, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP27,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,58);
//Скорость коррозии НГК_БИ_ИКП28, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP28,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,59);
//Скорость коррозии НГК_БИ_ИКП29, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP29,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,60);
//Скорость коррозии НГК_БИ_ИКП30, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP30,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,61);
//Скорость коррозии НГК_БИ_ИКП31, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP31,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,62);
//Скорость коррозии НГК_БИ_ИКП32, мкм
mb_AI_init(KC_SKM2_AI_Settings.S_Cor_IKP32,0.0,65535.0,-1966.05,67501.05,-3932.1,69467.1,11,1.0,0.0,0.0,63);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Глубина коррозии НГК_БИ_ИКП1, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP1),KC_SKM2_AI_Settings.Cor_IKP1,KC_SKM2_AI_FromHMI.Cor_IKP1,KC_SKM2_AI_ToHMI.Cor_IKP1);
//Глубина коррозии НГК_БИ_ИКП2, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP2),KC_SKM2_AI_Settings.Cor_IKP2,KC_SKM2_AI_FromHMI.Cor_IKP2,KC_SKM2_AI_ToHMI.Cor_IKP2);
//Глубина коррозии НГК_БИ_ИКП3, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP3),KC_SKM2_AI_Settings.Cor_IKP3,KC_SKM2_AI_FromHMI.Cor_IKP3,KC_SKM2_AI_ToHMI.Cor_IKP3);
//Глубина коррозии НГК_БИ_ИКП4, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP4),KC_SKM2_AI_Settings.Cor_IKP4,KC_SKM2_AI_FromHMI.Cor_IKP4,KC_SKM2_AI_ToHMI.Cor_IKP4);
//Глубина коррозии НГК_БИ_ИКП5, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP5),KC_SKM2_AI_Settings.Cor_IKP5,KC_SKM2_AI_FromHMI.Cor_IKP5,KC_SKM2_AI_ToHMI.Cor_IKP5);
//Глубина коррозии НГК_БИ_ИКП6, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP6),KC_SKM2_AI_Settings.Cor_IKP6,KC_SKM2_AI_FromHMI.Cor_IKP6,KC_SKM2_AI_ToHMI.Cor_IKP6);
//Глубина коррозии НГК_БИ_ИКП7, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP7),KC_SKM2_AI_Settings.Cor_IKP7,KC_SKM2_AI_FromHMI.Cor_IKP7,KC_SKM2_AI_ToHMI.Cor_IKP7);
//Глубина коррозии НГК_БИ_ИКП8, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP8),KC_SKM2_AI_Settings.Cor_IKP8,KC_SKM2_AI_FromHMI.Cor_IKP8,KC_SKM2_AI_ToHMI.Cor_IKP8);
//Глубина коррозии НГК_БИ_ИКП9, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP9),KC_SKM2_AI_Settings.Cor_IKP9,KC_SKM2_AI_FromHMI.Cor_IKP9,KC_SKM2_AI_ToHMI.Cor_IKP9);
//Глубина коррозии НГК_БИ_ИКП10, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP10),KC_SKM2_AI_Settings.Cor_IKP10,KC_SKM2_AI_FromHMI.Cor_IKP10,KC_SKM2_AI_ToHMI.Cor_IKP10);
//Глубина коррозии НГК_БИ_ИКП11, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP11),KC_SKM2_AI_Settings.Cor_IKP11,KC_SKM2_AI_FromHMI.Cor_IKP11,KC_SKM2_AI_ToHMI.Cor_IKP11);
//Глубина коррозии НГК_БИ_ИКП12, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP12),KC_SKM2_AI_Settings.Cor_IKP12,KC_SKM2_AI_FromHMI.Cor_IKP12,KC_SKM2_AI_ToHMI.Cor_IKP12);
//Глубина коррозии НГК_БИ_ИКП13, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP13),KC_SKM2_AI_Settings.Cor_IKP13,KC_SKM2_AI_FromHMI.Cor_IKP13,KC_SKM2_AI_ToHMI.Cor_IKP13);
//Глубина коррозии НГК_БИ_ИКП14, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP14),KC_SKM2_AI_Settings.Cor_IKP14,KC_SKM2_AI_FromHMI.Cor_IKP14,KC_SKM2_AI_ToHMI.Cor_IKP14);
//Глубина коррозии НГК_БИ_ИКП15, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP15),KC_SKM2_AI_Settings.Cor_IKP15,KC_SKM2_AI_FromHMI.Cor_IKP15,KC_SKM2_AI_ToHMI.Cor_IKP15);
//Глубина коррозии НГК_БИ_ИКП16, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP16),KC_SKM2_AI_Settings.Cor_IKP16,KC_SKM2_AI_FromHMI.Cor_IKP16,KC_SKM2_AI_ToHMI.Cor_IKP16);
//Глубина коррозии НГК_БИ_ИКП17, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP17),KC_SKM2_AI_Settings.Cor_IKP17,KC_SKM2_AI_FromHMI.Cor_IKP17,KC_SKM2_AI_ToHMI.Cor_IKP17);
//Глубина коррозии НГК_БИ_ИКП18, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP18),KC_SKM2_AI_Settings.Cor_IKP18,KC_SKM2_AI_FromHMI.Cor_IKP18,KC_SKM2_AI_ToHMI.Cor_IKP18);
//Глубина коррозии НГК_БИ_ИКП19, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP19),KC_SKM2_AI_Settings.Cor_IKP19,KC_SKM2_AI_FromHMI.Cor_IKP19,KC_SKM2_AI_ToHMI.Cor_IKP19);
//Глубина коррозии НГК_БИ_ИКП20, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP20),KC_SKM2_AI_Settings.Cor_IKP20,KC_SKM2_AI_FromHMI.Cor_IKP20,KC_SKM2_AI_ToHMI.Cor_IKP20);
//Глубина коррозии НГК_БИ_ИКП21, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP21),KC_SKM2_AI_Settings.Cor_IKP21,KC_SKM2_AI_FromHMI.Cor_IKP21,KC_SKM2_AI_ToHMI.Cor_IKP21);
//Глубина коррозии НГК_БИ_ИКП22, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP22),KC_SKM2_AI_Settings.Cor_IKP22,KC_SKM2_AI_FromHMI.Cor_IKP22,KC_SKM2_AI_ToHMI.Cor_IKP22);
//Глубина коррозии НГК_БИ_ИКП23, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP23),KC_SKM2_AI_Settings.Cor_IKP23,KC_SKM2_AI_FromHMI.Cor_IKP23,KC_SKM2_AI_ToHMI.Cor_IKP23);
//Глубина коррозии НГК_БИ_ИКП24, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP24),KC_SKM2_AI_Settings.Cor_IKP24,KC_SKM2_AI_FromHMI.Cor_IKP24,KC_SKM2_AI_ToHMI.Cor_IKP24);
//Глубина коррозии НГК_БИ_ИКП25, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP25),KC_SKM2_AI_Settings.Cor_IKP25,KC_SKM2_AI_FromHMI.Cor_IKP25,KC_SKM2_AI_ToHMI.Cor_IKP25);
//Глубина коррозии НГК_БИ_ИКП26, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP26),KC_SKM2_AI_Settings.Cor_IKP26,KC_SKM2_AI_FromHMI.Cor_IKP26,KC_SKM2_AI_ToHMI.Cor_IKP26);
//Глубина коррозии НГК_БИ_ИКП27, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP27),KC_SKM2_AI_Settings.Cor_IKP27,KC_SKM2_AI_FromHMI.Cor_IKP27,KC_SKM2_AI_ToHMI.Cor_IKP27);
//Глубина коррозии НГК_БИ_ИКП28, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP28),KC_SKM2_AI_Settings.Cor_IKP28,KC_SKM2_AI_FromHMI.Cor_IKP28,KC_SKM2_AI_ToHMI.Cor_IKP28);
//Глубина коррозии НГК_БИ_ИКП29, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP29),KC_SKM2_AI_Settings.Cor_IKP29,KC_SKM2_AI_FromHMI.Cor_IKP29,KC_SKM2_AI_ToHMI.Cor_IKP29);
//Глубина коррозии НГК_БИ_ИКП30, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP30),KC_SKM2_AI_Settings.Cor_IKP30,KC_SKM2_AI_FromHMI.Cor_IKP30,KC_SKM2_AI_ToHMI.Cor_IKP30);
//Глубина коррозии НГК_БИ_ИКП31, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP31),KC_SKM2_AI_Settings.Cor_IKP31,KC_SKM2_AI_FromHMI.Cor_IKP31,KC_SKM2_AI_ToHMI.Cor_IKP31);
//Глубина коррозии НГК_БИ_ИКП32, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.Cor_IKP32),KC_SKM2_AI_Settings.Cor_IKP32,KC_SKM2_AI_FromHMI.Cor_IKP32,KC_SKM2_AI_ToHMI.Cor_IKP32);
//Скорость коррозии НГК_БИ_ИКП1, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP1),KC_SKM2_AI_Settings.S_Cor_IKP1,KC_SKM2_AI_FromHMI.S_Cor_IKP1,KC_SKM2_AI_ToHMI.S_Cor_IKP1);
//Скорость коррозии НГК_БИ_ИКП2, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP2),KC_SKM2_AI_Settings.S_Cor_IKP2,KC_SKM2_AI_FromHMI.S_Cor_IKP2,KC_SKM2_AI_ToHMI.S_Cor_IKP2);
//Скорость коррозии НГК_БИ_ИКП3, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP3),KC_SKM2_AI_Settings.S_Cor_IKP3,KC_SKM2_AI_FromHMI.S_Cor_IKP3,KC_SKM2_AI_ToHMI.S_Cor_IKP3);
//Скорость коррозии НГК_БИ_ИКП4, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP4),KC_SKM2_AI_Settings.S_Cor_IKP4,KC_SKM2_AI_FromHMI.S_Cor_IKP4,KC_SKM2_AI_ToHMI.S_Cor_IKP4);
//Скорость коррозии НГК_БИ_ИКП5, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP5),KC_SKM2_AI_Settings.S_Cor_IKP5,KC_SKM2_AI_FromHMI.S_Cor_IKP5,KC_SKM2_AI_ToHMI.S_Cor_IKP5);
//Скорость коррозии НГК_БИ_ИКП6, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP6),KC_SKM2_AI_Settings.S_Cor_IKP6,KC_SKM2_AI_FromHMI.S_Cor_IKP6,KC_SKM2_AI_ToHMI.S_Cor_IKP6);
//Скорость коррозии НГК_БИ_ИКП7, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP7),KC_SKM2_AI_Settings.S_Cor_IKP7,KC_SKM2_AI_FromHMI.S_Cor_IKP7,KC_SKM2_AI_ToHMI.S_Cor_IKP7);
//Скорость коррозии НГК_БИ_ИКП8, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP8),KC_SKM2_AI_Settings.S_Cor_IKP8,KC_SKM2_AI_FromHMI.S_Cor_IKP8,KC_SKM2_AI_ToHMI.S_Cor_IKP8);
//Скорость коррозии НГК_БИ_ИКП9, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP9),KC_SKM2_AI_Settings.S_Cor_IKP9,KC_SKM2_AI_FromHMI.S_Cor_IKP9,KC_SKM2_AI_ToHMI.S_Cor_IKP9);
//Скорость коррозии НГК_БИ_ИКП10, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP10),KC_SKM2_AI_Settings.S_Cor_IKP10,KC_SKM2_AI_FromHMI.S_Cor_IKP10,KC_SKM2_AI_ToHMI.S_Cor_IKP10);
//Скорость коррозии НГК_БИ_ИКП11, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP11),KC_SKM2_AI_Settings.S_Cor_IKP11,KC_SKM2_AI_FromHMI.S_Cor_IKP11,KC_SKM2_AI_ToHMI.S_Cor_IKP11);
//Скорость коррозии НГК_БИ_ИКП12, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP12),KC_SKM2_AI_Settings.S_Cor_IKP12,KC_SKM2_AI_FromHMI.S_Cor_IKP12,KC_SKM2_AI_ToHMI.S_Cor_IKP12);
//Скорость коррозии НГК_БИ_ИКП13, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP13),KC_SKM2_AI_Settings.S_Cor_IKP13,KC_SKM2_AI_FromHMI.S_Cor_IKP13,KC_SKM2_AI_ToHMI.S_Cor_IKP13);
//Скорость коррозии НГК_БИ_ИКП14, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP14),KC_SKM2_AI_Settings.S_Cor_IKP14,KC_SKM2_AI_FromHMI.S_Cor_IKP14,KC_SKM2_AI_ToHMI.S_Cor_IKP14);
//Скорость коррозии НГК_БИ_ИКП15, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP15),KC_SKM2_AI_Settings.S_Cor_IKP15,KC_SKM2_AI_FromHMI.S_Cor_IKP15,KC_SKM2_AI_ToHMI.S_Cor_IKP15);
//Скорость коррозии НГК_БИ_ИКП16, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP16),KC_SKM2_AI_Settings.S_Cor_IKP16,KC_SKM2_AI_FromHMI.S_Cor_IKP16,KC_SKM2_AI_ToHMI.S_Cor_IKP16);
//Скорость коррозии НГК_БИ_ИКП17, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP17),KC_SKM2_AI_Settings.S_Cor_IKP17,KC_SKM2_AI_FromHMI.S_Cor_IKP17,KC_SKM2_AI_ToHMI.S_Cor_IKP17);
//Скорость коррозии НГК_БИ_ИКП18, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP18),KC_SKM2_AI_Settings.S_Cor_IKP18,KC_SKM2_AI_FromHMI.S_Cor_IKP18,KC_SKM2_AI_ToHMI.S_Cor_IKP18);
//Скорость коррозии НГК_БИ_ИКП19, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP19),KC_SKM2_AI_Settings.S_Cor_IKP19,KC_SKM2_AI_FromHMI.S_Cor_IKP19,KC_SKM2_AI_ToHMI.S_Cor_IKP19);
//Скорость коррозии НГК_БИ_ИКП20, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP20),KC_SKM2_AI_Settings.S_Cor_IKP20,KC_SKM2_AI_FromHMI.S_Cor_IKP20,KC_SKM2_AI_ToHMI.S_Cor_IKP20);
//Скорость коррозии НГК_БИ_ИКП21, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP21),KC_SKM2_AI_Settings.S_Cor_IKP21,KC_SKM2_AI_FromHMI.S_Cor_IKP21,KC_SKM2_AI_ToHMI.S_Cor_IKP21);
//Скорость коррозии НГК_БИ_ИКП22, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP22),KC_SKM2_AI_Settings.S_Cor_IKP22,KC_SKM2_AI_FromHMI.S_Cor_IKP22,KC_SKM2_AI_ToHMI.S_Cor_IKP22);
//Скорость коррозии НГК_БИ_ИКП23, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP23),KC_SKM2_AI_Settings.S_Cor_IKP23,KC_SKM2_AI_FromHMI.S_Cor_IKP23,KC_SKM2_AI_ToHMI.S_Cor_IKP23);
//Скорость коррозии НГК_БИ_ИКП24, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP24),KC_SKM2_AI_Settings.S_Cor_IKP24,KC_SKM2_AI_FromHMI.S_Cor_IKP24,KC_SKM2_AI_ToHMI.S_Cor_IKP24);
//Скорость коррозии НГК_БИ_ИКП25, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP25),KC_SKM2_AI_Settings.S_Cor_IKP25,KC_SKM2_AI_FromHMI.S_Cor_IKP25,KC_SKM2_AI_ToHMI.S_Cor_IKP25);
//Скорость коррозии НГК_БИ_ИКП26, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP26),KC_SKM2_AI_Settings.S_Cor_IKP26,KC_SKM2_AI_FromHMI.S_Cor_IKP26,KC_SKM2_AI_ToHMI.S_Cor_IKP26);
//Скорость коррозии НГК_БИ_ИКП27, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP27),KC_SKM2_AI_Settings.S_Cor_IKP27,KC_SKM2_AI_FromHMI.S_Cor_IKP27,KC_SKM2_AI_ToHMI.S_Cor_IKP27);
//Скорость коррозии НГК_БИ_ИКП28, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP28),KC_SKM2_AI_Settings.S_Cor_IKP28,KC_SKM2_AI_FromHMI.S_Cor_IKP28,KC_SKM2_AI_ToHMI.S_Cor_IKP28);
//Скорость коррозии НГК_БИ_ИКП29, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP29),KC_SKM2_AI_Settings.S_Cor_IKP29,KC_SKM2_AI_FromHMI.S_Cor_IKP29,KC_SKM2_AI_ToHMI.S_Cor_IKP29);
//Скорость коррозии НГК_БИ_ИКП30, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP30),KC_SKM2_AI_Settings.S_Cor_IKP30,KC_SKM2_AI_FromHMI.S_Cor_IKP30,KC_SKM2_AI_ToHMI.S_Cor_IKP30);
//Скорость коррозии НГК_БИ_ИКП31, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP31),KC_SKM2_AI_Settings.S_Cor_IKP31,KC_SKM2_AI_FromHMI.S_Cor_IKP31,KC_SKM2_AI_ToHMI.S_Cor_IKP31);
//Скорость коррозии НГК_БИ_ИКП32, мкм
mb_AI_Processing(UINT_TO_REAL(KC_SKM2_AI_DRV.S_Cor_IKP32),KC_SKM2_AI_Settings.S_Cor_IKP32,KC_SKM2_AI_FromHMI.S_Cor_IKP32,KC_SKM2_AI_ToHMI.S_Cor_IKP32);
//Конец сгенерированного кода
]]></ST>
                    </FunctionBlock>
                    <Function UUID="H5AA7PO4ILARU2LCYSEV52ID6U" Name="KC_SKM_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
KC_SKM_AI_ToHMI.I_IKP1.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП, мА;
KC_SKM_AI_ToHMI.I_IKP2.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП2, мА;
KC_SKM_AI_ToHMI.I_IKP3.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП3, мА;
KC_SKM_AI_ToHMI.I_IKP4.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП4, мА;
KC_SKM_AI_ToHMI.I_IKP5.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП5, мА;
KC_SKM_AI_ToHMI.I_IKP6.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП6, мА;
KC_SKM_AI_ToHMI.I_IKP7.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП7, мА;
KC_SKM_AI_ToHMI.I_IKP8.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП8, мА;
KC_SKM_AI_ToHMI.I_IKP9.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП9, мА;
KC_SKM_AI_ToHMI.I_IKP10.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП10, мА;
KC_SKM_AI_ToHMI.I_IKP11.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП11, мА;
KC_SKM_AI_ToHMI.I_IKP12.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП12, мА;
KC_SKM_AI_ToHMI.I_IKP13.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП13, мА;
KC_SKM_AI_ToHMI.I_IKP14.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП14, мА;
KC_SKM_AI_ToHMI.I_IKP15.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП15, мА;
KC_SKM_AI_ToHMI.I_IKP16.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП16, мА;
KC_SKM_AI_ToHMI.I_IKP17.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП17, мА;
KC_SKM_AI_ToHMI.I_IKP18.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП18, мА;
KC_SKM_AI_ToHMI.I_IKP19.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП19, мА;
KC_SKM_AI_ToHMI.I_IKP20.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП20, мА;
KC_SKM_AI_ToHMI.I_IKP21.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП21, мА;
KC_SKM_AI_ToHMI.I_IKP22.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП22, мА;
KC_SKM_AI_ToHMI.I_IKP23.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП23, мА;
KC_SKM_AI_ToHMI.I_IKP24.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП24, мА;
KC_SKM_AI_ToHMI.I_IKP25.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП25, мА;
KC_SKM_AI_ToHMI.I_IKP26.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП26, мА;
KC_SKM_AI_ToHMI.I_IKP27.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП27, мА;
KC_SKM_AI_ToHMI.I_IKP28.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП28, мА;
KC_SKM_AI_ToHMI.I_IKP29.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП29, мА;
KC_SKM_AI_ToHMI.I_IKP30.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП30, мА;
KC_SKM_AI_ToHMI.I_IKP31.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП31, мА;
KC_SKM_AI_ToHMI.I_IKP32.manual := tmpPermit; //Ток поляризации НГК_БИ_ИКП32, мА;
KC_SKM_AI_ToHMI.U_IKP1.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП1, В;
KC_SKM_AI_ToHMI.U_IKP2.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП2, В;
KC_SKM_AI_ToHMI.U_IKP3.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП3, В;
KC_SKM_AI_ToHMI.U_IKP4.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП4, В;
KC_SKM_AI_ToHMI.U_IKP5.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП5, В;
KC_SKM_AI_ToHMI.U_IKP6.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП6, В;
KC_SKM_AI_ToHMI.U_IKP7.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП7, В;
KC_SKM_AI_ToHMI.U_IKP8.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП8, В;
KC_SKM_AI_ToHMI.U_IKP9.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП9, В;
KC_SKM_AI_ToHMI.U_IKP10.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП10, В;
KC_SKM_AI_ToHMI.U_IKP11.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП11, В;
KC_SKM_AI_ToHMI.U_IKP12.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП12, В;
KC_SKM_AI_ToHMI.U_IKP13.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП13, В;
KC_SKM_AI_ToHMI.U_IKP14.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП14, В;
KC_SKM_AI_ToHMI.U_IKP15.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП15, В;
KC_SKM_AI_ToHMI.U_IKP16.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП16, В;
KC_SKM_AI_ToHMI.U_IKP17.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП17, В;
KC_SKM_AI_ToHMI.U_IKP18.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП18, В;
KC_SKM_AI_ToHMI.U_IKP19.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП19, В;
KC_SKM_AI_ToHMI.U_IKP20.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП20, В;
KC_SKM_AI_ToHMI.U_IKP21.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП21, В;
KC_SKM_AI_ToHMI.U_IKP22.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП22, В;
KC_SKM_AI_ToHMI.U_IKP23.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП23, В;
KC_SKM_AI_ToHMI.U_IKP24.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП24, В;
KC_SKM_AI_ToHMI.U_IKP25.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП25, В;
KC_SKM_AI_ToHMI.U_IKP26.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП26, В;
KC_SKM_AI_ToHMI.U_IKP27.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП27, В;
KC_SKM_AI_ToHMI.U_IKP28.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП28, В;
KC_SKM_AI_ToHMI.U_IKP29.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП29, В;
KC_SKM_AI_ToHMI.U_IKP30.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП30, В;
KC_SKM_AI_ToHMI.U_IKP31.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП31, В;
KC_SKM_AI_ToHMI.U_IKP32.manual := tmpPermit; //Поляризационнный потенциал НГК_БИ_ИКП32, В;
KC_SKM_AI_ToHMI.Sum_U_IKP1.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП1, В;
KC_SKM_AI_ToHMI.Sum_U_IKP2.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП2, В;
KC_SKM_AI_ToHMI.Sum_U_IKP3.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП3, В;
KC_SKM_AI_ToHMI.Sum_U_IKP4.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП4, В;
KC_SKM_AI_ToHMI.Sum_U_IKP5.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП5, В;
KC_SKM_AI_ToHMI.Sum_U_IKP6.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП6, В;
KC_SKM_AI_ToHMI.Sum_U_IKP7.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП7, В;
KC_SKM_AI_ToHMI.Sum_U_IKP8.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП8, В;
KC_SKM_AI_ToHMI.Sum_U_IKP9.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП9, В;
KC_SKM_AI_ToHMI.Sum_U_IKP10.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП10, В;
KC_SKM_AI_ToHMI.Sum_U_IKP11.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП11, В;
KC_SKM_AI_ToHMI.Sum_U_IKP12.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП12, В;
KC_SKM_AI_ToHMI.Sum_U_IKP13.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП13, В;
KC_SKM_AI_ToHMI.Sum_U_IKP14.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП14, В;
KC_SKM_AI_ToHMI.Sum_U_IKP15.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП15, В;
KC_SKM_AI_ToHMI.Sum_U_IKP16.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП16, В;
KC_SKM_AI_ToHMI.Sum_U_IKP17.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП17, В;
KC_SKM_AI_ToHMI.Sum_U_IKP18.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП18, В;
KC_SKM_AI_ToHMI.Sum_U_IKP19.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП19, В;
KC_SKM_AI_ToHMI.Sum_U_IKP20.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП20, В;
KC_SKM_AI_ToHMI.Sum_U_IKP21.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП21, В;
KC_SKM_AI_ToHMI.Sum_U_IKP22.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП22, В;
KC_SKM_AI_ToHMI.Sum_U_IKP23.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП23, В;
KC_SKM_AI_ToHMI.Sum_U_IKP24.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП24, В;
KC_SKM_AI_ToHMI.Sum_U_IKP25.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП25, В;
KC_SKM_AI_ToHMI.Sum_U_IKP26.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП26, В;
KC_SKM_AI_ToHMI.Sum_U_IKP27.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП27, В;
KC_SKM_AI_ToHMI.Sum_U_IKP28.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП28, В;
KC_SKM_AI_ToHMI.Sum_U_IKP29.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП29, В;
KC_SKM_AI_ToHMI.Sum_U_IKP30.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП30, В;
KC_SKM_AI_ToHMI.Sum_U_IKP31.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП31, В;
KC_SKM_AI_ToHMI.Sum_U_IKP32.manual := tmpPermit; //Суммарный потенциал НГК_БИ_ИКП32, В;
KC_SKM_AI_ToHMI.R1_IKP1.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП1, Ом;
KC_SKM_AI_ToHMI.R1_IKP2.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП2, Ом;
KC_SKM_AI_ToHMI.R1_IKP3.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП3, Ом;
KC_SKM_AI_ToHMI.R1_IKP4.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП4, Ом;
KC_SKM_AI_ToHMI.R1_IKP5.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП5, Ом;
KC_SKM_AI_ToHMI.R1_IKP6.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП6, Ом;
KC_SKM_AI_ToHMI.R1_IKP7.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП7, Ом;
KC_SKM_AI_ToHMI.R1_IKP8.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП8, Ом;
KC_SKM_AI_ToHMI.R1_IKP9.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП9, Ом;
KC_SKM_AI_ToHMI.R1_IKP10.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП10, Ом;
KC_SKM_AI_ToHMI.R1_IKP11.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП11, Ом;
KC_SKM_AI_ToHMI.R1_IKP12.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП12, Ом;
KC_SKM_AI_ToHMI.R1_IKP13.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП13, Ом;
KC_SKM_AI_ToHMI.R1_IKP14.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП14, Ом;
KC_SKM_AI_ToHMI.R1_IKP15.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП15, Ом;
KC_SKM_AI_ToHMI.R1_IKP16.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП16, Ом;
KC_SKM_AI_ToHMI.R1_IKP17.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП17, Ом;
KC_SKM_AI_ToHMI.R1_IKP18.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП18, Ом;
KC_SKM_AI_ToHMI.R1_IKP19.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП19, Ом;
KC_SKM_AI_ToHMI.R1_IKP20.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП20, Ом;
KC_SKM_AI_ToHMI.R1_IKP21.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП21, Ом;
KC_SKM_AI_ToHMI.R1_IKP22.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП22, Ом;
KC_SKM_AI_ToHMI.R1_IKP23.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП23, Ом;
KC_SKM_AI_ToHMI.R1_IKP24.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП24, Ом;
KC_SKM_AI_ToHMI.R1_IKP25.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП25, Ом;
KC_SKM_AI_ToHMI.R1_IKP26.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП26, Ом;
KC_SKM_AI_ToHMI.R1_IKP27.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП27, Ом;
KC_SKM_AI_ToHMI.R1_IKP28.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП28, Ом;
KC_SKM_AI_ToHMI.R1_IKP29.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП29, Ом;
KC_SKM_AI_ToHMI.R1_IKP30.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП30, Ом;
KC_SKM_AI_ToHMI.R1_IKP31.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП31, Ом;
KC_SKM_AI_ToHMI.R1_IKP32.manual := tmpPermit; //Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП32, Ом;
KC_SKM_AI_ToHMI.R2_IKP1.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП1, Ом;
KC_SKM_AI_ToHMI.R2_IKP2.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП2, Ом;
KC_SKM_AI_ToHMI.R2_IKP3.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП3, Ом;
KC_SKM_AI_ToHMI.R2_IKP4.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП4, Ом;
KC_SKM_AI_ToHMI.R2_IKP5.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП5, Ом;
KC_SKM_AI_ToHMI.R2_IKP6.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП6, Ом;
KC_SKM_AI_ToHMI.R2_IKP7.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП7, Ом;
KC_SKM_AI_ToHMI.R2_IKP8.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП8, Ом;
KC_SKM_AI_ToHMI.R2_IKP9.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП9, Ом;
KC_SKM_AI_ToHMI.R2_IKP10.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП10, Ом;
KC_SKM_AI_ToHMI.R2_IKP11.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП11, Ом;
KC_SKM_AI_ToHMI.R2_IKP12.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП12, Ом;
KC_SKM_AI_ToHMI.R2_IKP13.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП13, Ом;
KC_SKM_AI_ToHMI.R2_IKP14.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП14, Ом;
KC_SKM_AI_ToHMI.R2_IKP15.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП15, Ом;
KC_SKM_AI_ToHMI.R2_IKP16.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП16, Ом;
KC_SKM_AI_ToHMI.R2_IKP17.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП17, Ом;
KC_SKM_AI_ToHMI.R2_IKP18.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП18, Ом;
KC_SKM_AI_ToHMI.R2_IKP19.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП19, Ом;
KC_SKM_AI_ToHMI.R2_IKP20.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП20, Ом;
KC_SKM_AI_ToHMI.R2_IKP21.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП21, Ом;
KC_SKM_AI_ToHMI.R2_IKP22.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП22, Ом;
KC_SKM_AI_ToHMI.R2_IKP23.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП23, Ом;
KC_SKM_AI_ToHMI.R2_IKP24.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП24, Ом;
KC_SKM_AI_ToHMI.R2_IKP25.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП25, Ом;
KC_SKM_AI_ToHMI.R2_IKP26.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП26, Ом;
KC_SKM_AI_ToHMI.R2_IKP27.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП27, Ом;
KC_SKM_AI_ToHMI.R2_IKP28.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП28, Ом;
KC_SKM_AI_ToHMI.R2_IKP29.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП29, Ом;
KC_SKM_AI_ToHMI.R2_IKP30.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП30, Ом;
KC_SKM_AI_ToHMI.R2_IKP31.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП31, Ом;
KC_SKM_AI_ToHMI.R2_IKP32.manual := tmpPermit; //Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП32, Ом;
KC_SKM_AI_ToHMI.R3_IKP1.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП1, Ом;
KC_SKM_AI_ToHMI.R3_IKP2.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП2, Ом;
KC_SKM_AI_ToHMI.R3_IKP3.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП3, Ом;
KC_SKM_AI_ToHMI.R3_IKP4.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП4, Ом;
KC_SKM_AI_ToHMI.R3_IKP5.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП5, Ом;
KC_SKM_AI_ToHMI.R3_IKP6.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП6, Ом;
KC_SKM_AI_ToHMI.R3_IKP7.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП7, Ом;
KC_SKM_AI_ToHMI.R3_IKP8.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП8, Ом;
KC_SKM_AI_ToHMI.R3_IKP9.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП9, Ом;
KC_SKM_AI_ToHMI.R3_IKP10.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП10, Ом;
KC_SKM_AI_ToHMI.R3_IKP11.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП11, Ом;
KC_SKM_AI_ToHMI.R3_IKP12.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП12, Ом;
KC_SKM_AI_ToHMI.R3_IKP13.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП13, Ом;
KC_SKM_AI_ToHMI.R3_IKP14.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП14, Ом;
KC_SKM_AI_ToHMI.R3_IKP15.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП15, Ом;
KC_SKM_AI_ToHMI.R3_IKP16.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП16, Ом;
KC_SKM_AI_ToHMI.R3_IKP17.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП17, Ом;
KC_SKM_AI_ToHMI.R3_IKP18.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП18, Ом;
KC_SKM_AI_ToHMI.R3_IKP19.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП19, Ом;
KC_SKM_AI_ToHMI.R3_IKP20.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП20, Ом;
KC_SKM_AI_ToHMI.R3_IKP21.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП21, Ом;
KC_SKM_AI_ToHMI.R3_IKP22.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП22, Ом;
KC_SKM_AI_ToHMI.R3_IKP23.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП23, Ом;
KC_SKM_AI_ToHMI.R3_IKP24.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП24, Ом;
KC_SKM_AI_ToHMI.R3_IKP25.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП25, Ом;
KC_SKM_AI_ToHMI.R3_IKP26.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП26, Ом;
KC_SKM_AI_ToHMI.R3_IKP27.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП27, Ом;
KC_SKM_AI_ToHMI.R3_IKP28.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП28, Ом;
KC_SKM_AI_ToHMI.R3_IKP29.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП29, Ом;
KC_SKM_AI_ToHMI.R3_IKP30.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП30, Ом;
KC_SKM_AI_ToHMI.R3_IKP31.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП31, Ом;
KC_SKM_AI_ToHMI.R3_IKP32.manual := tmpPermit; //Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП32, Ом;
KC_SKM_AI_ToHMI.Iz_IKP1.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП1, А;
KC_SKM_AI_ToHMI.Iz_IKP2.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП2, А;
KC_SKM_AI_ToHMI.Iz_IKP3.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП3, А;
KC_SKM_AI_ToHMI.Iz_IKP4.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП4, А;
KC_SKM_AI_ToHMI.Iz_IKP5.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП5, А;
KC_SKM_AI_ToHMI.Iz_IKP6.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП6, А;
KC_SKM_AI_ToHMI.Iz_IKP7.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП7, А;
KC_SKM_AI_ToHMI.Iz_IKP8.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП8, А;
KC_SKM_AI_ToHMI.Iz_IKP9.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП9, А;
KC_SKM_AI_ToHMI.Iz_IKP10.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП10, А;
KC_SKM_AI_ToHMI.Iz_IKP11.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП11, А;
KC_SKM_AI_ToHMI.Iz_IKP12.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП12, А;
KC_SKM_AI_ToHMI.Iz_IKP13.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП13, А;
KC_SKM_AI_ToHMI.Iz_IKP14.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП14, А;
KC_SKM_AI_ToHMI.Iz_IKP15.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП15, А;
KC_SKM_AI_ToHMI.Iz_IKP16.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП16, А;
KC_SKM_AI_ToHMI.Iz_IKP17.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП17, А;
KC_SKM_AI_ToHMI.Iz_IKP18.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП18, А;
KC_SKM_AI_ToHMI.Iz_IKP19.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП19, А;
KC_SKM_AI_ToHMI.Iz_IKP20.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП20, А;
KC_SKM_AI_ToHMI.Iz_IKP21.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП21, А;
KC_SKM_AI_ToHMI.Iz_IKP22.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП22, А;
KC_SKM_AI_ToHMI.Iz_IKP23.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП23, А;
KC_SKM_AI_ToHMI.Iz_IKP24.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП24, А;
KC_SKM_AI_ToHMI.Iz_IKP25.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП25, А;
KC_SKM_AI_ToHMI.Iz_IKP26.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП26, А;
KC_SKM_AI_ToHMI.Iz_IKP27.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП27, А;
KC_SKM_AI_ToHMI.Iz_IKP28.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП28, А;
KC_SKM_AI_ToHMI.Iz_IKP29.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП29, А;
KC_SKM_AI_ToHMI.Iz_IKP30.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП30, А;
KC_SKM_AI_ToHMI.Iz_IKP31.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП31, А;
KC_SKM_AI_ToHMI.Iz_IKP32.manual := tmpPermit; //Защитный ток НГК_БИ_ИКП32, А;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <FunctionBlock UUID="X7ICJEGNDGNUJLPNWC2HJ5DPTI" Name="KC_SKM_mb_AI_CallAll_FB">
                        <Variables>
                            <Variable UUID="EFB3HK5RW3VEFGTWIXPYBSBKPQ" Name="Proc_TMR_ON" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                            <Variable UUID="IZTUBYPR3EZUNC4TTNIPAW5SV4" Name="TMO_ON" Type="BOOL" Usage="internal" />
                            <Variable UUID="LLAEHX5O4QNE3BOJEZY36H3UCA" Name="TMR_ON" Type="TIME" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[Proc_TMR_ON(TRUE, T#15s, TMO_ON, TMR_ON);
IF not TMO_ON THEN

//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Ток поляризации НГК_БИ_ИКП, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP1,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,0);
//Ток поляризации НГК_БИ_ИКП2, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP2,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,1);
//Ток поляризации НГК_БИ_ИКП3, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP3,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,2);
//Ток поляризации НГК_БИ_ИКП4, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP4,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,3);
//Ток поляризации НГК_БИ_ИКП5, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP5,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,4);
//Ток поляризации НГК_БИ_ИКП6, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP6,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,5);
//Ток поляризации НГК_БИ_ИКП7, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP7,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,6);
//Ток поляризации НГК_БИ_ИКП8, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP8,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,7);
//Ток поляризации НГК_БИ_ИКП9, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP9,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,8);
//Ток поляризации НГК_БИ_ИКП10, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP10,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,9);
//Ток поляризации НГК_БИ_ИКП11, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP11,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,10);
//Ток поляризации НГК_БИ_ИКП12, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP12,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,11);
//Ток поляризации НГК_БИ_ИКП13, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP13,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,12);
//Ток поляризации НГК_БИ_ИКП14, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP14,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,13);
//Ток поляризации НГК_БИ_ИКП15, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP15,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,14);
//Ток поляризации НГК_БИ_ИКП16, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP16,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,15);
//Ток поляризации НГК_БИ_ИКП17, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP17,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,16);
//Ток поляризации НГК_БИ_ИКП18, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP18,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,17);
//Ток поляризации НГК_БИ_ИКП19, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP19,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,18);
//Ток поляризации НГК_БИ_ИКП20, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP20,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,19);
//Ток поляризации НГК_БИ_ИКП21, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP21,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,20);
//Ток поляризации НГК_БИ_ИКП22, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP22,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,21);
//Ток поляризации НГК_БИ_ИКП23, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP23,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,22);
//Ток поляризации НГК_БИ_ИКП24, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP24,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,23);
//Ток поляризации НГК_БИ_ИКП25, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP25,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,24);
//Ток поляризации НГК_БИ_ИКП26, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP26,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,25);
//Ток поляризации НГК_БИ_ИКП27, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP27,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,26);
//Ток поляризации НГК_БИ_ИКП28, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP28,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,27);
//Ток поляризации НГК_БИ_ИКП29, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP29,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,28);
//Ток поляризации НГК_БИ_ИКП30, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP30,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,29);
//Ток поляризации НГК_БИ_ИКП31, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP31,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,30);
//Ток поляризации НГК_БИ_ИКП32, мА
mb_AI_init(KC_SKM_AI_Settings.I_IKP32,-5.0,5.0,-5.3,5.3,-5.6,5.6,7,-5000.0,5000.0,0.0,31);
//Поляризационнный потенциал НГК_БИ_ИКП1, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP1,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,32);
//Поляризационнный потенциал НГК_БИ_ИКП2, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP2,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,33);
//Поляризационнный потенциал НГК_БИ_ИКП3, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP3,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,34);
//Поляризационнный потенциал НГК_БИ_ИКП4, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP4,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,35);
//Поляризационнный потенциал НГК_БИ_ИКП5, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP5,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,36);
//Поляризационнный потенциал НГК_БИ_ИКП6, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP6,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,37);
//Поляризационнный потенциал НГК_БИ_ИКП7, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP7,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,38);
//Поляризационнный потенциал НГК_БИ_ИКП8, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP8,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,39);
//Поляризационнный потенциал НГК_БИ_ИКП9, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP9,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,40);
//Поляризационнный потенциал НГК_БИ_ИКП10, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP10,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,41);
//Поляризационнный потенциал НГК_БИ_ИКП11, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP11,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,42);
//Поляризационнный потенциал НГК_БИ_ИКП12, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP12,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,43);
//Поляризационнный потенциал НГК_БИ_ИКП13, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP13,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,44);
//Поляризационнный потенциал НГК_БИ_ИКП14, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP14,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,45);
//Поляризационнный потенциал НГК_БИ_ИКП15, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP15,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,46);
//Поляризационнный потенциал НГК_БИ_ИКП16, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP16,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,47);
//Поляризационнный потенциал НГК_БИ_ИКП17, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP17,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,48);
//Поляризационнный потенциал НГК_БИ_ИКП18, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP18,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,49);
//Поляризационнный потенциал НГК_БИ_ИКП19, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP19,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,50);
//Поляризационнный потенциал НГК_БИ_ИКП20, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP20,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,51);
//Поляризационнный потенциал НГК_БИ_ИКП21, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP21,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,52);
//Поляризационнный потенциал НГК_БИ_ИКП22, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP22,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,53);
//Поляризационнный потенциал НГК_БИ_ИКП23, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP23,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,54);
//Поляризационнный потенциал НГК_БИ_ИКП24, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP24,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,55);
//Поляризационнный потенциал НГК_БИ_ИКП25, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP25,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,56);
//Поляризационнный потенциал НГК_БИ_ИКП26, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP26,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,57);
//Поляризационнный потенциал НГК_БИ_ИКП27, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP27,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,58);
//Поляризационнный потенциал НГК_БИ_ИКП28, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP28,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,59);
//Поляризационнный потенциал НГК_БИ_ИКП29, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP29,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,60);
//Поляризационнный потенциал НГК_БИ_ИКП30, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP30,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,61);
//Поляризационнный потенциал НГК_БИ_ИКП31, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP31,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,62);
//Поляризационнный потенциал НГК_БИ_ИКП32, В
mb_AI_init(KC_SKM_AI_Settings.U_IKP32,-2.0,2.0,-2.12,2.12,-2.24,2.24,7,-2000.0,2000.0,0.0,63);
//Суммарный потенциал НГК_БИ_ИКП1, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP1,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,64);
//Суммарный потенциал НГК_БИ_ИКП2, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP2,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,65);
//Суммарный потенциал НГК_БИ_ИКП3, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP3,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,66);
//Суммарный потенциал НГК_БИ_ИКП4, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP4,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,67);
//Суммарный потенциал НГК_БИ_ИКП5, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP5,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,68);
//Суммарный потенциал НГК_БИ_ИКП6, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP6,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,69);
//Суммарный потенциал НГК_БИ_ИКП7, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP7,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,70);
//Суммарный потенциал НГК_БИ_ИКП8, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP8,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,71);
//Суммарный потенциал НГК_БИ_ИКП9, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP9,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,72);
//Суммарный потенциал НГК_БИ_ИКП10, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP10,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,73);
//Суммарный потенциал НГК_БИ_ИКП11, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP11,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,74);
//Суммарный потенциал НГК_БИ_ИКП12, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP12,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,75);
//Суммарный потенциал НГК_БИ_ИКП13, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP13,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,76);
//Суммарный потенциал НГК_БИ_ИКП14, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP14,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,77);
//Суммарный потенциал НГК_БИ_ИКП15, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP15,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,78);
//Суммарный потенциал НГК_БИ_ИКП16, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP16,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,79);
//Суммарный потенциал НГК_БИ_ИКП17, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP17,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,80);
//Суммарный потенциал НГК_БИ_ИКП18, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP18,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,81);
//Суммарный потенциал НГК_БИ_ИКП19, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP19,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,82);
//Суммарный потенциал НГК_БИ_ИКП20, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP20,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,83);
//Суммарный потенциал НГК_БИ_ИКП21, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP21,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,84);
//Суммарный потенциал НГК_БИ_ИКП22, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP22,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,85);
//Суммарный потенциал НГК_БИ_ИКП23, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP23,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,86);
//Суммарный потенциал НГК_БИ_ИКП24, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP24,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,87);
//Суммарный потенциал НГК_БИ_ИКП25, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP25,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,88);
//Суммарный потенциал НГК_БИ_ИКП26, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP26,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,89);
//Суммарный потенциал НГК_БИ_ИКП27, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP27,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,90);
//Суммарный потенциал НГК_БИ_ИКП28, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP28,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,91);
//Суммарный потенциал НГК_БИ_ИКП29, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP29,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,92);
//Суммарный потенциал НГК_БИ_ИКП30, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP30,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,93);
//Суммарный потенциал НГК_БИ_ИКП31, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP31,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,94);
//Суммарный потенциал НГК_БИ_ИКП32, В
mb_AI_init(KC_SKM_AI_Settings.Sum_U_IKP32,-10.0,10.0,-10.6,10.6,-11.2,11.2,7,-10000.0,10000.0,0.0,95);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП1, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP1,0.0,110.0,-3.3,113.3,-6.6,116.6,9,100.0,0.0,0.0,96);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП2, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP2,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,97);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП3, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP3,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,98);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП4, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP4,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,99);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП5, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP5,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,100);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП6, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP6,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,101);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП7, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP7,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,102);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП8, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP8,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,103);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП9, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP9,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,104);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП10, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP10,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,105);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП11, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP11,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,106);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП12, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP12,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,107);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП13, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP13,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,108);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП14, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP14,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,109);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП15, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP15,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,110);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП16, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP16,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,111);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП17, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP17,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,112);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП18, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP18,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,113);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП19, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP19,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,114);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП20, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP20,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,115);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП21, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP21,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,116);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП22, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP22,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,117);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП23, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP23,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,118);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП24, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP24,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,119);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП25, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP25,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,120);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП26, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP26,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,121);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП27, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP27,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,122);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП28, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP28,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,123);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП29, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP29,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,124);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП30, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP30,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,125);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП31, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP31,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,126);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП32, Ом
mb_AI_init(KC_SKM_AI_Settings.R1_IKP32,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,127);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП1, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP1,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,128);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП2, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP2,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,129);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП3, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP3,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,130);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП4, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP4,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,131);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП5, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP5,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,132);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП6, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP6,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,133);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП7, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP7,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,134);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП8, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP8,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,135);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП9, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP9,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,136);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП10, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP10,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,137);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП11, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP11,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,138);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП12, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP12,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,139);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП13, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP13,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,140);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП14, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP14,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,141);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП15, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP15,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,142);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП16, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP16,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,143);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП17, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP17,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,144);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП18, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP18,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,145);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП19, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP19,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,146);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП20, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP20,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,147);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП21, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP21,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,148);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП22, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP22,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,149);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП23, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP23,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,150);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП24, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP24,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,151);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП25, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP25,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,152);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП26, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP26,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,153);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП27, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP27,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,154);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП28, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP28,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,155);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП29, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP29,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,156);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП30, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP30,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,157);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП31, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP31,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,158);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП32, Ом
mb_AI_init(KC_SKM_AI_Settings.R2_IKP32,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,159);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП1, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP1,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,160);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП2, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP2,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,161);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП3, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP3,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,162);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП4, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP4,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,163);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП5, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP5,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,164);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП6, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP6,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,165);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП7, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP7,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,166);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП8, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP8,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,167);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП9, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP9,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,168);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП10, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP10,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,169);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП11, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP11,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,170);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП12, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP12,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,171);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП13, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP13,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,172);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП14, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP14,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,173);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП15, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP15,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,174);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП16, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP16,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,175);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП17, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP17,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,176);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП18, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP18,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,177);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП19, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP19,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,178);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП20, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP20,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,179);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП21, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP21,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,180);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП22, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP22,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,181);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП23, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP23,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,182);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП24, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP24,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,183);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП25, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP25,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,184);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП26, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP26,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,185);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП27, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP27,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,186);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП28, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP28,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,187);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП29, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP29,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,188);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП30, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP30,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,189);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП31, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP31,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,190);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП32, Ом
mb_AI_init(KC_SKM_AI_Settings.R3_IKP32,0.0,110.0,-3.3,113.3,-6.6,116.6,11,100.0,0.0,0.0,191);
//Защитный ток НГК_БИ_ИКП1, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP1,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,192);
//Защитный ток НГК_БИ_ИКП2, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP2,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,193);
//Защитный ток НГК_БИ_ИКП3, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP3,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,194);
//Защитный ток НГК_БИ_ИКП4, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP4,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,195);
//Защитный ток НГК_БИ_ИКП5, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP5,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,196);
//Защитный ток НГК_БИ_ИКП6, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP6,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,197);
//Защитный ток НГК_БИ_ИКП7, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP7,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,198);
//Защитный ток НГК_БИ_ИКП8, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP8,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,199);
//Защитный ток НГК_БИ_ИКП9, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP9,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,200);
//Защитный ток НГК_БИ_ИКП10, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP10,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,201);
//Защитный ток НГК_БИ_ИКП11, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP11,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,202);
//Защитный ток НГК_БИ_ИКП12, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP12,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,203);
//Защитный ток НГК_БИ_ИКП13, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP13,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,204);
//Защитный ток НГК_БИ_ИКП14, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP14,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,205);
//Защитный ток НГК_БИ_ИКП15, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP15,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,206);
//Защитный ток НГК_БИ_ИКП16, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP16,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,207);
//Защитный ток НГК_БИ_ИКП17, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP17,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,208);
//Защитный ток НГК_БИ_ИКП18, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP18,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,209);
//Защитный ток НГК_БИ_ИКП19, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP19,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,210);
//Защитный ток НГК_БИ_ИКП20, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP20,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,211);
//Защитный ток НГК_БИ_ИКП21, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP21,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,212);
//Защитный ток НГК_БИ_ИКП22, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP22,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,213);
//Защитный ток НГК_БИ_ИКП23, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP23,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,214);
//Защитный ток НГК_БИ_ИКП24, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP24,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,215);
//Защитный ток НГК_БИ_ИКП25, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP25,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,216);
//Защитный ток НГК_БИ_ИКП26, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP26,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,217);
//Защитный ток НГК_БИ_ИКП27, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP27,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,218);
//Защитный ток НГК_БИ_ИКП28, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP28,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,219);
//Защитный ток НГК_БИ_ИКП29, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP29,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,220);
//Защитный ток НГК_БИ_ИКП30, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP30,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,221);
//Защитный ток НГК_БИ_ИКП31, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP31,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,222);
//Защитный ток НГК_БИ_ИКП32, А
mb_AI_init(KC_SKM_AI_Settings.Iz_IKP32,0.0,50.0,-1.5,51.5,-3.0,53.0,11,100.0,0.0,0.0,223);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Ток поляризации НГК_БИ_ИКП, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP1),KC_SKM_AI_Settings.I_IKP1,KC_SKM_AI_FromHMI.I_IKP1,KC_SKM_AI_ToHMI.I_IKP1);
//Ток поляризации НГК_БИ_ИКП2, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP2),KC_SKM_AI_Settings.I_IKP2,KC_SKM_AI_FromHMI.I_IKP2,KC_SKM_AI_ToHMI.I_IKP2);
//Ток поляризации НГК_БИ_ИКП3, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP3),KC_SKM_AI_Settings.I_IKP3,KC_SKM_AI_FromHMI.I_IKP3,KC_SKM_AI_ToHMI.I_IKP3);
//Ток поляризации НГК_БИ_ИКП4, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP4),KC_SKM_AI_Settings.I_IKP4,KC_SKM_AI_FromHMI.I_IKP4,KC_SKM_AI_ToHMI.I_IKP4);
//Ток поляризации НГК_БИ_ИКП5, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP5),KC_SKM_AI_Settings.I_IKP5,KC_SKM_AI_FromHMI.I_IKP5,KC_SKM_AI_ToHMI.I_IKP5);
//Ток поляризации НГК_БИ_ИКП6, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP6),KC_SKM_AI_Settings.I_IKP6,KC_SKM_AI_FromHMI.I_IKP6,KC_SKM_AI_ToHMI.I_IKP6);
//Ток поляризации НГК_БИ_ИКП7, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP7),KC_SKM_AI_Settings.I_IKP7,KC_SKM_AI_FromHMI.I_IKP7,KC_SKM_AI_ToHMI.I_IKP7);
//Ток поляризации НГК_БИ_ИКП8, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP8),KC_SKM_AI_Settings.I_IKP8,KC_SKM_AI_FromHMI.I_IKP8,KC_SKM_AI_ToHMI.I_IKP8);
//Ток поляризации НГК_БИ_ИКП9, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP9),KC_SKM_AI_Settings.I_IKP9,KC_SKM_AI_FromHMI.I_IKP9,KC_SKM_AI_ToHMI.I_IKP9);
//Ток поляризации НГК_БИ_ИКП10, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP10),KC_SKM_AI_Settings.I_IKP10,KC_SKM_AI_FromHMI.I_IKP10,KC_SKM_AI_ToHMI.I_IKP10);
//Ток поляризации НГК_БИ_ИКП11, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP11),KC_SKM_AI_Settings.I_IKP11,KC_SKM_AI_FromHMI.I_IKP11,KC_SKM_AI_ToHMI.I_IKP11);
//Ток поляризации НГК_БИ_ИКП12, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP12),KC_SKM_AI_Settings.I_IKP12,KC_SKM_AI_FromHMI.I_IKP12,KC_SKM_AI_ToHMI.I_IKP12);
//Ток поляризации НГК_БИ_ИКП13, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP13),KC_SKM_AI_Settings.I_IKP13,KC_SKM_AI_FromHMI.I_IKP13,KC_SKM_AI_ToHMI.I_IKP13);
//Ток поляризации НГК_БИ_ИКП14, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP14),KC_SKM_AI_Settings.I_IKP14,KC_SKM_AI_FromHMI.I_IKP14,KC_SKM_AI_ToHMI.I_IKP14);
//Ток поляризации НГК_БИ_ИКП15, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP15),KC_SKM_AI_Settings.I_IKP15,KC_SKM_AI_FromHMI.I_IKP15,KC_SKM_AI_ToHMI.I_IKP15);
//Ток поляризации НГК_БИ_ИКП16, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP16),KC_SKM_AI_Settings.I_IKP16,KC_SKM_AI_FromHMI.I_IKP16,KC_SKM_AI_ToHMI.I_IKP16);
//Ток поляризации НГК_БИ_ИКП17, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP17),KC_SKM_AI_Settings.I_IKP17,KC_SKM_AI_FromHMI.I_IKP17,KC_SKM_AI_ToHMI.I_IKP17);
//Ток поляризации НГК_БИ_ИКП18, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP18),KC_SKM_AI_Settings.I_IKP18,KC_SKM_AI_FromHMI.I_IKP18,KC_SKM_AI_ToHMI.I_IKP18);
//Ток поляризации НГК_БИ_ИКП19, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP19),KC_SKM_AI_Settings.I_IKP19,KC_SKM_AI_FromHMI.I_IKP19,KC_SKM_AI_ToHMI.I_IKP19);
//Ток поляризации НГК_БИ_ИКП20, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP20),KC_SKM_AI_Settings.I_IKP20,KC_SKM_AI_FromHMI.I_IKP20,KC_SKM_AI_ToHMI.I_IKP20);
//Ток поляризации НГК_БИ_ИКП21, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP21),KC_SKM_AI_Settings.I_IKP21,KC_SKM_AI_FromHMI.I_IKP21,KC_SKM_AI_ToHMI.I_IKP21);
//Ток поляризации НГК_БИ_ИКП22, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP22),KC_SKM_AI_Settings.I_IKP22,KC_SKM_AI_FromHMI.I_IKP22,KC_SKM_AI_ToHMI.I_IKP22);
//Ток поляризации НГК_БИ_ИКП23, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP23),KC_SKM_AI_Settings.I_IKP23,KC_SKM_AI_FromHMI.I_IKP23,KC_SKM_AI_ToHMI.I_IKP23);
//Ток поляризации НГК_БИ_ИКП24, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP24),KC_SKM_AI_Settings.I_IKP24,KC_SKM_AI_FromHMI.I_IKP24,KC_SKM_AI_ToHMI.I_IKP24);
//Ток поляризации НГК_БИ_ИКП25, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP25),KC_SKM_AI_Settings.I_IKP25,KC_SKM_AI_FromHMI.I_IKP25,KC_SKM_AI_ToHMI.I_IKP25);
//Ток поляризации НГК_БИ_ИКП26, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP26),KC_SKM_AI_Settings.I_IKP26,KC_SKM_AI_FromHMI.I_IKP26,KC_SKM_AI_ToHMI.I_IKP26);
//Ток поляризации НГК_БИ_ИКП27, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP27),KC_SKM_AI_Settings.I_IKP27,KC_SKM_AI_FromHMI.I_IKP27,KC_SKM_AI_ToHMI.I_IKP27);
//Ток поляризации НГК_БИ_ИКП28, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP28),KC_SKM_AI_Settings.I_IKP28,KC_SKM_AI_FromHMI.I_IKP28,KC_SKM_AI_ToHMI.I_IKP28);
//Ток поляризации НГК_БИ_ИКП29, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP29),KC_SKM_AI_Settings.I_IKP29,KC_SKM_AI_FromHMI.I_IKP29,KC_SKM_AI_ToHMI.I_IKP29);
//Ток поляризации НГК_БИ_ИКП30, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP30),KC_SKM_AI_Settings.I_IKP30,KC_SKM_AI_FromHMI.I_IKP30,KC_SKM_AI_ToHMI.I_IKP30);
//Ток поляризации НГК_БИ_ИКП31, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP31),KC_SKM_AI_Settings.I_IKP31,KC_SKM_AI_FromHMI.I_IKP31,KC_SKM_AI_ToHMI.I_IKP31);
//Ток поляризации НГК_БИ_ИКП32, мА
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.I_IKP32),KC_SKM_AI_Settings.I_IKP32,KC_SKM_AI_FromHMI.I_IKP32,KC_SKM_AI_ToHMI.I_IKP32);
//Поляризационнный потенциал НГК_БИ_ИКП1, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP1),KC_SKM_AI_Settings.U_IKP1,KC_SKM_AI_FromHMI.U_IKP1,KC_SKM_AI_ToHMI.U_IKP1);
//Поляризационнный потенциал НГК_БИ_ИКП2, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP2),KC_SKM_AI_Settings.U_IKP2,KC_SKM_AI_FromHMI.U_IKP2,KC_SKM_AI_ToHMI.U_IKP2);
//Поляризационнный потенциал НГК_БИ_ИКП3, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP3),KC_SKM_AI_Settings.U_IKP3,KC_SKM_AI_FromHMI.U_IKP3,KC_SKM_AI_ToHMI.U_IKP3);
//Поляризационнный потенциал НГК_БИ_ИКП4, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP4),KC_SKM_AI_Settings.U_IKP4,KC_SKM_AI_FromHMI.U_IKP4,KC_SKM_AI_ToHMI.U_IKP4);
//Поляризационнный потенциал НГК_БИ_ИКП5, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP5),KC_SKM_AI_Settings.U_IKP5,KC_SKM_AI_FromHMI.U_IKP5,KC_SKM_AI_ToHMI.U_IKP5);
//Поляризационнный потенциал НГК_БИ_ИКП6, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP6),KC_SKM_AI_Settings.U_IKP6,KC_SKM_AI_FromHMI.U_IKP6,KC_SKM_AI_ToHMI.U_IKP6);
//Поляризационнный потенциал НГК_БИ_ИКП7, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP7),KC_SKM_AI_Settings.U_IKP7,KC_SKM_AI_FromHMI.U_IKP7,KC_SKM_AI_ToHMI.U_IKP7);
//Поляризационнный потенциал НГК_БИ_ИКП8, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP8),KC_SKM_AI_Settings.U_IKP8,KC_SKM_AI_FromHMI.U_IKP8,KC_SKM_AI_ToHMI.U_IKP8);
//Поляризационнный потенциал НГК_БИ_ИКП9, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP9),KC_SKM_AI_Settings.U_IKP9,KC_SKM_AI_FromHMI.U_IKP9,KC_SKM_AI_ToHMI.U_IKP9);
//Поляризационнный потенциал НГК_БИ_ИКП10, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP10),KC_SKM_AI_Settings.U_IKP10,KC_SKM_AI_FromHMI.U_IKP10,KC_SKM_AI_ToHMI.U_IKP10);
//Поляризационнный потенциал НГК_БИ_ИКП11, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP11),KC_SKM_AI_Settings.U_IKP11,KC_SKM_AI_FromHMI.U_IKP11,KC_SKM_AI_ToHMI.U_IKP11);
//Поляризационнный потенциал НГК_БИ_ИКП12, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP12),KC_SKM_AI_Settings.U_IKP12,KC_SKM_AI_FromHMI.U_IKP12,KC_SKM_AI_ToHMI.U_IKP12);
//Поляризационнный потенциал НГК_БИ_ИКП13, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP13),KC_SKM_AI_Settings.U_IKP13,KC_SKM_AI_FromHMI.U_IKP13,KC_SKM_AI_ToHMI.U_IKP13);
//Поляризационнный потенциал НГК_БИ_ИКП14, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP14),KC_SKM_AI_Settings.U_IKP14,KC_SKM_AI_FromHMI.U_IKP14,KC_SKM_AI_ToHMI.U_IKP14);
//Поляризационнный потенциал НГК_БИ_ИКП15, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP15),KC_SKM_AI_Settings.U_IKP15,KC_SKM_AI_FromHMI.U_IKP15,KC_SKM_AI_ToHMI.U_IKP15);
//Поляризационнный потенциал НГК_БИ_ИКП16, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP16),KC_SKM_AI_Settings.U_IKP16,KC_SKM_AI_FromHMI.U_IKP16,KC_SKM_AI_ToHMI.U_IKP16);
//Поляризационнный потенциал НГК_БИ_ИКП17, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP17),KC_SKM_AI_Settings.U_IKP17,KC_SKM_AI_FromHMI.U_IKP17,KC_SKM_AI_ToHMI.U_IKP17);
//Поляризационнный потенциал НГК_БИ_ИКП18, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP18),KC_SKM_AI_Settings.U_IKP18,KC_SKM_AI_FromHMI.U_IKP18,KC_SKM_AI_ToHMI.U_IKP18);
//Поляризационнный потенциал НГК_БИ_ИКП19, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP19),KC_SKM_AI_Settings.U_IKP19,KC_SKM_AI_FromHMI.U_IKP19,KC_SKM_AI_ToHMI.U_IKP19);
//Поляризационнный потенциал НГК_БИ_ИКП20, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP20),KC_SKM_AI_Settings.U_IKP20,KC_SKM_AI_FromHMI.U_IKP20,KC_SKM_AI_ToHMI.U_IKP20);
//Поляризационнный потенциал НГК_БИ_ИКП21, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP21),KC_SKM_AI_Settings.U_IKP21,KC_SKM_AI_FromHMI.U_IKP21,KC_SKM_AI_ToHMI.U_IKP21);
//Поляризационнный потенциал НГК_БИ_ИКП22, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP22),KC_SKM_AI_Settings.U_IKP22,KC_SKM_AI_FromHMI.U_IKP22,KC_SKM_AI_ToHMI.U_IKP22);
//Поляризационнный потенциал НГК_БИ_ИКП23, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP23),KC_SKM_AI_Settings.U_IKP23,KC_SKM_AI_FromHMI.U_IKP23,KC_SKM_AI_ToHMI.U_IKP23);
//Поляризационнный потенциал НГК_БИ_ИКП24, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP24),KC_SKM_AI_Settings.U_IKP24,KC_SKM_AI_FromHMI.U_IKP24,KC_SKM_AI_ToHMI.U_IKP24);
//Поляризационнный потенциал НГК_БИ_ИКП25, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP25),KC_SKM_AI_Settings.U_IKP25,KC_SKM_AI_FromHMI.U_IKP25,KC_SKM_AI_ToHMI.U_IKP25);
//Поляризационнный потенциал НГК_БИ_ИКП26, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP26),KC_SKM_AI_Settings.U_IKP26,KC_SKM_AI_FromHMI.U_IKP26,KC_SKM_AI_ToHMI.U_IKP26);
//Поляризационнный потенциал НГК_БИ_ИКП27, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP27),KC_SKM_AI_Settings.U_IKP27,KC_SKM_AI_FromHMI.U_IKP27,KC_SKM_AI_ToHMI.U_IKP27);
//Поляризационнный потенциал НГК_БИ_ИКП28, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP28),KC_SKM_AI_Settings.U_IKP28,KC_SKM_AI_FromHMI.U_IKP28,KC_SKM_AI_ToHMI.U_IKP28);
//Поляризационнный потенциал НГК_БИ_ИКП29, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP29),KC_SKM_AI_Settings.U_IKP29,KC_SKM_AI_FromHMI.U_IKP29,KC_SKM_AI_ToHMI.U_IKP29);
//Поляризационнный потенциал НГК_БИ_ИКП30, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP30),KC_SKM_AI_Settings.U_IKP30,KC_SKM_AI_FromHMI.U_IKP30,KC_SKM_AI_ToHMI.U_IKP30);
//Поляризационнный потенциал НГК_БИ_ИКП31, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP31),KC_SKM_AI_Settings.U_IKP31,KC_SKM_AI_FromHMI.U_IKP31,KC_SKM_AI_ToHMI.U_IKP31);
//Поляризационнный потенциал НГК_БИ_ИКП32, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.U_IKP32),KC_SKM_AI_Settings.U_IKP32,KC_SKM_AI_FromHMI.U_IKP32,KC_SKM_AI_ToHMI.U_IKP32);
//Суммарный потенциал НГК_БИ_ИКП1, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP1),KC_SKM_AI_Settings.Sum_U_IKP1,KC_SKM_AI_FromHMI.Sum_U_IKP1,KC_SKM_AI_ToHMI.Sum_U_IKP1);
//Суммарный потенциал НГК_БИ_ИКП2, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP2),KC_SKM_AI_Settings.Sum_U_IKP2,KC_SKM_AI_FromHMI.Sum_U_IKP2,KC_SKM_AI_ToHMI.Sum_U_IKP2);
//Суммарный потенциал НГК_БИ_ИКП3, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP3),KC_SKM_AI_Settings.Sum_U_IKP3,KC_SKM_AI_FromHMI.Sum_U_IKP3,KC_SKM_AI_ToHMI.Sum_U_IKP3);
//Суммарный потенциал НГК_БИ_ИКП4, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP4),KC_SKM_AI_Settings.Sum_U_IKP4,KC_SKM_AI_FromHMI.Sum_U_IKP4,KC_SKM_AI_ToHMI.Sum_U_IKP4);
//Суммарный потенциал НГК_БИ_ИКП5, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP5),KC_SKM_AI_Settings.Sum_U_IKP5,KC_SKM_AI_FromHMI.Sum_U_IKP5,KC_SKM_AI_ToHMI.Sum_U_IKP5);
//Суммарный потенциал НГК_БИ_ИКП6, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP6),KC_SKM_AI_Settings.Sum_U_IKP6,KC_SKM_AI_FromHMI.Sum_U_IKP6,KC_SKM_AI_ToHMI.Sum_U_IKP6);
//Суммарный потенциал НГК_БИ_ИКП7, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP7),KC_SKM_AI_Settings.Sum_U_IKP7,KC_SKM_AI_FromHMI.Sum_U_IKP7,KC_SKM_AI_ToHMI.Sum_U_IKP7);
//Суммарный потенциал НГК_БИ_ИКП8, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP8),KC_SKM_AI_Settings.Sum_U_IKP8,KC_SKM_AI_FromHMI.Sum_U_IKP8,KC_SKM_AI_ToHMI.Sum_U_IKP8);
//Суммарный потенциал НГК_БИ_ИКП9, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP9),KC_SKM_AI_Settings.Sum_U_IKP9,KC_SKM_AI_FromHMI.Sum_U_IKP9,KC_SKM_AI_ToHMI.Sum_U_IKP9);
//Суммарный потенциал НГК_БИ_ИКП10, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP10),KC_SKM_AI_Settings.Sum_U_IKP10,KC_SKM_AI_FromHMI.Sum_U_IKP10,KC_SKM_AI_ToHMI.Sum_U_IKP10);
//Суммарный потенциал НГК_БИ_ИКП11, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP11),KC_SKM_AI_Settings.Sum_U_IKP11,KC_SKM_AI_FromHMI.Sum_U_IKP11,KC_SKM_AI_ToHMI.Sum_U_IKP11);
//Суммарный потенциал НГК_БИ_ИКП12, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP12),KC_SKM_AI_Settings.Sum_U_IKP12,KC_SKM_AI_FromHMI.Sum_U_IKP12,KC_SKM_AI_ToHMI.Sum_U_IKP12);
//Суммарный потенциал НГК_БИ_ИКП13, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP13),KC_SKM_AI_Settings.Sum_U_IKP13,KC_SKM_AI_FromHMI.Sum_U_IKP13,KC_SKM_AI_ToHMI.Sum_U_IKP13);
//Суммарный потенциал НГК_БИ_ИКП14, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP14),KC_SKM_AI_Settings.Sum_U_IKP14,KC_SKM_AI_FromHMI.Sum_U_IKP14,KC_SKM_AI_ToHMI.Sum_U_IKP14);
//Суммарный потенциал НГК_БИ_ИКП15, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP15),KC_SKM_AI_Settings.Sum_U_IKP15,KC_SKM_AI_FromHMI.Sum_U_IKP15,KC_SKM_AI_ToHMI.Sum_U_IKP15);
//Суммарный потенциал НГК_БИ_ИКП16, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP16),KC_SKM_AI_Settings.Sum_U_IKP16,KC_SKM_AI_FromHMI.Sum_U_IKP16,KC_SKM_AI_ToHMI.Sum_U_IKP16);
//Суммарный потенциал НГК_БИ_ИКП17, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP17),KC_SKM_AI_Settings.Sum_U_IKP17,KC_SKM_AI_FromHMI.Sum_U_IKP17,KC_SKM_AI_ToHMI.Sum_U_IKP17);
//Суммарный потенциал НГК_БИ_ИКП18, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP18),KC_SKM_AI_Settings.Sum_U_IKP18,KC_SKM_AI_FromHMI.Sum_U_IKP18,KC_SKM_AI_ToHMI.Sum_U_IKP18);
//Суммарный потенциал НГК_БИ_ИКП19, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP19),KC_SKM_AI_Settings.Sum_U_IKP19,KC_SKM_AI_FromHMI.Sum_U_IKP19,KC_SKM_AI_ToHMI.Sum_U_IKP19);
//Суммарный потенциал НГК_БИ_ИКП20, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP20),KC_SKM_AI_Settings.Sum_U_IKP20,KC_SKM_AI_FromHMI.Sum_U_IKP20,KC_SKM_AI_ToHMI.Sum_U_IKP20);
//Суммарный потенциал НГК_БИ_ИКП21, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP21),KC_SKM_AI_Settings.Sum_U_IKP21,KC_SKM_AI_FromHMI.Sum_U_IKP21,KC_SKM_AI_ToHMI.Sum_U_IKP21);
//Суммарный потенциал НГК_БИ_ИКП22, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP22),KC_SKM_AI_Settings.Sum_U_IKP22,KC_SKM_AI_FromHMI.Sum_U_IKP22,KC_SKM_AI_ToHMI.Sum_U_IKP22);
//Суммарный потенциал НГК_БИ_ИКП23, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP23),KC_SKM_AI_Settings.Sum_U_IKP23,KC_SKM_AI_FromHMI.Sum_U_IKP23,KC_SKM_AI_ToHMI.Sum_U_IKP23);
//Суммарный потенциал НГК_БИ_ИКП24, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP24),KC_SKM_AI_Settings.Sum_U_IKP24,KC_SKM_AI_FromHMI.Sum_U_IKP24,KC_SKM_AI_ToHMI.Sum_U_IKP24);
//Суммарный потенциал НГК_БИ_ИКП25, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP25),KC_SKM_AI_Settings.Sum_U_IKP25,KC_SKM_AI_FromHMI.Sum_U_IKP25,KC_SKM_AI_ToHMI.Sum_U_IKP25);
//Суммарный потенциал НГК_БИ_ИКП26, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP26),KC_SKM_AI_Settings.Sum_U_IKP26,KC_SKM_AI_FromHMI.Sum_U_IKP26,KC_SKM_AI_ToHMI.Sum_U_IKP26);
//Суммарный потенциал НГК_БИ_ИКП27, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP27),KC_SKM_AI_Settings.Sum_U_IKP27,KC_SKM_AI_FromHMI.Sum_U_IKP27,KC_SKM_AI_ToHMI.Sum_U_IKP27);
//Суммарный потенциал НГК_БИ_ИКП28, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP28),KC_SKM_AI_Settings.Sum_U_IKP28,KC_SKM_AI_FromHMI.Sum_U_IKP28,KC_SKM_AI_ToHMI.Sum_U_IKP28);
//Суммарный потенциал НГК_БИ_ИКП29, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP29),KC_SKM_AI_Settings.Sum_U_IKP29,KC_SKM_AI_FromHMI.Sum_U_IKP29,KC_SKM_AI_ToHMI.Sum_U_IKP29);
//Суммарный потенциал НГК_БИ_ИКП30, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP30),KC_SKM_AI_Settings.Sum_U_IKP30,KC_SKM_AI_FromHMI.Sum_U_IKP30,KC_SKM_AI_ToHMI.Sum_U_IKP30);
//Суммарный потенциал НГК_БИ_ИКП31, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP31),KC_SKM_AI_Settings.Sum_U_IKP31,KC_SKM_AI_FromHMI.Sum_U_IKP31,KC_SKM_AI_ToHMI.Sum_U_IKP31);
//Суммарный потенциал НГК_БИ_ИКП32, В
mb_AI_Processing(INT_TO_REAL(KC_SKM_AI_DRV.Sum_U_IKP32),KC_SKM_AI_Settings.Sum_U_IKP32,KC_SKM_AI_FromHMI.Sum_U_IKP32,KC_SKM_AI_ToHMI.Sum_U_IKP32);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП1, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP1),KC_SKM_AI_Settings.R1_IKP1,KC_SKM_AI_FromHMI.R1_IKP1,KC_SKM_AI_ToHMI.R1_IKP1);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП2, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP2),KC_SKM_AI_Settings.R1_IKP2,KC_SKM_AI_FromHMI.R1_IKP2,KC_SKM_AI_ToHMI.R1_IKP2);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП3, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP3),KC_SKM_AI_Settings.R1_IKP3,KC_SKM_AI_FromHMI.R1_IKP3,KC_SKM_AI_ToHMI.R1_IKP3);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП4, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP4),KC_SKM_AI_Settings.R1_IKP4,KC_SKM_AI_FromHMI.R1_IKP4,KC_SKM_AI_ToHMI.R1_IKP4);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП5, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP5),KC_SKM_AI_Settings.R1_IKP5,KC_SKM_AI_FromHMI.R1_IKP5,KC_SKM_AI_ToHMI.R1_IKP5);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП6, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP6),KC_SKM_AI_Settings.R1_IKP6,KC_SKM_AI_FromHMI.R1_IKP6,KC_SKM_AI_ToHMI.R1_IKP6);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП7, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP7),KC_SKM_AI_Settings.R1_IKP7,KC_SKM_AI_FromHMI.R1_IKP7,KC_SKM_AI_ToHMI.R1_IKP7);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП8, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP8),KC_SKM_AI_Settings.R1_IKP8,KC_SKM_AI_FromHMI.R1_IKP8,KC_SKM_AI_ToHMI.R1_IKP8);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП9, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP9),KC_SKM_AI_Settings.R1_IKP9,KC_SKM_AI_FromHMI.R1_IKP9,KC_SKM_AI_ToHMI.R1_IKP9);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП10, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP10),KC_SKM_AI_Settings.R1_IKP10,KC_SKM_AI_FromHMI.R1_IKP10,KC_SKM_AI_ToHMI.R1_IKP10);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП11, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP11),KC_SKM_AI_Settings.R1_IKP11,KC_SKM_AI_FromHMI.R1_IKP11,KC_SKM_AI_ToHMI.R1_IKP11);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП12, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP12),KC_SKM_AI_Settings.R1_IKP12,KC_SKM_AI_FromHMI.R1_IKP12,KC_SKM_AI_ToHMI.R1_IKP12);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП13, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP13),KC_SKM_AI_Settings.R1_IKP13,KC_SKM_AI_FromHMI.R1_IKP13,KC_SKM_AI_ToHMI.R1_IKP13);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП14, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP14),KC_SKM_AI_Settings.R1_IKP14,KC_SKM_AI_FromHMI.R1_IKP14,KC_SKM_AI_ToHMI.R1_IKP14);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП15, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP15),KC_SKM_AI_Settings.R1_IKP15,KC_SKM_AI_FromHMI.R1_IKP15,KC_SKM_AI_ToHMI.R1_IKP15);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП16, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP16),KC_SKM_AI_Settings.R1_IKP16,KC_SKM_AI_FromHMI.R1_IKP16,KC_SKM_AI_ToHMI.R1_IKP16);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП17, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP17),KC_SKM_AI_Settings.R1_IKP17,KC_SKM_AI_FromHMI.R1_IKP17,KC_SKM_AI_ToHMI.R1_IKP17);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП18, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP18),KC_SKM_AI_Settings.R1_IKP18,KC_SKM_AI_FromHMI.R1_IKP18,KC_SKM_AI_ToHMI.R1_IKP18);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП19, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP19),KC_SKM_AI_Settings.R1_IKP19,KC_SKM_AI_FromHMI.R1_IKP19,KC_SKM_AI_ToHMI.R1_IKP19);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП20, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP20),KC_SKM_AI_Settings.R1_IKP20,KC_SKM_AI_FromHMI.R1_IKP20,KC_SKM_AI_ToHMI.R1_IKP20);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП21, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP21),KC_SKM_AI_Settings.R1_IKP21,KC_SKM_AI_FromHMI.R1_IKP21,KC_SKM_AI_ToHMI.R1_IKP21);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП22, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP22),KC_SKM_AI_Settings.R1_IKP22,KC_SKM_AI_FromHMI.R1_IKP22,KC_SKM_AI_ToHMI.R1_IKP22);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП23, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP23),KC_SKM_AI_Settings.R1_IKP23,KC_SKM_AI_FromHMI.R1_IKP23,KC_SKM_AI_ToHMI.R1_IKP23);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП24, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP24),KC_SKM_AI_Settings.R1_IKP24,KC_SKM_AI_FromHMI.R1_IKP24,KC_SKM_AI_ToHMI.R1_IKP24);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП25, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP25),KC_SKM_AI_Settings.R1_IKP25,KC_SKM_AI_FromHMI.R1_IKP25,KC_SKM_AI_ToHMI.R1_IKP25);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП26, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP26),KC_SKM_AI_Settings.R1_IKP26,KC_SKM_AI_FromHMI.R1_IKP26,KC_SKM_AI_ToHMI.R1_IKP26);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП27, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP27),KC_SKM_AI_Settings.R1_IKP27,KC_SKM_AI_FromHMI.R1_IKP27,KC_SKM_AI_ToHMI.R1_IKP27);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП28, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP28),KC_SKM_AI_Settings.R1_IKP28,KC_SKM_AI_FromHMI.R1_IKP28,KC_SKM_AI_ToHMI.R1_IKP28);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП29, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP29),KC_SKM_AI_Settings.R1_IKP29,KC_SKM_AI_FromHMI.R1_IKP29,KC_SKM_AI_ToHMI.R1_IKP29);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП30, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP30),KC_SKM_AI_Settings.R1_IKP30,KC_SKM_AI_FromHMI.R1_IKP30,KC_SKM_AI_ToHMI.R1_IKP30);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП31, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP31),KC_SKM_AI_Settings.R1_IKP31,KC_SKM_AI_FromHMI.R1_IKP31,KC_SKM_AI_ToHMI.R1_IKP31);
//Сопротивление первой пластины датчикка корозии НГК_БИ_ИКП32, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R1_IKP32),KC_SKM_AI_Settings.R1_IKP32,KC_SKM_AI_FromHMI.R1_IKP32,KC_SKM_AI_ToHMI.R1_IKP32);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП1, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP1),KC_SKM_AI_Settings.R2_IKP1,KC_SKM_AI_FromHMI.R2_IKP1,KC_SKM_AI_ToHMI.R2_IKP1);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП2, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP2),KC_SKM_AI_Settings.R2_IKP2,KC_SKM_AI_FromHMI.R2_IKP2,KC_SKM_AI_ToHMI.R2_IKP2);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП3, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP3),KC_SKM_AI_Settings.R2_IKP3,KC_SKM_AI_FromHMI.R2_IKP3,KC_SKM_AI_ToHMI.R2_IKP3);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП4, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP4),KC_SKM_AI_Settings.R2_IKP4,KC_SKM_AI_FromHMI.R2_IKP4,KC_SKM_AI_ToHMI.R2_IKP4);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП5, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP5),KC_SKM_AI_Settings.R2_IKP5,KC_SKM_AI_FromHMI.R2_IKP5,KC_SKM_AI_ToHMI.R2_IKP5);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП6, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP6),KC_SKM_AI_Settings.R2_IKP6,KC_SKM_AI_FromHMI.R2_IKP6,KC_SKM_AI_ToHMI.R2_IKP6);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП7, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP7),KC_SKM_AI_Settings.R2_IKP7,KC_SKM_AI_FromHMI.R2_IKP7,KC_SKM_AI_ToHMI.R2_IKP7);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП8, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP8),KC_SKM_AI_Settings.R2_IKP8,KC_SKM_AI_FromHMI.R2_IKP8,KC_SKM_AI_ToHMI.R2_IKP8);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП9, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP9),KC_SKM_AI_Settings.R2_IKP9,KC_SKM_AI_FromHMI.R2_IKP9,KC_SKM_AI_ToHMI.R2_IKP9);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП10, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP10),KC_SKM_AI_Settings.R2_IKP10,KC_SKM_AI_FromHMI.R2_IKP10,KC_SKM_AI_ToHMI.R2_IKP10);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП11, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP11),KC_SKM_AI_Settings.R2_IKP11,KC_SKM_AI_FromHMI.R2_IKP11,KC_SKM_AI_ToHMI.R2_IKP11);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП12, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP12),KC_SKM_AI_Settings.R2_IKP12,KC_SKM_AI_FromHMI.R2_IKP12,KC_SKM_AI_ToHMI.R2_IKP12);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП13, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP13),KC_SKM_AI_Settings.R2_IKP13,KC_SKM_AI_FromHMI.R2_IKP13,KC_SKM_AI_ToHMI.R2_IKP13);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП14, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP14),KC_SKM_AI_Settings.R2_IKP14,KC_SKM_AI_FromHMI.R2_IKP14,KC_SKM_AI_ToHMI.R2_IKP14);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП15, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP15),KC_SKM_AI_Settings.R2_IKP15,KC_SKM_AI_FromHMI.R2_IKP15,KC_SKM_AI_ToHMI.R2_IKP15);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП16, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP16),KC_SKM_AI_Settings.R2_IKP16,KC_SKM_AI_FromHMI.R2_IKP16,KC_SKM_AI_ToHMI.R2_IKP16);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП17, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP17),KC_SKM_AI_Settings.R2_IKP17,KC_SKM_AI_FromHMI.R2_IKP17,KC_SKM_AI_ToHMI.R2_IKP17);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП18, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP18),KC_SKM_AI_Settings.R2_IKP18,KC_SKM_AI_FromHMI.R2_IKP18,KC_SKM_AI_ToHMI.R2_IKP18);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП19, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP19),KC_SKM_AI_Settings.R2_IKP19,KC_SKM_AI_FromHMI.R2_IKP19,KC_SKM_AI_ToHMI.R2_IKP19);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП20, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP20),KC_SKM_AI_Settings.R2_IKP20,KC_SKM_AI_FromHMI.R2_IKP20,KC_SKM_AI_ToHMI.R2_IKP20);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП21, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP21),KC_SKM_AI_Settings.R2_IKP21,KC_SKM_AI_FromHMI.R2_IKP21,KC_SKM_AI_ToHMI.R2_IKP21);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП22, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP22),KC_SKM_AI_Settings.R2_IKP22,KC_SKM_AI_FromHMI.R2_IKP22,KC_SKM_AI_ToHMI.R2_IKP22);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП23, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP23),KC_SKM_AI_Settings.R2_IKP23,KC_SKM_AI_FromHMI.R2_IKP23,KC_SKM_AI_ToHMI.R2_IKP23);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП24, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP24),KC_SKM_AI_Settings.R2_IKP24,KC_SKM_AI_FromHMI.R2_IKP24,KC_SKM_AI_ToHMI.R2_IKP24);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП25, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP25),KC_SKM_AI_Settings.R2_IKP25,KC_SKM_AI_FromHMI.R2_IKP25,KC_SKM_AI_ToHMI.R2_IKP25);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП26, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP26),KC_SKM_AI_Settings.R2_IKP26,KC_SKM_AI_FromHMI.R2_IKP26,KC_SKM_AI_ToHMI.R2_IKP26);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП27, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP27),KC_SKM_AI_Settings.R2_IKP27,KC_SKM_AI_FromHMI.R2_IKP27,KC_SKM_AI_ToHMI.R2_IKP27);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП28, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP28),KC_SKM_AI_Settings.R2_IKP28,KC_SKM_AI_FromHMI.R2_IKP28,KC_SKM_AI_ToHMI.R2_IKP28);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП29, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP29),KC_SKM_AI_Settings.R2_IKP29,KC_SKM_AI_FromHMI.R2_IKP29,KC_SKM_AI_ToHMI.R2_IKP29);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП30, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP30),KC_SKM_AI_Settings.R2_IKP30,KC_SKM_AI_FromHMI.R2_IKP30,KC_SKM_AI_ToHMI.R2_IKP30);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП31, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP31),KC_SKM_AI_Settings.R2_IKP31,KC_SKM_AI_FromHMI.R2_IKP31,KC_SKM_AI_ToHMI.R2_IKP31);
//Сопротивление второй пластины датчикка корозии НГК_БИ_ИКП32, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R2_IKP32),KC_SKM_AI_Settings.R2_IKP32,KC_SKM_AI_FromHMI.R2_IKP32,KC_SKM_AI_ToHMI.R2_IKP32);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП1, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP1),KC_SKM_AI_Settings.R3_IKP1,KC_SKM_AI_FromHMI.R3_IKP1,KC_SKM_AI_ToHMI.R3_IKP1);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП2, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP2),KC_SKM_AI_Settings.R3_IKP2,KC_SKM_AI_FromHMI.R3_IKP2,KC_SKM_AI_ToHMI.R3_IKP2);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП3, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP3),KC_SKM_AI_Settings.R3_IKP3,KC_SKM_AI_FromHMI.R3_IKP3,KC_SKM_AI_ToHMI.R3_IKP3);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП4, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP4),KC_SKM_AI_Settings.R3_IKP4,KC_SKM_AI_FromHMI.R3_IKP4,KC_SKM_AI_ToHMI.R3_IKP4);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП5, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP5),KC_SKM_AI_Settings.R3_IKP5,KC_SKM_AI_FromHMI.R3_IKP5,KC_SKM_AI_ToHMI.R3_IKP5);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП6, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP6),KC_SKM_AI_Settings.R3_IKP6,KC_SKM_AI_FromHMI.R3_IKP6,KC_SKM_AI_ToHMI.R3_IKP6);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП7, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP7),KC_SKM_AI_Settings.R3_IKP7,KC_SKM_AI_FromHMI.R3_IKP7,KC_SKM_AI_ToHMI.R3_IKP7);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП8, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP8),KC_SKM_AI_Settings.R3_IKP8,KC_SKM_AI_FromHMI.R3_IKP8,KC_SKM_AI_ToHMI.R3_IKP8);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП9, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP9),KC_SKM_AI_Settings.R3_IKP9,KC_SKM_AI_FromHMI.R3_IKP9,KC_SKM_AI_ToHMI.R3_IKP9);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП10, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP10),KC_SKM_AI_Settings.R3_IKP10,KC_SKM_AI_FromHMI.R3_IKP10,KC_SKM_AI_ToHMI.R3_IKP10);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП11, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP11),KC_SKM_AI_Settings.R3_IKP11,KC_SKM_AI_FromHMI.R3_IKP11,KC_SKM_AI_ToHMI.R3_IKP11);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП12, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP12),KC_SKM_AI_Settings.R3_IKP12,KC_SKM_AI_FromHMI.R3_IKP12,KC_SKM_AI_ToHMI.R3_IKP12);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП13, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP13),KC_SKM_AI_Settings.R3_IKP13,KC_SKM_AI_FromHMI.R3_IKP13,KC_SKM_AI_ToHMI.R3_IKP13);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП14, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP14),KC_SKM_AI_Settings.R3_IKP14,KC_SKM_AI_FromHMI.R3_IKP14,KC_SKM_AI_ToHMI.R3_IKP14);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП15, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP15),KC_SKM_AI_Settings.R3_IKP15,KC_SKM_AI_FromHMI.R3_IKP15,KC_SKM_AI_ToHMI.R3_IKP15);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП16, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP16),KC_SKM_AI_Settings.R3_IKP16,KC_SKM_AI_FromHMI.R3_IKP16,KC_SKM_AI_ToHMI.R3_IKP16);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП17, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP17),KC_SKM_AI_Settings.R3_IKP17,KC_SKM_AI_FromHMI.R3_IKP17,KC_SKM_AI_ToHMI.R3_IKP17);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП18, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP18),KC_SKM_AI_Settings.R3_IKP18,KC_SKM_AI_FromHMI.R3_IKP18,KC_SKM_AI_ToHMI.R3_IKP18);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП19, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP19),KC_SKM_AI_Settings.R3_IKP19,KC_SKM_AI_FromHMI.R3_IKP19,KC_SKM_AI_ToHMI.R3_IKP19);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП20, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP20),KC_SKM_AI_Settings.R3_IKP20,KC_SKM_AI_FromHMI.R3_IKP20,KC_SKM_AI_ToHMI.R3_IKP20);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП21, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP21),KC_SKM_AI_Settings.R3_IKP21,KC_SKM_AI_FromHMI.R3_IKP21,KC_SKM_AI_ToHMI.R3_IKP21);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП22, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP22),KC_SKM_AI_Settings.R3_IKP22,KC_SKM_AI_FromHMI.R3_IKP22,KC_SKM_AI_ToHMI.R3_IKP22);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП23, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP23),KC_SKM_AI_Settings.R3_IKP23,KC_SKM_AI_FromHMI.R3_IKP23,KC_SKM_AI_ToHMI.R3_IKP23);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП24, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP24),KC_SKM_AI_Settings.R3_IKP24,KC_SKM_AI_FromHMI.R3_IKP24,KC_SKM_AI_ToHMI.R3_IKP24);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП25, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP25),KC_SKM_AI_Settings.R3_IKP25,KC_SKM_AI_FromHMI.R3_IKP25,KC_SKM_AI_ToHMI.R3_IKP25);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП26, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP26),KC_SKM_AI_Settings.R3_IKP26,KC_SKM_AI_FromHMI.R3_IKP26,KC_SKM_AI_ToHMI.R3_IKP26);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП27, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP27),KC_SKM_AI_Settings.R3_IKP27,KC_SKM_AI_FromHMI.R3_IKP27,KC_SKM_AI_ToHMI.R3_IKP27);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП28, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP28),KC_SKM_AI_Settings.R3_IKP28,KC_SKM_AI_FromHMI.R3_IKP28,KC_SKM_AI_ToHMI.R3_IKP28);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП29, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP29),KC_SKM_AI_Settings.R3_IKP29,KC_SKM_AI_FromHMI.R3_IKP29,KC_SKM_AI_ToHMI.R3_IKP29);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП30, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP30),KC_SKM_AI_Settings.R3_IKP30,KC_SKM_AI_FromHMI.R3_IKP30,KC_SKM_AI_ToHMI.R3_IKP30);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП31, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP31),KC_SKM_AI_Settings.R3_IKP31,KC_SKM_AI_FromHMI.R3_IKP31,KC_SKM_AI_ToHMI.R3_IKP31);
//Сопротивление третьей пластины датчикка корозии НГК_БИ_ИКП32, Ом
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.R3_IKP32),KC_SKM_AI_Settings.R3_IKP32,KC_SKM_AI_FromHMI.R3_IKP32,KC_SKM_AI_ToHMI.R3_IKP32);
//Защитный ток НГК_БИ_ИКП1, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP1),KC_SKM_AI_Settings.Iz_IKP1,KC_SKM_AI_FromHMI.Iz_IKP1,KC_SKM_AI_ToHMI.Iz_IKP1);
//Защитный ток НГК_БИ_ИКП2, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP2),KC_SKM_AI_Settings.Iz_IKP2,KC_SKM_AI_FromHMI.Iz_IKP2,KC_SKM_AI_ToHMI.Iz_IKP2);
//Защитный ток НГК_БИ_ИКП3, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP3),KC_SKM_AI_Settings.Iz_IKP3,KC_SKM_AI_FromHMI.Iz_IKP3,KC_SKM_AI_ToHMI.Iz_IKP3);
//Защитный ток НГК_БИ_ИКП4, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP4),KC_SKM_AI_Settings.Iz_IKP4,KC_SKM_AI_FromHMI.Iz_IKP4,KC_SKM_AI_ToHMI.Iz_IKP4);
//Защитный ток НГК_БИ_ИКП5, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP5),KC_SKM_AI_Settings.Iz_IKP5,KC_SKM_AI_FromHMI.Iz_IKP5,KC_SKM_AI_ToHMI.Iz_IKP5);
//Защитный ток НГК_БИ_ИКП6, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP6),KC_SKM_AI_Settings.Iz_IKP6,KC_SKM_AI_FromHMI.Iz_IKP6,KC_SKM_AI_ToHMI.Iz_IKP6);
//Защитный ток НГК_БИ_ИКП7, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP7),KC_SKM_AI_Settings.Iz_IKP7,KC_SKM_AI_FromHMI.Iz_IKP7,KC_SKM_AI_ToHMI.Iz_IKP7);
//Защитный ток НГК_БИ_ИКП8, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP8),KC_SKM_AI_Settings.Iz_IKP8,KC_SKM_AI_FromHMI.Iz_IKP8,KC_SKM_AI_ToHMI.Iz_IKP8);
//Защитный ток НГК_БИ_ИКП9, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP9),KC_SKM_AI_Settings.Iz_IKP9,KC_SKM_AI_FromHMI.Iz_IKP9,KC_SKM_AI_ToHMI.Iz_IKP9);
//Защитный ток НГК_БИ_ИКП10, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP10),KC_SKM_AI_Settings.Iz_IKP10,KC_SKM_AI_FromHMI.Iz_IKP10,KC_SKM_AI_ToHMI.Iz_IKP10);
//Защитный ток НГК_БИ_ИКП11, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP11),KC_SKM_AI_Settings.Iz_IKP11,KC_SKM_AI_FromHMI.Iz_IKP11,KC_SKM_AI_ToHMI.Iz_IKP11);
//Защитный ток НГК_БИ_ИКП12, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP12),KC_SKM_AI_Settings.Iz_IKP12,KC_SKM_AI_FromHMI.Iz_IKP12,KC_SKM_AI_ToHMI.Iz_IKP12);
//Защитный ток НГК_БИ_ИКП13, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP13),KC_SKM_AI_Settings.Iz_IKP13,KC_SKM_AI_FromHMI.Iz_IKP13,KC_SKM_AI_ToHMI.Iz_IKP13);
//Защитный ток НГК_БИ_ИКП14, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP14),KC_SKM_AI_Settings.Iz_IKP14,KC_SKM_AI_FromHMI.Iz_IKP14,KC_SKM_AI_ToHMI.Iz_IKP14);
//Защитный ток НГК_БИ_ИКП15, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP15),KC_SKM_AI_Settings.Iz_IKP15,KC_SKM_AI_FromHMI.Iz_IKP15,KC_SKM_AI_ToHMI.Iz_IKP15);
//Защитный ток НГК_БИ_ИКП16, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP16),KC_SKM_AI_Settings.Iz_IKP16,KC_SKM_AI_FromHMI.Iz_IKP16,KC_SKM_AI_ToHMI.Iz_IKP16);
//Защитный ток НГК_БИ_ИКП17, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP17),KC_SKM_AI_Settings.Iz_IKP17,KC_SKM_AI_FromHMI.Iz_IKP17,KC_SKM_AI_ToHMI.Iz_IKP17);
//Защитный ток НГК_БИ_ИКП18, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP18),KC_SKM_AI_Settings.Iz_IKP18,KC_SKM_AI_FromHMI.Iz_IKP18,KC_SKM_AI_ToHMI.Iz_IKP18);
//Защитный ток НГК_БИ_ИКП19, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP19),KC_SKM_AI_Settings.Iz_IKP19,KC_SKM_AI_FromHMI.Iz_IKP19,KC_SKM_AI_ToHMI.Iz_IKP19);
//Защитный ток НГК_БИ_ИКП20, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP20),KC_SKM_AI_Settings.Iz_IKP20,KC_SKM_AI_FromHMI.Iz_IKP20,KC_SKM_AI_ToHMI.Iz_IKP20);
//Защитный ток НГК_БИ_ИКП21, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP21),KC_SKM_AI_Settings.Iz_IKP21,KC_SKM_AI_FromHMI.Iz_IKP21,KC_SKM_AI_ToHMI.Iz_IKP21);
//Защитный ток НГК_БИ_ИКП22, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP22),KC_SKM_AI_Settings.Iz_IKP22,KC_SKM_AI_FromHMI.Iz_IKP22,KC_SKM_AI_ToHMI.Iz_IKP22);
//Защитный ток НГК_БИ_ИКП23, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP23),KC_SKM_AI_Settings.Iz_IKP23,KC_SKM_AI_FromHMI.Iz_IKP23,KC_SKM_AI_ToHMI.Iz_IKP23);
//Защитный ток НГК_БИ_ИКП24, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP24),KC_SKM_AI_Settings.Iz_IKP24,KC_SKM_AI_FromHMI.Iz_IKP24,KC_SKM_AI_ToHMI.Iz_IKP24);
//Защитный ток НГК_БИ_ИКП25, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP25),KC_SKM_AI_Settings.Iz_IKP25,KC_SKM_AI_FromHMI.Iz_IKP25,KC_SKM_AI_ToHMI.Iz_IKP25);
//Защитный ток НГК_БИ_ИКП26, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP26),KC_SKM_AI_Settings.Iz_IKP26,KC_SKM_AI_FromHMI.Iz_IKP26,KC_SKM_AI_ToHMI.Iz_IKP26);
//Защитный ток НГК_БИ_ИКП27, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP27),KC_SKM_AI_Settings.Iz_IKP27,KC_SKM_AI_FromHMI.Iz_IKP27,KC_SKM_AI_ToHMI.Iz_IKP27);
//Защитный ток НГК_БИ_ИКП28, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP28),KC_SKM_AI_Settings.Iz_IKP28,KC_SKM_AI_FromHMI.Iz_IKP28,KC_SKM_AI_ToHMI.Iz_IKP28);
//Защитный ток НГК_БИ_ИКП29, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP29),KC_SKM_AI_Settings.Iz_IKP29,KC_SKM_AI_FromHMI.Iz_IKP29,KC_SKM_AI_ToHMI.Iz_IKP29);
//Защитный ток НГК_БИ_ИКП30, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP30),KC_SKM_AI_Settings.Iz_IKP30,KC_SKM_AI_FromHMI.Iz_IKP30,KC_SKM_AI_ToHMI.Iz_IKP30);
//Защитный ток НГК_БИ_ИКП31, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP31),KC_SKM_AI_Settings.Iz_IKP31,KC_SKM_AI_FromHMI.Iz_IKP31,KC_SKM_AI_ToHMI.Iz_IKP31);
//Защитный ток НГК_БИ_ИКП32, А
mb_AI_Processing(UINT_TO_REAL(KC_SKM_AI_DRV.Iz_IKP32),KC_SKM_AI_Settings.Iz_IKP32,KC_SKM_AI_FromHMI.Iz_IKP32,KC_SKM_AI_ToHMI.Iz_IKP32);
//Конец сгенерированного кода
]]></ST>
                    </FunctionBlock>
                </Folder>
                <Folder Name="DI" Comment="" Data="" UUID="2TWF3W7AIH3ERGUQSVINJWWUZA">
                    <Function UUID="YHPTNS3KJVO3K6KTUS72AZG4OE" Name="KC_SKM_DI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода DI_Permit
KC_SKM_DI_ToHMI.State_IKP_1_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП1:исправен;
KC_SKM_DI_ToHMI.State_IKP_1_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП1:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_1_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП1:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_1_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП1:авария;
KC_SKM_DI_ToHMI.State_IKP_1_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП1:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_1_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП1:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_1_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП1:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_2_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП2:исправен;
KC_SKM_DI_ToHMI.State_IKP_2_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП2:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_2_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП2:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_2_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП2:авария;
KC_SKM_DI_ToHMI.State_IKP_2_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП2:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_2_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП2:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_2_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП2:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_3_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП3:исправен;
KC_SKM_DI_ToHMI.State_IKP_3_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП3:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_3_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП3:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_3_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП3:авария;
KC_SKM_DI_ToHMI.State_IKP_3_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП3:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_3_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП3:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_3_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП3:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_4_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП4:исправен;
KC_SKM_DI_ToHMI.State_IKP_4_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП4:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_4_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП4:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_4_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП4:авария;
KC_SKM_DI_ToHMI.State_IKP_4_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП4:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_4_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП4:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_4_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП4:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_5_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП5:исправен;
KC_SKM_DI_ToHMI.State_IKP_5_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП5:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_5_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП5:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_5_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП5:авария;
KC_SKM_DI_ToHMI.State_IKP_5_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП5:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_5_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП5:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_5_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП5:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_6_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП6:исправен;
KC_SKM_DI_ToHMI.State_IKP_6_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП6:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_6_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП6:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_6_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП6:авария;
KC_SKM_DI_ToHMI.State_IKP_6_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП6:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_6_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП6:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_6_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП6:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_7_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП7:исправен;
KC_SKM_DI_ToHMI.State_IKP_7_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП7:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_7_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП7:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_7_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП7:авария;
KC_SKM_DI_ToHMI.State_IKP_7_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП7:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_7_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП7:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_7_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП7:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_8_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП8:исправен;
KC_SKM_DI_ToHMI.State_IKP_8_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП8:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_8_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП8:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_8_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП8:авария;
KC_SKM_DI_ToHMI.State_IKP_8_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП8:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_8_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП8:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_8_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП8:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_9_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП9:исправен;
KC_SKM_DI_ToHMI.State_IKP_9_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП9:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_9_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП9:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_9_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП9:авария;
KC_SKM_DI_ToHMI.State_IKP_9_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП9:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_9_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП9:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_9_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП9:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_10_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП10:исправен;
KC_SKM_DI_ToHMI.State_IKP_10_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП10:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_10_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП10:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_10_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП10:авария;
KC_SKM_DI_ToHMI.State_IKP_10_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП10:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_10_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП10:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_10_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП10:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_11_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП11:исправен;
KC_SKM_DI_ToHMI.State_IKP_11_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП11:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_11_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП11:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_11_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП11:авария;
KC_SKM_DI_ToHMI.State_IKP_11_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП11:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_11_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП11:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_11_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП11:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_12_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП12:исправен;
KC_SKM_DI_ToHMI.State_IKP_12_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП12:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_12_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП12:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_12_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП12:авария;
KC_SKM_DI_ToHMI.State_IKP_12_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП12:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_12_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП12:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_12_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП12:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_13_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП13:исправен;
KC_SKM_DI_ToHMI.State_IKP_13_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП13:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_13_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП13:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_13_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП13:авария;
KC_SKM_DI_ToHMI.State_IKP_13_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП13:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_13_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП13:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_13_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП13:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_14_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП14:исправен;
KC_SKM_DI_ToHMI.State_IKP_14_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП14:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_14_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП14:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_14_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП14:авария;
KC_SKM_DI_ToHMI.State_IKP_14_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП14:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_14_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП14:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_14_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП14:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_15_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП15:исправен;
KC_SKM_DI_ToHMI.State_IKP_15_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП15:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_15_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП15:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_15_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП15:авария;
KC_SKM_DI_ToHMI.State_IKP_15_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП15:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_15_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП15:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_15_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП15:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_16_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП16:исправен;
KC_SKM_DI_ToHMI.State_IKP_16_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП16:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_16_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП16:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_16_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП16:авария;
KC_SKM_DI_ToHMI.State_IKP_16_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП16:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_16_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП16:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_16_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП16:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_17_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП17:исправен;
KC_SKM_DI_ToHMI.State_IKP_17_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП17:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_17_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП17:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_17_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП17:авария;
KC_SKM_DI_ToHMI.State_IKP_17_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП17:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_17_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП17:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_17_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП17:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_18_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП18:исправен;
KC_SKM_DI_ToHMI.State_IKP_18_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП18:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_18_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП18:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_18_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП18:авария;
KC_SKM_DI_ToHMI.State_IKP_18_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП18:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_18_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП18:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_18_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП18:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_19_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП19:исправен;
KC_SKM_DI_ToHMI.State_IKP_19_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП19:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_19_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП19:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_19_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП19:авария;
KC_SKM_DI_ToHMI.State_IKP_19_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП19:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_19_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП19:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_19_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП19:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_20_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП20:исправен;
KC_SKM_DI_ToHMI.State_IKP_20_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП20:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_20_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП20:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_20_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП20:авария;
KC_SKM_DI_ToHMI.State_IKP_20_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП20:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_20_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП20:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_20_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП20:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_21_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП21:исправен;
KC_SKM_DI_ToHMI.State_IKP_21_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП21:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_21_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП21:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_21_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП21:авария;
KC_SKM_DI_ToHMI.State_IKP_21_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП21:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_21_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП21:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_21_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП21:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_22_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП22:исправен;
KC_SKM_DI_ToHMI.State_IKP_22_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП22:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_22_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП22:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_22_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП22:авария;
KC_SKM_DI_ToHMI.State_IKP_22_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП22:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_22_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП22:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_22_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП22:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_23_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП23:исправен;
KC_SKM_DI_ToHMI.State_IKP_23_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП23:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_23_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП23:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_23_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП23:авария;
KC_SKM_DI_ToHMI.State_IKP_23_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП23:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_23_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП23:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_23_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП23:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_24_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП24:исправен;
KC_SKM_DI_ToHMI.State_IKP_24_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП24:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_24_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП24:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_24_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП24:авария;
KC_SKM_DI_ToHMI.State_IKP_24_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП24:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_24_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП24:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_24_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП24:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_25_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП25:исправен;
KC_SKM_DI_ToHMI.State_IKP_25_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП25:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_25_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП25:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_25_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП25:авария;
KC_SKM_DI_ToHMI.State_IKP_25_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП25:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_25_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП25:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_25_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП25:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_26_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП26:исправен;
KC_SKM_DI_ToHMI.State_IKP_26_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП26:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_26_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП26:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_26_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП26:авария;
KC_SKM_DI_ToHMI.State_IKP_26_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП26:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_26_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП26:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_26_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП26:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_27_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП27:исправен;
KC_SKM_DI_ToHMI.State_IKP_27_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП27:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_27_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП27:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_27_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП27:авария;
KC_SKM_DI_ToHMI.State_IKP_27_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП27:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_27_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП27:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_27_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП27:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_28_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП28:исправен;
KC_SKM_DI_ToHMI.State_IKP_28_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП28:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_28_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП28:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_28_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП28:авария;
KC_SKM_DI_ToHMI.State_IKP_28_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП28:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_28_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП28:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_28_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП28:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_29_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП29:исправен;
KC_SKM_DI_ToHMI.State_IKP_29_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП29:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_29_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП29:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_29_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП29:авария;
KC_SKM_DI_ToHMI.State_IKP_29_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП29:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_29_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП29:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_29_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП29:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_30_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП30:исправен;
KC_SKM_DI_ToHMI.State_IKP_30_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП30:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_30_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП30:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_30_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП30:авария;
KC_SKM_DI_ToHMI.State_IKP_30_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП30:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_30_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП30:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_30_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП30:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_31_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП31:исправен;
KC_SKM_DI_ToHMI.State_IKP_31_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП31:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_31_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП31:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_31_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП31:авария;
KC_SKM_DI_ToHMI.State_IKP_31_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП31:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_31_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП31:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_31_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП31:датчик 3 обрыв;
KC_SKM_DI_ToHMI.State_IKP_32_good.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП32:исправен;
KC_SKM_DI_ToHMI.State_IKP_32_opened.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП32:вскрыт;
KC_SKM_DI_ToHMI.State_IKP_32_absent.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП32:отсутствует;
KC_SKM_DI_ToHMI.State_IKP_32_failure.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП32:авария;
KC_SKM_DI_ToHMI.State_IKP_32_break_sensor_1.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП32:датчик 1 обрыв;
KC_SKM_DI_ToHMI.State_IKP_32_break_sensor_2.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП32:датчик 2 обрыв;
KC_SKM_DI_ToHMI.State_IKP_32_break_sensor_3.manual := tmpPermit; //Регистр состояния НГК-БИ-ИКП32:датчик 3 обрыв;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="B6BB26AEINGXXDPFTCDQUIFHSQ" Name="KC_SKM_mb_DI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[//-------- Обработка дискретных входов полученных по сети --------------
//Начало сгенерированного кода DI_Processing
//Регистр состояния НГК-БИ-ИКП1:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_1_good,KC_SKM_DI_FromHMI.State_IKP_1_good,KC_SKM_DI_ToHMI.State_IKP_1_good,KC_SKM_DI.State_IKP_1_good);
//Регистр состояния НГК-БИ-ИКП1:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_1_opened,KC_SKM_DI_FromHMI.State_IKP_1_opened,KC_SKM_DI_ToHMI.State_IKP_1_opened,KC_SKM_DI.State_IKP_1_opened);
//Регистр состояния НГК-БИ-ИКП1:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_1_absent,KC_SKM_DI_FromHMI.State_IKP_1_absent,KC_SKM_DI_ToHMI.State_IKP_1_absent,KC_SKM_DI.State_IKP_1_absent);
//Регистр состояния НГК-БИ-ИКП1:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_1_failure,KC_SKM_DI_FromHMI.State_IKP_1_failure,KC_SKM_DI_ToHMI.State_IKP_1_failure,KC_SKM_DI.State_IKP_1_failure);
//Регистр состояния НГК-БИ-ИКП1:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_1_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_1_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_1_break_sensor_1,KC_SKM_DI.State_IKP_1_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП1:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_1_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_1_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_1_break_sensor_2,KC_SKM_DI.State_IKP_1_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП1:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_1_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_1_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_1_break_sensor_3,KC_SKM_DI.State_IKP_1_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП2:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_2_good,KC_SKM_DI_FromHMI.State_IKP_2_good,KC_SKM_DI_ToHMI.State_IKP_2_good,KC_SKM_DI.State_IKP_2_good);
//Регистр состояния НГК-БИ-ИКП2:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_2_opened,KC_SKM_DI_FromHMI.State_IKP_2_opened,KC_SKM_DI_ToHMI.State_IKP_2_opened,KC_SKM_DI.State_IKP_2_opened);
//Регистр состояния НГК-БИ-ИКП2:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_2_absent,KC_SKM_DI_FromHMI.State_IKP_2_absent,KC_SKM_DI_ToHMI.State_IKP_2_absent,KC_SKM_DI.State_IKP_2_absent);
//Регистр состояния НГК-БИ-ИКП2:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_2_failure,KC_SKM_DI_FromHMI.State_IKP_2_failure,KC_SKM_DI_ToHMI.State_IKP_2_failure,KC_SKM_DI.State_IKP_2_failure);
//Регистр состояния НГК-БИ-ИКП2:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_2_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_2_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_2_break_sensor_1,KC_SKM_DI.State_IKP_2_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП2:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_2_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_2_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_2_break_sensor_2,KC_SKM_DI.State_IKP_2_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП2:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_2_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_2_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_2_break_sensor_3,KC_SKM_DI.State_IKP_2_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП3:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_3_good,KC_SKM_DI_FromHMI.State_IKP_3_good,KC_SKM_DI_ToHMI.State_IKP_3_good,KC_SKM_DI.State_IKP_3_good);
//Регистр состояния НГК-БИ-ИКП3:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_3_opened,KC_SKM_DI_FromHMI.State_IKP_3_opened,KC_SKM_DI_ToHMI.State_IKP_3_opened,KC_SKM_DI.State_IKP_3_opened);
//Регистр состояния НГК-БИ-ИКП3:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_3_absent,KC_SKM_DI_FromHMI.State_IKP_3_absent,KC_SKM_DI_ToHMI.State_IKP_3_absent,KC_SKM_DI.State_IKP_3_absent);
//Регистр состояния НГК-БИ-ИКП3:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_3_failure,KC_SKM_DI_FromHMI.State_IKP_3_failure,KC_SKM_DI_ToHMI.State_IKP_3_failure,KC_SKM_DI.State_IKP_3_failure);
//Регистр состояния НГК-БИ-ИКП3:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_3_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_3_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_3_break_sensor_1,KC_SKM_DI.State_IKP_3_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП3:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_3_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_3_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_3_break_sensor_2,KC_SKM_DI.State_IKP_3_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП3:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_3_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_3_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_3_break_sensor_3,KC_SKM_DI.State_IKP_3_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП4:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_4_good,KC_SKM_DI_FromHMI.State_IKP_4_good,KC_SKM_DI_ToHMI.State_IKP_4_good,KC_SKM_DI.State_IKP_4_good);
//Регистр состояния НГК-БИ-ИКП4:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_4_opened,KC_SKM_DI_FromHMI.State_IKP_4_opened,KC_SKM_DI_ToHMI.State_IKP_4_opened,KC_SKM_DI.State_IKP_4_opened);
//Регистр состояния НГК-БИ-ИКП4:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_4_absent,KC_SKM_DI_FromHMI.State_IKP_4_absent,KC_SKM_DI_ToHMI.State_IKP_4_absent,KC_SKM_DI.State_IKP_4_absent);
//Регистр состояния НГК-БИ-ИКП4:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_4_failure,KC_SKM_DI_FromHMI.State_IKP_4_failure,KC_SKM_DI_ToHMI.State_IKP_4_failure,KC_SKM_DI.State_IKP_4_failure);
//Регистр состояния НГК-БИ-ИКП4:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_4_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_4_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_4_break_sensor_1,KC_SKM_DI.State_IKP_4_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП4:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_4_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_4_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_4_break_sensor_2,KC_SKM_DI.State_IKP_4_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП4:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_4_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_4_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_4_break_sensor_3,KC_SKM_DI.State_IKP_4_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП5:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_5_good,KC_SKM_DI_FromHMI.State_IKP_5_good,KC_SKM_DI_ToHMI.State_IKP_5_good,KC_SKM_DI.State_IKP_5_good);
//Регистр состояния НГК-БИ-ИКП5:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_5_opened,KC_SKM_DI_FromHMI.State_IKP_5_opened,KC_SKM_DI_ToHMI.State_IKP_5_opened,KC_SKM_DI.State_IKP_5_opened);
//Регистр состояния НГК-БИ-ИКП5:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_5_absent,KC_SKM_DI_FromHMI.State_IKP_5_absent,KC_SKM_DI_ToHMI.State_IKP_5_absent,KC_SKM_DI.State_IKP_5_absent);
//Регистр состояния НГК-БИ-ИКП5:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_5_failure,KC_SKM_DI_FromHMI.State_IKP_5_failure,KC_SKM_DI_ToHMI.State_IKP_5_failure,KC_SKM_DI.State_IKP_5_failure);
//Регистр состояния НГК-БИ-ИКП5:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_5_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_5_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_5_break_sensor_1,KC_SKM_DI.State_IKP_5_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП5:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_5_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_5_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_5_break_sensor_2,KC_SKM_DI.State_IKP_5_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП5:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_5_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_5_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_5_break_sensor_3,KC_SKM_DI.State_IKP_5_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП6:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_6_good,KC_SKM_DI_FromHMI.State_IKP_6_good,KC_SKM_DI_ToHMI.State_IKP_6_good,KC_SKM_DI.State_IKP_6_good);
//Регистр состояния НГК-БИ-ИКП6:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_6_opened,KC_SKM_DI_FromHMI.State_IKP_6_opened,KC_SKM_DI_ToHMI.State_IKP_6_opened,KC_SKM_DI.State_IKP_6_opened);
//Регистр состояния НГК-БИ-ИКП6:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_6_absent,KC_SKM_DI_FromHMI.State_IKP_6_absent,KC_SKM_DI_ToHMI.State_IKP_6_absent,KC_SKM_DI.State_IKP_6_absent);
//Регистр состояния НГК-БИ-ИКП6:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_6_failure,KC_SKM_DI_FromHMI.State_IKP_6_failure,KC_SKM_DI_ToHMI.State_IKP_6_failure,KC_SKM_DI.State_IKP_6_failure);
//Регистр состояния НГК-БИ-ИКП6:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_6_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_6_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_6_break_sensor_1,KC_SKM_DI.State_IKP_6_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП6:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_6_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_6_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_6_break_sensor_2,KC_SKM_DI.State_IKP_6_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП6:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_6_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_6_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_6_break_sensor_3,KC_SKM_DI.State_IKP_6_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП7:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_7_good,KC_SKM_DI_FromHMI.State_IKP_7_good,KC_SKM_DI_ToHMI.State_IKP_7_good,KC_SKM_DI.State_IKP_7_good);
//Регистр состояния НГК-БИ-ИКП7:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_7_opened,KC_SKM_DI_FromHMI.State_IKP_7_opened,KC_SKM_DI_ToHMI.State_IKP_7_opened,KC_SKM_DI.State_IKP_7_opened);
//Регистр состояния НГК-БИ-ИКП7:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_7_absent,KC_SKM_DI_FromHMI.State_IKP_7_absent,KC_SKM_DI_ToHMI.State_IKP_7_absent,KC_SKM_DI.State_IKP_7_absent);
//Регистр состояния НГК-БИ-ИКП7:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_7_failure,KC_SKM_DI_FromHMI.State_IKP_7_failure,KC_SKM_DI_ToHMI.State_IKP_7_failure,KC_SKM_DI.State_IKP_7_failure);
//Регистр состояния НГК-БИ-ИКП7:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_7_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_7_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_7_break_sensor_1,KC_SKM_DI.State_IKP_7_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП7:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_7_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_7_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_7_break_sensor_2,KC_SKM_DI.State_IKP_7_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП7:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_7_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_7_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_7_break_sensor_3,KC_SKM_DI.State_IKP_7_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП8:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_8_good,KC_SKM_DI_FromHMI.State_IKP_8_good,KC_SKM_DI_ToHMI.State_IKP_8_good,KC_SKM_DI.State_IKP_8_good);
//Регистр состояния НГК-БИ-ИКП8:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_8_opened,KC_SKM_DI_FromHMI.State_IKP_8_opened,KC_SKM_DI_ToHMI.State_IKP_8_opened,KC_SKM_DI.State_IKP_8_opened);
//Регистр состояния НГК-БИ-ИКП8:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_8_absent,KC_SKM_DI_FromHMI.State_IKP_8_absent,KC_SKM_DI_ToHMI.State_IKP_8_absent,KC_SKM_DI.State_IKP_8_absent);
//Регистр состояния НГК-БИ-ИКП8:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_8_failure,KC_SKM_DI_FromHMI.State_IKP_8_failure,KC_SKM_DI_ToHMI.State_IKP_8_failure,KC_SKM_DI.State_IKP_8_failure);
//Регистр состояния НГК-БИ-ИКП8:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_8_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_8_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_8_break_sensor_1,KC_SKM_DI.State_IKP_8_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП8:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_8_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_8_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_8_break_sensor_2,KC_SKM_DI.State_IKP_8_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП8:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_8_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_8_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_8_break_sensor_3,KC_SKM_DI.State_IKP_8_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП9:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_9_good,KC_SKM_DI_FromHMI.State_IKP_9_good,KC_SKM_DI_ToHMI.State_IKP_9_good,KC_SKM_DI.State_IKP_9_good);
//Регистр состояния НГК-БИ-ИКП9:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_9_opened,KC_SKM_DI_FromHMI.State_IKP_9_opened,KC_SKM_DI_ToHMI.State_IKP_9_opened,KC_SKM_DI.State_IKP_9_opened);
//Регистр состояния НГК-БИ-ИКП9:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_9_absent,KC_SKM_DI_FromHMI.State_IKP_9_absent,KC_SKM_DI_ToHMI.State_IKP_9_absent,KC_SKM_DI.State_IKP_9_absent);
//Регистр состояния НГК-БИ-ИКП9:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_9_failure,KC_SKM_DI_FromHMI.State_IKP_9_failure,KC_SKM_DI_ToHMI.State_IKP_9_failure,KC_SKM_DI.State_IKP_9_failure);
//Регистр состояния НГК-БИ-ИКП9:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_9_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_9_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_9_break_sensor_1,KC_SKM_DI.State_IKP_9_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП9:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_9_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_9_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_9_break_sensor_2,KC_SKM_DI.State_IKP_9_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП9:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_9_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_9_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_9_break_sensor_3,KC_SKM_DI.State_IKP_9_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП10:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_10_good,KC_SKM_DI_FromHMI.State_IKP_10_good,KC_SKM_DI_ToHMI.State_IKP_10_good,KC_SKM_DI.State_IKP_10_good);
//Регистр состояния НГК-БИ-ИКП10:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_10_opened,KC_SKM_DI_FromHMI.State_IKP_10_opened,KC_SKM_DI_ToHMI.State_IKP_10_opened,KC_SKM_DI.State_IKP_10_opened);
//Регистр состояния НГК-БИ-ИКП10:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_10_absent,KC_SKM_DI_FromHMI.State_IKP_10_absent,KC_SKM_DI_ToHMI.State_IKP_10_absent,KC_SKM_DI.State_IKP_10_absent);
//Регистр состояния НГК-БИ-ИКП10:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_10_failure,KC_SKM_DI_FromHMI.State_IKP_10_failure,KC_SKM_DI_ToHMI.State_IKP_10_failure,KC_SKM_DI.State_IKP_10_failure);
//Регистр состояния НГК-БИ-ИКП10:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_10_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_10_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_10_break_sensor_1,KC_SKM_DI.State_IKP_10_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП10:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_10_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_10_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_10_break_sensor_2,KC_SKM_DI.State_IKP_10_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП10:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_10_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_10_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_10_break_sensor_3,KC_SKM_DI.State_IKP_10_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП11:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_11_good,KC_SKM_DI_FromHMI.State_IKP_11_good,KC_SKM_DI_ToHMI.State_IKP_11_good,KC_SKM_DI.State_IKP_11_good);
//Регистр состояния НГК-БИ-ИКП11:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_11_opened,KC_SKM_DI_FromHMI.State_IKP_11_opened,KC_SKM_DI_ToHMI.State_IKP_11_opened,KC_SKM_DI.State_IKP_11_opened);
//Регистр состояния НГК-БИ-ИКП11:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_11_absent,KC_SKM_DI_FromHMI.State_IKP_11_absent,KC_SKM_DI_ToHMI.State_IKP_11_absent,KC_SKM_DI.State_IKP_11_absent);
//Регистр состояния НГК-БИ-ИКП11:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_11_failure,KC_SKM_DI_FromHMI.State_IKP_11_failure,KC_SKM_DI_ToHMI.State_IKP_11_failure,KC_SKM_DI.State_IKP_11_failure);
//Регистр состояния НГК-БИ-ИКП11:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_11_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_11_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_11_break_sensor_1,KC_SKM_DI.State_IKP_11_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП11:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_11_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_11_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_11_break_sensor_2,KC_SKM_DI.State_IKP_11_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП11:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_11_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_11_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_11_break_sensor_3,KC_SKM_DI.State_IKP_11_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП12:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_12_good,KC_SKM_DI_FromHMI.State_IKP_12_good,KC_SKM_DI_ToHMI.State_IKP_12_good,KC_SKM_DI.State_IKP_12_good);
//Регистр состояния НГК-БИ-ИКП12:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_12_opened,KC_SKM_DI_FromHMI.State_IKP_12_opened,KC_SKM_DI_ToHMI.State_IKP_12_opened,KC_SKM_DI.State_IKP_12_opened);
//Регистр состояния НГК-БИ-ИКП12:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_12_absent,KC_SKM_DI_FromHMI.State_IKP_12_absent,KC_SKM_DI_ToHMI.State_IKP_12_absent,KC_SKM_DI.State_IKP_12_absent);
//Регистр состояния НГК-БИ-ИКП12:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_12_failure,KC_SKM_DI_FromHMI.State_IKP_12_failure,KC_SKM_DI_ToHMI.State_IKP_12_failure,KC_SKM_DI.State_IKP_12_failure);
//Регистр состояния НГК-БИ-ИКП12:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_12_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_12_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_12_break_sensor_1,KC_SKM_DI.State_IKP_12_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП12:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_12_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_12_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_12_break_sensor_2,KC_SKM_DI.State_IKP_12_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП12:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_12_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_12_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_12_break_sensor_3,KC_SKM_DI.State_IKP_12_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП13:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_13_good,KC_SKM_DI_FromHMI.State_IKP_13_good,KC_SKM_DI_ToHMI.State_IKP_13_good,KC_SKM_DI.State_IKP_13_good);
//Регистр состояния НГК-БИ-ИКП13:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_13_opened,KC_SKM_DI_FromHMI.State_IKP_13_opened,KC_SKM_DI_ToHMI.State_IKP_13_opened,KC_SKM_DI.State_IKP_13_opened);
//Регистр состояния НГК-БИ-ИКП13:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_13_absent,KC_SKM_DI_FromHMI.State_IKP_13_absent,KC_SKM_DI_ToHMI.State_IKP_13_absent,KC_SKM_DI.State_IKP_13_absent);
//Регистр состояния НГК-БИ-ИКП13:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_13_failure,KC_SKM_DI_FromHMI.State_IKP_13_failure,KC_SKM_DI_ToHMI.State_IKP_13_failure,KC_SKM_DI.State_IKP_13_failure);
//Регистр состояния НГК-БИ-ИКП13:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_13_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_13_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_13_break_sensor_1,KC_SKM_DI.State_IKP_13_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП13:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_13_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_13_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_13_break_sensor_2,KC_SKM_DI.State_IKP_13_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП13:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_13_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_13_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_13_break_sensor_3,KC_SKM_DI.State_IKP_13_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП14:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_14_good,KC_SKM_DI_FromHMI.State_IKP_14_good,KC_SKM_DI_ToHMI.State_IKP_14_good,KC_SKM_DI.State_IKP_14_good);
//Регистр состояния НГК-БИ-ИКП14:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_14_opened,KC_SKM_DI_FromHMI.State_IKP_14_opened,KC_SKM_DI_ToHMI.State_IKP_14_opened,KC_SKM_DI.State_IKP_14_opened);
//Регистр состояния НГК-БИ-ИКП14:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_14_absent,KC_SKM_DI_FromHMI.State_IKP_14_absent,KC_SKM_DI_ToHMI.State_IKP_14_absent,KC_SKM_DI.State_IKP_14_absent);
//Регистр состояния НГК-БИ-ИКП14:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_14_failure,KC_SKM_DI_FromHMI.State_IKP_14_failure,KC_SKM_DI_ToHMI.State_IKP_14_failure,KC_SKM_DI.State_IKP_14_failure);
//Регистр состояния НГК-БИ-ИКП14:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_14_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_14_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_14_break_sensor_1,KC_SKM_DI.State_IKP_14_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП14:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_14_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_14_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_14_break_sensor_2,KC_SKM_DI.State_IKP_14_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП14:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_14_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_14_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_14_break_sensor_3,KC_SKM_DI.State_IKP_14_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП15:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_15_good,KC_SKM_DI_FromHMI.State_IKP_15_good,KC_SKM_DI_ToHMI.State_IKP_15_good,KC_SKM_DI.State_IKP_15_good);
//Регистр состояния НГК-БИ-ИКП15:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_15_opened,KC_SKM_DI_FromHMI.State_IKP_15_opened,KC_SKM_DI_ToHMI.State_IKP_15_opened,KC_SKM_DI.State_IKP_15_opened);
//Регистр состояния НГК-БИ-ИКП15:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_15_absent,KC_SKM_DI_FromHMI.State_IKP_15_absent,KC_SKM_DI_ToHMI.State_IKP_15_absent,KC_SKM_DI.State_IKP_15_absent);
//Регистр состояния НГК-БИ-ИКП15:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_15_failure,KC_SKM_DI_FromHMI.State_IKP_15_failure,KC_SKM_DI_ToHMI.State_IKP_15_failure,KC_SKM_DI.State_IKP_15_failure);
//Регистр состояния НГК-БИ-ИКП15:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_15_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_15_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_15_break_sensor_1,KC_SKM_DI.State_IKP_15_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП15:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_15_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_15_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_15_break_sensor_2,KC_SKM_DI.State_IKP_15_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП15:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_15_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_15_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_15_break_sensor_3,KC_SKM_DI.State_IKP_15_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП16:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_16_good,KC_SKM_DI_FromHMI.State_IKP_16_good,KC_SKM_DI_ToHMI.State_IKP_16_good,KC_SKM_DI.State_IKP_16_good);
//Регистр состояния НГК-БИ-ИКП16:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_16_opened,KC_SKM_DI_FromHMI.State_IKP_16_opened,KC_SKM_DI_ToHMI.State_IKP_16_opened,KC_SKM_DI.State_IKP_16_opened);
//Регистр состояния НГК-БИ-ИКП16:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_16_absent,KC_SKM_DI_FromHMI.State_IKP_16_absent,KC_SKM_DI_ToHMI.State_IKP_16_absent,KC_SKM_DI.State_IKP_16_absent);
//Регистр состояния НГК-БИ-ИКП16:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_16_failure,KC_SKM_DI_FromHMI.State_IKP_16_failure,KC_SKM_DI_ToHMI.State_IKP_16_failure,KC_SKM_DI.State_IKP_16_failure);
//Регистр состояния НГК-БИ-ИКП16:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_16_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_16_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_16_break_sensor_1,KC_SKM_DI.State_IKP_16_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП16:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_16_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_16_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_16_break_sensor_2,KC_SKM_DI.State_IKP_16_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП16:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_16_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_16_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_16_break_sensor_3,KC_SKM_DI.State_IKP_16_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП17:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_17_good,KC_SKM_DI_FromHMI.State_IKP_17_good,KC_SKM_DI_ToHMI.State_IKP_17_good,KC_SKM_DI.State_IKP_17_good);
//Регистр состояния НГК-БИ-ИКП17:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_17_opened,KC_SKM_DI_FromHMI.State_IKP_17_opened,KC_SKM_DI_ToHMI.State_IKP_17_opened,KC_SKM_DI.State_IKP_17_opened);
//Регистр состояния НГК-БИ-ИКП17:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_17_absent,KC_SKM_DI_FromHMI.State_IKP_17_absent,KC_SKM_DI_ToHMI.State_IKP_17_absent,KC_SKM_DI.State_IKP_17_absent);
//Регистр состояния НГК-БИ-ИКП17:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_17_failure,KC_SKM_DI_FromHMI.State_IKP_17_failure,KC_SKM_DI_ToHMI.State_IKP_17_failure,KC_SKM_DI.State_IKP_17_failure);
//Регистр состояния НГК-БИ-ИКП17:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_17_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_17_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_17_break_sensor_1,KC_SKM_DI.State_IKP_17_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП17:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_17_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_17_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_17_break_sensor_2,KC_SKM_DI.State_IKP_17_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП17:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_17_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_17_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_17_break_sensor_3,KC_SKM_DI.State_IKP_17_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП18:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_18_good,KC_SKM_DI_FromHMI.State_IKP_18_good,KC_SKM_DI_ToHMI.State_IKP_18_good,KC_SKM_DI.State_IKP_18_good);
//Регистр состояния НГК-БИ-ИКП18:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_18_opened,KC_SKM_DI_FromHMI.State_IKP_18_opened,KC_SKM_DI_ToHMI.State_IKP_18_opened,KC_SKM_DI.State_IKP_18_opened);
//Регистр состояния НГК-БИ-ИКП18:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_18_absent,KC_SKM_DI_FromHMI.State_IKP_18_absent,KC_SKM_DI_ToHMI.State_IKP_18_absent,KC_SKM_DI.State_IKP_18_absent);
//Регистр состояния НГК-БИ-ИКП18:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_18_failure,KC_SKM_DI_FromHMI.State_IKP_18_failure,KC_SKM_DI_ToHMI.State_IKP_18_failure,KC_SKM_DI.State_IKP_18_failure);
//Регистр состояния НГК-БИ-ИКП18:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_18_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_18_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_18_break_sensor_1,KC_SKM_DI.State_IKP_18_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП18:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_18_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_18_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_18_break_sensor_2,KC_SKM_DI.State_IKP_18_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП18:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_18_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_18_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_18_break_sensor_3,KC_SKM_DI.State_IKP_18_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП19:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_19_good,KC_SKM_DI_FromHMI.State_IKP_19_good,KC_SKM_DI_ToHMI.State_IKP_19_good,KC_SKM_DI.State_IKP_19_good);
//Регистр состояния НГК-БИ-ИКП19:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_19_opened,KC_SKM_DI_FromHMI.State_IKP_19_opened,KC_SKM_DI_ToHMI.State_IKP_19_opened,KC_SKM_DI.State_IKP_19_opened);
//Регистр состояния НГК-БИ-ИКП19:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_19_absent,KC_SKM_DI_FromHMI.State_IKP_19_absent,KC_SKM_DI_ToHMI.State_IKP_19_absent,KC_SKM_DI.State_IKP_19_absent);
//Регистр состояния НГК-БИ-ИКП19:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_19_failure,KC_SKM_DI_FromHMI.State_IKP_19_failure,KC_SKM_DI_ToHMI.State_IKP_19_failure,KC_SKM_DI.State_IKP_19_failure);
//Регистр состояния НГК-БИ-ИКП19:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_19_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_19_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_19_break_sensor_1,KC_SKM_DI.State_IKP_19_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП19:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_19_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_19_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_19_break_sensor_2,KC_SKM_DI.State_IKP_19_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП19:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_19_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_19_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_19_break_sensor_3,KC_SKM_DI.State_IKP_19_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП20:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_20_good,KC_SKM_DI_FromHMI.State_IKP_20_good,KC_SKM_DI_ToHMI.State_IKP_20_good,KC_SKM_DI.State_IKP_20_good);
//Регистр состояния НГК-БИ-ИКП20:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_20_opened,KC_SKM_DI_FromHMI.State_IKP_20_opened,KC_SKM_DI_ToHMI.State_IKP_20_opened,KC_SKM_DI.State_IKP_20_opened);
//Регистр состояния НГК-БИ-ИКП20:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_20_absent,KC_SKM_DI_FromHMI.State_IKP_20_absent,KC_SKM_DI_ToHMI.State_IKP_20_absent,KC_SKM_DI.State_IKP_20_absent);
//Регистр состояния НГК-БИ-ИКП20:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_20_failure,KC_SKM_DI_FromHMI.State_IKP_20_failure,KC_SKM_DI_ToHMI.State_IKP_20_failure,KC_SKM_DI.State_IKP_20_failure);
//Регистр состояния НГК-БИ-ИКП20:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_20_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_20_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_20_break_sensor_1,KC_SKM_DI.State_IKP_20_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП20:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_20_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_20_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_20_break_sensor_2,KC_SKM_DI.State_IKP_20_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП20:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_20_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_20_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_20_break_sensor_3,KC_SKM_DI.State_IKP_20_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП21:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_21_good,KC_SKM_DI_FromHMI.State_IKP_21_good,KC_SKM_DI_ToHMI.State_IKP_21_good,KC_SKM_DI.State_IKP_21_good);
//Регистр состояния НГК-БИ-ИКП21:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_21_opened,KC_SKM_DI_FromHMI.State_IKP_21_opened,KC_SKM_DI_ToHMI.State_IKP_21_opened,KC_SKM_DI.State_IKP_21_opened);
//Регистр состояния НГК-БИ-ИКП21:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_21_absent,KC_SKM_DI_FromHMI.State_IKP_21_absent,KC_SKM_DI_ToHMI.State_IKP_21_absent,KC_SKM_DI.State_IKP_21_absent);
//Регистр состояния НГК-БИ-ИКП21:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_21_failure,KC_SKM_DI_FromHMI.State_IKP_21_failure,KC_SKM_DI_ToHMI.State_IKP_21_failure,KC_SKM_DI.State_IKP_21_failure);
//Регистр состояния НГК-БИ-ИКП21:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_21_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_21_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_21_break_sensor_1,KC_SKM_DI.State_IKP_21_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП21:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_21_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_21_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_21_break_sensor_2,KC_SKM_DI.State_IKP_21_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП21:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_21_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_21_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_21_break_sensor_3,KC_SKM_DI.State_IKP_21_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП22:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_22_good,KC_SKM_DI_FromHMI.State_IKP_22_good,KC_SKM_DI_ToHMI.State_IKP_22_good,KC_SKM_DI.State_IKP_22_good);
//Регистр состояния НГК-БИ-ИКП22:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_22_opened,KC_SKM_DI_FromHMI.State_IKP_22_opened,KC_SKM_DI_ToHMI.State_IKP_22_opened,KC_SKM_DI.State_IKP_22_opened);
//Регистр состояния НГК-БИ-ИКП22:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_22_absent,KC_SKM_DI_FromHMI.State_IKP_22_absent,KC_SKM_DI_ToHMI.State_IKP_22_absent,KC_SKM_DI.State_IKP_22_absent);
//Регистр состояния НГК-БИ-ИКП22:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_22_failure,KC_SKM_DI_FromHMI.State_IKP_22_failure,KC_SKM_DI_ToHMI.State_IKP_22_failure,KC_SKM_DI.State_IKP_22_failure);
//Регистр состояния НГК-БИ-ИКП22:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_22_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_22_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_22_break_sensor_1,KC_SKM_DI.State_IKP_22_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП22:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_22_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_22_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_22_break_sensor_2,KC_SKM_DI.State_IKP_22_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП22:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_22_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_22_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_22_break_sensor_3,KC_SKM_DI.State_IKP_22_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП23:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_23_good,KC_SKM_DI_FromHMI.State_IKP_23_good,KC_SKM_DI_ToHMI.State_IKP_23_good,KC_SKM_DI.State_IKP_23_good);
//Регистр состояния НГК-БИ-ИКП23:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_23_opened,KC_SKM_DI_FromHMI.State_IKP_23_opened,KC_SKM_DI_ToHMI.State_IKP_23_opened,KC_SKM_DI.State_IKP_23_opened);
//Регистр состояния НГК-БИ-ИКП23:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_23_absent,KC_SKM_DI_FromHMI.State_IKP_23_absent,KC_SKM_DI_ToHMI.State_IKP_23_absent,KC_SKM_DI.State_IKP_23_absent);
//Регистр состояния НГК-БИ-ИКП23:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_23_failure,KC_SKM_DI_FromHMI.State_IKP_23_failure,KC_SKM_DI_ToHMI.State_IKP_23_failure,KC_SKM_DI.State_IKP_23_failure);
//Регистр состояния НГК-БИ-ИКП23:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_23_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_23_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_23_break_sensor_1,KC_SKM_DI.State_IKP_23_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП23:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_23_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_23_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_23_break_sensor_2,KC_SKM_DI.State_IKP_23_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП23:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_23_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_23_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_23_break_sensor_3,KC_SKM_DI.State_IKP_23_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП24:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_24_good,KC_SKM_DI_FromHMI.State_IKP_24_good,KC_SKM_DI_ToHMI.State_IKP_24_good,KC_SKM_DI.State_IKP_24_good);
//Регистр состояния НГК-БИ-ИКП24:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_24_opened,KC_SKM_DI_FromHMI.State_IKP_24_opened,KC_SKM_DI_ToHMI.State_IKP_24_opened,KC_SKM_DI.State_IKP_24_opened);
//Регистр состояния НГК-БИ-ИКП24:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_24_absent,KC_SKM_DI_FromHMI.State_IKP_24_absent,KC_SKM_DI_ToHMI.State_IKP_24_absent,KC_SKM_DI.State_IKP_24_absent);
//Регистр состояния НГК-БИ-ИКП24:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_24_failure,KC_SKM_DI_FromHMI.State_IKP_24_failure,KC_SKM_DI_ToHMI.State_IKP_24_failure,KC_SKM_DI.State_IKP_24_failure);
//Регистр состояния НГК-БИ-ИКП24:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_24_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_24_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_24_break_sensor_1,KC_SKM_DI.State_IKP_24_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП24:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_24_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_24_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_24_break_sensor_2,KC_SKM_DI.State_IKP_24_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП24:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_24_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_24_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_24_break_sensor_3,KC_SKM_DI.State_IKP_24_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП25:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_25_good,KC_SKM_DI_FromHMI.State_IKP_25_good,KC_SKM_DI_ToHMI.State_IKP_25_good,KC_SKM_DI.State_IKP_25_good);
//Регистр состояния НГК-БИ-ИКП25:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_25_opened,KC_SKM_DI_FromHMI.State_IKP_25_opened,KC_SKM_DI_ToHMI.State_IKP_25_opened,KC_SKM_DI.State_IKP_25_opened);
//Регистр состояния НГК-БИ-ИКП25:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_25_absent,KC_SKM_DI_FromHMI.State_IKP_25_absent,KC_SKM_DI_ToHMI.State_IKP_25_absent,KC_SKM_DI.State_IKP_25_absent);
//Регистр состояния НГК-БИ-ИКП25:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_25_failure,KC_SKM_DI_FromHMI.State_IKP_25_failure,KC_SKM_DI_ToHMI.State_IKP_25_failure,KC_SKM_DI.State_IKP_25_failure);
//Регистр состояния НГК-БИ-ИКП25:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_25_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_25_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_25_break_sensor_1,KC_SKM_DI.State_IKP_25_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП25:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_25_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_25_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_25_break_sensor_2,KC_SKM_DI.State_IKP_25_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП25:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_25_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_25_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_25_break_sensor_3,KC_SKM_DI.State_IKP_25_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП26:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_26_good,KC_SKM_DI_FromHMI.State_IKP_26_good,KC_SKM_DI_ToHMI.State_IKP_26_good,KC_SKM_DI.State_IKP_26_good);
//Регистр состояния НГК-БИ-ИКП26:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_26_opened,KC_SKM_DI_FromHMI.State_IKP_26_opened,KC_SKM_DI_ToHMI.State_IKP_26_opened,KC_SKM_DI.State_IKP_26_opened);
//Регистр состояния НГК-БИ-ИКП26:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_26_absent,KC_SKM_DI_FromHMI.State_IKP_26_absent,KC_SKM_DI_ToHMI.State_IKP_26_absent,KC_SKM_DI.State_IKP_26_absent);
//Регистр состояния НГК-БИ-ИКП26:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_26_failure,KC_SKM_DI_FromHMI.State_IKP_26_failure,KC_SKM_DI_ToHMI.State_IKP_26_failure,KC_SKM_DI.State_IKP_26_failure);
//Регистр состояния НГК-БИ-ИКП26:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_26_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_26_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_26_break_sensor_1,KC_SKM_DI.State_IKP_26_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП26:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_26_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_26_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_26_break_sensor_2,KC_SKM_DI.State_IKP_26_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП26:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_26_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_26_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_26_break_sensor_3,KC_SKM_DI.State_IKP_26_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП27:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_27_good,KC_SKM_DI_FromHMI.State_IKP_27_good,KC_SKM_DI_ToHMI.State_IKP_27_good,KC_SKM_DI.State_IKP_27_good);
//Регистр состояния НГК-БИ-ИКП27:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_27_opened,KC_SKM_DI_FromHMI.State_IKP_27_opened,KC_SKM_DI_ToHMI.State_IKP_27_opened,KC_SKM_DI.State_IKP_27_opened);
//Регистр состояния НГК-БИ-ИКП27:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_27_absent,KC_SKM_DI_FromHMI.State_IKP_27_absent,KC_SKM_DI_ToHMI.State_IKP_27_absent,KC_SKM_DI.State_IKP_27_absent);
//Регистр состояния НГК-БИ-ИКП27:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_27_failure,KC_SKM_DI_FromHMI.State_IKP_27_failure,KC_SKM_DI_ToHMI.State_IKP_27_failure,KC_SKM_DI.State_IKP_27_failure);
//Регистр состояния НГК-БИ-ИКП27:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_27_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_27_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_27_break_sensor_1,KC_SKM_DI.State_IKP_27_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП27:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_27_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_27_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_27_break_sensor_2,KC_SKM_DI.State_IKP_27_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП27:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_27_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_27_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_27_break_sensor_3,KC_SKM_DI.State_IKP_27_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП28:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_28_good,KC_SKM_DI_FromHMI.State_IKP_28_good,KC_SKM_DI_ToHMI.State_IKP_28_good,KC_SKM_DI.State_IKP_28_good);
//Регистр состояния НГК-БИ-ИКП28:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_28_opened,KC_SKM_DI_FromHMI.State_IKP_28_opened,KC_SKM_DI_ToHMI.State_IKP_28_opened,KC_SKM_DI.State_IKP_28_opened);
//Регистр состояния НГК-БИ-ИКП28:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_28_absent,KC_SKM_DI_FromHMI.State_IKP_28_absent,KC_SKM_DI_ToHMI.State_IKP_28_absent,KC_SKM_DI.State_IKP_28_absent);
//Регистр состояния НГК-БИ-ИКП28:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_28_failure,KC_SKM_DI_FromHMI.State_IKP_28_failure,KC_SKM_DI_ToHMI.State_IKP_28_failure,KC_SKM_DI.State_IKP_28_failure);
//Регистр состояния НГК-БИ-ИКП28:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_28_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_28_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_28_break_sensor_1,KC_SKM_DI.State_IKP_28_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП28:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_28_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_28_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_28_break_sensor_2,KC_SKM_DI.State_IKP_28_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП28:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_28_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_28_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_28_break_sensor_3,KC_SKM_DI.State_IKP_28_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП29:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_29_good,KC_SKM_DI_FromHMI.State_IKP_29_good,KC_SKM_DI_ToHMI.State_IKP_29_good,KC_SKM_DI.State_IKP_29_good);
//Регистр состояния НГК-БИ-ИКП29:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_29_opened,KC_SKM_DI_FromHMI.State_IKP_29_opened,KC_SKM_DI_ToHMI.State_IKP_29_opened,KC_SKM_DI.State_IKP_29_opened);
//Регистр состояния НГК-БИ-ИКП29:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_29_absent,KC_SKM_DI_FromHMI.State_IKP_29_absent,KC_SKM_DI_ToHMI.State_IKP_29_absent,KC_SKM_DI.State_IKP_29_absent);
//Регистр состояния НГК-БИ-ИКП29:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_29_failure,KC_SKM_DI_FromHMI.State_IKP_29_failure,KC_SKM_DI_ToHMI.State_IKP_29_failure,KC_SKM_DI.State_IKP_29_failure);
//Регистр состояния НГК-БИ-ИКП29:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_29_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_29_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_29_break_sensor_1,KC_SKM_DI.State_IKP_29_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП29:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_29_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_29_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_29_break_sensor_2,KC_SKM_DI.State_IKP_29_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП29:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_29_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_29_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_29_break_sensor_3,KC_SKM_DI.State_IKP_29_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП30:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_30_good,KC_SKM_DI_FromHMI.State_IKP_30_good,KC_SKM_DI_ToHMI.State_IKP_30_good,KC_SKM_DI.State_IKP_30_good);
//Регистр состояния НГК-БИ-ИКП30:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_30_opened,KC_SKM_DI_FromHMI.State_IKP_30_opened,KC_SKM_DI_ToHMI.State_IKP_30_opened,KC_SKM_DI.State_IKP_30_opened);
//Регистр состояния НГК-БИ-ИКП30:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_30_absent,KC_SKM_DI_FromHMI.State_IKP_30_absent,KC_SKM_DI_ToHMI.State_IKP_30_absent,KC_SKM_DI.State_IKP_30_absent);
//Регистр состояния НГК-БИ-ИКП30:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_30_failure,KC_SKM_DI_FromHMI.State_IKP_30_failure,KC_SKM_DI_ToHMI.State_IKP_30_failure,KC_SKM_DI.State_IKP_30_failure);
//Регистр состояния НГК-БИ-ИКП30:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_30_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_30_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_30_break_sensor_1,KC_SKM_DI.State_IKP_30_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП30:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_30_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_30_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_30_break_sensor_2,KC_SKM_DI.State_IKP_30_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП30:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_30_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_30_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_30_break_sensor_3,KC_SKM_DI.State_IKP_30_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП31:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_31_good,KC_SKM_DI_FromHMI.State_IKP_31_good,KC_SKM_DI_ToHMI.State_IKP_31_good,KC_SKM_DI.State_IKP_31_good);
//Регистр состояния НГК-БИ-ИКП31:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_31_opened,KC_SKM_DI_FromHMI.State_IKP_31_opened,KC_SKM_DI_ToHMI.State_IKP_31_opened,KC_SKM_DI.State_IKP_31_opened);
//Регистр состояния НГК-БИ-ИКП31:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_31_absent,KC_SKM_DI_FromHMI.State_IKP_31_absent,KC_SKM_DI_ToHMI.State_IKP_31_absent,KC_SKM_DI.State_IKP_31_absent);
//Регистр состояния НГК-БИ-ИКП31:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_31_failure,KC_SKM_DI_FromHMI.State_IKP_31_failure,KC_SKM_DI_ToHMI.State_IKP_31_failure,KC_SKM_DI.State_IKP_31_failure);
//Регистр состояния НГК-БИ-ИКП31:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_31_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_31_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_31_break_sensor_1,KC_SKM_DI.State_IKP_31_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП31:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_31_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_31_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_31_break_sensor_2,KC_SKM_DI.State_IKP_31_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП31:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_31_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_31_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_31_break_sensor_3,KC_SKM_DI.State_IKP_31_break_sensor_3);
//Регистр состояния НГК-БИ-ИКП32:исправен
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_32_good,KC_SKM_DI_FromHMI.State_IKP_32_good,KC_SKM_DI_ToHMI.State_IKP_32_good,KC_SKM_DI.State_IKP_32_good);
//Регистр состояния НГК-БИ-ИКП32:вскрыт
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_32_opened,KC_SKM_DI_FromHMI.State_IKP_32_opened,KC_SKM_DI_ToHMI.State_IKP_32_opened,KC_SKM_DI.State_IKP_32_opened);
//Регистр состояния НГК-БИ-ИКП32:отсутствует
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_32_absent,KC_SKM_DI_FromHMI.State_IKP_32_absent,KC_SKM_DI_ToHMI.State_IKP_32_absent,KC_SKM_DI.State_IKP_32_absent);
//Регистр состояния НГК-БИ-ИКП32:авария
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_32_failure,KC_SKM_DI_FromHMI.State_IKP_32_failure,KC_SKM_DI_ToHMI.State_IKP_32_failure,KC_SKM_DI.State_IKP_32_failure);
//Регистр состояния НГК-БИ-ИКП32:датчик 1 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_32_break_sensor_1,KC_SKM_DI_FromHMI.State_IKP_32_break_sensor_1,KC_SKM_DI_ToHMI.State_IKP_32_break_sensor_1,KC_SKM_DI.State_IKP_32_break_sensor_1);
//Регистр состояния НГК-БИ-ИКП32:датчик 2 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_32_break_sensor_2,KC_SKM_DI_FromHMI.State_IKP_32_break_sensor_2,KC_SKM_DI_ToHMI.State_IKP_32_break_sensor_2,KC_SKM_DI.State_IKP_32_break_sensor_2);
//Регистр состояния НГК-БИ-ИКП32:датчик 3 обрыв
mb_DI_Processing(KC_SKM_DI_DRV.State_IKP_32_break_sensor_3,KC_SKM_DI_FromHMI.State_IKP_32_break_sensor_3,KC_SKM_DI_ToHMI.State_IKP_32_break_sensor_3,KC_SKM_DI.State_IKP_32_break_sensor_3);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                </Folder>
                <FunctionBlock UUID="P5O4FQ5UT5UUPMRUCYPCWT55CQ" Name="NGK_SKM">
                    <Variables>
                        <Variable UUID="JBVNXNKMHHNEVMHN2LQKMI77FI" Name="SKM_1" Type="DWORD" Usage="internal" />
                        <Variable UUID="PUJVIH22LWOUZF3TVO3NYEX5R4" Name="SKM_2" Type="DWORD" Usage="internal" />
                        <Variable UUID="EWOKRGLMFRQUBLXJPVUA2ULOVM" Name="SKM_3" Type="DWORD" Usage="internal" />
                        <Variable UUID="YRIIEJPTOATELKKCK2Z4VCUTJU" Name="SKM_4" Type="DWORD" Usage="internal" />
                        <Variable UUID="OWQ53TVKMGAERBVGPCRPCKXNL4" Name="SKM_5" Type="DWORD" Usage="internal" />
                        <Variable UUID="DOZGVJ32XELE7GW4RURV72TX6U" Name="SKM_6" Type="DWORD" Usage="internal" />
                        <Variable UUID="ORRDD54L2KYETKPCIGQ6OICWKE" Name="SKM_7" Type="DWORD" Usage="internal" />
                        <Variable UUID="VW5XRMBU6EIEJD34FGAEWGO7CY" Name="SKM_8" Type="DWORD" Usage="internal" />
                        <Variable UUID="ASFT2EVGT7KUJENR2PNS27AKBU" Name="SKM_9" Type="DWORD" Usage="internal" />
                        <Variable UUID="J3QTZFDF2SNEPOQVVJ2CFEJAXI" Name="SKM_10" Type="DWORD" Usage="internal" />
                        <Variable UUID="54CLQDD3AH3EJADDFYNHYYHQZY" Name="SKM_11" Type="DWORD" Usage="internal" />
                        <Variable UUID="WIHZLXZPGA3EJHFM7VPQKNOGTQ" Name="SKM_12" Type="DWORD" Usage="internal" />
                        <Variable UUID="TITCSUZXJ5IEFMGOTGIMWE5AHA" Name="SKM_13" Type="DWORD" Usage="internal" />
                        <Variable UUID="WXAUAPAX4SGURDEGDIHLNJMYII" Name="SKM_14" Type="DWORD" Usage="internal" />
                        <Variable UUID="T7ZVPQQJNHBUXPR5XGDIGTTJYE" Name="SKM_15" Type="DWORD" Usage="internal" />
                        <Variable UUID="NUDQEQXTZMQEPJDRLWQXMKZ7KQ" Name="SKM_16" Type="DWORD" Usage="internal" />
                        <Variable UUID="OEF6ALQORYJU3KIJTQWCM4S6OY" Name="SKM_17" Type="DWORD" Usage="internal" />
                        <Variable UUID="R5JB7CMTEOGE3OR6V3R7EYOGDQ" Name="SKM_18" Type="DWORD" Usage="internal" />
                        <Variable UUID="LVMADBWEFNAETGDJYOT5VVGZ6Q" Name="SKM_19" Type="DWORD" Usage="internal" />
                        <Variable UUID="AAN4JDMF3WHU5EOYYDZXP7UECY" Name="SKM_20" Type="DWORD" Usage="internal" />
                        <Variable UUID="HEGQELSO4QEU3BCMJWZE3D67A4" Name="SKM_21" Type="DWORD" Usage="internal" />
                        <Variable UUID="LI7BPWVXWQFE3LVAGHQIUWKBWA" Name="SKM_22" Type="DWORD" Usage="internal" />
                        <Variable UUID="BJ3WQ6VXKETUPDBJ3OXZYQ5XNA" Name="SKM_23" Type="DWORD" Usage="internal" />
                        <Variable UUID="RQQX4YOLNYMUNOHBTIG65ZTESU" Name="SKM_24" Type="DWORD" Usage="internal" />
                        <Variable UUID="JEIYWIVOW6VEXJHYFG7YHXEQOE" Name="SKM_25" Type="DWORD" Usage="internal" />
                        <Variable UUID="6FI3OHQZ233UZA2S74CNQFAEAI" Name="SKM_26" Type="DWORD" Usage="internal" />
                        <Variable UUID="3IAAERBE7GIUXKS2FTAYPD7DV4" Name="SKM_27" Type="DWORD" Usage="internal" />
                        <Variable UUID="EIHGVH4JI2QU3B5K2ZC35PT5BM" Name="SKM_28" Type="DWORD" Usage="internal" />
                        <Variable UUID="S3R3UVSRZLOUFEKWHBXKHHJQDY" Name="SKM_29" Type="DWORD" Usage="internal" />
                        <Variable UUID="AYJP6ZQX3MXENF6FO2TPLZMJ3Y" Name="SKM_30" Type="DWORD" Usage="internal" />
                        <Variable UUID="XS45REFXGA2UDD7M44PP2MCK34" Name="SKM_31" Type="DWORD" Usage="internal" />
                        <Variable UUID="4RKTZ2JGKA7E3C27SAHHUIU2WM" Name="SKM_32" Type="DWORD" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[//_________________________________Дискретные входы_______________________________________________________//

SKM_1  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_1);   ///   Регистр состояния НГК-БИ-ИКП1
SKM_2  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_2);   ///   Регистр состояния НГК-БИ-ИКП2
SKM_3  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_3);   ///   Регистр состояния НГК-БИ-ИКП3
SKM_4  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_4);   ///   Регистр состояния НГК-БИ-ИКП4
SKM_5  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_5);   ///   Регистр состояния НГК-БИ-ИКП5
SKM_6  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_6);   ///   Регистр состояния НГК-БИ-ИКП6
SKM_7  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_7);   ///   Регистр состояния НГК-БИ-ИКП7
SKM_8  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_8);   ///   Регистр состояния НГК-БИ-ИКП8
SKM_9  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_9);   ///   Регистр состояния НГК-БИ-ИКП9
SKM_10  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_10);   ///   Регистр состояния НГК-БИ-ИКП10
SKM_11  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_11);   ///   Регистр состояния НГК-БИ-ИКП11
SKM_12  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_12);   ///   Регистр состояния НГК-БИ-ИКП12
SKM_13  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_13);   ///   Регистр состояния НГК-БИ-ИКП13
SKM_14  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_14);   ///   Регистр состояния НГК-БИ-ИКП14
SKM_15  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_15);   ///   Регистр состояния НГК-БИ-ИКП15
SKM_16  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_16);   ///   Регистр состояния НГК-БИ-ИКП16
SKM_17  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_17);   ///   Регистр состояния НГК-БИ-ИКП17
SKM_18  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_18);   ///   Регистр состояния НГК-БИ-ИКП18
SKM_19  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_19);   ///   Регистр состояния НГК-БИ-ИКП19
SKM_20  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_20);   ///   Регистр состояния НГК-БИ-ИКП20
SKM_21  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_21);   ///   Регистр состояния НГК-БИ-ИКП21
SKM_22  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_22);   ///   Регистр состояния НГК-БИ-ИКП22
SKM_23  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_23);   ///   Регистр состояния НГК-БИ-ИКП23
SKM_24  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_24);   ///   Регистр состояния НГК-БИ-ИКП24
SKM_25  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_25);   ///   Регистр состояния НГК-БИ-ИКП25
SKM_26  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_26);   ///   Регистр состояния НГК-БИ-ИКП26
SKM_27  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_27);   ///   Регистр состояния НГК-БИ-ИКП27
SKM_28  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_28);   ///   Регистр состояния НГК-БИ-ИКП28
SKM_29  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_29);   ///   Регистр состояния НГК-БИ-ИКП29
SKM_30  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_30);   ///   Регистр состояния НГК-БИ-ИКП30
SKM_31  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_31);   ///   Регистр состояния НГК-БИ-ИКП31
SKM_32  :=   WORD_TO_DWORD(DRV_KC_NGK_SKM_mb_DGI.State_IKP_32);   ///   Регистр состояния НГК-БИ-ИКП32

//ПРИМЕЧАНИЕ
///Биты				
//0-1 биты---	00-исправен	01-вскрыт	10-отсутвует	11-авария
//2-4 биты---	1,2,3 датчики корозии	1-обрыв	0-норма	
KC_SKM_DI_DRV.State_IKP_1_good   :=     NOT EXTRACT(SKM_1,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП1:исправен
KC_SKM_DI_DRV.State_IKP_1_opened   :=     NOT EXTRACT(SKM_1,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП1:вскрыт
KC_SKM_DI_DRV.State_IKP_1_absent   :=   EXTRACT(SKM_1,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП1:отсутствует
KC_SKM_DI_DRV.State_IKP_1_failure   :=   EXTRACT(SKM_1,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП1:авария
KC_SKM_DI_DRV.State_IKP_1_break_sensor_1   :=   EXTRACT(SKM_1,2) ;  //  Регистр состояния НГК-БИ-ИКП1:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_1_break_sensor_2   :=   EXTRACT(SKM_1,3) ;  //  Регистр состояния НГК-БИ-ИКП1:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_1_break_sensor_3   :=   EXTRACT(SKM_1,4) ;  //  Регистр состояния НГК-БИ-ИКП1:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_2_good   :=     NOT EXTRACT(SKM_2,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП2:исправен
KC_SKM_DI_DRV.State_IKP_2_opened   :=     NOT EXTRACT(SKM_2,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП2:вскрыт
KC_SKM_DI_DRV.State_IKP_2_absent   :=   EXTRACT(SKM_2,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП2:отсутствует
KC_SKM_DI_DRV.State_IKP_2_failure   :=   EXTRACT(SKM_2,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП2:авария
KC_SKM_DI_DRV.State_IKP_2_break_sensor_1   :=   EXTRACT(SKM_2,2) ;  //  Регистр состояния НГК-БИ-ИКП2:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_2_break_sensor_2   :=   EXTRACT(SKM_2,3) ;  //  Регистр состояния НГК-БИ-ИКП2:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_2_break_sensor_3   :=   EXTRACT(SKM_2,4) ;  //  Регистр состояния НГК-БИ-ИКП2:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_3_good   :=     NOT EXTRACT(SKM_3,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП3:исправен
KC_SKM_DI_DRV.State_IKP_3_opened   :=     NOT EXTRACT(SKM_3,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП3:вскрыт
KC_SKM_DI_DRV.State_IKP_3_absent   :=   EXTRACT(SKM_3,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП3:отсутствует
KC_SKM_DI_DRV.State_IKP_3_failure   :=   EXTRACT(SKM_3,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП3:авария
KC_SKM_DI_DRV.State_IKP_3_break_sensor_1   :=   EXTRACT(SKM_3,2) ;  //  Регистр состояния НГК-БИ-ИКП3:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_3_break_sensor_2   :=   EXTRACT(SKM_3,3) ;  //  Регистр состояния НГК-БИ-ИКП3:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_3_break_sensor_3   :=   EXTRACT(SKM_3,4) ;  //  Регистр состояния НГК-БИ-ИКП3:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_4_good   :=     NOT EXTRACT(SKM_4,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП4:исправен
KC_SKM_DI_DRV.State_IKP_4_opened   :=     NOT EXTRACT(SKM_4,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП4:вскрыт
KC_SKM_DI_DRV.State_IKP_4_absent   :=   EXTRACT(SKM_4,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП4:отсутствует
KC_SKM_DI_DRV.State_IKP_4_failure   :=   EXTRACT(SKM_4,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП4:авария
KC_SKM_DI_DRV.State_IKP_4_break_sensor_1   :=   EXTRACT(SKM_4,2) ;  //  Регистр состояния НГК-БИ-ИКП4:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_4_break_sensor_2   :=   EXTRACT(SKM_4,3) ;  //  Регистр состояния НГК-БИ-ИКП4:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_4_break_sensor_3   :=   EXTRACT(SKM_4,4) ;  //  Регистр состояния НГК-БИ-ИКП4:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_5_good   :=     NOT EXTRACT(SKM_5,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП5:исправен
KC_SKM_DI_DRV.State_IKP_5_opened   :=     NOT EXTRACT(SKM_5,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП5:вскрыт
KC_SKM_DI_DRV.State_IKP_5_absent   :=   EXTRACT(SKM_5,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП5:отсутствует
KC_SKM_DI_DRV.State_IKP_5_failure   :=   EXTRACT(SKM_5,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП5:авария
KC_SKM_DI_DRV.State_IKP_5_break_sensor_1   :=   EXTRACT(SKM_5,2) ;  //  Регистр состояния НГК-БИ-ИКП5:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_5_break_sensor_2   :=   EXTRACT(SKM_5,3) ;  //  Регистр состояния НГК-БИ-ИКП5:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_5_break_sensor_3   :=   EXTRACT(SKM_5,4) ;  //  Регистр состояния НГК-БИ-ИКП5:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_6_good   :=     NOT EXTRACT(SKM_6,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП6:исправен
KC_SKM_DI_DRV.State_IKP_6_opened   :=     NOT EXTRACT(SKM_6,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП6:вскрыт
KC_SKM_DI_DRV.State_IKP_6_absent   :=   EXTRACT(SKM_6,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП6:отсутствует
KC_SKM_DI_DRV.State_IKP_6_failure   :=   EXTRACT(SKM_6,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП6:авария
KC_SKM_DI_DRV.State_IKP_6_break_sensor_1   :=   EXTRACT(SKM_6,2) ;  //  Регистр состояния НГК-БИ-ИКП6:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_6_break_sensor_2   :=   EXTRACT(SKM_6,3) ;  //  Регистр состояния НГК-БИ-ИКП6:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_6_break_sensor_3   :=   EXTRACT(SKM_6,4) ;  //  Регистр состояния НГК-БИ-ИКП6:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_6_good   :=     NOT EXTRACT(SKM_6,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП7:исправен
KC_SKM_DI_DRV.State_IKP_7_opened   :=     NOT EXTRACT(SKM_7,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП7:вскрыт
KC_SKM_DI_DRV.State_IKP_7_absent   :=   EXTRACT(SKM_7,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП7:отсутствует
KC_SKM_DI_DRV.State_IKP_7_failure   :=   EXTRACT(SKM_7,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП7:авария
KC_SKM_DI_DRV.State_IKP_7_break_sensor_1   :=   EXTRACT(SKM_7,2) ;  //  Регистр состояния НГК-БИ-ИКП7:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_7_break_sensor_2   :=   EXTRACT(SKM_7,3) ;  //  Регистр состояния НГК-БИ-ИКП7:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_7_break_sensor_3   :=   EXTRACT(SKM_7,4) ;  //  Регистр состояния НГК-БИ-ИКП7:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_8_good   :=     NOT EXTRACT(SKM_8,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП8:исправен
KC_SKM_DI_DRV.State_IKP_8_opened   :=     NOT EXTRACT(SKM_8,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП8:вскрыт
KC_SKM_DI_DRV.State_IKP_8_absent   :=   EXTRACT(SKM_8,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП8:отсутствует
KC_SKM_DI_DRV.State_IKP_8_failure   :=   EXTRACT(SKM_8,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП8:авария
KC_SKM_DI_DRV.State_IKP_8_break_sensor_1   :=   EXTRACT(SKM_8,2) ;  //  Регистр состояния НГК-БИ-ИКП8:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_8_break_sensor_2   :=   EXTRACT(SKM_8,3) ;  //  Регистр состояния НГК-БИ-ИКП8:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_8_break_sensor_3   :=   EXTRACT(SKM_8,4) ;  //  Регистр состояния НГК-БИ-ИКП8:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_9_good   :=     NOT EXTRACT(SKM_9,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП9:исправен
KC_SKM_DI_DRV.State_IKP_9_opened   :=     NOT EXTRACT(SKM_9,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП9:вскрыт
KC_SKM_DI_DRV.State_IKP_9_absent   :=   EXTRACT(SKM_9,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП9:отсутствует
KC_SKM_DI_DRV.State_IKP_9_failure   :=   EXTRACT(SKM_9,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП9:авария
KC_SKM_DI_DRV.State_IKP_9_break_sensor_1   :=   EXTRACT(SKM_9,2) ;  //  Регистр состояния НГК-БИ-ИКП9:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_9_break_sensor_2   :=   EXTRACT(SKM_9,3) ;  //  Регистр состояния НГК-БИ-ИКП9:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_9_break_sensor_3   :=   EXTRACT(SKM_9,4) ;  //  Регистр состояния НГК-БИ-ИКП9:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_10_good   :=     NOT EXTRACT(SKM_10,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП10:исправен
KC_SKM_DI_DRV.State_IKP_10_opened   :=     NOT EXTRACT(SKM_10,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП10:вскрыт
KC_SKM_DI_DRV.State_IKP_10_absent   :=   EXTRACT(SKM_10,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП10:отсутствует
KC_SKM_DI_DRV.State_IKP_10_failure   :=   EXTRACT(SKM_10,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП10:авария
KC_SKM_DI_DRV.State_IKP_10_break_sensor_1   :=   EXTRACT(SKM_10,2) ;  //  Регистр состояния НГК-БИ-ИКП10:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_10_break_sensor_2   :=   EXTRACT(SKM_10,3) ;  //  Регистр состояния НГК-БИ-ИКП10:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_10_break_sensor_3   :=   EXTRACT(SKM_10,4) ;  //  Регистр состояния НГК-БИ-ИКП10:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_11_good   :=     NOT EXTRACT(SKM_11,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП11:исправен
KC_SKM_DI_DRV.State_IKP_11_opened   :=     NOT EXTRACT(SKM_11,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП11:вскрыт
KC_SKM_DI_DRV.State_IKP_11_absent   :=   EXTRACT(SKM_11,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП11:отсутствует
KC_SKM_DI_DRV.State_IKP_11_failure   :=   EXTRACT(SKM_11,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП11:авария
KC_SKM_DI_DRV.State_IKP_11_break_sensor_1   :=   EXTRACT(SKM_11,2) ;  //  Регистр состояния НГК-БИ-ИКП11:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_11_break_sensor_2   :=   EXTRACT(SKM_11,3) ;  //  Регистр состояния НГК-БИ-ИКП11:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_11_break_sensor_3   :=   EXTRACT(SKM_11,4) ;  //  Регистр состояния НГК-БИ-ИКП11:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_12_good   :=     NOT EXTRACT(SKM_12,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП12:исправен
KC_SKM_DI_DRV.State_IKP_12_opened   :=     NOT EXTRACT(SKM_12,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП12:вскрыт
KC_SKM_DI_DRV.State_IKP_12_absent   :=   EXTRACT(SKM_12,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП12:отсутствует
KC_SKM_DI_DRV.State_IKP_12_failure   :=   EXTRACT(SKM_12,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП12:авария
KC_SKM_DI_DRV.State_IKP_12_break_sensor_1   :=   EXTRACT(SKM_12,2) ;  //  Регистр состояния НГК-БИ-ИКП12:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_12_break_sensor_2   :=   EXTRACT(SKM_12,3) ;  //  Регистр состояния НГК-БИ-ИКП12:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_12_break_sensor_3   :=   EXTRACT(SKM_12,4) ;  //  Регистр состояния НГК-БИ-ИКП12:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_13_good   :=     NOT EXTRACT(SKM_13,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП13:исправен
KC_SKM_DI_DRV.State_IKP_13_opened   :=     NOT EXTRACT(SKM_13,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП13:вскрыт
KC_SKM_DI_DRV.State_IKP_13_absent   :=   EXTRACT(SKM_13,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП13:отсутствует
KC_SKM_DI_DRV.State_IKP_13_failure   :=   EXTRACT(SKM_13,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП13:авария
KC_SKM_DI_DRV.State_IKP_13_break_sensor_1   :=   EXTRACT(SKM_13,2) ;  //  Регистр состояния НГК-БИ-ИКП13:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_13_break_sensor_2   :=   EXTRACT(SKM_13,3) ;  //  Регистр состояния НГК-БИ-ИКП13:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_13_break_sensor_3   :=   EXTRACT(SKM_13,4) ;  //  Регистр состояния НГК-БИ-ИКП13:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_14_good   :=     NOT EXTRACT(SKM_14,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП14:исправен
KC_SKM_DI_DRV.State_IKP_14_opened   :=     NOT EXTRACT(SKM_14,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП14:вскрыт
KC_SKM_DI_DRV.State_IKP_14_absent   :=   EXTRACT(SKM_14,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП14:отсутствует
KC_SKM_DI_DRV.State_IKP_14_failure   :=   EXTRACT(SKM_14,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП14:авария
KC_SKM_DI_DRV.State_IKP_14_break_sensor_1   :=   EXTRACT(SKM_14,2) ;  //  Регистр состояния НГК-БИ-ИКП14:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_14_break_sensor_2   :=   EXTRACT(SKM_14,3) ;  //  Регистр состояния НГК-БИ-ИКП14:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_14_break_sensor_3   :=   EXTRACT(SKM_14,4) ;  //  Регистр состояния НГК-БИ-ИКП14:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_15_good   :=     NOT EXTRACT(SKM_15,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП15:исправен
KC_SKM_DI_DRV.State_IKP_15_opened   :=     NOT EXTRACT(SKM_15,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП15:вскрыт
KC_SKM_DI_DRV.State_IKP_15_absent   :=   EXTRACT(SKM_15,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП15:отсутствует
KC_SKM_DI_DRV.State_IKP_15_failure   :=   EXTRACT(SKM_15,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП15:авария
KC_SKM_DI_DRV.State_IKP_15_break_sensor_1   :=   EXTRACT(SKM_15,2) ;  //  Регистр состояния НГК-БИ-ИКП15:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_15_break_sensor_2   :=   EXTRACT(SKM_15,3) ;  //  Регистр состояния НГК-БИ-ИКП15:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_15_break_sensor_3   :=   EXTRACT(SKM_15,4) ;  //  Регистр состояния НГК-БИ-ИКП15:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_16_good   :=     NOT EXTRACT(SKM_16,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП16:исправен
KC_SKM_DI_DRV.State_IKP_16_opened   :=     NOT EXTRACT(SKM_16,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП16:вскрыт
KC_SKM_DI_DRV.State_IKP_16_absent   :=   EXTRACT(SKM_16,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП16:отсутствует
KC_SKM_DI_DRV.State_IKP_16_failure   :=   EXTRACT(SKM_16,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП16:авария
KC_SKM_DI_DRV.State_IKP_16_break_sensor_1   :=   EXTRACT(SKM_16,2) ;  //  Регистр состояния НГК-БИ-ИКП16:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_16_break_sensor_2   :=   EXTRACT(SKM_16,3) ;  //  Регистр состояния НГК-БИ-ИКП16:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_16_break_sensor_3   :=   EXTRACT(SKM_16,4) ;  //  Регистр состояния НГК-БИ-ИКП16:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_17_good   :=     NOT EXTRACT(SKM_17,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП17:исправен
KC_SKM_DI_DRV.State_IKP_17_opened   :=     NOT EXTRACT(SKM_17,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП17:вскрыт
KC_SKM_DI_DRV.State_IKP_17_absent   :=   EXTRACT(SKM_17,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП17:отсутствует
KC_SKM_DI_DRV.State_IKP_17_failure   :=   EXTRACT(SKM_17,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП17:авария
KC_SKM_DI_DRV.State_IKP_17_break_sensor_1   :=   EXTRACT(SKM_17,2) ;  //  Регистр состояния НГК-БИ-ИКП17:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_17_break_sensor_2   :=   EXTRACT(SKM_17,3) ;  //  Регистр состояния НГК-БИ-ИКП17:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_17_break_sensor_3   :=   EXTRACT(SKM_17,4) ;  //  Регистр состояния НГК-БИ-ИКП17:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_18_good   :=     NOT EXTRACT(SKM_18,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП18:исправен
KC_SKM_DI_DRV.State_IKP_18_opened   :=     NOT EXTRACT(SKM_18,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП18:вскрыт
KC_SKM_DI_DRV.State_IKP_18_absent   :=   EXTRACT(SKM_18,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП18:отсутствует
KC_SKM_DI_DRV.State_IKP_18_failure   :=   EXTRACT(SKM_18,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП18:авария
KC_SKM_DI_DRV.State_IKP_18_break_sensor_1   :=   EXTRACT(SKM_18,2) ;  //  Регистр состояния НГК-БИ-ИКП18:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_18_break_sensor_2   :=   EXTRACT(SKM_18,3) ;  //  Регистр состояния НГК-БИ-ИКП18:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_18_break_sensor_3   :=   EXTRACT(SKM_18,4) ;  //  Регистр состояния НГК-БИ-ИКП18:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_19_good   :=     NOT EXTRACT(SKM_19,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП19:исправен
KC_SKM_DI_DRV.State_IKP_19_opened   :=     NOT EXTRACT(SKM_19,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП19:вскрыт
KC_SKM_DI_DRV.State_IKP_19_absent   :=   EXTRACT(SKM_19,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП19:отсутствует
KC_SKM_DI_DRV.State_IKP_19_failure   :=   EXTRACT(SKM_19,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП19:авария
KC_SKM_DI_DRV.State_IKP_19_break_sensor_1   :=   EXTRACT(SKM_19,2) ;  //  Регистр состояния НГК-БИ-ИКП19:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_19_break_sensor_2   :=   EXTRACT(SKM_19,3) ;  //  Регистр состояния НГК-БИ-ИКП19:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_19_break_sensor_3   :=   EXTRACT(SKM_19,4) ;  //  Регистр состояния НГК-БИ-ИКП19:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_20_good   :=     NOT EXTRACT(SKM_20,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП20:исправен
KC_SKM_DI_DRV.State_IKP_20_opened   :=     NOT EXTRACT(SKM_20,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП20:вскрыт
KC_SKM_DI_DRV.State_IKP_20_absent   :=   EXTRACT(SKM_20,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП20:отсутствует
KC_SKM_DI_DRV.State_IKP_20_failure   :=   EXTRACT(SKM_20,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП20:авария
KC_SKM_DI_DRV.State_IKP_20_break_sensor_1   :=   EXTRACT(SKM_20,2) ;  //  Регистр состояния НГК-БИ-ИКП20:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_20_break_sensor_2   :=   EXTRACT(SKM_20,3) ;  //  Регистр состояния НГК-БИ-ИКП20:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_20_break_sensor_3   :=   EXTRACT(SKM_20,4) ;  //  Регистр состояния НГК-БИ-ИКП20:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_21_good   :=     NOT EXTRACT(SKM_21,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП21:исправен
KC_SKM_DI_DRV.State_IKP_21_opened   :=     NOT EXTRACT(SKM_21,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП21:вскрыт
KC_SKM_DI_DRV.State_IKP_21_absent   :=   EXTRACT(SKM_21,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП21:отсутствует
KC_SKM_DI_DRV.State_IKP_21_failure   :=   EXTRACT(SKM_21,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП21:авария
KC_SKM_DI_DRV.State_IKP_21_break_sensor_1   :=   EXTRACT(SKM_21,2) ;  //  Регистр состояния НГК-БИ-ИКП21:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_21_break_sensor_2   :=   EXTRACT(SKM_21,3) ;  //  Регистр состояния НГК-БИ-ИКП21:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_21_break_sensor_3   :=   EXTRACT(SKM_21,4) ;  //  Регистр состояния НГК-БИ-ИКП21:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_22_good   :=     NOT EXTRACT(SKM_22,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП22:исправен
KC_SKM_DI_DRV.State_IKP_22_opened   :=     NOT EXTRACT(SKM_22,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП22:вскрыт
KC_SKM_DI_DRV.State_IKP_22_absent   :=   EXTRACT(SKM_22,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП22:отсутствует
KC_SKM_DI_DRV.State_IKP_22_failure   :=   EXTRACT(SKM_22,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП22:авария
KC_SKM_DI_DRV.State_IKP_22_break_sensor_1   :=   EXTRACT(SKM_22,2) ;  //  Регистр состояния НГК-БИ-ИКП22:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_22_break_sensor_2   :=   EXTRACT(SKM_22,3) ;  //  Регистр состояния НГК-БИ-ИКП22:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_22_break_sensor_3   :=   EXTRACT(SKM_22,4) ;  //  Регистр состояния НГК-БИ-ИКП22:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_23_good   :=     NOT EXTRACT(SKM_23,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП23:исправен
KC_SKM_DI_DRV.State_IKP_23_opened   :=     NOT EXTRACT(SKM_23,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП23:вскрыт
KC_SKM_DI_DRV.State_IKP_23_absent   :=   EXTRACT(SKM_23,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП23:отсутствует
KC_SKM_DI_DRV.State_IKP_23_failure   :=   EXTRACT(SKM_23,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП23:авария
KC_SKM_DI_DRV.State_IKP_23_break_sensor_1   :=   EXTRACT(SKM_23,2) ;  //  Регистр состояния НГК-БИ-ИКП23:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_23_break_sensor_2   :=   EXTRACT(SKM_23,3) ;  //  Регистр состояния НГК-БИ-ИКП23:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_23_break_sensor_3   :=   EXTRACT(SKM_23,4) ;  //  Регистр состояния НГК-БИ-ИКП23:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_24_good   :=     NOT EXTRACT(SKM_24,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП24:исправен
KC_SKM_DI_DRV.State_IKP_24_opened   :=     NOT EXTRACT(SKM_24,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП24:вскрыт
KC_SKM_DI_DRV.State_IKP_24_absent   :=   EXTRACT(SKM_24,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП24:отсутствует
KC_SKM_DI_DRV.State_IKP_24_failure   :=   EXTRACT(SKM_24,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП24:авария
KC_SKM_DI_DRV.State_IKP_24_break_sensor_1   :=   EXTRACT(SKM_24,2) ;  //  Регистр состояния НГК-БИ-ИКП24:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_24_break_sensor_2   :=   EXTRACT(SKM_24,3) ;  //  Регистр состояния НГК-БИ-ИКП24:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_24_break_sensor_3   :=   EXTRACT(SKM_24,4) ;  //  Регистр состояния НГК-БИ-ИКП24:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_25_good   :=     NOT EXTRACT(SKM_25,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП25:исправен
KC_SKM_DI_DRV.State_IKP_25_opened   :=     NOT EXTRACT(SKM_25,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП25:вскрыт
KC_SKM_DI_DRV.State_IKP_25_absent   :=   EXTRACT(SKM_25,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП25:отсутствует
KC_SKM_DI_DRV.State_IKP_25_failure   :=   EXTRACT(SKM_25,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП25:авария
KC_SKM_DI_DRV.State_IKP_25_break_sensor_1   :=   EXTRACT(SKM_25,2) ;  //  Регистр состояния НГК-БИ-ИКП25:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_25_break_sensor_2   :=   EXTRACT(SKM_25,3) ;  //  Регистр состояния НГК-БИ-ИКП25:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_25_break_sensor_3   :=   EXTRACT(SKM_25,4) ;  //  Регистр состояния НГК-БИ-ИКП25:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_26_good   :=     NOT EXTRACT(SKM_26,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП26:исправен
KC_SKM_DI_DRV.State_IKP_26_opened   :=     NOT EXTRACT(SKM_26,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП26:вскрыт
KC_SKM_DI_DRV.State_IKP_26_absent   :=   EXTRACT(SKM_26,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП26:отсутствует
KC_SKM_DI_DRV.State_IKP_26_failure   :=   EXTRACT(SKM_26,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП26:авария
KC_SKM_DI_DRV.State_IKP_26_break_sensor_1   :=   EXTRACT(SKM_26,2) ;  //  Регистр состояния НГК-БИ-ИКП26:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_26_break_sensor_2   :=   EXTRACT(SKM_26,3) ;  //  Регистр состояния НГК-БИ-ИКП26:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_26_break_sensor_3   :=   EXTRACT(SKM_26,4) ;  //  Регистр состояния НГК-БИ-ИКП26:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_27_good   :=     NOT EXTRACT(SKM_27,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП27:исправен
KC_SKM_DI_DRV.State_IKP_27_opened   :=     NOT EXTRACT(SKM_27,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП27:вскрыт
KC_SKM_DI_DRV.State_IKP_27_absent   :=   EXTRACT(SKM_27,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП27:отсутствует
KC_SKM_DI_DRV.State_IKP_27_failure   :=   EXTRACT(SKM_27,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП27:авария
KC_SKM_DI_DRV.State_IKP_27_break_sensor_1   :=   EXTRACT(SKM_27,2) ;  //  Регистр состояния НГК-БИ-ИКП27:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_27_break_sensor_2   :=   EXTRACT(SKM_27,3) ;  //  Регистр состояния НГК-БИ-ИКП27:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_27_break_sensor_3   :=   EXTRACT(SKM_27,4) ;  //  Регистр состояния НГК-БИ-ИКП27:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_28_good   :=     NOT EXTRACT(SKM_28,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП28:исправен
KC_SKM_DI_DRV.State_IKP_28_opened   :=     NOT EXTRACT(SKM_28,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП28:вскрыт
KC_SKM_DI_DRV.State_IKP_28_absent   :=   EXTRACT(SKM_28,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП28:отсутствует
KC_SKM_DI_DRV.State_IKP_28_failure   :=   EXTRACT(SKM_28,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП28:авария
KC_SKM_DI_DRV.State_IKP_28_break_sensor_1   :=   EXTRACT(SKM_28,2) ;  //  Регистр состояния НГК-БИ-ИКП28:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_28_break_sensor_2   :=   EXTRACT(SKM_28,3) ;  //  Регистр состояния НГК-БИ-ИКП28:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_28_break_sensor_3   :=   EXTRACT(SKM_28,4) ;  //  Регистр состояния НГК-БИ-ИКП28:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_29_good   :=     NOT EXTRACT(SKM_29,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП29:исправен
KC_SKM_DI_DRV.State_IKP_29_opened   :=     NOT EXTRACT(SKM_29,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП29:вскрыт
KC_SKM_DI_DRV.State_IKP_29_absent   :=   EXTRACT(SKM_29,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП29:отсутствует
KC_SKM_DI_DRV.State_IKP_29_failure   :=   EXTRACT(SKM_29,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП29:авария
KC_SKM_DI_DRV.State_IKP_29_break_sensor_1   :=   EXTRACT(SKM_29,2) ;  //  Регистр состояния НГК-БИ-ИКП29:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_29_break_sensor_2   :=   EXTRACT(SKM_29,3) ;  //  Регистр состояния НГК-БИ-ИКП29:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_29_break_sensor_3   :=   EXTRACT(SKM_29,4) ;  //  Регистр состояния НГК-БИ-ИКП29:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_30_good   :=     NOT EXTRACT(SKM_30,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП30:исправен
KC_SKM_DI_DRV.State_IKP_30_opened   :=     NOT EXTRACT(SKM_30,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП30:вскрыт
KC_SKM_DI_DRV.State_IKP_30_absent   :=   EXTRACT(SKM_30,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП30:отсутствует
KC_SKM_DI_DRV.State_IKP_30_failure   :=   EXTRACT(SKM_30,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП30:авария
KC_SKM_DI_DRV.State_IKP_30_break_sensor_1   :=   EXTRACT(SKM_30,2) ;  //  Регистр состояния НГК-БИ-ИКП30:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_30_break_sensor_2   :=   EXTRACT(SKM_30,3) ;  //  Регистр состояния НГК-БИ-ИКП30:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_30_break_sensor_3   :=   EXTRACT(SKM_30,4) ;  //  Регистр состояния НГК-БИ-ИКП30:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_31_good   :=     NOT EXTRACT(SKM_31,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП31:исправен
KC_SKM_DI_DRV.State_IKP_31_opened   :=     NOT EXTRACT(SKM_31,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП31:вскрыт
KC_SKM_DI_DRV.State_IKP_31_absent   :=   EXTRACT(SKM_31,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП31:отсутствует
KC_SKM_DI_DRV.State_IKP_31_failure   :=   EXTRACT(SKM_31,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП31:авария
KC_SKM_DI_DRV.State_IKP_31_break_sensor_1   :=   EXTRACT(SKM_31,2) ;  //  Регистр состояния НГК-БИ-ИКП31:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_31_break_sensor_2   :=   EXTRACT(SKM_31,3) ;  //  Регистр состояния НГК-БИ-ИКП31:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_31_break_sensor_3   :=   EXTRACT(SKM_31,4) ;  //  Регистр состояния НГК-БИ-ИКП31:датчик 3 обрыв
KC_SKM_DI_DRV.State_IKP_32_good   :=     NOT EXTRACT(SKM_32,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП32:исправен
KC_SKM_DI_DRV.State_IKP_32_opened   :=     NOT EXTRACT(SKM_32,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП32:вскрыт
KC_SKM_DI_DRV.State_IKP_32_absent   :=   EXTRACT(SKM_32,0) AND   NOT EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП32:отсутствует
KC_SKM_DI_DRV.State_IKP_32_failure   :=   EXTRACT(SKM_32,0) AND EXTRACT(SKM_1,1);  //  Регистр состояния НГК-БИ-ИКП32:авария
KC_SKM_DI_DRV.State_IKP_32_break_sensor_1   :=   EXTRACT(SKM_32,2) ;  //  Регистр состояния НГК-БИ-ИКП32:датчик 1 обрыв
KC_SKM_DI_DRV.State_IKP_32_break_sensor_2   :=   EXTRACT(SKM_32,3) ;  //  Регистр состояния НГК-БИ-ИКП32:датчик 2 обрыв
KC_SKM_DI_DRV.State_IKP_32_break_sensor_3   :=   EXTRACT(SKM_32,4) ;  //  Регистр состояния НГК-БИ-ИКП32:датчик 3 обрыв





 



 

]]></ST>
                </FunctionBlock>
            </Folder>
            <Folder Name="УТУО" Comment="" Data="" UUID="RIGPASBOHTFEZEKOOU5CRJ34GI">
                <Folder Name="AI" Comment="" Data="" UUID="SV2JTYVIAOOUTHOOHZPA6PBESQ">
                    <Function UUID="ADMYAKUNJJXJ3TXCK66Q43NX7M" Name="KC_UTUO_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
KC_UTUO_mb_AI_ToHMI.r_Press.manual := tmpPermit; //P - Давление;
KC_UTUO_mb_AI_ToHMI.r_TM.manual := tmpPermit; //t - Температура;
KC_UTUO_mb_AI_ToHMI.Vco_EK.manual := tmpPermit; //Vco - Общий рабочий обьем;
KC_UTUO_mb_AI_ToHMI.Vpo_EK.manual := tmpPermit; //Vpo - Общий стандартный обьем;
KC_UTUO_mb_AI_ToHMI.N2_EK.manual := tmpPermit; //N2 - Содержание азота;
KC_UTUO_mb_AI_ToHMI.CO2_EK.manual := tmpPermit; //CO2 - Содержание СО2;
KC_UTUO_mb_AI_ToHMI.Ho_EK.manual := tmpPermit; //Ho.C - Теплота сгораниЯ;
KC_UTUO_mb_AI_ToHMI.dv_EK.manual := tmpPermit; //dv - ОтносительнаЯ плотность газа;
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="BROOSKMWICVEWJ6USW4AW3EA34" Name="KC_UTUO_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//P - Давление
mb_AI_init(KC_UTUO_mb_AI_Settings.r_Press,0.0,5.0,-0.15,5.15,-0.3,5.3,1,0.0,0.0,0.0,0);
//t - Температура
mb_AI_init(KC_UTUO_mb_AI_Settings.r_TM,-30.0,70.0,-33.0,73.0,-36.0,76.0,1,0.0,0.0,0.0,1);
//Vco - Общий рабочий обьем
mb_AI_init(KC_UTUO_mb_AI_Settings.Vco_EK,0.0,99999.0,-2999.97,102998.97,-5999.94,105998.94,1,0.0,0.0,0.0,2);
//Vpo - Общий стандартный обьем
mb_AI_init(KC_UTUO_mb_AI_Settings.Vpo_EK,0.0,99999.0,-2999.97,102998.97,-5999.94,105998.94,1,0.0,0.0,0.0,3);
//N2 - Содержание азота
mb_AI_init(KC_UTUO_mb_AI_Settings.N2_EK,0.0,100.0,-3.0,103.0,-6.0,106.0,1,0.0,0.0,0.0,4);
//CO2 - Содержание СО2
mb_AI_init(KC_UTUO_mb_AI_Settings.CO2_EK,0.0,100.0,-3.0,103.0,-6.0,106.0,1,0.0,0.0,0.0,5);
//Ho.C - Теплота сгораниЯ
mb_AI_init(KC_UTUO_mb_AI_Settings.Ho_EK,0.0,15.0,-0.45,15.45,-0.9,15.9,1,0.0,0.0,0.0,6);
//dv - ОтносительнаЯ плотность газа
mb_AI_init(KC_UTUO_mb_AI_Settings.dv_EK,0.0,1.0,-0.03,1.03,-0.06,1.06,1,0.0,0.0,0.0,7);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//P - Давление
mb_AI_Processing(KC_UTUO_mb_AI_DRV.r_Press,KC_UTUO_mb_AI_Settings.r_Press,KC_UTUO_mb_AI_FromHMI.r_Press,KC_UTUO_mb_AI_ToHMI.r_Press);
//t - Температура
mb_AI_Processing(KC_UTUO_mb_AI_DRV.r_TM,KC_UTUO_mb_AI_Settings.r_TM,KC_UTUO_mb_AI_FromHMI.r_TM,KC_UTUO_mb_AI_ToHMI.r_TM);
//Vco - Общий рабочий обьем
mb_AI_Processing(KC_UTUO_mb_AI_DRV.Vco_EK,KC_UTUO_mb_AI_Settings.Vco_EK,KC_UTUO_mb_AI_FromHMI.Vco_EK,KC_UTUO_mb_AI_ToHMI.Vco_EK);
//Vpo - Общий стандартный обьем
mb_AI_Processing(KC_UTUO_mb_AI_DRV.Vpo_EK,KC_UTUO_mb_AI_Settings.Vpo_EK,KC_UTUO_mb_AI_FromHMI.Vpo_EK,KC_UTUO_mb_AI_ToHMI.Vpo_EK);
//N2 - Содержание азота
mb_AI_Processing(KC_UTUO_mb_AI_DRV.N2_EK,KC_UTUO_mb_AI_Settings.N2_EK,KC_UTUO_mb_AI_FromHMI.N2_EK,KC_UTUO_mb_AI_ToHMI.N2_EK);
//CO2 - Содержание СО2
mb_AI_Processing(KC_UTUO_mb_AI_DRV.CO2_EK,KC_UTUO_mb_AI_Settings.CO2_EK,KC_UTUO_mb_AI_FromHMI.CO2_EK,KC_UTUO_mb_AI_ToHMI.CO2_EK);
//Ho.C - Теплота сгораниЯ
mb_AI_Processing(KC_UTUO_mb_AI_DRV.Ho_EK,KC_UTUO_mb_AI_Settings.Ho_EK,KC_UTUO_mb_AI_FromHMI.Ho_EK,KC_UTUO_mb_AI_ToHMI.Ho_EK);
//dv - ОтносительнаЯ плотность газа
mb_AI_Processing(KC_UTUO_mb_AI_DRV.dv_EK,KC_UTUO_mb_AI_Settings.dv_EK,KC_UTUO_mb_AI_FromHMI.dv_EK,KC_UTUO_mb_AI_ToHMI.dv_EK);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                </Folder>
            </Folder>
            <Function UUID="2F3UB23OXIHELI6M3KYMPN46DE" Name="mb_AI_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="L27BSM7XEZH7PBAFCWXQPDPAHM" Name="in" Type="REAL" Usage="input" />
                    <Variable UUID="3RRZ672T65H27KGUANWIHJUTAQ" Name="set" Type="T_mb_AI_Settings" TypeUUID="ESHVMMDQRNWUVGD5OOWOXN2N44" Usage="input" />
                    <Variable UUID="6GENIMNWPJBGLDUSADU5POKSIU" Name="fromHMI" Type="T_AI_FromHMI" TypeUUID="VZ3H6GEVT3CUTI65HAA5AALRAY" Usage="inout" />
                    <Variable UUID="2ISD2SFA6RHOVBLDUJA43YIYKA" Name="toHMI" Type="T_AI_ToHMI" TypeUUID="J74RQIZG5I6EZDCM32A6SZRKIM" Usage="inout" />
                    <Variable UUID="4FOVGDDSVNDJVMJ33BNQD4UHBQ" Name="criticalSettingErr" Type="BOOL" Usage="internal" />
                    <Variable UUID="SIMSIEIFINHRJIC55L2DCXT3CM" Name="limSettingErr" Type="BOOL" Usage="internal" />
                    <Variable UUID="BGOHZRGBKVHJFGQBERMGBC6VXU" Name="brkSettingErr" Type="BOOL" Usage="internal" />
                    <Variable UUID="26HV5IVYA7UE5DV5U7Q5EC2O2Q" Name="tmp" Type="REAL" Usage="internal" />
                </Variables>
                <ST><![CDATA[//0- float ABCD, 1- float CDAB, 2- float BADC, 3- float DCBA, 4 - INT ABxN,  5 - INT BAxN,   6 - INT ABxR,   7 - INT BAxR
//                                                            8 - UINT ABxN, 9 - UINT BAxN, 10 - UINT ABxR, 11 - UINT BAxR

//---------------------- Поиск ошибок задания настроек – несоответствие допустимым значениям (BOOL)-----------------------------------------
criticalSettingErr := (set.format = 6 or set.format = 7 or set.format = 10 or set.format = 11) and (set.min >= set.max or set.set2 = set.set1);
limSettingErr := set.loLim >= set.hiLim or set.loLim >= set.max or set.hiLim <= set.min;
brkSettingErr := set.hiBrk <= set.hiLim or set.loBrk >= set.loLim;
toHMI.settingErr := criticalSettingErr or limSettingErr or brkSettingErr;
toHMI.fault_common := toHMI.settingErr or toHMI.break or toHMI.up_scale or toHMI.down_scale;//обобщённая неисправность. Образуется по «ИЛИ» от break,up_scale,down_scale,ROC,settingErr (BOOL)
toHMI.criticalFault := criticalSettingErr or toHMI.break;//Критическая ошибка, свидетельствующая о полной неисправности канала
if criticalSettingErr then
	return;
end_if;
//---------------------------------------------------------------------------------------------------------------------------------------------
//----------------- Пересчёт парамера из кодов АЦП в единицы измерения -----------------------------------------------------------------------
if    set.format = 4 or set.format = 5 then
	if set.set1 = 0.0 then
		set.set1 := 1.0;
	end_if;
	toHMI.measure := in * set.set1;
elsif set.format = 6 or set.format = 7 then
	toHMI.measure := (in - set.set1)/(set.set2 - set.set1)*(set.max - set.min) + set.min;
else
	toHMI.measure := in;
end_if;
//---------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------- Определение обрыва и зашкалов -----------------------------------------------------------------------
if not brkSettingErr then
	toHMI.break      := toHMI.break      and not fromHMI.BTNworkOn or toHMI.measure > set.hiBrk or toHMI.measure < set.loBrk;	//обрыв канала (BOOL)
end_if;
if not limSettingErr then
	toHMI.up_scale   := toHMI.up_scale   and not fromHMI.BTNworkOn or toHMI.measure > set.hiLim;							//выход за верхний зашкал (BOOL)
	toHMI.down_scale := toHMI.down_scale and not fromHMI.BTNworkOn or toHMI.measure < set.loLim;							//выход за нижний зашкал (BOOL)
end_if;
//------------------------------------------------------------------------------------------------------------------------------------------------
//------------------- Обработка ДУ ----------------------------------------------------------------------------------------------------------
tmp := toHMI.measure;
toHMI.manual := (fromHMI.BTNmanualOn or toHMI.manual) and not fromHMI.BTNworkOn;//канал в дист.упр. (BOOL)
if toHMI.manual then
	toHMI.PV := fromHMI.manualTarget;//значение для САУ. Рассчитывается из  measure, Manual_Target с учётом неисправностей и фильтрации (REAL)
else
	toHMI.PV := toHMI.measure;
	fromHMI.manualTarget := toHMI.PV;
end_if;
if set.tau > 0.0 then
	toHMI.PV := toHMI.PV + (tmp - toHMI.PV)/set.tau;
else
	toHMI.PV := tmp;
end_if;
//-------------- Обнуление кнопок -----------
fromHMI.BTNmanualOn := false;
fromHMI.BTNworkOn := false;]]></ST>
            </Function>
            <Function UUID="NVF5WA36MS3EDEJJCGBUSAEYDY" Name="mb_AI_init" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="3PUM5EGSZZGW5B46GT7GJGJYHY" Name="setStruct" Type="T_mb_AI_Settings" TypeUUID="ESHVMMDQRNWUVGD5OOWOXN2N44" Usage="output" />
                    <Variable UUID="A4X47N4MTNEGBMHG5JCV54OYD4" Name="min" Type="REAL" Usage="input" />
                    <Variable UUID="J3PMJZQQPFCKTLXZKHCSBVW2FY" Name="max" Type="REAL" Usage="input" />
                    <Variable UUID="SNMC52OSVNCEJC2WKNQ55IXRDU" Name="loLim" Type="REAL" Usage="input" />
                    <Variable UUID="C5FFNJBSORADZKDONAJYIOYQMM" Name="hiLim" Type="REAL" Usage="input" />
                    <Variable UUID="BLJ7QPD3B5GIFOK5INHVLE4N4M" Name="loBrk" Type="REAL" Usage="input" />
                    <Variable UUID="BRAZ2SPNOBCCNMKASNN375STCQ" Name="hiBrk" Type="REAL" Usage="input" />
                    <Variable UUID="UCAGZSJ77NAYTFYRM4N5QV62A4" Name="format" Type="INT" Usage="input" />
                    <Variable UUID="PPFZBCEPQNDGDPXS4GFZ5DG2R4" Name="set1" Type="REAL" Usage="input" />
                    <Variable UUID="YGKONKKT2ZACFPHVF5HQIODJOQ" Name="set2" Type="REAL" Usage="input" />
                    <Variable UUID="FIPADVDHNWOEBDOPFXPJ6QM5UM" Name="tau" Type="REAL" Usage="input" />
                    <Variable UUID="O2PSTUZUB5EIRAZBONFYBOPYXU" Name="id" Type="INT" Usage="input" />
                </Variables>
                <ST><![CDATA[setStruct.min:= min;//минимум шкалы канала, ед.изм. Не может быть >= max
setStruct.max:= max;//максимум шкалы канала, ед.изм. Не может быть <= min
setStruct.loLim:= loLim;//уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
setStruct.hiLim:= hiLim;//уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
setStruct.loBrk:= loBrk;//уровень зашкала вниз, ед.изм. Не может быть >= loLim
setStruct.hiBrk:= hiBrk;//уровень обрыва вверх, ед.изм. Не может быть <= hiLim
setStruct.format:= format;//Формат данных
setStruct.set1:= set1;//Настройка 1
setStruct.set2:= set2;//Настройка 2
setStruct.tau:= tau;//Настройка лаг-фильтра
setStruct.id:= id;//номер по порядку]]></ST>
            </Function>
            <Function UUID="C355Y7K6M5IU3JESUKH26M6TTA" Name="mb_AO_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="YWZFMDKLMVYUNFNPE5IXHVSIGY" Name="alg" Type="REAL" Usage="input" />
                    <Variable UUID="CFXXFVD5OJA45LRO7CLY355CNE" Name="set" Type="T_mb_AO_Settings" TypeUUID="7ICVQVNQUR4UDG5AFGOT7BUCRA" Usage="input" />
                    <Variable UUID="5R5WL3HGLRGMXN3ZVPA3FETS6Q" Name="fromHMI" Type="T_AO_FromHMI" TypeUUID="7GRLWKHH6VJU5KGLKDIOI5QPQI" Usage="inout" />
                    <Variable UUID="EDA4FRWG6FGWJPKIBGBT6SNR2Q" Name="toHMI" Type="T_AO_ToHMI" TypeUUID="KOTCLUQLO7JERF5MDM2GMF62MI" Usage="inout" />
                    <Variable UUID="E2P6NR4I7IXEBKC63CP7BOLLQI" Name="outReal" Type="REAL" Usage="output" />
                    <Variable UUID="VBNLWELECL2ELOHFKCMBCNOXDQ" Name="outInt" Type="INT" Usage="output" />
                    <Variable UUID="BH6EHBZAY7HUJMOBUFZLHOB7YQ" Name="tmp" Type="REAL" Usage="internal" />
                </Variables>
                <ST><![CDATA[//0- float ABCD, 1- float CDAB, 2- float BADC, 3- float DCBA, 4 - INT ABxN,  5 - INT BAxN,   6 - INT ABxR,   7 - INT BAxR
//                                                            8 - UINT ABxN, 9 - UINT BAxN, 10 - UINT ABxR, 11 - UINT BAxR
//------------------------------------------------------------------------------------------------------------------------------
toHMI.forsEnable := (toHMI.forsEnable or fromHMI.BTNforceOn) and toHMI.forsPermit and not fromHMI.BTNworkOn;
if toHMI.forsEnable then
	tmp := fromHMI.manualTarget;	
else
	tmp := alg;
	fromHMI.manualTarget := alg;
end_if;
//----------------- Пересчёт парамера из единиц измерения в коды modbus -----------------------------------------------------------------------
if set.format = 4 or set.format = 5 or set.format = 8 or set.format = 9 then
	if set.set1 = 0.0 then
		set.set1 := 1.0;
	end_if;
	outInt := REAL_TO_INT(tmp / set.set1);
elsif set.format = 6 or set.format = 7 or set.format = 10 or set.format = 11 then
	if set.max <> set.min then
		outInt := REAL_TO_INT((tmp - set.min)/(set.max - set.min)*(set.set2 - set.set1) + set.set1);
	else
		outInt := 0;
	end_if;
else
	outReal := tmp;
end_if;
//-------------- Обнуление кнопок -----------
fromHMI.BTNforceOn := false;
fromHMI.BTNworkOn := false;]]></ST>
            </Function>
            <Function UUID="3RCK6I23LYKEDH2INOAP7YEI7A" Name="mb_AO_init" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="3PUM5EGSZZGW5B46GT7GJGJYHY" Name="setStruct" Type="T_mb_AO_Settings" TypeUUID="7ICVQVNQUR4UDG5AFGOT7BUCRA" Usage="output" />
                    <Variable UUID="A4X47N4MTNEGBMHG5JCV54OYD4" Name="min" Type="REAL" Usage="input" />
                    <Variable UUID="J3PMJZQQPFCKTLXZKHCSBVW2FY" Name="max" Type="REAL" Usage="input" />
                    <Variable UUID="Z6XQFDI42ZUEHDDY2ZBDTQSSYM" Name="format" Type="INT" Usage="input" />
                    <Variable UUID="SNMC52OSVNCEJC2WKNQ55IXRDU" Name="set1" Type="REAL" Usage="input" />
                    <Variable UUID="C5FFNJBSORADZKDONAJYIOYQMM" Name="set2" Type="REAL" Usage="input" />
                    <Variable UUID="UCAGZSJ77NAYTFYRM4N5QV62A4" Name="id" Type="INT" Usage="input" />
                </Variables>
                <ST><![CDATA[setStruct.min:= min;//минимум шкалы канала, ед.изм. Не может быть >= max
setStruct.max:= max;//максимум шкалы канала, ед.изм. Не может быть <= min
setStruct.format:= format;//Формат данных
setStruct.set1:= set1;//Настройка 1.
setStruct.set2:= set2;//Настройка 2
setStruct.id:= id;//номер по порядку	]]></ST>
            </Function>
            <Function UUID="2ULQSEEY2MWERNE72WRM6UMD4Q" Name="mb_DI_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="L27BSM7XEZH7PBAFCWXQPDPAHM" Name="in" Type="BOOL" Usage="input" />
                    <Variable UUID="6GENIMNWPJBGLDUSADU5POKSIU" Name="btn" Type="T_DI_FromHMI" TypeUUID="CB63GVNINFXE5NDGOS62CUMGSY" Usage="inout" />
                    <Variable UUID="2ISD2SFA6RHOVBLDUJA43YIYKA" Name="hmi" Type="T_DI_ToHMI" TypeUUID="GHOQ5H5MCDOEHDF2HTYC2D4HJI" Usage="inout" />
                    <Variable UUID="EAYMNT5AXKIEPERYPL4MAHCRDA" Name="out" Type="BOOL" Usage="inout" />
                </Variables>
                <ST><![CDATA[//--------------------------------------------------------------------------------------------
hmi.manual := (btn.BTNmanualOn or hmi.manual) and not btn.BTNworkOn;//канал в дист.упр. (BOOL)
//------------------- Обработка ДУ -----------------------------------------------------------
out := hmi.manual and btn.manualTarget or not hmi.manual and in;
btn.manualTarget := out;
//----------------- Обнуление кнопок ---------------------------------------------------------
btn.BTNmanualOn := false;
btn.BTNworkOn := false;]]></ST>
            </Function>
            <Function UUID="KC3UFSWRQQPE5CS4AE6ZFPYEQY" Name="mb_DO_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="KQE6TXSBPSYUZBETKKJ3RJNA2U" Name="algCom" Type="BOOL" Usage="input" />
                    <Variable UUID="5R5WL3HGLRGMXN3ZVPA3FETS6Q" Name="hmi" Type="T_DO_FromHMI" TypeUUID="ICYCYA5WR5FTZMTITNXXGA6V4U" Usage="inout" />
                    <Variable UUID="EDA4FRWG6FGWJPKIBGBT6SNR2Q" Name="plc" Type="T_DO_ToHMI" TypeUUID="JPIXI5FFWBGSRAAFIJ2MBV77UE" Usage="inout" />
                    <Variable UUID="7WXGR7INBZ7UBK5X2H62BJBGNE" Name="out" Type="BOOL" Usage="inout" />
                </Variables>
                <ST><![CDATA[plc.forsEnable := (plc.forsEnable or hmi.BTNforceOn) and plc.forsPermit and not hmi.BTNworkOn;
out := algCom and not plc.forsEnable or hmi.manualTarget and plc.forsEnable;
hmi.manualTarget := out;
//-------------- Обнуление кнопок -----------
hmi.BTNforceOn := false;
hmi.BTNworkOn := false;]]></ST>
            </Function>
        </Folder>
        <Folder Name="Режимы" Comment="" Data="" UUID="GABXZK3G5YWETAO5PFFI7XJ2XU">
            <Function UUID="4Q6M2NOJJZVU3L6AW4OON5QEFE" Name="Graph_Processing" ResultTypeUUID="J2GLKR5SZATEPPS6SYYJ4FXRO4">
                <Variables>
                    <Variable UUID="JAJ25GPVEBHEDJFPKUJ6NFJW5A" Name="graph" Type="T_Graph" TypeUUID="KHQWP3RHOTWEFJWBPCB6JIVNWI" Usage="inout" />
                    <Variable UUID="YFBXCL5MXYLUPBW4MBKKSVU7OQ" Name="i" Type="INT" Usage="internal" />
                    <Variable UUID="NMDCZXMXGX4UFDOHJS75GMLLJ4" Name="j" Type="INT" Usage="internal" />
                </Variables>
                <ST><![CDATA[(*for i := 0 to 32 do
	if graph.state = i then
		for j := 0 to 32 do
			if EXTRACT(graph.cond[i],j) then graph.state := j; end_if;
		end_for;
	end_if;
end_for;
*)

//=  31
for i := 0 to 31 do
//=	if graph.state = i then
		for j := 0 to 31 do
			if EXTRACT(graph.cond[i],j) then graph.state := j; (*exit;*) end_if;
		end_for;
//=	end_if;
end_for;


//= обнуляем условия переходов
for i:= 0 to 31 do
	graph.cond[i] := DWORD#0;
end_for;

Graph_Processing := graph.state; //возвращаем номер режима
]]></ST>
            </Function>
            <Function UUID="XOMDT3IVRFDTLE3KIXYOQ6CO2I" Name="Mode_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="2Y7GYZSPQFFUJOQTMGUQGGYWAI" Name="Fire" Type="INT" Usage="internal" />
                    <Variable UUID="4GGEESI4WEBELMXGJPCY6EMSXI" Name="AOss" Type="INT" Usage="internal" />
                    <Variable UUID="ZKDPWCDD5BIEXF3J7L6V5MXIZY" Name="AObs" Type="INT" Usage="internal" />
                    <Variable UUID="NB5XWH7SF4PULE6RHMMEANS5QA" Name="Repair" Type="INT" Usage="internal" />
                    <Variable UUID="VTCJQYSO4UWULJIH6Q2BNRJCR4" Name="Reserve" Type="INT" Usage="internal" />
                    <Variable UUID="EJVAW4JJAJ3E5E3CXXT3KNQF74" Name="Inject" Type="INT" Usage="internal" />
                    <Variable UUID="4WIAUYMSBXBU5C62SMFRK24A4I" Name="Extract" Type="INT" Usage="internal" />
                    <Variable UUID="UINTHDSAKECUTAJQSIMT2LDPRA" Name="Fault" Type="INT" Usage="internal" />
                </Variables>
                <ST><![CDATA[//КС
Fault  	:= 0;//Нет режима
//
Fire  	:= 1;//Пожар
AOss  	:= 2;//АОсс
AObs  	:= 3;//АОбс
Repair	:= 4;//Ремонт
Reserve	:= 5;//Резерв
Inject	:= 6;//Закачка (Injection)
Extract	:= 7;//Отбор (Extraction)

(*
//--------------------|Откуда|| Куда || Условия перехода -----------------------
//=== Пожар   ========|======||======||=======================
PUTBIT(mdeKC.graph.cond[Fire], Repair, 	drmKC.Fire.complete and KC_BTN.Deblock); 		// Из Пожара в Ремонт
//=== АОсс    ========|======||======||=======================
PUTBIT(mdeKC.graph.cond[AOss],  Fire, 		algKC.Fire);			// Из АОсс в Пожар
PUTBIT(mdeKC.graph.cond[AOss], Repair, 	drmKC.AOss.complete and KC_BTN.Deblock);		// Из АОсс в Ремонт
//=== АОбс    ========|======||======||=======================
PUTBIT(mdeKC.graph.cond[AObs],  Fire, 		algKC.Fire);			// Из АОбс в Пожар
PUTBIT(mdeKC.graph.cond[AObs],  AOss, 		algKC.AOss);			// Из АОбс в АОсс
PUTBIT(mdeKC.graph.cond[AObs], Repair, 	drmKC.AObs.complete and KC_BTN.Deblock);		// Из АОбс в Ремонт
//=== Ремонт  ========|======||======||=======================
PUTBIT(mdeKC.graph.cond[Repair],Fire, 	algKC.Fire);				// в Пожар
PUTBIT(mdeKC.graph.cond[Repair],AOss, 	algKC.AOss and not algKC.not_g_inLoop);	// в АОсс
PUTBIT(mdeKC.graph.cond[Repair],AObs, 	algKC.AObs and algKC.g_inLoop);	// в АОбс
PUTBIT(mdeKC.graph.cond[Repair],Reserve,algKC.condReserve or KC_BTN.Reserve);				// в Резерв
//=== Резерв  ========|======||======||=======================
PUTBIT(mdeKC.graph.cond[Reserve],Fire, 	algKC.Fire);				// в Пожар
PUTBIT(mdeKC.graph.cond[Reserve],AOss, 	algKC.AOss and not algKC.not_g_inLoop);	// в АОсс
PUTBIT(mdeKC.graph.cond[Reserve],Repair,not algKC.condReserve or KC_BTN.Repair);		// в Pемонт
PUTBIT(mdeKC.graph.cond[Reserve],Inject,algKC.Inject);				// в Закачку
PUTBIT(mdeKC.graph.cond[Reserve],Extract,algKC.Extract);				// в Отбор
//=== Закачка ========|======||======||=======================
PUTBIT(mdeKC.graph.cond[Inject],Fire, 	algKC.Fire);				// в Пожар
PUTBIT(mdeKC.graph.cond[Inject],AOss, 	algKC.AOss and not algKC.not_g_inLoop);	// в АОсс
PUTBIT(mdeKC.graph.cond[Inject],AObs, 	algKC.AObs and algKC.g_inLoop);	// в АОбс
PUTBIT(mdeKC.graph.cond[Inject],Repair,not algKC.condReserve and KC_BTN.Repair);		// в Pемонт
PUTBIT(mdeKC.graph.cond[Inject],Reserve,algKC.condReserve and KC_BTN.Reserve);		// в Pезерв
//=== Отбор   ========|======||======||=======================
PUTBIT(mdeKC.graph.cond[Extract],Fire, 	algKC.Fire);				// в Пожар
PUTBIT(mdeKC.graph.cond[Extract],AOss, 	algKC.AOss and not algKC.not_g_inLoop);	// в АОсс
PUTBIT(mdeKC.graph.cond[Extract],AObs, 	algKC.AObs and algKC.g_inLoop);	// в АОбс
PUTBIT(mdeKC.graph.cond[Extract],Repair,not algKC.condReserve and KC_BTN.Repair);		// в Pемонт
PUTBIT(mdeKC.graph.cond[Extract],Reserve,algKC.condReserve and KC_BTN.Reserve);		// в Pезерв
*)

//===========================================================================================================================================================================================

//=== Пожар   ========|======||======||=======================
if drmKC.Fire.complete and KC_BTN.Deblock 	then mdeKC.graph.cond[Fire] := PUTBIT(mdeKC.graph.cond[Fire], Repair, 		true); end_if;		// Из Пожара в Ремонт
//=== АОсс    ========|======||======||=======================
if algKC.Fire 								then mdeKC.graph.cond[AOss] := PUTBIT(mdeKC.graph.cond[AOss],  Fire, 		true); end_if;		// Из АОсс в Пожар
if drmKC.AOss.complete and KC_BTN.Deblock 	then mdeKC.graph.cond[AOss] := PUTBIT(mdeKC.graph.cond[AOss], Repair, 		true); end_if;		// Из АОсс в Ремонт
//=== АОбс    ========|======||======||=======================
if algKC.Fire 								then mdeKC.graph.cond[AObs] := PUTBIT(mdeKC.graph.cond[AObs],  Fire, 		true); end_if;		// Из АОбс в Пожар
if algKC.AOss 								then mdeKC.graph.cond[AObs] := PUTBIT(mdeKC.graph.cond[AObs],  AOss, 		true); end_if;		// Из АОбс в АОсс
if drmKC.AObs.complete and KC_BTN.Deblock 	then mdeKC.graph.cond[AObs] := PUTBIT(mdeKC.graph.cond[AObs], Repair, 		true); end_if;		// Из АОбс в Ремонт
//=== Ремонт  ========|======||======||=======================
if algKC.Fire 								then mdeKC.graph.cond[Repair] := PUTBIT(mdeKC.graph.cond[Repair],Fire, 		true); end_if;		// в Пожар
if algKC.AOss (*and not algKC.not_g_inLoop*) 	then mdeKC.graph.cond[Repair] := PUTBIT(mdeKC.graph.cond[Repair],AOss, 		true); end_if;		// в АОсс
if algKC.AObs (*and algKC.g_inLoop*) 			then mdeKC.graph.cond[Repair] := PUTBIT(mdeKC.graph.cond[Repair],AObs, 		true); end_if;		// в АОбс
if algKC.condReserve and KC_BTN.Reserve 		then mdeKC.graph.cond[Repair] := PUTBIT(mdeKC.graph.cond[Repair],Reserve,	true); end_if;		// в Резерв
//=== Резерв  ========|======||======||=======================
if algKC.Fire 								then mdeKC.graph.cond[Reserve] := PUTBIT(mdeKC.graph.cond[Reserve],Fire, 	true); end_if;		// в Пожар
if algKC.AOss (*and not algKC.not_g_inLoop*) 	then mdeKC.graph.cond[Reserve] := PUTBIT(mdeKC.graph.cond[Reserve],AOss, 	true); end_if;		// в АОсс
if algKC.AObs (*and algKC.g_inLoop*) 			then mdeKC.graph.cond[Reserve] := PUTBIT(mdeKC.graph.cond[Reserve],AObs, 	true); end_if;		// в АОбс
if not algKC.condReserve or KC_BTN.Repair 	then mdeKC.graph.cond[Reserve] := PUTBIT(mdeKC.graph.cond[Reserve],Repair,	true); end_if;		// в Pемонт
if algKC.Inject 							then mdeKC.graph.cond[Reserve] := PUTBIT(mdeKC.graph.cond[Reserve],Inject,	true); end_if;		// в Закачку
if algKC.Extract 							then mdeKC.graph.cond[Reserve] := PUTBIT(mdeKC.graph.cond[Reserve],Extract,	true); end_if;		// в Отбор
//=== Закачка ========|======||======||=======================
if algKC.Fire 								then mdeKC.graph.cond[Inject] := PUTBIT(mdeKC.graph.cond[Inject],Fire, 		true); end_if;		// в Пожар
if algKC.AOss (*and not algKC.not_g_inLoop*) 	then mdeKC.graph.cond[Inject] := PUTBIT(mdeKC.graph.cond[Inject],AOss, 		true); end_if;		// в АОсс
if algKC.AObs (*and algKC.g_inLoop*) 			then mdeKC.graph.cond[Inject] := PUTBIT(mdeKC.graph.cond[Inject],AObs, 		true); end_if;		// в АОбс
if not algKC.condReserve and KC_BTN.Repair 	then mdeKC.graph.cond[Inject] := PUTBIT(mdeKC.graph.cond[Inject],Repair,	true); end_if;		// в Pемонт
if algKC.condReserve and KC_BTN.Reserve 	then mdeKC.graph.cond[Inject] := PUTBIT(mdeKC.graph.cond[Inject],Reserve,	true); end_if;		// в Pезерв
//=== Отбор   ========|======||======||=======================
if algKC.Fire 								then mdeKC.graph.cond[Extract] := PUTBIT(mdeKC.graph.cond[Extract],Fire, 	true); end_if;		// в Пожар
if algKC.AOss (*and not algKC.not_g_inLoop*) 	then mdeKC.graph.cond[Extract] := PUTBIT(mdeKC.graph.cond[Extract],AOss, 	true); end_if;		// в АОсс
if algKC.AObs (*and algKC.g_inLoop*) 			then mdeKC.graph.cond[Extract] := PUTBIT(mdeKC.graph.cond[Extract],AObs, 	true); end_if;		// в АОбс
if not algKC.condReserve and KC_BTN.Repair 	then mdeKC.graph.cond[Extract] := PUTBIT(mdeKC.graph.cond[Extract],Repair,	true); end_if;		// в Pемонт
if algKC.condReserve and KC_BTN.Reserve 	then mdeKC.graph.cond[Extract] := PUTBIT(mdeKC.graph.cond[Extract],Reserve,	true); end_if;		// в Pезерв

//===========================================================================================================================================================================================
//============================================================================
KC_Mode.Num := Graph_Processing(mdeKC.graph);
//============================================================================
//===========================================================================================================================================================================================

KC_Mode.FireKC 	:=  mdeKC.graph.state = Fire;	//Пожар
KC_Mode.AOssKC 	:=  mdeKC.graph.state = AOss;	//АОсс
KC_Mode.AObsKC 	:=  mdeKC.graph.state = AObs;	//АОбс

KC_Mode.RepairKC 	:=  mdeKC.graph.state = Repair;	//Ремонт
KC_Mode.ReserveKC	:=  mdeKC.graph.state = Reserve;//Резерв

KC_Mode.InjectKC	:=  mdeKC.graph.state = Inject;//Закачка
KC_Mode.ExtractKC	:=  mdeKC.graph.state = Extract;//Отбор


KC_Mode.EOKC := false;//Экстренный останов (false - временно)


KC_Mode.FaultKC := not (KC_Mode.FireKC or KC_Mode.AOssKC or KC_Mode.AObsKC or KC_Mode.RepairKC or KC_Mode.ReserveKC or KC_Mode.InjectKC or KC_Mode.ExtractKC or KC_Mode.EOKC);// Нет режима
]]></ST>
            </Function>
        </Folder>
        <FunctionBlock UUID="6FYJFI56GMYUTBC5ILWW7D63N4" Name="FB_Imit">
            <Variables>
                <Variable UUID="54WEIN3B6QWEPCCDUJ3TRWWWDA" Name="tmr_init" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
            </Variables>
            <ST><![CDATA[tmr_init(IN:= ImitOn, PT:= T#1s);

if not tmr_init.Q then 
(*	KC_DI.Kr54_ON := true;
	KC_DI.Kr54b_OF := true;
	KC_DI.Kr51_2_OF := TRUE;
	KC_DI.Kr52_2_OF := TRUE;
	KC_DI.Kr51_OF := TRUE;
	KC_DI.Kr52_OF := True;
	KC_DI.Kr53_ON := TRUE;
	KC_DI.Kr53b_ON := TRUE;
	KC_DI.Kr51_ON_KCU 		:= TRUE;  
	KC_DI.Kr52_ON_KCU 		:= TRUE;  
	KC_DI.Kr53_ON_KCU 		:= TRUE; 
	KC_DI.Kr54_ON_KCU		:= TRUE; 
	KC_DI.Kr53b_ON_KCU		:= TRUE; 
	KC_DI.Kr54b_ON_KCU		:= TRUE; 
	KC_DI.Kr51_2_ON_KCU 	:= TRUE;  
	KC_DI.Kr52_2_ON_KCU 	:= TRUE;  
	KC_DI.Kr51_OF_KCU 		:= TRUE;  
	KC_DI.Kr52_OF_KCU 		:= TRUE;  
	KC_DI.Kr53_OF_KCU 		:= TRUE; 
	KC_DI.Kr54_OF_KCU		:= TRUE; 
	KC_DI.Kr53b_OF_KCU		:= TRUE; 
	KC_DI.Kr54b_OF_KCU		:= TRUE; 
	KC_DI.Kr51_2_OF_KCU 	:= TRUE;  
	KC_DI.Kr52_2_OF_KCU 	:= TRUE;  
*)

	KC_DI_DRV.Kr54_ON   := TRUE;
	KC_DI_DRV.Kr54b_OF  := TRUE;
	KC_DI_DRV.Kr51_2_OF := TRUE;
	KC_DI_DRV.Kr52_2_OF := TRUE;
	KC_DI_DRV.Kr51_OF   := TRUE;
	KC_DI_DRV.Kr52_OF   := True;
	KC_DI_DRV.Kr53_ON   := TRUE;
	KC_DI_DRV.Kr53b_ON  := TRUE;

	KC_DI_DRV.Kr51_ON_KCU 		:= TRUE;  
	KC_DI_DRV.Kr52_ON_KCU 		:= TRUE;  
	KC_DI_DRV.Kr53_ON_KCU 		:= TRUE; 
	KC_DI_DRV.Kr54_ON_KCU		:= TRUE; 
	KC_DI_DRV.Kr53b_ON_KCU		:= TRUE; 
	KC_DI_DRV.Kr54b_ON_KCU		:= TRUE; 
	KC_DI_DRV.Kr51_2_ON_KCU 	:= TRUE;  
	KC_DI_DRV.Kr52_2_ON_KCU 	:= TRUE;  
	KC_DI_DRV.Kr51_OF_KCU 		:= TRUE;  
	KC_DI_DRV.Kr52_OF_KCU 		:= TRUE;  
	KC_DI_DRV.Kr53_OF_KCU 		:= TRUE; 
	KC_DI_DRV.Kr54_OF_KCU		:= TRUE; 
	KC_DI_DRV.Kr53b_OF_KCU		:= TRUE; 
	KC_DI_DRV.Kr54b_OF_KCU		:= TRUE; 
	KC_DI_DRV.Kr51_2_OF_KCU 	:= TRUE;  
	KC_DI_DRV.Kr52_2_OF_KCU 	:= TRUE;  

else

(*//=
KC_DI.Kr51_ON  := KC_AM.Kr51.iOn;   KC_DI.Kr51_OF  := KC_AM.Kr51.iOff;
KC_DI.Kr52_ON  := KC_AM.Kr52.iOn;   KC_DI.Kr52_OF  := KC_AM.Kr51.iOff;
KC_DI.Kr53_ON  := KC_AM.Kr53.iOn;   KC_DI.Kr53_OF  := KC_AM.Kr53.iOff;
KC_DI.Kr54_ON  := KC_AM.Kr54.iOn;   KC_DI.Kr54_OF  := KC_AM.Kr54.iOff;
KC_DI.Kr51_2_ON  := KC_AM.Kr51_2.iOn;   KC_DI.Kr51_2_OF  := KC_AM.Kr51_2.iOff;
KC_DI.Kr52_2_ON  := KC_AM.Kr52_2.iOn;   KC_DI.Kr52_2_OF  := KC_AM.Kr52_2.iOff;
KC_DI.Kr53b_ON  := KC_AM.Kr53b.iOn;   KC_DI.Kr53b_OF  := KC_AM.Kr53b.iOff;
KC_DI.Kr54b_ON  := KC_AM.Kr54b.iOn;   KC_DI.Kr54b_OF  := KC_AM.Kr54b.iOff;
*)
//=
KC_DI_DRV.Kr51_ON    := KC_AM.Kr51.iOn;   KC_DI_DRV.Kr51_OF   := KC_AM.Kr51.iOff;
KC_DI_DRV.Kr52_ON    := KC_AM.Kr52.iOn;   KC_DI_DRV.Kr52_OF   := KC_AM.Kr52.iOff;
KC_DI_DRV.Kr53_ON    := KC_AM.Kr53.iOn;   KC_DI_DRV.Kr53_OF   := KC_AM.Kr53.iOff;
KC_DI_DRV.Kr54_ON    := KC_AM.Kr54.iOn;   KC_DI_DRV.Kr54_OF   := KC_AM.Kr54.iOff;
KC_DI_DRV.Kr51_2_ON  := KC_AM.Kr51_2.iOn; KC_DI_DRV.Kr51_2_OF := KC_AM.Kr51_2.iOff;
KC_DI_DRV.Kr52_2_ON  := KC_AM.Kr52_2.iOn; KC_DI_DRV.Kr52_2_OF := KC_AM.Kr52_2.iOff;
KC_DI_DRV.Kr53b_ON   := KC_AM.Kr53b.iOn;  KC_DI_DRV.Kr53b_OF  := KC_AM.Kr53b.iOff;
KC_DI_DRV.Kr54b_ON   := KC_AM.Kr54b.iOn;  KC_DI_DRV.Kr54b_OF  := KC_AM.Kr54b.iOff;
end_if;]]></ST>
        </FunctionBlock>
        <FunctionBlock UUID="LCERBCVHMURELEDEHKKNKLUZNQ" Name="FB_Pulse" Comment="Блок формирования импульсов с периодом Tp">
            <Variables>
                <Variable UUID="CMR5BQDGRKPEZBIKWN5RA576SY" Name="on" Comment="Запуск ипульсов" Type="BOOL" Usage="input" />
                <Variable UUID="B6IJ67FPJ3RUFJNLPAS7YG4QFE" Name="tp" Comment="Период следования импульсов" Type="TIME" Usage="input" />
                <Variable UUID="XZGD3TDBOORUPN4TMQKQ32TE3I" Name="tic" Comment="Выход" Type="BOOL" Usage="output" />
                <Variable UUID="TIVKZZA76UQEBDGHCVSWZRJTPI" Name="tmr" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
            </Variables>
            <ST><![CDATA[//таймер периода
tmr(IN:= on AND NOT tmr.Q, PT:= tp);
//на полупериоде установить 0
//выход
tic :=  tmr.ET < tp/2 AND NOT tmr.Q AND on;
//Steam
]]></ST>
        </FunctionBlock>
        <FunctionBlock UUID="JH6E2RDLE37ULL4MOUYCEZKSHQ" Name="FB_Ttrg" Comment="Т-триггер на дискретных элементах">
            <Variables>
                <Variable UUID="G733ZPQIUZCUZJXOIV7OQQT3G4" Name="c" Comment="Входной тактовый импульс" Type="BOOL" Usage="input" />
                <Variable UUID="7QPJXKAOG7XUTMS7SZ3FDZDHCE" Name="r" Comment="Безусловный сброс" Type="BOOL" Usage="input" />
                <Variable UUID="VBKMAUZHCLJUTLMX4GJ6QYJVRY" Name="q" Comment="Выход Т-триггера" Type="BOOL" Usage="output" />
                <Variable UUID="EEKECSBDYVAELGKC3TOJWPG56M" Name="pr_c" Type="BOOL" Usage="internal" />
            </Variables>
            <ST><![CDATA[
q := (c AND NOT pr_c  AND NOT q OR q) AND NOT (c AND NOT pr_c  AND q OR r);
pr_c := c;]]></ST>
        </FunctionBlock>
        <Function UUID="VPQK3DF5GMDULBVIZSQ6MGINOA" Name="Trends" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
            <Variables />
            <ST><![CDATA[//--------------------------------------- Формирование трендовых переменых --------------------------------------------
//#####################################################################################################################

//------------------------------AI---------------------------------------
KC_AI_Trend.Res_00      := KC_AI_ToHMI.Res_00.PV; //Резерв
KC_AI_Trend.Tg_in_KC    := KC_AI_ToHMI.Tg_in_KC.PV; //Температура газа на входе КЦ
KC_AI_Trend.Tg_out_KC   := KC_AI_ToHMI.Tg_out_KC.PV; //Температура газа на выходе КЦ
KC_AI_Trend.Pg_in_KC    := KC_AI_ToHMI.Pg_in_KC.PV; //Давление газа на входе КЦ
KC_AI_Trend.Pg_out_KC   := KC_AI_ToHMI.Pg_out_KC.PV; //Давление газа на выходе КЦ
KC_AI_Trend.I_AB        := KC_AI_ToHMI.I_AB.PV; //Ток разряда-заряда Аб в ЩПТ                  =220
KC_AI_Trend.U1_DC220    := KC_AI_ToHMI.U1_DC220.PV; //Напряжение на I секции шин в ЩПТ  =220В
KC_AI_Trend.U2_DC220    := KC_AI_ToHMI.U2_DC220.PV; //Напряжение на II секции шин в ЩПТ =220В
KC_AI_Trend.Pg1_in_Kol  := KC_AI_ToHMI.Pg1_in_Kol.PV; //Давление на входном коллекторе КЦ (1)
KC_AI_Trend.Pg2_in_Kol  := KC_AI_ToHMI.Pg2_in_Kol.PV; //Давление на входном коллекторе КЦ (2)
KC_AI_Trend.Pg1_out_Kol := KC_AI_ToHMI.Pg1_out_Kol.PV; //Давление на выходном коллекторе КЦ (1)
KC_AI_Trend.Pg2_out_Kol := KC_AI_ToHMI.Pg2_out_Kol.PV; //Давление на выходном коллекторе КЦ (2)
KC_AI_Trend.Res_0       := KC_AI_ToHMI.Res_0.PV; //Резерв0
KC_AI_Trend.Res_1       := KC_AI_ToHMI.Res_1.PV; //Резерв1
KC_AI_Trend.Res_2       := KC_AI_ToHMI.Res_2.PV; //Резерв2
KC_AI_Trend.Res_3       := KC_AI_ToHMI.Res_3.PV; //Резерв3
KC_AI_Trend.Uosn_SAU    := KC_AI_ToHMI.Uosn_SAU.PV; //Измерение основного напряжения
KC_AI_Trend.Urez_SAU    := KC_AI_ToHMI.Urez_SAU.PV; //Напряжение резервного питания
KC_AI_Trend.Ukr         := KC_AI_ToHMI.Ukr.PV; //Напряжение питания кранов
KC_AI_Trend.Res_4       := KC_AI_ToHMI.Res_4.PV; //Резерв4

//------------------------------DI---------------------------------------
KC_DI_Trend.Kr51_ON                  := KC_DI.Kr51_ON; //Кран 51 открыт
KC_DI_Trend.Kr51_ON_KCD              := KC_DI.Kr51_ON_KCD; //Кран 51 открыт. КЦД
KC_DI_Trend.Kr51_OF                  := KC_DI.Kr51_OF; //Кран 51 закрыт 
KC_DI_Trend.Kr51_OF_KCD              := KC_DI.Kr51_OF_KCD; //Кран 51 закрыт. КЦД
KC_DI_Trend.Kr52_ON                  := KC_DI.Kr52_ON; //Кран 52 открыт 
KC_DI_Trend.Kr52_ON_KCD              := KC_DI.Kr52_ON_KCD; //Кран 52 открыт. КЦД
KC_DI_Trend.Kr52_OF                  := KC_DI.Kr52_OF; //Кран 52 закрыт
KC_DI_Trend.Kr52_OF_KCD              := KC_DI.Kr52_OF_KCD; //Кран 52 закрыт. КЦД
KC_DI_Trend.UTUO_Alarm               := KC_DI.UTUO_Alarm; //УТУО. Обобщенный сигнал аварии 
KC_DI_Trend.UTUO_Alarm_KCD           := KC_DI.UTUO_Alarm_KCD; //УТУО. Обобщенный сигнал аварии. КЦД
KC_DI_Trend.UTUO_Gas10               := KC_DI.UTUO_Gas10; //УТУО. Загазованность по метану более 10% НКПР
KC_DI_Trend.UTUO_Gas10_KCD           := KC_DI.UTUO_Gas10_KCD; //УТУО. Загазованность по метану более 10% НКПР. КЦД
KC_DI_Trend.UTUO_Kl_ots_OF           := KC_DI.UTUO_Kl_ots_OF; //УТУО. Срабатывание отсечного клапана на подводящем газопроводе
KC_DI_Trend.UTUO_Kl_ots_OF_KCD       := KC_DI.UTUO_Kl_ots_OF_KCD; //УТУО. Срабатывание отсечного клапана на подводящем газопроводе. КЦД
KC_DI_Trend.UTUO_No_U                := KC_DI.UTUO_No_U; //УТУО. Исчезновение напряжения питания
KC_DI_Trend.UTUO_No_U_KCD            := KC_DI.UTUO_No_U_KCD; //УТУО. Исчезновение напряжения питания. КЦД
KC_DI_Trend.Vn_P2_ON                 := KC_DI.Vn_P2_ON; //Вентсистема П2 в работе 
KC_DI_Trend.Vn_P2_ON_KCD             := KC_DI.Vn_P2_ON_KCD; //Вентсистема П2 в работе. КЦД
KC_DI_Trend.Vn_P3_ON                 := KC_DI.Vn_P3_ON; //Вентсистема П3 в работе 
KC_DI_Trend.Vn_P3_ON_KCD             := KC_DI.Vn_P3_ON_KCD; //Вентсистема П3 в работе. КЦД
KC_DI_Trend.Vn_V2_ON                 := KC_DI.Vn_V2_ON; //Вентсистема В2 в работе 
KC_DI_Trend.Vn_V2_ON_KCD             := KC_DI.Vn_V2_ON_KCD; //Вентсистема В2 в работе. КЦД
KC_DI_Trend.Vn_V3_ON                 := KC_DI.Vn_V3_ON; //Вентсистема В3 в работе 
KC_DI_Trend.Vn_V3_ON_KCD             := KC_DI.Vn_V3_ON_KCD; //Вентсистема В3 в работе. КЦД
KC_DI_Trend.Vn_P1_Alarm              := KC_DI.Vn_P1_Alarm; //Авария вентсистемы П1 
KC_DI_Trend.Vn_P1_Alarm_KCD          := KC_DI.Vn_P1_Alarm_KCD; //Авария вентсистемы П1. КЦД
KC_DI_Trend.Vn_P4_Alarm              := KC_DI.Vn_P4_Alarm; //Авария вентсистемы П4
KC_DI_Trend.Vn_P4_Alarm_KCD          := KC_DI.Vn_P4_Alarm_KCD; //Авария вентсистемы П4. КЦД
KC_DI_Trend.Vn_V4_Alarm              := KC_DI.Vn_V4_Alarm; //Вентсистема В4.Авария
KC_DI_Trend.Vn_V4_Alarm_KCD          := KC_DI.Vn_V4_Alarm_KCD; //Вентсистема В4.Авария. КЦД
KC_DI_Trend.Vn_V4_ON                 := KC_DI.Vn_V4_ON; //Вентсистема В4 в работе 
KC_DI_Trend.Vn_V4_ON_KCD             := KC_DI.Vn_V4_ON_KCD; //Вентсистема В4 в работе. КЦД
KC_DI_Trend.Lt_R1_ADES_v             := KC_DI.Lt_R1_ADES_v; //Верхний уровень в резервуаре Р1 для хранения дизтоплива
KC_DI_Trend.Lt_R1_ADES_v_KCD         := KC_DI.Lt_R1_ADES_v_KCD; //Верхний уровень в резервуаре Р1 для хранения дизтоплива КЦД
KC_DI_Trend.Lt_R1_ADES_n             := KC_DI.Lt_R1_ADES_n; //Нижний уровень в резервуаре Р1 для хранения дизтоплива
KC_DI_Trend.Lt_R1_ADES_n_KCD         := KC_DI.Lt_R1_ADES_n_KCD; //Нижний уровень в резервуаре Р1 для хранения дизтоплива КЦД
KC_DI_Trend.Lt_R2_ADES_v             := KC_DI.Lt_R2_ADES_v; //Верхний уровень в резервуаре Р2 для аварийного слива топлива
KC_DI_Trend.Lt_R2_v_KCD              := KC_DI.Lt_R2_v_KCD; //Верхний уровень в резервуаре Р2 для аварийного слива топлива КЦД
KC_DI_Trend.LSA1_ADES_ok             := KC_DI.LSA1_ADES_ok; //Исправность датчика уровня, LSA1 
KC_DI_Trend.LSA1_ADES_ok_KCD         := KC_DI.LSA1_ADES_ok_KCD; //Исправность датчика уровня, LSA1. КЦД
KC_DI_Trend.LSA2_ADES_ok             := KC_DI.LSA2_ADES_ok; //Исправность датчика уровня, LSA2
KC_DI_Trend.LSA2_ADES_ok_KCD         := KC_DI.LSA2_ADES_ok_KCD; //Исправность датчика уровня, LSA2. КЦД
KC_DI_Trend.LSA3_ADES_ok             := KC_DI.LSA3_ADES_ok; //Исправность датчика уровня, LSA3
KC_DI_Trend.LSA3_ADES_ok_KCD         := KC_DI.LSA3_ADES_ok_KCD; //Исправность датчика уровня, LSA3. КЦД
KC_DI_Trend.Lm_R1_v                  := KC_DI.Lm_R1_v; //Верхний уровень в резервуаре Р1 для дренажа масла нагнетателя ГПА4
KC_DI_Trend.Lm_R1_v_KCD              := KC_DI.Lm_R1_v_KCD; //Верхний уровень в резервуаре Р1 для дренажа масла нагнетателя ГПА4 КЦД
KC_DI_Trend.Lm_R4_v                  := KC_DI.Lm_R4_v; //Верхний уровень в резервуаре Р4 для отработанного масла двигателя ГПА4
KC_DI_Trend.Lm_R4_v_KCD              := KC_DI.Lm_R4_v_KCD; //Верхний уровень в резервуаре Р4 для отработанного масла двигателя ГПА4.КЦД
KC_DI_Trend.Lm_R2_v                  := KC_DI.Lm_R2_v; //Верхний уровень в резервуаре Р2 для дренажа масла нагнетателя ГПА5
KC_DI_Trend.Lm_R2_v_KCD              := KC_DI.Lm_R2_v_KCD; //Верхний уровень в резервуаре Р2 для дренажа масла нагнетателя ГПА5, КЦД
KC_DI_Trend.Lm_R5_v                  := KC_DI.Lm_R5_v; //Верхний уровень в резервуаре Р5 для отработанного масла двигателя ГПА5
KC_DI_Trend.Lm_R5_v_KCD              := KC_DI.Lm_R5_v_KCD; //Верхний уровень в резервуаре Р5 для отработанного масла двигателя ГПА5. КЦД
KC_DI_Trend.Lm_R3_v                  := KC_DI.Lm_R3_v; //Верхний уровень в резервуаре Р3 для дренажа масла нагнетателя ГПА6
KC_DI_Trend.Lm_R3_v_KCD              := KC_DI.Lm_R3_v_KCD; //Верхний уровень в резервуаре Р3 для дренажа масла нагнетателя ГПА6. КЦД
KC_DI_Trend.Lm_R6_v                  := KC_DI.Lm_R6_v; //Верхний уровень в резервуаре Р6 для отработанного масла двигателя ГПА6
KC_DI_Trend.Lm_R6_v_KCD              := KC_DI.Lm_R6_v_KCD; //Верхний уровень в резервуаре Р6 для отработанного масла двигателя ГПА6.КЦД
KC_DI_Trend.LSA1_GRA_ok              := KC_DI.LSA1_GRA_ok; //Исправность датчика уровня, LSA1
KC_DI_Trend.LSA1_GPA_ok_KCD          := KC_DI.LSA1_GPA_ok_KCD; //Исправность датчика уровня, LSA1. КЦД
KC_DI_Trend.LSA2_GPA_ok              := KC_DI.LSA2_GPA_ok; //Исправность датчика уровня, LSA2
KC_DI_Trend.LSA2_GPA_ok_KCD          := KC_DI.LSA2_GPA_ok_KCD; //Исправность датчика уровня, LSA2. КЦД
KC_DI_Trend.LSA3_GPA_ok              := KC_DI.LSA3_GPA_ok; //Исправность датчика уровня, LSA3 
KC_DI_Trend.LSA3_GPA_ok_KCD          := KC_DI.LSA3_GPA_ok_KCD; //Исправность датчика уровня, LSA3. КЦД
KC_DI_Trend.LSA4_GPA_ok              := KC_DI.LSA4_GPA_ok; //Исправность датчика уровня, LSA4 
KC_DI_Trend.LSA4_GPA_ok_KCD          := KC_DI.LSA4_GPA_ok_KCD; //Исправность датчика уровня, LSA4. КЦД 
KC_DI_Trend.LSA5_GPA_ok              := KC_DI.LSA5_GPA_ok; //Исправность датчика уровня, LSA5
KC_DI_Trend.LSA5_GPA_ok_KCD          := KC_DI.LSA5_GPA_ok_KCD; //Исправность датчика уровня, LSA5. КЦД 
KC_DI_Trend.LSA6_GPA_ok              := KC_DI.LSA6_GPA_ok; //Исправность датчика уровня, LSA6
KC_DI_Trend.LSA6_GPA_ok_KCD          := KC_DI.LSA6_GPA_ok_KCD; //Исправность датчика уровня, LSA6. КЦД 
KC_DI_Trend.UZ1_Bad                  := KC_DI.UZ1_Bad; //Неисправность UZ1 
KC_DI_Trend.UZ1_Bad_KCD              := KC_DI.UZ1_Bad_KCD; //Неисправность UZ1. КЦД  
KC_DI_Trend.UZ2_Bad                  := KC_DI.UZ2_Bad; //Неисправность UZ2 
KC_DI_Trend.UZ2_Bad_KCD              := KC_DI.UZ2_Bad_KCD; //Неисправность UZ2. КЦД  
KC_DI_Trend.Q_AB_OF                  := KC_DI.Q_AB_OF; //Выключатель АБ отключен
KC_DI_Trend.Q_AB_OF_KCD              := KC_DI.Q_AB_OF_KCD; //Выключатель АБ отключен. КЦД 
KC_DI_Trend.Q_Rez1_OF                := KC_DI.Q_Rez1_OF; //Выключатель 1 «Резерв» отключен
KC_DI_Trend.Q_Rez1_OF_KCD            := KC_DI.Q_Rez1_OF_KCD; //Выключатель 1 «Резерв» отключен. КЦД 
KC_DI_Trend.Q_UZ1_OF                 := KC_DI.Q_UZ1_OF; //Выключатель UZ1 отключен
KC_DI_Trend.Q_UZ1_OF_KCD             := KC_DI.Q_UZ1_OF_KCD; //Выключатель UZ1 отключен. КЦД 
KC_DI_Trend.Q_UZ2_OF                 := KC_DI.Q_UZ2_OF; //Выключатель UZ2 отключен 
KC_DI_Trend.Q_UZ2_OF_KCD             := KC_DI.Q_UZ2_OF_KCD; //Выключатель UZ2 отключен. КЦД  
KC_DI_Trend.QS1_OF                   := KC_DI.QS1_OF; //Секционный выключатель QS1 отключен
KC_DI_Trend.QS1_OF_KCD               := KC_DI.QS1_OF_KCD; //Секционный выключатель QS1 отключен. КЦД 
KC_DI_Trend.QS2_OF                   := KC_DI.QS2_OF; //Секционный выключатель QS2 отключен
KC_DI_Trend.QS2_OF_KCD               := KC_DI.QS2_OF_KCD; //Секционный выключатель QS2 отключен. КЦД 
KC_DI_Trend.QS3_OF                   := KC_DI.QS3_OF; //Секционный выключатель QS3 отключен
KC_DI_Trend.QS3_OF_KCD               := KC_DI.QS3_OF_KCD; //Секционный выключатель QS3 отключен. КЦД 
KC_DI_Trend.QS4_OF                   := KC_DI.QS4_OF; //Секционный выключатель QS4 отключен
KC_DI_Trend.QS4_OF_KCD               := KC_DI.QS4_OF_KCD; //Секционный выключатель QS4 отключен. КЦД 
KC_DI_Trend.QS5_OF                   := KC_DI.QS5_OF; //Секционный выключатель QS5 отключен
KC_DI_Trend.QS5_OF_KCD               := KC_DI.QS5_OF_KCD; //Секционный выключатель QS5 отключен. КЦД 
KC_DI_Trend.Q_ETO1_OF                := KC_DI.Q_ETO1_OF; //Выключатель блока электротехнического ГПА4 отключен
KC_DI_Trend.Q_ETO1_OF_KCD            := KC_DI.Q_ETO1_OF_KCD; //Выключатель блока электротехнического ГПА4 отключен. КЦД 
KC_DI_Trend.Q_ETO2_OF                := KC_DI.Q_ETO2_OF; //Выключатель блока электротехнического ГПА5 отключен
KC_DI_Trend.Q_ETO2_OF_KCD            := KC_DI.Q_ETO2_OF_KCD; //Выключатель блока электротехнического ГПА5 отключен. КЦД 
KC_DI_Trend.Q_ASUES3_OF              := KC_DI.Q_ASUES3_OF; //Выключатель шкафа 2АСУ ЭС, ввод №3 отключен
KC_DI_Trend.Q_ASUES3_OF_KCD          := KC_DI.Q_ASUES3_OF_KCD; //Выключатель шкафа 2АСУ ЭС, ввод №3 отключен. КЦД 
KC_DI_Trend.Q_KTP_PEB1_OF            := KC_DI.Q_KTP_PEB1_OF; //Выключатель КТП ПЭБа. Шкаф №1 отключен
KC_DI_Trend.Q_KTP_PEB1_OF_KCD        := KC_DI.Q_KTP_PEB1_OF_KCD; //Выключатель КТП ПЭБа. Шкаф №1 отключен. КЦД
KC_DI_Trend.Q_Rez2_OF                := KC_DI.Q_Rez2_OF; //Выключатель 2 «Резерв» отключен
KC_DI_Trend.Q_Rez2_OF_KCD            := KC_DI.Q_Rez2_OF_KCD; //Выключатель 2 «Резерв» отключен. КЦД
KC_DI_Trend.Q_Rez3_OF                := KC_DI.Q_Rez3_OF; //Выключатель 3 «Резерв» отключен 
KC_DI_Trend.Q_Rez3_OF_KCD            := KC_DI.Q_Rez3_OF_KCD; //Выключатель 3 «Резерв» отключен . КЦД
KC_DI_Trend.Q_Rez4_OF                := KC_DI.Q_Rez4_OF; //Выключатель 4 «Резерв» отключен
KC_DI_Trend.Q_Rez4_OF_KCD            := KC_DI.Q_Rez4_OF_KCD; //Выключатель 4 «Резерв» отключен. КЦД
KC_DI_Trend.Q_Rez5_OF                := KC_DI.Q_Rez5_OF; //Выключатель 5 «Резерв» отключен
KC_DI_Trend.Q_Rez5_OF_KCD            := KC_DI.Q_Rez5_OF_KCD; //Выключатель 5 «Резерв» отключен. КЦД
KC_DI_Trend.Q_ETO3_OF                := KC_DI.Q_ETO3_OF; //Выключатель блока электротехнического ГПА6 отключен
KC_DI_Trend.Q_ETO3_OF_KCD            := KC_DI.Q_ETO3_OF_KCD; //Выключатель блока электротехнического ГПА6 отключен. КЦД
KC_DI_Trend.Q_ASUES4_OF              := KC_DI.Q_ASUES4_OF; //Выключатель шкафа 2АСУ ЭС, ввод №4 отключен
KC_DI_Trend.Q_ASUES4_OF_KCD          := KC_DI.Q_ASUES4_OF_KCD; //Выключатель шкафа 2АСУ ЭС, ввод №4 отключен. КЦД
KC_DI_Trend.Q_KTP_PEB14_OF           := KC_DI.Q_KTP_PEB14_OF; //Выключатель КТП ПЭБа. Шкаф №14 отключен
KC_DI_Trend.Q_KTP_PEB14_OF_KCD       := KC_DI.Q_KTP_PEB14_OF_KCD; //Выключатель КТП ПЭБа. Шкаф №14 отключен. КЦД
KC_DI_Trend.Q_Rez6_OF                := KC_DI.Q_Rez6_OF; //Выключатель 6 «Резерв» отключен
KC_DI_Trend.Q_Rez6_OF_KCD            := KC_DI.Q_Rez6_OF_KCD; //Выключатель 6 «Резерв» отключен. КЦД
KC_DI_Trend.Q_Rez7_OF                := KC_DI.Q_Rez7_OF; //Выключатель 7 «Резерв» отключен
KC_DI_Trend.Q_Rez7_OF_KCD            := KC_DI.Q_Rez7_OF_KCD; //Выключатель 7 «Резерв» отключен. КЦД
KC_DI_Trend.Q_Rez8_OF                := KC_DI.Q_Rez8_OF; //Выключатель 8 «Резерв» отключен 
KC_DI_Trend.Q_Rez8_OF_KCD            := KC_DI.Q_Rez8_OF_KCD; //Выключатель 8 «Резерв» отключен . КЦД
KC_DI_Trend.Q_Rez9_OF                := KC_DI.Q_Rez9_OF; //Выключатель 9 «Резерв» отключен
KC_DI_Trend.Q_Rez9_OF_KCD            := KC_DI.Q_Rez9_OF_KCD; //Выключатель 9 «Резерв» отключен. КЦД
KC_DI_Trend.Q_Rez10_OF               := KC_DI.Q_Rez10_OF; //Выключатель 10 «Резерв» отключен
KC_DI_Trend.Q_Rez10_OF_KCD           := KC_DI.Q_Rez10_OF_KCD; //Выключатель 10 «Резерв» отключен. КЦД
KC_DI_Trend.Q_Lamp_PEB_A_OF          := KC_DI.Q_Lamp_PEB_A_OF; //Выключатель Q10 аварийное освещение ПЭБ отключен
KC_DI_Trend.Q_Lamp_PEB_A_OF_KCD      := KC_DI.Q_Lamp_PEB_A_OF_KCD; //Выключатель Q10 аварийное освещение ПЭБ отключен. КЦД
KC_DI_Trend.Q_NasMet_NM_OF           := KC_DI.Q_NasMet_NM_OF; //Выключатель Насосная метанола (Шкаф ЛИС НМ) отключен
KC_DI_Trend.Q_NasMet_NM_OF_KCD       := KC_DI.Q_NasMet_NM_OF_KCD; //Выключатель Насосная метанола (Шкаф ЛИС НМ) отключен. КЦД
KC_DI_Trend.Q_NasMet_PK_OF           := KC_DI.Q_NasMet_PK_OF; //Выключатель Насосная метанола (Шкаф ПК) отключен
KC_DI_Trend.Q_NasMet_PK_OF_KCD       := KC_DI.Q_NasMet_PK_OF_KCD; //Выключатель Насосная метанола (Шкаф ПК) отключен. КЦД
KC_DI_Trend.Q_UZRG_OF                := KC_DI.Q_UZRG_OF; //Выключатель УЗРГ (Шкаф ЛИС УЗРГ) отключен
KC_DI_Trend.Q_UZRG_OF_KCD            := KC_DI.Q_UZRG_OF_KCD; //Выключатель УЗРГ (Шкаф ЛИС УЗРГ) отключен. КЦД
KC_DI_Trend.Q_UZRG_NTS_OF            := KC_DI.Q_UZRG_NTS_OF; //Выключатель УЗРГ (Шкаф ЛИС УНТС) отключен
KC_DI_Trend.Q_UZRG_NTS_OF_KCD        := KC_DI.Q_UZRG_NTS_OF_KCD; //Выключатель УЗРГ (Шкаф ЛИС УНТС) отключен. КЦД
KC_DI_Trend.Q_UPI_OF                 := KC_DI.Q_UPI_OF; //Выключатель шкафа УПИ АСП отключен
KC_DI_Trend.Q_UPI_OF_KCD             := KC_DI.Q_UPI_OF_KCD; //Выключатель шкафа УПИ АСП отключен. КЦД
KC_DI_Trend.Q_LISKC_OF               := KC_DI.Q_LISKC_OF; //Выключатель шкафа ЛИС КЦ отключен
KC_DI_Trend.Q_LISKC_OF_KCD           := KC_DI.Q_LISKC_OF_KCD; //Выключатель шкафа ЛИС КЦ отключен. КЦД
KC_DI_Trend.Q_Rez11_OF               := KC_DI.Q_Rez11_OF; //Выключатель 11 «Резерв» отключен
KC_DI_Trend.Q_Rez11_OF_KCD           := KC_DI.Q_Rez11_OF_KCD; //Выключатель 11 «Резерв» отключен. КЦД
KC_DI_Trend.Q_Rez12_OF               := KC_DI.Q_Rez12_OF; //Выключатель 12 «Резерв» отключен
KC_DI_Trend.Q_Rez12_OF_KCD           := KC_DI.Q_Rez12_OF_KCD; //Выключатель 12 «Резерв» отключен. КЦД
KC_DI_Trend.Q_BK200_OF               := KC_DI.Q_BK200_OF; //Выключатель Блок БК-200 отключен 
KC_DI_Trend.Q_BK200_OF_KCD           := KC_DI.Q_BK200_OF_KCD; //Выключатель Блок БК-200 отключен. КЦД 
KC_DI_Trend.Q_NasPPV_OF              := KC_DI.Q_NasPPV_OF; //Выключатель Насосная противопожарного водоснабжения (Шкаф ЛИС ВОС) отключен
KC_DI_Trend.Q_NasPPV_OF_KCD          := KC_DI.Q_NasPPV_OF_KCD; //Выключатель Насосная противопожарного водоснабжения (Шкаф ЛИС ВОС) отключен. КЦД
KC_DI_Trend.Q_Kotel_OF               := KC_DI.Q_Kotel_OF; //Выключатель Котельная (Шкаф ЛИС) отключен
KC_DI_Trend.Q_Kotel_OF_KCD           := KC_DI.Q_Kotel_OF_KCD; //Выключатель Котельная (Шкаф ЛИС) отключен. КЦД
KC_DI_Trend.Q_SkGSM_OF               := KC_DI.Q_SkGSM_OF; //Выключатель Склад ГСМ (Шкаф ЛИС ГСМ) отключен
KC_DI_Trend.Q_SkGSM_OF_KCD           := KC_DI.Q_SkGSM_OF_KCD; //Выключатель Склад ГСМ (Шкаф ЛИС ГСМ) отключен. КЦД
KC_DI_Trend.Q_BB_UPTIG_OF            := KC_DI.Q_BB_UPTIG_OF; //Выключатель Блок-бокс УПТПГ отключен
KC_DI_Trend.Q_SBB_UPTIG_OF_KCD       := KC_DI.Q_SBB_UPTIG_OF_KCD; //Выключатель Блок-бокс УПТПГ отключен. КЦД
KC_DI_Trend.Q_KTP_AVOG_OF            := KC_DI.Q_KTP_AVOG_OF; //Выключатель КТП ПЭБ (Шкаф САУ АВО) отключен
KC_DI_Trend.Q_KTP_AVOG_OF_KCD        := KC_DI.Q_KTP_AVOG_OF_KCD; //Выключатель КТП ПЭБ (Шкаф САУ АВО) отключен. КЦД
KC_DI_Trend.Q_Rez13_OF               := KC_DI.Q_Rez13_OF; //Выключатель 13 «Резерв» отключен
KC_DI_Trend.Q_Rez13_OF_KCD           := KC_DI.Q_Rez13_OF_KCD; //Выключатель 13 «Резерв» отключен. КЦД
KC_DI_Trend.Q_Rez14_OF               := KC_DI.Q_Rez14_OF; //Выключатель 14 «Резерв» отключен
KC_DI_Trend.Q_Rez14_OF_KCD           := KC_DI.Q_Rez14_OF_KCD; //Выключатель 14 «Резерв» отключен. КЦД
KC_DI_Trend.Rsh_Bad                  := KC_DI.Rsh_Bad; //«Земля» на шинах
KC_DI_Trend.Rsh_Bad_KCD              := KC_DI.Rsh_Bad_KCD; //«Земля» на шинах. КЦД
KC_DI_Trend.Rf_Bad                   := KC_DI.Rf_Bad; //«Земля» на фидерах
KC_DI_Trend.Rf_Bad_KCD               := KC_DI.Rf_Bad_KCD; //«Земля» на фидерах. КЦД
KC_DI_Trend.U_lo                     := KC_DI.U_lo; //Пониженное напряжение
KC_DI_Trend.U_lo_KCD                 := KC_DI.U_lo_KCD; //Пониженное напряжение. КЦД
KC_DI_Trend.U_hi                     := KC_DI.U_hi; //Повышенное напряжение 
KC_DI_Trend.U_hi_KCD                 := KC_DI.U_hi_KCD; //Повышенное напряжение. КЦД 
KC_DI_Trend.Kn_AOss_PRU_nz           := KC_DI.Kn_AOss_PRU_nz; //АОcc от ПРУ КЦ 
KC_DI_Trend.Kn_AOss_PRU_KCD          := KC_DI.Kn_AOss_PRU_KCD; //АОcc от ПРУ КЦ. КЦД 
KC_DI_Trend.Kn_AObs_PRU_nz           := KC_DI.Kn_AObs_PRU_nz; //АОбc от ПРУ КЦ 
KC_DI_Trend.Kn_AObs_PRU_KCD          := KC_DI.Kn_AObs_PRU_KCD; //АОбc от ПРУ КЦ. КЦД 
KC_DI_Trend.Fire_in_ZdGate           := KC_DI.Fire_in_ZdGate; //Пожар в здании проходной
KC_DI_Trend.Fire_in_ZdGate_KCD       := KC_DI.Fire_in_ZdGate_KCD; //Пожар в здании проходной. КЦД
KC_DI_Trend.Fire_in_NasPPV           := KC_DI.Fire_in_NasPPV; //Пожар в здании насосной противопожарного водоснабжения
KC_DI_Trend.Fire_in_NasPPV_KCD       := KC_DI.Fire_in_NasPPV_KCD; //Пожар в здании насосной противопожарного водоснабжения. КЦД
KC_DI_Trend.Fire_in_REB              := KC_DI.Fire_in_REB; //Пожар в здании РЭБ 
KC_DI_Trend.Fire_in_REB_KCD          := KC_DI.Fire_in_REB_KCD; //Пожар в здании РЭБ. КЦД 
KC_DI_Trend.Fire_in_WWplant          := KC_DI.Fire_in_WWplant; //Пожар в здании очистных сооружений сточных вод
KC_DI_Trend.Fire_in_Wwplant          := KC_DI.Fire_in_Wwplant; //Пожар в здании очистных сооружений сточных вод. КЦД
KC_DI_Trend.Res_0                    := KC_DI.Res_0; //Резерв
KC_DI_Trend.Res_1                    := KC_DI.Res_1; //Резерв
KC_DI_Trend.Res_2                    := KC_DI.Res_2; //Резерв
KC_DI_Trend.Res_3                    := KC_DI.Res_3; //Резерв
KC_DI_Trend.Res_4                    := KC_DI.Res_4; //Резерв
KC_DI_Trend.Res_5                    := KC_DI.Res_5; //Резерв
KC_DI_Trend.Res_6                    := KC_DI.Res_6; //Резерв
KC_DI_Trend.Res_7                    := KC_DI.Res_7; //Резерв
KC_DI_Trend.U_AC220_US               := KC_DI.U_AC220_US; //Наличие ~220В в УC 
KC_DI_Trend.Dver_UK_open             := KC_DI.Dver_UK_open; //Дверь УК открыта
KC_DI_Trend.UK_Bad                   := KC_DI.UK_Bad; //УК неисправен
KC_DI_Trend.U_AC220_UK               := KC_DI.U_AC220_UK; //Наличие ~220В в УК 
KC_DI_Trend.Dver_US_open             := KC_DI.Dver_US_open; //Дверь УС открыта 
KC_DI_Trend.T_US_25v                 := KC_DI.T_US_25v; //Температура в УС больше 25 °С 
KC_DI_Trend.T_US_30v                 := KC_DI.T_US_30v; //Температура в УС больше 30 °С 
KC_DI_Trend.T_pult_max               := KC_DI.T_pult_max; //Превышение температуры в пульте 
KC_DI_Trend.Kn_AOss_PRU              := KC_DI.Kn_AOss_PRU; //АОcc от ПРУ КЦ
KC_DI_Trend.Kn_AObs_PRU              := KC_DI.Kn_AObs_PRU; //АОбc от ПРУ КЦ 
KC_DI_Trend.PLC_GPA4_Bad             := KC_DI.PLC_GPA4_Bad; //Неисправность контроллера САУ ГПА4
KC_DI_Trend.PLC_GPA5_Bad             := KC_DI.PLC_GPA5_Bad; //Неисправность контроллера САУ ГПА5
KC_DI_Trend.PLC_GPA6_Bad             := KC_DI.PLC_GPA6_Bad; //Неисправность контроллера САУ ГПА6
KC_DI_Trend.Res_8                    := KC_DI.Res_8; //Резерв 
KC_DI_Trend.Res_9                    := KC_DI.Res_9; //Резерв 
KC_DI_Trend.Res_10                   := KC_DI.Res_10; //Резерв 
KC_DI_Trend.Res_11                   := KC_DI.Res_11; //Резерв
KC_DI_Trend.Res_12                   := KC_DI.Res_12; //Резерв
KC_DI_Trend.Kn_EO_PRU                := KC_DI.Kn_EO_PRU; //ЭО КЦ от ПРУ (+)
KC_DI_Trend.Res_13                   := KC_DI.Res_13; //Общ. ЭО КЦ с ПРУ
KC_DI_Trend.Res_14                   := KC_DI.Res_14; //Резерв
KC_DI_Trend.Res_15                   := KC_DI.Res_15; //Резерв
KC_DI_Trend.Res_16                   := KC_DI.Res_16; //Резерв
KC_DI_Trend.Res_17                   := KC_DI.Res_17; //Резерв
KC_DI_Trend.Fire_in_Kot              := KC_DI.Fire_in_Kot; //Пожар в здании котельной
KC_DI_Trend.Fire_in_Kot_KCD          := KC_DI.Fire_in_Kot_KCD; //Пожар в здании котельной. КЦД
KC_DI_Trend.Fire_in_ZADES            := KC_DI.Fire_in_ZADES; //Пожар в здании АДЭС 
KC_DI_Trend.Fire_in_ZADES_KCD        := KC_DI.Fire_in_ZADES_KCD; //Пожар в здании АДЭС. КЦД 
KC_DI_Trend.Fire_in_PEB              := KC_DI.Fire_in_PEB; //Пожар в здании ПЭБ
KC_DI_Trend.Fire_in_PEB_KCD          := KC_DI.Fire_in_PEB_KCD; //Пожар в здании ПЭБ. КЦД
KC_DI_Trend.Fire_in_NasOil           := KC_DI.Fire_in_NasOil; //Пожар в здании насосной масел
KC_DI_Trend.Fire_in_NasOil_KCD       := KC_DI.Fire_in_NasOil_KCD; //Пожар в здании насосной масел. КЦД
KC_DI_Trend.Fire_in_FuelTanks        := KC_DI.Fire_in_FuelTanks; //Пожар в резервуарном парке для хранения дизтоплива
KC_DI_Trend.Fire_in_FuelTanks_KCD    := KC_DI.Fire_in_FuelTanks_KCD; //Пожар в резервуарном парке для хранения дизтоплива. КЦД
KC_DI_Trend.Fire_in_Fuel_ATanks      := KC_DI.Fire_in_Fuel_ATanks; //Пожар в резервуаре для аварийного слива топлива
KC_DI_Trend.Fire_in_Fuel_ATanks_KCD  := KC_DI.Fire_in_Fuel_ATanks_KCD; //Пожар в резервуаре для аварийного слива топлива. КЦД
KC_DI_Trend.Fire_in_MetanolSklad     := KC_DI.Fire_in_MetanolSklad; //Пожар на складе метанола
KC_DI_Trend.Fire_in_MetanolSklad_KCD := KC_DI.Fire_in_MetanolSklad_KCD; //Пожар на складе метанола. КЦД
KC_DI_Trend.Fire_in_NasMet           := KC_DI.Fire_in_NasMet; //Пожар в здании насосной метанола
KC_DI_Trend.Fire_in_NasMet_KCD       := KC_DI.Fire_in_NasMet_KCD; //Пожар в здании насосной метанола. КЦД
KC_DI_Trend.Fire_in_DainTank         := KC_DI.Fire_in_DainTank; //Пожар в подземной дренажной емкости
KC_DI_Trend.Fire_in_DainTank_KCD     := KC_DI.Fire_in_DainTank_KCD; //Пожар в подземной дренажной емкости. КЦД
KC_DI_Trend.Fire_in_RegenMetanol     := KC_DI.Fire_in_RegenMetanol; //Пожар на установке регенерации метанола
KC_DI_Trend.Fire_in_RegenMetanol_KCD := KC_DI.Fire_in_RegenMetanol_KCD; //Пожар на установке регенерации метанола. КЦД
KC_DI_Trend.Fire_in_MetanolTank      := KC_DI.Fire_in_MetanolTank; //Пожар в емкости метанола 
KC_DI_Trend.Fire_in_MetanolTank_KCD  := KC_DI.Fire_in_MetanolTank_KCD; //Пожар в емкости метанола. КЦД 
KC_DI_Trend.Fire_in_UTO              := KC_DI.Fire_in_UTO; //Пожар в здании УТО
KC_DI_Trend.Fire_in_UTO_KCD          := KC_DI.Fire_in_UTO_KCD; //Пожар в здании УТО. КЦД
KC_DI_Trend.Fire_in_ZdUPG            := KC_DI.Fire_in_ZdUPG; //Пожар в здании УПГ
KC_DI_Trend.Fire_in_ZdUPG_KCD        := KC_DI.Fire_in_ZdUPG_KCD; //Пожар в здании УПГ. КЦД
KC_DI_Trend.Fire_in_UZRG             := KC_DI.Fire_in_UZRG; //Пожар в здании УЗРГ
KC_DI_Trend.Fire_in_UZRG_KCD         := KC_DI.Fire_in_UZRG_KCD; //Пожар в здании УЗРГ. КЦД
KC_DI_Trend.Fire_in_UDK              := KC_DI.Fire_in_UDK; //Пожар на установке дожимных компрессоров
KC_DI_Trend.Fire_in_UDK_KCD          := KC_DI.Fire_in_UDK_KCD; //Пожар на установке дожимных компрессоров. КЦД
KC_DI_Trend.ASPS_Bad                 := KC_DI.ASPS_Bad; //Неисправность ПС
KC_DI_Trend.ASPS_Bad_KCD             := KC_DI.ASPS_Bad_KCD; //Неисправность ПС. КЦД
KC_DI_Trend.Kr51_2_OF                := KC_DI.Kr51_2_OF; //Кран Кр51-2 - закрыт
KC_DI_Trend.Kr51_2_ON                := KC_DI.Kr51_2_ON; //Кран Кр51-2 - открыт
KC_DI_Trend.Kr52_2_OF                := KC_DI.Kr52_2_OF; //Кран Кр52-2 - закрыт
KC_DI_Trend.Kr52_2_ON                := KC_DI.Kr52_2_ON; //Кран Кр52-2 - открыт
KC_DI_Trend.Kr53_OF                  := KC_DI.Kr53_OF; //Кран Кр53 - закрыт
KC_DI_Trend.Kr53_ON                  := KC_DI.Kr53_ON; //Кран Кр53 - открыт
KC_DI_Trend.Kr53b_OF                 := KC_DI.Kr53b_OF; //Кран Кр53бп - закрыт
KC_DI_Trend.Kr53b_ON                 := KC_DI.Kr53b_ON; //Кран Кр53бп - открыт
KC_DI_Trend.Kr54_OF                  := KC_DI.Kr54_OF; //Кран Кр54 - закрыт
KC_DI_Trend.Kr54_ON                  := KC_DI.Kr54_ON; //Кран Кр54 - открыт
KC_DI_Trend.Kr54b_OF                 := KC_DI.Kr54b_OF; //Кран Кр54бп - закрыт
KC_DI_Trend.Kr54b_ON                 := KC_DI.Kr54b_ON; //Кран Кр54бп - открыт
KC_DI_Trend.SAU_UPG_Bad              := KC_DI.SAU_UPG_Bad; //Неисправность САУ УПГ
KC_DI_Trend.SAU_UPG_work             := KC_DI.SAU_UPG_work; //САУ УПГ в работе
KC_DI_Trend.UPG_Gas1                 := KC_DI.UPG_Gas1; //Загазованность в УПГ более 1%
KC_DI_Trend.Res_18                   := KC_DI.Res_18; //Резерв
KC_DI_Trend.Chk_AC220_SAU            := KC_DI.Chk_AC220_SAU; //Контроль основного питания  ~220 В
KC_DI_Trend.Chk_DC220_SAU            := KC_DI.Chk_DC220_SAU; //Контроль резервного питания  =220 В
KC_DI_Trend.Chk_DC220_Kr             := KC_DI.Chk_DC220_Kr; //Контроль питания кранов =220В
KC_DI_Trend.Chk_razr                 := KC_DI.Chk_razr; //Контроль исправности разрядников
KC_DI_Trend.Cabin_open               := KC_DI.Cabin_open; //Двери САУ КЦ открыты
KC_DI_Trend.DC24osn_Int_ok           := KC_DI.DC24osn_Int_ok; //Исправность осн. ИП =24В внутренних цепей
KC_DI_Trend.DC24rez_Int_ok           := KC_DI.DC24rez_Int_ok; //Исправность рез. ИП =24В внутренних цепей
KC_DI_Trend.DC24osn_Ext1_ok          := KC_DI.DC24osn_Ext1_ok; //Исправность осн. ИП =24В внешних цепей
KC_DI_Trend.DC24rez_Ext1_ok          := KC_DI.DC24rez_Ext1_ok; //Исправность рез. ИП =24В внешних цепей
KC_DI_Trend.DC24osn_Ext2_ok          := KC_DI.DC24osn_Ext2_ok; //Исправность осн. ИП =24В внешних цепей
KC_DI_Trend.DC24rez_Ext2_ok          := KC_DI.DC24rez_Ext2_ok; //Исправность рез. ИП =24В внешних цепей
KC_DI_Trend.Res_19                   := KC_DI.Res_19; //Резерв
KC_DI_Trend.Res_20                   := KC_DI.Res_20; //Резерв
KC_DI_Trend.Res_21                   := KC_DI.Res_21; //Резерв
KC_DI_Trend.Res_22                   := KC_DI.Res_22; //Резерв
KC_DI_Trend.Res_23                   := KC_DI.Res_23; //Резерв
KC_DI_Trend.Kr51_ON_KCU              := KC_DI.Kr51_ON_KCU; //Кран 51 открыть (КЦУ)
KC_DI_Trend.Kr51_OF_KCU              := KC_DI.Kr51_OF_KCU; //Кран 51 закрыть (КЦУ)
KC_DI_Trend.Kr52_ON_KCU              := KC_DI.Kr52_ON_KCU; //Кран 52 открыть (КЦУ)
KC_DI_Trend.Kr52_OF_KCU              := KC_DI.Kr52_OF_KCU; //Кран 52 закрыть (КЦУ)
KC_DI_Trend.EO_LED_PRU_KCU           := KC_DI.EO_LED_PRU_KCU; //Инд. ЭО КЦ на ПРУ (+) (КЦУ)
KC_DI_Trend.AOss_LED_PRU_KCU         := KC_DI.AOss_LED_PRU_KCU; //Инд. АОсс на ПРУ (+) (КЦУ)
KC_DI_Trend.AObs_LED_PRU_KCU         := KC_DI.AObs_LED_PRU_KCU; //Инд. АОбс на ПРУ (+) (КЦУ)
KC_DI_Trend.FirePump_LED_PRU_KCU     := KC_DI.FirePump_LED_PRU_KCU; //Инд. Вкл. пожнасоса на ПРУ (+) (КЦУ)
KC_DI_Trend.Res_24                   := KC_DI.Res_24; //Резерв 110VDC (КЦУ)
KC_DI_Trend.Res_25                   := KC_DI.Res_25; //Резерв 110VDC (КЦУ)
KC_DI_Trend.Res_26                   := KC_DI.Res_26; //Резерв 110VDC (КЦУ)
KC_DI_Trend.Res_27                   := KC_DI.Res_27; //Резерв 110VDC (КЦУ)
KC_DI_Trend.Res_28                   := KC_DI.Res_28; //Резерв 110VDC (КЦУ)
KC_DI_Trend.Res_29                   := KC_DI.Res_29; //Резерв 110VDC (КЦУ)
KC_DI_Trend.Res_30                   := KC_DI.Res_30; //Резерв 110VDC (КЦУ)
KC_DI_Trend.Res_31                   := KC_DI.Res_31; //Резерв 110VDC (КЦУ)
KC_DI_Trend.Res_32                   := KC_DI.Res_32; //Резерв 110VDC (КЦУ)
KC_DI_Trend.Res_33                   := KC_DI.Res_33; //Резерв 110VDC (КЦУ)
KC_DI_Trend.Res_34                   := KC_DI.Res_34; //Резерв 110VDC (КЦУ)
KC_DI_Trend.Res_35                   := KC_DI.Res_35; //Резерв 110VDC (КЦУ)
KC_DI_Trend.Res_36                   := KC_DI.Res_36; //Резерв 110VDC (КЦУ)
KC_DI_Trend.Res_37                   := KC_DI.Res_37; //Резерв 110VDC (КЦУ)
KC_DI_Trend.Res_38                   := KC_DI.Res_38; //Резерв 110VDC (КЦУ)
KC_DI_Trend.EN_LSA1_ADES_ON_KCU      := KC_DI.EN_LSA1_ADES_ON_KCU; //Обогрев прибора АДЭС LSA1 включить (КЦУ)
KC_DI_Trend.EN_LSA2_ADES_ON_KCU      := KC_DI.EN_LSA2_ADES_ON_KCU; //Обогрев прибора АДЭС LSA2 включить (КЦУ)
KC_DI_Trend.EN_LSA3_ADES_ON_KCU      := KC_DI.EN_LSA3_ADES_ON_KCU; //Обогрев прибора АДЭС LSA3 включить (КЦУ)
KC_DI_Trend.EN_LSA1_GPA_ON_KCU       := KC_DI.EN_LSA1_GPA_ON_KCU; //Обогрев прибора LSA1 (ГПА4) включить (КЦУ)
KC_DI_Trend.EN_LSA2_GPA_ON_KCU       := KC_DI.EN_LSA2_GPA_ON_KCU; //Обогрев прибора LSA2 (ГПА5) включить (КЦУ)
KC_DI_Trend.EN_LSA3_GPA_ON_KCU       := KC_DI.EN_LSA3_GPA_ON_KCU; //Обогрев прибора LSA3 (ГПА6)  включить (КЦУ)
KC_DI_Trend.EN_LSA4_GPA_ON_KCU       := KC_DI.EN_LSA4_GPA_ON_KCU; //Обогрев прибора LSA4 (ГПА4)  включить (КЦУ)
KC_DI_Trend.EN_LSA5_GPA_ON_KCU       := KC_DI.EN_LSA5_GPA_ON_KCU; //Обогрев прибора LSA5 (ГПА5)  включить (КЦУ)
KC_DI_Trend.EN_LSA6_GPA_ON_KCU       := KC_DI.EN_LSA6_GPA_ON_KCU; //Обогрев прибора LSA6 (ГПА6) включить (КЦУ)
KC_DI_Trend.Kr51_2_OF_KCU            := KC_DI.Kr51_2_OF_KCU; //Кран Кр51-2 - закрыть (КЦУ)
KC_DI_Trend.Kr51_2_ON_KCU            := KC_DI.Kr51_2_ON_KCU; //Кран Кр51-2 - открыть (КЦУ)
KC_DI_Trend.Kr52_2_OF_KCU            := KC_DI.Kr52_2_OF_KCU; //Кран Кр52-2 - закрыть (КЦУ)
KC_DI_Trend.Kr52_2_ON_KCU            := KC_DI.Kr52_2_ON_KCU; //Кран Кр52-2 - открыть (КЦУ)
KC_DI_Trend.Kr53_OF_KCU              := KC_DI.Kr53_OF_KCU; //Кран Кр53 - закрыть (КЦУ)
KC_DI_Trend.Kr53_ON_KCU              := KC_DI.Kr53_ON_KCU; //Кран Кр53 - открыть (КЦУ)
KC_DI_Trend.Kr53b_OF_KCU             := KC_DI.Kr53b_OF_KCU; //Кран Кр53бп - закрыть (КЦУ)
KC_DI_Trend.Kr53b_ON_KCU             := KC_DI.Kr53b_ON_KCU; //Кран Кр53бп - открыть (КЦУ)
KC_DI_Trend.Kr54_OF_KCU              := KC_DI.Kr54_OF_KCU; //Кран Кр54 - закрыть (КЦУ)
KC_DI_Trend.Kr54_ON_KCU              := KC_DI.Kr54_ON_KCU; //Кран Кр54 - открыть (КЦУ)
KC_DI_Trend.Kr54b_OF_KCU             := KC_DI.Kr54b_OF_KCU; //Кран Кр54бп - закрыть (КЦУ)
KC_DI_Trend.Kr54b_ON_KCU             := KC_DI.Kr54b_ON_KCU; //Кран Кр54бп - открыть (КЦУ)
KC_DI_Trend.EO_KC_KCU                := KC_DI.EO_KC_KCU; //ЭО от САУ КЦ (КЦУ)
KC_DI_Trend.EO_LED_KC_KCU            := KC_DI.EO_LED_KC_KCU; //Инд. ЭО от САУ КЦ (КЦУ)
KC_DI_Trend.AOss_KC_KCU              := KC_DI.AOss_KC_KCU; //АОсс от САУ КЦ (КЦУ)
KC_DI_Trend.AObs_KC_KCU              := KC_DI.AObs_KC_KCU; //АОбс от САУ КЦ (КЦУ)
KC_DI_Trend.Fire_in_Eblock           := KC_DI.Fire_in_Eblock; //Пожар в энергоблоке
KC_DI_Trend.Fire_in_NasOil2          := KC_DI.Fire_in_NasOil2; //Пожар в насосной масел
KC_DI_Trend.Fire_in_Gate             := KC_DI.Fire_in_Gate; //Пожар в проходной
KC_DI_Trend.Fire_in_BB_BVVUP         := KC_DI.Fire_in_BB_BVVUP; //Пожар в б/б БВВ УП
KC_DI_Trend.Fire_in_ADES             := KC_DI.Fire_in_ADES; //Пожар в аварийной дизельной электростанции
KC_DI_Trend.Fire_in_EXZ              := KC_DI.Fire_in_EXZ; //Пожар в БКУ ЭХЗ
KC_DI_Trend.Fire_in_VKompr           := KC_DI.Fire_in_VKompr; //Пожар в компрессорной сжатого воздуха
KC_DI_Trend.Fire_in_OilTanks         := KC_DI.Fire_in_OilTanks; //Пожар на площадке блока резервуаров масла (НМ)
KC_DI_Trend.Fire_in_Oil_Atanks       := KC_DI.Fire_in_Oil_Atanks; //Пожар в емкости для аварийного слива масла (НМ)
KC_DI_Trend.Fire_in_Fuel_ATanks2     := KC_DI.Fire_in_Fuel_ATanks2; //Пожар в емкости для аварийного слива топлива (АДЭС)
KC_DI_Trend.Fire_in_FuelTanks2       := KC_DI.Fire_in_FuelTanks2; //Пожар на площадке резервуара для дизтоплива (АДЭС)
KC_DI_Trend.SAPS_Bad                 := KC_DI.SAPS_Bad; //Неисправность САПС обобщенный
KC_DI_Trend.Fire_in_GPA4             := KC_DI.Fire_in_GPA4; //Пожар ГПА 4
KC_DI_Trend.GPA4_ASPS_Bad            := KC_DI.GPA4_ASPS_Bad; //Неисправность АСПС, КЗ и ПТ ГПА 4
KC_DI_Trend.GPA4_GAS10               := KC_DI.GPA4_GAS10; //Загазованность предупредительная (10%) ГПА 4
KC_DI_Trend.GPA4_GAS20               := KC_DI.GPA4_GAS20; //Загазованность аварийная (20%) ГПА 4
KC_DI_Trend.Fire_in_GPA5             := KC_DI.Fire_in_GPA5; //Пожар ГПА 5
KC_DI_Trend.GPA5_ASPS_Bad            := KC_DI.GPA5_ASPS_Bad; //Неисправность АСПС, КЗ и ПТ ГПА 5
KC_DI_Trend.GPA5_GAS10               := KC_DI.GPA5_GAS10; //Загазованность предупредительная (10%) ГПА 5
KC_DI_Trend.GPA5_GAS20               := KC_DI.GPA5_GAS20; //Загазованность аварийная (20%) ГПА 5
KC_DI_Trend.Fire_in_GPA6             := KC_DI.Fire_in_GPA6; //Пожар ГПА 6
KC_DI_Trend.GPA6_ASPS_Bad            := KC_DI.GPA6_ASPS_Bad; //Неисправность АСПС, КЗ и ПТ ГПА 6
KC_DI_Trend.GPA6_GAS10               := KC_DI.GPA6_GAS10; //Загазованность предупредительная (10%) ГПА 6
KC_DI_Trend.GPA6_GAS20               := KC_DI.GPA6_GAS20; //Загазованность аварийная (20%) ГПА 6
KC_DI_Trend.Fire_in_UPG              := KC_DI.Fire_in_UPG; //Пожар УПГ
KC_DI_Trend.UPG_ASPS_Bad             := KC_DI.UPG_ASPS_Bad; //Неисправность АСПС, КЗ и ПТ УПГ
KC_DI_Trend.UPG_GAS10                := KC_DI.UPG_GAS10; //Загазованность предупредительная (10%) УПГ
KC_DI_Trend.UPG_GAS20                := KC_DI.UPG_GAS20; //Загазованность аварийная (20%) УПГ
KC_DI_Trend.Fire_in_URM              := KC_DI.Fire_in_URM; //Пожар УРМ
KC_DI_Trend.URM_ASPS_Bad             := KC_DI.URM_ASPS_Bad; //Неисправность АСПС, КЗ и ПТ УРМ
KC_DI_Trend.Res_39                   := KC_DI.Res_39; //Резерв под сигнал Загазованность предупредительная (10%) УРМ
KC_DI_Trend.Res_40                   := KC_DI.Res_40; //Резерв под сигнал Загазованность аварийная (20%) УРМ
//------------------------------DO---------------------------------------
KC_DO_Trend.Kr51_ON                     := KC_DO.Kr51_ON; //Кран 51 открыть
KC_DO_Trend.Kr51_OF                     := KC_DO.Kr51_OF; //Кран 51 закрыть
KC_DO_Trend.Kr52_ON                     := KC_DO.Kr52_ON; //Кран 52 открыть
KC_DO_Trend.Kr52_OF                     := KC_DO.Kr52_OF; //Кран 52 закрыть 
KC_DO_Trend.EO_LED_PRU                  := KC_DO.EO_LED_PRU; //Инд. ЭО КЦ на ПРУ (+) 
KC_DO_Trend.AOss_LED_PRU                := KC_DO.AOss_LED_PRU; //Инд. АОсс на ПРУ (+) 
KC_DO_Trend.AObs_LED_PRU                := KC_DO.AObs_LED_PRU; //Инд. АОбс на ПРУ (+) 
KC_DO_Trend.FirePump_LED_PRU            := KC_DO.FirePump_LED_PRU; //Инд. Вкл. пожнасоса на ПРУ (+) 
KC_DO_Trend.AO_GPA4                     := KC_DO.AO_GPA4; //АО в САУ ГПА 4
KC_DO_Trend.AO_GPA5                     := KC_DO.AO_GPA5; //АО в САУ ГПА 5
KC_DO_Trend.AO_GPA6                     := KC_DO.AO_GPA6; //АО в САУ ГПА 6
KC_DO_Trend.AO_UPA                      := KC_DO.AO_UPA; //АО в САУ УПА 
KC_DO_Trend.AO_UVI                      := KC_DO.AO_UVI; //АО в САУ УВИ
KC_DO_Trend.AO_TSK                      := KC_DO.AO_TSK; //АО в САУ ТСк
KC_DO_Trend.AO_UPG                      := KC_DO.AO_UPG; //АО в САУ УПГ
KC_DO_Trend.AO_NMS                      := KC_DO.AO_NMS; //АО в САУ НМс
KC_DO_Trend.AO_BVKS                     := KC_DO.AO_BVKS; //АО в САУ БВКС
KC_DO_Trend.Res_0                       := KC_DO.Res_0; //Резерв 110VDC
KC_DO_Trend.Res_1                       := KC_DO.Res_1; //Резерв 110VDC
KC_DO_Trend.Res_2                       := KC_DO.Res_2; //Резерв 110VDC
KC_DO_Trend.Res_3                       := KC_DO.Res_3; //Резерв 110VDC
KC_DO_Trend.Res_4                       := KC_DO.Res_4; //Резерв 110VDC
KC_DO_Trend.Res_5                       := KC_DO.Res_5; //Резерв 110VDC
KC_DO_Trend.FirePump_LED_PRU2           := KC_DO.FirePump_LED_PRU2; //Инд. вкл. пожнасоса на ПРУ
KC_DO_Trend.AO_GPA1                     := KC_DO.AO_GPA1; //АО в САУ ГПА 1
KC_DO_Trend.AO_GPA2                     := KC_DO.AO_GPA2; //АО в САУ ГПА 2 
KC_DO_Trend.AO_GPA3                     := KC_DO.AO_GPA3; //АО в САУ ГПА 3 
KC_DO_Trend.AO_GSM                      := KC_DO.AO_GSM; //АО в ЛИС ГСМ 
KC_DO_Trend.AO_UPTIG                    := KC_DO.AO_UPTIG; //АО в ЛИС УПТИГ
KC_DO_Trend.AOss_UPOU_osn               := KC_DO.AOss_UPOU_osn; //АОсс в ЛИС УПОУ (осн.) 
KC_DO_Trend.AObs_UPOU_osn               := KC_DO.AObs_UPOU_osn; //АОбс в ЛИС УПОУ (осн.) 
KC_DO_Trend.AOss_UPOU_rez               := KC_DO.AOss_UPOU_rez; //АОсс в ЛИС УПОУ (рез.)
KC_DO_Trend.AObs_UPOU_rez               := KC_DO.AObs_UPOU_rez; //АОбс в ЛИС УПОУ (рез.) 
KC_DO_Trend.AOss_LED_PRU2               := KC_DO.AOss_LED_PRU2; //Инд. АОсс на ПРУ 
KC_DO_Trend.AObs_LED_PRU2               := KC_DO.AObs_LED_PRU2; //Инд. АОбс на ПРУ
KC_DO_Trend.AO_KOS                      := KC_DO.AO_KOS; //АО в ЛИС КОС 
KC_DO_Trend.AO_NM                       := KC_DO.AO_NM; //АО в ЛИС НМ 
KC_DO_Trend.AO_UNTS                     := KC_DO.AO_UNTS; //АО в ЛИС УНТС 
KC_DO_Trend.AO_UZRG                     := KC_DO.AO_UZRG; //АО в ЛИС УЗРГ
KC_DO_Trend.EN_LSA1_ADES_ON             := KC_DO.EN_LSA1_ADES_ON; //Обогрев прибора АДЭС LSA1 включить
KC_DO_Trend.EN_LSA2_ADES_ON             := KC_DO.EN_LSA2_ADES_ON; //Обогрев прибора АДЭС LSA2 включить
KC_DO_Trend.EN_LSA3_ADES_ON             := KC_DO.EN_LSA3_ADES_ON; //Обогрев прибора АДЭС LSA3 включить
KC_DO_Trend.EN_LSA1_GPA_ON              := KC_DO.EN_LSA1_GPA_ON; //Обогрев прибора LSA1 включить 
KC_DO_Trend.EN_LSA2_GPA_ON              := KC_DO.EN_LSA2_GPA_ON; //Обогрев прибора LSA2 включить 
KC_DO_Trend.EN_LSA3_GPA_ON              := KC_DO.EN_LSA3_GPA_ON; //Обогрев прибора LSA3 включить
KC_DO_Trend.EN_LSA4_GPA_ON              := KC_DO.EN_LSA4_GPA_ON; //Обогрев прибора LSA4 включить
KC_DO_Trend.EN_LSA5_GPA_ON              := KC_DO.EN_LSA5_GPA_ON; //Обогрев прибора LSA5 включить 
KC_DO_Trend.EN_LSA6_GPA_ON              := KC_DO.EN_LSA6_GPA_ON; //Обогрев прибора LSA6 включить 
KC_DO_Trend.Kr51_2_OF                   := KC_DO.Kr51_2_OF; //Кран Кр51-2 - закрыть
KC_DO_Trend.Kr51_2_ON                   := KC_DO.Kr51_2_ON; //Кран Кр51-2 - открыть
KC_DO_Trend.Kr52_2_OF                   := KC_DO.Kr52_2_OF; //Кран Кр52-2 - закрыть
KC_DO_Trend.Kr52_2_ON                   := KC_DO.Kr52_2_ON; //Кран Кр52-2 - открыть
KC_DO_Trend.Kr53_OF                     := KC_DO.Kr53_OF; //Кран Кр53 - закрыть
KC_DO_Trend.Kr53_ON                     := KC_DO.Kr53_ON; //Кран Кр53 - открыть
KC_DO_Trend.Kr53b_OF                    := KC_DO.Kr53b_OF; //Кран Кр53бп - закрыть
KC_DO_Trend.Kr53b_ON                    := KC_DO.Kr53b_ON; //Кран Кр53бп - открыть
KC_DO_Trend.Kr54_OF                     := KC_DO.Kr54_OF; //Кран Кр54 - закрыть
KC_DO_Trend.Kr54_ON                     := KC_DO.Kr54_ON; //Кран Кр54 - открыть
KC_DO_Trend.Kr54b_OF                    := KC_DO.Kr54b_OF; //Кран Кр54бп - закрыть
KC_DO_Trend.Kr54b_ON                    := KC_DO.Kr54b_ON; //Кран Кр54бп - открыть
KC_DO_Trend.EO_KC                       := KC_DO.EO_KC; //ЭО от САУ КЦ
KC_DO_Trend.EO_LED_KC                   := KC_DO.EO_LED_KC; //Инд. ЭО от САУ КЦ
KC_DO_Trend.AOss_KC                     := KC_DO.AOss_KC; //АОсс от САУ КЦ
KC_DO_Trend.AObs_KC                     := KC_DO.AObs_KC; //АОбс от САУ КЦ]]></ST>
        </Function>
    </FBLibrary>
</Program>
