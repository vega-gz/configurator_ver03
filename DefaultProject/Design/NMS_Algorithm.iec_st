<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE Program >
<Program UUID="3AUWB5FJNZFUBF4LRXJ2OL6WXA" Name="NMS_Algorithm" Period="250" PutDataAtEndOfCycle="true">
    <Variables>
        <Variable UUID="5NYLRDH2A42UJEVYZFLXF377SY" Name="Pulse" Type="FB_Pulse" TypeUUID="LCERBCVHMURELEDEHKKNKLUZNQ" Usage="internal" />
        <Variable UUID="XGSDH4MJBUZUBEU2OM3HEZTDFI" Name="IM_Call" Type="FB_IM_Call" TypeUUID="V6ZIHOW4JNZUNPUIBCY2U2IC34" InitialValue="(30F694B64C99174A04374C8016FC8BF2:=TRUE,7D9B610443B54043879AD88B0497E088:=TRUE,2BD5127B4A7A32178FC9E697DCD5A64F:=(737D4C8F4EBCD983AAD2908C7A8EC2BD:=12801,3D184A2245EF0E21F027C8B0EE72C04E:=12801,6F680179405B189CBD22B5BD64F40E54:=0,22E3C9C546E91EB7723C9BAA7121CFF9:=0,06755D614D955371BE3697A24DCFC718:=0,1372E510496A823D17924DA4ECCE4516:=0,293C7FB94B80AB8C7F56288E9A0FF391:=0,14F885804211B0AB6E2222888E84BD91:=0,50CA19E54759F48A505FD5B376F1C33F:=0,F08C1FC744132C7D73CBF2B7B722F17E:=0,CBB74150431ECE5B6D7C659D95472B9F:=0,115705CB436452647F64D98E84E08A1A:=0,71C5CCEDAE4AFEF5FC31A5BA85C30961:=0,1A8A27D92947E1D19AFBCE90C802FCE1:=0,4CF0AB8BF74C4935C15EA8A074797FD0:=0),D9BD70A448CAD90DEBD9C29B5C2EAC14:=(30F694B64C99174A04374C8016FC8BF2:=FALSE,7D9B610443B54043879AD88B0497E088:=FALSE,EF51F0ED46C35A19B5539A8715A3347C:=0,29E726794373CF4E11356598B18EF6AD:=(1A995F0248657661B1308380D9F4D87D:=FALSE,A4A187F345D46BFF7F1E74BAAC0A68DC:=FALSE,03F97D98411E9EC39A7712A9B4B20B06:=FALSE,759A0B224B61D47A8578AF8414C56F3D:=FALSE,201C2A324E5B70F4DA1F5B8E2010211F:=FALSE,11C1E90E4B60E9E2AC0164A8CD7688E7:=FALSE,5FE7AEEB43842E1B420E3A929065CF97:=FALSE,19D882B74B65A1AD618E1B9A1FECEACA:=FALSE,6C02D4CE41FBAD9DDDBCCF8126F850C9:=FALSE,0AFBD4A64FF8C309BDF4D9BBAF1A6E4E:=FALSE,DFD4ADAC4C179329158E9795D2A10464:=FALSE,5D54B84B4523F31E7E76568A084EC298:=FALSE,A76745A6499C76A5134D26BA24F6B0FF:=FALSE,A9587CB84DC3816F748222A872962DEE:=FALSE,EE772F3C427FF0AA1E5E2293A92221E0:=FALSE,BE4222254E1390B490FEE4B1046551C5:=FALSE,CC3B16024550DB62F0467489E47AE2AE:=FALSE,4BBED86E4627364227EE5FACC94EB2C0:=FALSE,E0E79D9F4E8E2BDD77AF57B3E4827898:=FALSE,8BD39D29468096AD67F9498E5368625F:=FALSE,55901A9549CB558C6C22C0950F7C98C1:=FALSE,9017A0A34F59481F7870ABA8E8504720:=FALSE,AE73561A43F8F72268B77AB5E6E1AD73:=FALSE,606C52A44EEFE033EE4698B7EB4FB9D4:=FALSE,28F8E9B34EA757B64F9D6C8C7608F482:=FALSE,9CFA42B24C1EEAB80BFF6CB966F8718E:=FALSE,11B902DC4884FB92CCAEEDAA6BEFCBFA:=FALSE),EE3E042949C51E7A88E6A8B25E821D23:=(6229B077495784FAB3EE3295B5601A0A:=0,ACA4AE4945A4760D28D3DE9D5B4EA287:=0,D7C890B04F1AE8A98407349D37A518D0:=0,C120369A4BFBEAA17500A987B17AB6A3:=0,39B0602F4EB686D9D858FCBDCD60F083:=0,D592329E412260554295BD93844821CE:=0),4694EB2041F75C169D00479567F85953:=7.56753186934397e-038,AB6CBF60413EE9FBCA070F9BC6D967CC:=FALSE,646953534397FA1651020DA92D145E87:=2.97168991958503e+033,91B140C24000CA578A05F397F8A6F2AD:=FALSE,451D044844368326683F849443B31715:=FALSE,C29D95404959B8C01A4CDEA8835A90F9:=FALSE,477C2C234ADD97742A8B1482AD5AD9AE:=FALSE,C97F3DFB4D84CFC009506B8BA06A1F3E:=FALSE,2B94DF784C0C6AF1E27A7281570F6944:=FALSE,B74699AF49DF78BD9C253381F5115E9A:=FALSE,FA64A08A4BA1A11006800581A38EC9F3:=FALSE,379CF20C4829D5096D819196DEAE4B1F:=FALSE,4B06BB3B42A3517F624A3CB57F0CE589:=FALSE,10222E13467CF6B6A2B9A280F3C8B874:=FALSE,0CA2524642CDE7794576E1BBC97029FC:=FALSE,4F82FF4441F48A7923C7CE9F52A0979F:=FALSE,40EB4D4E4C194BEFF4FD248753AF7250:=FALSE,C9C8D6CB43C53C6C2D9EFEA1EA4D2FC1:=FALSE,3F551FAD48A665F167C8E0A7160F939A:=FALSE,81BE8B5144AFF09BB7E0B7A4251CCDF9:=FALSE,E16C82F549D80A0E7C8684904250821E:=FALSE,4FD86A9B43F300AD9DB81D903B470D57:=TRUE,0D2D1D8C4BEFA8A237A787B0D3E2794F:=TRUE,9C4987BD4B26237647DE7E972A3A3C7A:=FALSE,6131E6974801E51BDBFAD7B2AC63C39F:=FALSE,4BA20AD64CA697910DF70AA25AAC6A2B:=FALSE,4B4843364174F44A102CB2B9AB40879D:=FALSE,10045F4A4BA5DEAFB8E3949B7A69D2C5:=FALSE,74586366458A8F6061721C80FDBCA4CC:=FALSE,FB3BB2A943ED09BE3B2CB1B230AFD03F:=551097991168,7AD37E0A4AEA08EF9769F68F31034DA0:=551097991168,794F018F432AD6B45C4CB5849B9A91E9:=0,A11569334ECE874F5251E29802CD0148:=0,80C5D9784228A865D7A0A79323F2CB93:=0,9DE1B06140E31B059DEF93B73D02F98E:=0,14D05D0241C36FC6B10D3F8F242F7620:=0,60FE9D40454E55844945E0BA1C003E73:=(30F694B64C99174A04374C8016FC8BF2:=TRUE,7D9B610443B54043879AD88B0497E088:=TRUE,9DD8E566491F0CEA7EA95B860999C845:=FALSE,62565B114B8898782647C69804C74D57:=FALSE,E9EBC28A4D3E249DD5F285BD59EF3D15:=FALSE),E48B9E8F482F96CFFD42578B46360781:=FALSE,17283C434A0594CA88E4F78313CB2B26:=FALSE,A71FBDD445173C76F46435AEC27EB844:=FALSE,2997011349F25F3469B723A9DCFC8F1E:=FALSE,0FDC12F34C16F08C5C2C1D9A12AC4778:=FALSE,05CF7DA2440A1011926D0DBDFD5A655C:=0,D069F50C43CBF51B3BA9A9AB65FF99FA:=FALSE,23D0818F49BCFACE0CB275AF1DB5C53E:=FALSE,7850959044E97EAACCA3F0B4FAE3168D:=FALSE,B4D9422A4C6239304AF12FB4E63E2860:=FALSE,0DC10F6C48022009CAD222A7F937796E:=(30F694B64C99174A04374C8016FC8BF2:=TRUE,7D9B610443B54043879AD88B0497E088:=TRUE,9DD8E566491F0CEA7EA95B860999C845:=FALSE,62565B114B8898782647C69804C74D57:=FALSE,E9EBC28A4D3E249DD5F285BD59EF3D15:=FALSE),BA75DA7E4A0021231C50A3914DDEFBC9:=FALSE,388C7F394B8C009926165B9FDE1A060D:=FALSE,F44E77404F696F1486ACDDB6556244D3:=FALSE,BE53AF204B6F1725EF2D7C8D7B9CA655:=FALSE,6BFF84884160ADC242CCB4B30210404B:=FALSE,70C5B94E46172AC0222DA0A126A41A98:=FALSE,76BE5E6249977067160C4AB631CF9F3D:=FALSE,04706D6A40D43CC803AE94B75C331F10:=FALSE,ABD00A0B4987A0032DE3789A5E9B310A:=FALSE,EAE121334701047D80BBD386D103EA75:=FALSE),6A0143E143992E5CFE9C8D87C530C2E0:=(30F694B64C99174A04374C8016FC8BF2:=FALSE,7D9B610443B54043879AD88B0497E088:=FALSE,EF51F0ED46C35A19B5539A8715A3347C:=768,29E726794373CF4E11356598B18EF6AD:=(1A995F0248657661B1308380D9F4D87D:=FALSE,A4A187F345D46BFF7F1E74BAAC0A68DC:=FALSE,03F97D98411E9EC39A7712A9B4B20B06:=FALSE,759A0B224B61D47A8578AF8414C56F3D:=FALSE,201C2A324E5B70F4DA1F5B8E2010211F:=FALSE,11C1E90E4B60E9E2AC0164A8CD7688E7:=FALSE,5FE7AEEB43842E1B420E3A929065CF97:=FALSE,19D882B74B65A1AD618E1B9A1FECEACA:=FALSE,6C02D4CE41FBAD9DDDBCCF8126F850C9:=FALSE,0AFBD4A64FF8C309BDF4D9BBAF1A6E4E:=FALSE,DFD4ADAC4C179329158E9795D2A10464:=FALSE,5D54B84B4523F31E7E76568A084EC298:=FALSE,A76745A6499C76A5134D26BA24F6B0FF:=FALSE,A9587CB84DC3816F748222A872962DEE:=FALSE,EE772F3C427FF0AA1E5E2293A92221E0:=FALSE,BE4222254E1390B490FEE4B1046551C5:=FALSE,CC3B16024550DB62F0467489E47AE2AE:=FALSE,4BBED86E4627364227EE5FACC94EB2C0:=FALSE,E0E79D9F4E8E2BDD77AF57B3E4827898:=FALSE,8BD39D29468096AD67F9498E5368625F:=FALSE,55901A9549CB558C6C22C0950F7C98C1:=FALSE,9017A0A34F59481F7870ABA8E8504720:=FALSE,AE73561A43F8F72268B77AB5E6E1AD73:=FALSE,606C52A44EEFE033EE4698B7EB4FB9D4:=FALSE,28F8E9B34EA757B64F9D6C8C7608F482:=FALSE,9CFA42B24C1EEAB80BFF6CB966F8718E:=FALSE,11B902DC4884FB92CCAEEDAA6BEFCBFA:=FALSE),EE3E042949C51E7A88E6A8B25E821D23:=(6229B077495784FAB3EE3295B5601A0A:=0,ACA4AE4945A4760D28D3DE9D5B4EA287:=2.97168991958503e+033,D7C890B04F1AE8A98407349D37A518D0:=2.97168991958503e+033,C120369A4BFBEAA17500A987B17AB6A3:=2.97168991958503e+033,39B0602F4EB686D9D858FCBDCD60F083:=2.97168991958503e+033,D592329E412260554295BD93844821CE:=2.97168991958503e+033),4694EB2041F75C169D00479567F85953:=7.56753186934397e-038,AB6CBF60413EE9FBCA070F9BC6D967CC:=FALSE,646953534397FA1651020DA92D145E87:=7.56753186934397e-038,91B140C24000CA578A05F397F8A6F2AD:=FALSE,451D044844368326683F849443B31715:=FALSE,C29D95404959B8C01A4CDEA8835A90F9:=FALSE,477C2C234ADD97742A8B1482AD5AD9AE:=FALSE,C97F3DFB4D84CFC009506B8BA06A1F3E:=FALSE,2B94DF784C0C6AF1E27A7281570F6944:=FALSE,B74699AF49DF78BD9C253381F5115E9A:=FALSE,FA64A08A4BA1A11006800581A38EC9F3:=FALSE,379CF20C4829D5096D819196DEAE4B1F:=FALSE,4B06BB3B42A3517F624A3CB57F0CE589:=FALSE,10222E13467CF6B6A2B9A280F3C8B874:=FALSE,0CA2524642CDE7794576E1BBC97029FC:=FALSE,4F82FF4441F48A7923C7CE9F52A0979F:=FALSE,40EB4D4E4C194BEFF4FD248753AF7250:=FALSE,C9C8D6CB43C53C6C2D9EFEA1EA4D2FC1:=FALSE,3F551FAD48A665F167C8E0A7160F939A:=FALSE,81BE8B5144AFF09BB7E0B7A4251CCDF9:=FALSE,E16C82F549D80A0E7C8684904250821E:=FALSE,4FD86A9B43F300AD9DB81D903B470D57:=TRUE,0D2D1D8C4BEFA8A237A787B0D3E2794F:=TRUE,9C4987BD4B26237647DE7E972A3A3C7A:=FALSE,6131E6974801E51BDBFAD7B2AC63C39F:=FALSE,4BA20AD64CA697910DF70AA25AAC6A2B:=FALSE,4B4843364174F44A102CB2B9AB40879D:=FALSE,10045F4A4BA5DEAFB8E3949B7A69D2C5:=FALSE,74586366458A8F6061721C80FDBCA4CC:=FALSE,FB3BB2A943ED09BE3B2CB1B230AFD03F:=551097991168,7AD37E0A4AEA08EF9769F68F31034DA0:=551097991168,794F018F432AD6B45C4CB5849B9A91E9:=0,A11569334ECE874F5251E29802CD0148:=0,80C5D9784228A865D7A0A79323F2CB93:=0,9DE1B06140E31B059DEF93B73D02F98E:=0,14D05D0241C36FC6B10D3F8F242F7620:=0,60FE9D40454E55844945E0BA1C003E73:=(30F694B64C99174A04374C8016FC8BF2:=TRUE,7D9B610443B54043879AD88B0497E088:=TRUE,9DD8E566491F0CEA7EA95B860999C845:=FALSE,62565B114B8898782647C69804C74D57:=FALSE,E9EBC28A4D3E249DD5F285BD59EF3D15:=FALSE),E48B9E8F482F96CFFD42578B46360781:=FALSE,17283C434A0594CA88E4F78313CB2B26:=FALSE,A71FBDD445173C76F46435AEC27EB844:=FALSE,2997011349F25F3469B723A9DCFC8F1E:=FALSE,0FDC12F34C16F08C5C2C1D9A12AC4778:=FALSE,05CF7DA2440A1011926D0DBDFD5A655C:=0,D069F50C43CBF51B3BA9A9AB65FF99FA:=FALSE,23D0818F49BCFACE0CB275AF1DB5C53E:=FALSE,7850959044E97EAACCA3F0B4FAE3168D:=FALSE,B4D9422A4C6239304AF12FB4E63E2860:=FALSE,0DC10F6C48022009CAD222A7F937796E:=(30F694B64C99174A04374C8016FC8BF2:=TRUE,7D9B610443B54043879AD88B0497E088:=TRUE,9DD8E566491F0CEA7EA95B860999C845:=FALSE,62565B114B8898782647C69804C74D57:=FALSE,E9EBC28A4D3E249DD5F285BD59EF3D15:=FALSE),BA75DA7E4A0021231C50A3914DDEFBC9:=FALSE,388C7F394B8C009926165B9FDE1A060D:=FALSE,F44E77404F696F1486ACDDB6556244D3:=FALSE,BE53AF204B6F1725EF2D7C8D7B9CA655:=FALSE,6BFF84884160ADC242CCB4B30210404B:=FALSE,70C5B94E46172AC0222DA0A126A41A98:=FALSE,76BE5E6249977067160C4AB631CF9F3D:=FALSE,04706D6A40D43CC803AE94B75C331F10:=FALSE,ABD00A0B4987A0032DE3789A5E9B310A:=FALSE,EAE121334701047D80BBD386D103EA75:=FALSE),3C2B976D46023E27B5421BA446DD4DA7:=(30F694B64C99174A04374C8016FC8BF2:=FALSE,7D9B610443B54043879AD88B0497E088:=FALSE,EF51F0ED46C35A19B5539A8715A3347C:=1792,29E726794373CF4E11356598B18EF6AD:=(1A995F0248657661B1308380D9F4D87D:=FALSE,A4A187F345D46BFF7F1E74BAAC0A68DC:=FALSE,03F97D98411E9EC39A7712A9B4B20B06:=FALSE,759A0B224B61D47A8578AF8414C56F3D:=FALSE,201C2A324E5B70F4DA1F5B8E2010211F:=FALSE,11C1E90E4B60E9E2AC0164A8CD7688E7:=FALSE,5FE7AEEB43842E1B420E3A929065CF97:=FALSE,19D882B74B65A1AD618E1B9A1FECEACA:=FALSE,6C02D4CE41FBAD9DDDBCCF8126F850C9:=FALSE,0AFBD4A64FF8C309BDF4D9BBAF1A6E4E:=FALSE,DFD4ADAC4C179329158E9795D2A10464:=FALSE,5D54B84B4523F31E7E76568A084EC298:=FALSE,A76745A6499C76A5134D26BA24F6B0FF:=FALSE,A9587CB84DC3816F748222A872962DEE:=FALSE,EE772F3C427FF0AA1E5E2293A92221E0:=FALSE,BE4222254E1390B490FEE4B1046551C5:=FALSE,CC3B16024550DB62F0467489E47AE2AE:=FALSE,4BBED86E4627364227EE5FACC94EB2C0:=FALSE,E0E79D9F4E8E2BDD77AF57B3E4827898:=FALSE,8BD39D29468096AD67F9498E5368625F:=FALSE,55901A9549CB558C6C22C0950F7C98C1:=FALSE,9017A0A34F59481F7870ABA8E8504720:=FALSE,AE73561A43F8F72268B77AB5E6E1AD73:=FALSE,606C52A44EEFE033EE4698B7EB4FB9D4:=FALSE,28F8E9B34EA757B64F9D6C8C7608F482:=FALSE,9CFA42B24C1EEAB80BFF6CB966F8718E:=FALSE,11B902DC4884FB92CCAEEDAA6BEFCBFA:=FALSE),EE3E042949C51E7A88E6A8B25E821D23:=(6229B077495784FAB3EE3295B5601A0A:=0,ACA4AE4945A4760D28D3DE9D5B4EA287:=0,D7C890B04F1AE8A98407349D37A518D0:=0,C120369A4BFBEAA17500A987B17AB6A3:=0,39B0602F4EB686D9D858FCBDCD60F083:=0,D592329E412260554295BD93844821CE:=0),4694EB2041F75C169D00479567F85953:=7.56753186934397e-038,AB6CBF60413EE9FBCA070F9BC6D967CC:=FALSE,646953534397FA1651020DA92D145E87:=7.56753186934397e-038,91B140C24000CA578A05F397F8A6F2AD:=FALSE,451D044844368326683F849443B31715:=FALSE,C29D95404959B8C01A4CDEA8835A90F9:=FALSE,477C2C234ADD97742A8B1482AD5AD9AE:=FALSE,C97F3DFB4D84CFC009506B8BA06A1F3E:=FALSE,2B94DF784C0C6AF1E27A7281570F6944:=FALSE,B74699AF49DF78BD9C253381F5115E9A:=FALSE,FA64A08A4BA1A11006800581A38EC9F3:=FALSE,379CF20C4829D5096D819196DEAE4B1F:=FALSE,4B06BB3B42A3517F624A3CB57F0CE589:=FALSE,10222E13467CF6B6A2B9A280F3C8B874:=FALSE,0CA2524642CDE7794576E1BBC97029FC:=FALSE,4F82FF4441F48A7923C7CE9F52A0979F:=FALSE,40EB4D4E4C194BEFF4FD248753AF7250:=FALSE,C9C8D6CB43C53C6C2D9EFEA1EA4D2FC1:=FALSE,3F551FAD48A665F167C8E0A7160F939A:=FALSE,81BE8B5144AFF09BB7E0B7A4251CCDF9:=FALSE,E16C82F549D80A0E7C8684904250821E:=FALSE,4FD86A9B43F300AD9DB81D903B470D57:=TRUE,0D2D1D8C4BEFA8A237A787B0D3E2794F:=TRUE,9C4987BD4B26237647DE7E972A3A3C7A:=FALSE,6131E6974801E51BDBFAD7B2AC63C39F:=FALSE,4BA20AD64CA697910DF70AA25AAC6A2B:=FALSE,4B4843364174F44A102CB2B9AB40879D:=FALSE,10045F4A4BA5DEAFB8E3949B7A69D2C5:=FALSE,74586366458A8F6061721C80FDBCA4CC:=FALSE,FB3BB2A943ED09BE3B2CB1B230AFD03F:=551097991168,7AD37E0A4AEA08EF9769F68F31034DA0:=551097991168,794F018F432AD6B45C4CB5849B9A91E9:=0,A11569334ECE874F5251E29802CD0148:=0,80C5D9784228A865D7A0A79323F2CB93:=0,9DE1B06140E31B059DEF93B73D02F98E:=0,14D05D0241C36FC6B10D3F8F242F7620:=0,60FE9D40454E55844945E0BA1C003E73:=(30F694B64C99174A04374C8016FC8BF2:=TRUE,7D9B610443B54043879AD88B0497E088:=TRUE,9DD8E566491F0CEA7EA95B860999C845:=FALSE,62565B114B8898782647C69804C74D57:=FALSE,E9EBC28A4D3E249DD5F285BD59EF3D15:=FALSE),E48B9E8F482F96CFFD42578B46360781:=FALSE,17283C434A0594CA88E4F78313CB2B26:=FALSE,A71FBDD445173C76F46435AEC27EB844:=FALSE,2997011349F25F3469B723A9DCFC8F1E:=FALSE,0FDC12F34C16F08C5C2C1D9A12AC4778:=FALSE,05CF7DA2440A1011926D0DBDFD5A655C:=0,D069F50C43CBF51B3BA9A9AB65FF99FA:=FALSE,23D0818F49BCFACE0CB275AF1DB5C53E:=FALSE,7850959044E97EAACCA3F0B4FAE3168D:=FALSE,B4D9422A4C6239304AF12FB4E63E2860:=FALSE,0DC10F6C48022009CAD222A7F937796E:=(30F694B64C99174A04374C8016FC8BF2:=TRUE,7D9B610443B54043879AD88B0497E088:=TRUE,9DD8E566491F0CEA7EA95B860999C845:=FALSE,62565B114B8898782647C69804C74D57:=FALSE,E9EBC28A4D3E249DD5F285BD59EF3D15:=FALSE),BA75DA7E4A0021231C50A3914DDEFBC9:=FALSE,388C7F394B8C009926165B9FDE1A060D:=FALSE,F44E77404F696F1486ACDDB6556244D3:=FALSE,BE53AF204B6F1725EF2D7C8D7B9CA655:=FALSE,6BFF84884160ADC242CCB4B30210404B:=FALSE,70C5B94E46172AC0222DA0A126A41A98:=FALSE,76BE5E6249977067160C4AB631CF9F3D:=FALSE,04706D6A40D43CC803AE94B75C331F10:=FALSE,ABD00A0B4987A0032DE3789A5E9B310A:=FALSE,EAE121334701047D80BBD386D103EA75:=FALSE),742D5FDC4CAE61F68099DD8A71CB70BB:=(30F694B64C99174A04374C8016FC8BF2:=FALSE,7D9B610443B54043879AD88B0497E088:=FALSE,EF51F0ED46C35A19B5539A8715A3347C:=512,29E726794373CF4E11356598B18EF6AD:=(1A995F0248657661B1308380D9F4D87D:=FALSE,A4A187F345D46BFF7F1E74BAAC0A68DC:=FALSE,03F97D98411E9EC39A7712A9B4B20B06:=FALSE,759A0B224B61D47A8578AF8414C56F3D:=FALSE,201C2A324E5B70F4DA1F5B8E2010211F:=FALSE,11C1E90E4B60E9E2AC0164A8CD7688E7:=FALSE,5FE7AEEB43842E1B420E3A929065CF97:=FALSE,19D882B74B65A1AD618E1B9A1FECEACA:=FALSE,6C02D4CE41FBAD9DDDBCCF8126F850C9:=FALSE,0AFBD4A64FF8C309BDF4D9BBAF1A6E4E:=FALSE,DFD4ADAC4C179329158E9795D2A10464:=FALSE,5D54B84B4523F31E7E76568A084EC298:=FALSE,A76745A6499C76A5134D26BA24F6B0FF:=FALSE,A9587CB84DC3816F748222A872962DEE:=FALSE,EE772F3C427FF0AA1E5E2293A92221E0:=FALSE,BE4222254E1390B490FEE4B1046551C5:=FALSE,CC3B16024550DB62F0467489E47AE2AE:=FALSE,4BBED86E4627364227EE5FACC94EB2C0:=FALSE,E0E79D9F4E8E2BDD77AF57B3E4827898:=FALSE,8BD39D29468096AD67F9498E5368625F:=FALSE,55901A9549CB558C6C22C0950F7C98C1:=FALSE,9017A0A34F59481F7870ABA8E8504720:=FALSE,AE73561A43F8F72268B77AB5E6E1AD73:=FALSE,606C52A44EEFE033EE4698B7EB4FB9D4:=FALSE,28F8E9B34EA757B64F9D6C8C7608F482:=FALSE,9CFA42B24C1EEAB80BFF6CB966F8718E:=FALSE,11B902DC4884FB92CCAEEDAA6BEFCBFA:=FALSE),EE3E042949C51E7A88E6A8B25E821D23:=(6229B077495784FAB3EE3295B5601A0A:=0,ACA4AE4945A4760D28D3DE9D5B4EA287:=0,D7C890B04F1AE8A98407349D37A518D0:=0,C120369A4BFBEAA17500A987B17AB6A3:=0,39B0602F4EB686D9D858FCBDCD60F083:=0,D592329E412260554295BD93844821CE:=0),4694EB2041F75C169D00479567F85953:=7.56753186934397e-038,AB6CBF60413EE9FBCA070F9BC6D967CC:=FALSE,646953534397FA1651020DA92D145E87:=7.56753186934397e-038,91B140C24000CA578A05F397F8A6F2AD:=FALSE,451D044844368326683F849443B31715:=FALSE,C29D95404959B8C01A4CDEA8835A90F9:=FALSE,477C2C234ADD97742A8B1482AD5AD9AE:=FALSE,C97F3DFB4D84CFC009506B8BA06A1F3E:=FALSE,2B94DF784C0C6AF1E27A7281570F6944:=FALSE,B74699AF49DF78BD9C253381F5115E9A:=FALSE,FA64A08A4BA1A11006800581A38EC9F3:=FALSE,379CF20C4829D5096D819196DEAE4B1F:=FALSE,4B06BB3B42A3517F624A3CB57F0CE589:=FALSE,10222E13467CF6B6A2B9A280F3C8B874:=FALSE,0CA2524642CDE7794576E1BBC97029FC:=FALSE,4F82FF4441F48A7923C7CE9F52A0979F:=FALSE,40EB4D4E4C194BEFF4FD248753AF7250:=FALSE,C9C8D6CB43C53C6C2D9EFEA1EA4D2FC1:=FALSE,3F551FAD48A665F167C8E0A7160F939A:=FALSE,81BE8B5144AFF09BB7E0B7A4251CCDF9:=FALSE,E16C82F549D80A0E7C8684904250821E:=FALSE,4FD86A9B43F300AD9DB81D903B470D57:=TRUE,0D2D1D8C4BEFA8A237A787B0D3E2794F:=TRUE,9C4987BD4B26237647DE7E972A3A3C7A:=FALSE,6131E6974801E51BDBFAD7B2AC63C39F:=FALSE,4BA20AD64CA697910DF70AA25AAC6A2B:=FALSE,4B4843364174F44A102CB2B9AB40879D:=FALSE,10045F4A4BA5DEAFB8E3949B7A69D2C5:=FALSE,74586366458A8F6061721C80FDBCA4CC:=FALSE,FB3BB2A943ED09BE3B2CB1B230AFD03F:=2.97168991958503e+033,7AD37E0A4AEA08EF9769F68F31034DA0:=2.97168991958503e+033,794F018F432AD6B45C4CB5849B9A91E9:=0,A11569334ECE874F5251E29802CD0148:=0,80C5D9784228A865D7A0A79323F2CB93:=0,9DE1B06140E31B059DEF93B73D02F98E:=0,14D05D0241C36FC6B10D3F8F242F7620:=0,60FE9D40454E55844945E0BA1C003E73:=(30F694B64C99174A04374C8016FC8BF2:=TRUE,7D9B610443B54043879AD88B0497E088:=TRUE,9DD8E566491F0CEA7EA95B860999C845:=FALSE,62565B114B8898782647C69804C74D57:=FALSE,E9EBC28A4D3E249DD5F285BD59EF3D15:=FALSE),E48B9E8F482F96CFFD42578B46360781:=FALSE,17283C434A0594CA88E4F78313CB2B26:=FALSE,A71FBDD445173C76F46435AEC27EB844:=FALSE,2997011349F25F3469B723A9DCFC8F1E:=FALSE,0FDC12F34C16F08C5C2C1D9A12AC4778:=FALSE,05CF7DA2440A1011926D0DBDFD5A655C:=0,D069F50C43CBF51B3BA9A9AB65FF99FA:=FALSE,23D0818F49BCFACE0CB275AF1DB5C53E:=FALSE,7850959044E97EAACCA3F0B4FAE3168D:=FALSE,B4D9422A4C6239304AF12FB4E63E2860:=FALSE,0DC10F6C48022009CAD222A7F937796E:=(30F694B64C99174A04374C8016FC8BF2:=TRUE,7D9B610443B54043879AD88B0497E088:=TRUE,9DD8E566491F0CEA7EA95B860999C845:=FALSE,62565B114B8898782647C69804C74D57:=FALSE,E9EBC28A4D3E249DD5F285BD59EF3D15:=FALSE),BA75DA7E4A0021231C50A3914DDEFBC9:=FALSE,388C7F394B8C009926165B9FDE1A060D:=FALSE,F44E77404F696F1486ACDDB6556244D3:=FALSE,BE53AF204B6F1725EF2D7C8D7B9CA655:=FALSE,6BFF84884160ADC242CCB4B30210404B:=FALSE,70C5B94E46172AC0222DA0A126A41A98:=FALSE,76BE5E6249977067160C4AB631CF9F3D:=FALSE,04706D6A40D43CC803AE94B75C331F10:=FALSE,ABD00A0B4987A0032DE3789A5E9B310A:=FALSE,EAE121334701047D80BBD386D103EA75:=FALSE),4CDB9DD5453C395F9FBA6EB4EF464A86:=(30F694B64C99174A04374C8016FC8BF2:=FALSE,7D9B610443B54043879AD88B0497E088:=FALSE,EF51F0ED46C35A19B5539A8715A3347C:=3840,29E726794373CF4E11356598B18EF6AD:=(1A995F0248657661B1308380D9F4D87D:=FALSE,A4A187F345D46BFF7F1E74BAAC0A68DC:=FALSE,03F97D98411E9EC39A7712A9B4B20B06:=FALSE,759A0B224B61D47A8578AF8414C56F3D:=FALSE,201C2A324E5B70F4DA1F5B8E2010211F:=FALSE,11C1E90E4B60E9E2AC0164A8CD7688E7:=FALSE,5FE7AEEB43842E1B420E3A929065CF97:=FALSE,19D882B74B65A1AD618E1B9A1FECEACA:=FALSE,6C02D4CE41FBAD9DDDBCCF8126F850C9:=FALSE,0AFBD4A64FF8C309BDF4D9BBAF1A6E4E:=FALSE,DFD4ADAC4C179329158E9795D2A10464:=FALSE,5D54B84B4523F31E7E76568A084EC298:=FALSE,A76745A6499C76A5134D26BA24F6B0FF:=FALSE,A9587CB84DC3816F748222A872962DEE:=FALSE,EE772F3C427FF0AA1E5E2293A92221E0:=FALSE,BE4222254E1390B490FEE4B1046551C5:=FALSE,CC3B16024550DB62F0467489E47AE2AE:=FALSE,4BBED86E4627364227EE5FACC94EB2C0:=FALSE,E0E79D9F4E8E2BDD77AF57B3E4827898:=FALSE,8BD39D29468096AD67F9498E5368625F:=FALSE,55901A9549CB558C6C22C0950F7C98C1:=FALSE,9017A0A34F59481F7870ABA8E8504720:=FALSE,AE73561A43F8F72268B77AB5E6E1AD73:=FALSE,606C52A44EEFE033EE4698B7EB4FB9D4:=FALSE,28F8E9B34EA757B64F9D6C8C7608F482:=FALSE,9CFA42B24C1EEAB80BFF6CB966F8718E:=FALSE,11B902DC4884FB92CCAEEDAA6BEFCBFA:=FALSE),EE3E042949C51E7A88E6A8B25E821D23:=(6229B077495784FAB3EE3295B5601A0A:=0,ACA4AE4945A4760D28D3DE9D5B4EA287:=0,D7C890B04F1AE8A98407349D37A518D0:=0,C120369A4BFBEAA17500A987B17AB6A3:=0,39B0602F4EB686D9D858FCBDCD60F083:=0,D592329E412260554295BD93844821CE:=0),4694EB2041F75C169D00479567F85953:=7.56753186934397e-038,AB6CBF60413EE9FBCA070F9BC6D967CC:=FALSE,646953534397FA1651020DA92D145E87:=7.56753186934397e-038,91B140C24000CA578A05F397F8A6F2AD:=FALSE,451D044844368326683F849443B31715:=FALSE,C29D95404959B8C01A4CDEA8835A90F9:=FALSE,477C2C234ADD97742A8B1482AD5AD9AE:=FALSE,C97F3DFB4D84CFC009506B8BA06A1F3E:=FALSE,2B94DF784C0C6AF1E27A7281570F6944:=FALSE,B74699AF49DF78BD9C253381F5115E9A:=FALSE,FA64A08A4BA1A11006800581A38EC9F3:=FALSE,379CF20C4829D5096D819196DEAE4B1F:=FALSE,4B06BB3B42A3517F624A3CB57F0CE589:=FALSE,10222E13467CF6B6A2B9A280F3C8B874:=FALSE,0CA2524642CDE7794576E1BBC97029FC:=FALSE,4F82FF4441F48A7923C7CE9F52A0979F:=FALSE,40EB4D4E4C194BEFF4FD248753AF7250:=FALSE,C9C8D6CB43C53C6C2D9EFEA1EA4D2FC1:=FALSE,3F551FAD48A665F167C8E0A7160F939A:=FALSE,81BE8B5144AFF09BB7E0B7A4251CCDF9:=FALSE,E16C82F549D80A0E7C8684904250821E:=FALSE,4FD86A9B43F300AD9DB81D903B470D57:=TRUE,0D2D1D8C4BEFA8A237A787B0D3E2794F:=TRUE,9C4987BD4B26237647DE7E972A3A3C7A:=FALSE,6131E6974801E51BDBFAD7B2AC63C39F:=FALSE,4BA20AD64CA697910DF70AA25AAC6A2B:=FALSE,4B4843364174F44A102CB2B9AB40879D:=FALSE,10045F4A4BA5DEAFB8E3949B7A69D2C5:=FALSE,74586366458A8F6061721C80FDBCA4CC:=FALSE,FB3BB2A943ED09BE3B2CB1B230AFD03F:=551097991168,7AD37E0A4AEA08EF9769F68F31034DA0:=551097991168,794F018F432AD6B45C4CB5849B9A91E9:=0,A11569334ECE874F5251E29802CD0148:=0,80C5D9784228A865D7A0A79323F2CB93:=0,9DE1B06140E31B059DEF93B73D02F98E:=0,14D05D0241C36FC6B10D3F8F242F7620:=0,60FE9D40454E55844945E0BA1C003E73:=(30F694B64C99174A04374C8016FC8BF2:=TRUE,7D9B610443B54043879AD88B0497E088:=TRUE,9DD8E566491F0CEA7EA95B860999C845:=FALSE,62565B114B8898782647C69804C74D57:=FALSE,E9EBC28A4D3E249DD5F285BD59EF3D15:=FALSE),E48B9E8F482F96CFFD42578B46360781:=FALSE,17283C434A0594CA88E4F78313CB2B26:=FALSE,A71FBDD445173C76F46435AEC27EB844:=FALSE,2997011349F25F3469B723A9DCFC8F1E:=FALSE,0FDC12F34C16F08C5C2C1D9A12AC4778:=FALSE,05CF7DA2440A1011926D0DBDFD5A655C:=0,D069F50C43CBF51B3BA9A9AB65FF99FA:=FALSE,23D0818F49BCFACE0CB275AF1DB5C53E:=FALSE,7850959044E97EAACCA3F0B4FAE3168D:=FALSE,B4D9422A4C6239304AF12FB4E63E2860:=FALSE,0DC10F6C48022009CAD222A7F937796E:=(30F694B64C99174A04374C8016FC8BF2:=TRUE,7D9B610443B54043879AD88B0497E088:=TRUE,9DD8E566491F0CEA7EA95B860999C845:=FALSE,62565B114B8898782647C69804C74D57:=FALSE,E9EBC28A4D3E249DD5F285BD59EF3D15:=FALSE),BA75DA7E4A0021231C50A3914DDEFBC9:=FALSE,388C7F394B8C009926165B9FDE1A060D:=FALSE,F44E77404F696F1486ACDDB6556244D3:=FALSE,BE53AF204B6F1725EF2D7C8D7B9CA655:=FALSE,6BFF84884160ADC242CCB4B30210404B:=FALSE,70C5B94E46172AC0222DA0A126A41A98:=FALSE,76BE5E6249977067160C4AB631CF9F3D:=FALSE,04706D6A40D43CC803AE94B75C331F10:=FALSE,ABD00A0B4987A0032DE3789A5E9B310A:=FALSE,EAE121334701047D80BBD386D103EA75:=FALSE),E008C21F4C0690A7BA7841992D14CC53:=(30F694B64C99174A04374C8016FC8BF2:=FALSE,7D9B610443B54043879AD88B0497E088:=FALSE,EF51F0ED46C35A19B5539A8715A3347C:=512,29E726794373CF4E11356598B18EF6AD:=(1A995F0248657661B1308380D9F4D87D:=FALSE,A4A187F345D46BFF7F1E74BAAC0A68DC:=FALSE,03F97D98411E9EC39A7712A9B4B20B06:=FALSE,759A0B224B61D47A8578AF8414C56F3D:=FALSE,201C2A324E5B70F4DA1F5B8E2010211F:=FALSE,11C1E90E4B60E9E2AC0164A8CD7688E7:=FALSE,5FE7AEEB43842E1B420E3A929065CF97:=FALSE,19D882B74B65A1AD618E1B9A1FECEACA:=FALSE,6C02D4CE41FBAD9DDDBCCF8126F850C9:=FALSE,0AFBD4A64FF8C309BDF4D9BBAF1A6E4E:=FALSE,DFD4ADAC4C179329158E9795D2A10464:=FALSE,5D54B84B4523F31E7E76568A084EC298:=FALSE,A76745A6499C76A5134D26BA24F6B0FF:=FALSE,A9587CB84DC3816F748222A872962DEE:=FALSE,EE772F3C427FF0AA1E5E2293A92221E0:=FALSE,BE4222254E1390B490FEE4B1046551C5:=FALSE,CC3B16024550DB62F0467489E47AE2AE:=FALSE,4BBED86E4627364227EE5FACC94EB2C0:=FALSE,E0E79D9F4E8E2BDD77AF57B3E4827898:=FALSE,8BD39D29468096AD67F9498E5368625F:=FALSE,55901A9549CB558C6C22C0950F7C98C1:=FALSE,9017A0A34F59481F7870ABA8E8504720:=FALSE,AE73561A43F8F72268B77AB5E6E1AD73:=FALSE,606C52A44EEFE033EE4698B7EB4FB9D4:=FALSE,28F8E9B34EA757B64F9D6C8C7608F482:=FALSE,9CFA42B24C1EEAB80BFF6CB966F8718E:=FALSE,11B902DC4884FB92CCAEEDAA6BEFCBFA:=FALSE),EE3E042949C51E7A88E6A8B25E821D23:=(6229B077495784FAB3EE3295B5601A0A:=0,ACA4AE4945A4760D28D3DE9D5B4EA287:=0,D7C890B04F1AE8A98407349D37A518D0:=0,C120369A4BFBEAA17500A987B17AB6A3:=0,39B0602F4EB686D9D858FCBDCD60F083:=0,D592329E412260554295BD93844821CE:=0),4694EB2041F75C169D00479567F85953:=7.56753186934397e-038,AB6CBF60413EE9FBCA070F9BC6D967CC:=FALSE,646953534397FA1651020DA92D145E87:=7.56753186934397e-038,91B140C24000CA578A05F397F8A6F2AD:=FALSE,451D044844368326683F849443B31715:=FALSE,C29D95404959B8C01A4CDEA8835A90F9:=FALSE,477C2C234ADD97742A8B1482AD5AD9AE:=FALSE,C97F3DFB4D84CFC009506B8BA06A1F3E:=FALSE,2B94DF784C0C6AF1E27A7281570F6944:=FALSE,B74699AF49DF78BD9C253381F5115E9A:=FALSE,FA64A08A4BA1A11006800581A38EC9F3:=FALSE,379CF20C4829D5096D819196DEAE4B1F:=FALSE,4B06BB3B42A3517F624A3CB57F0CE589:=FALSE,10222E13467CF6B6A2B9A280F3C8B874:=FALSE,0CA2524642CDE7794576E1BBC97029FC:=FALSE,4F82FF4441F48A7923C7CE9F52A0979F:=FALSE,40EB4D4E4C194BEFF4FD248753AF7250:=FALSE,C9C8D6CB43C53C6C2D9EFEA1EA4D2FC1:=FALSE,3F551FAD48A665F167C8E0A7160F939A:=FALSE,81BE8B5144AFF09BB7E0B7A4251CCDF9:=FALSE,E16C82F549D80A0E7C8684904250821E:=FALSE,4FD86A9B43F300AD9DB81D903B470D57:=TRUE,0D2D1D8C4BEFA8A237A787B0D3E2794F:=TRUE,9C4987BD4B26237647DE7E972A3A3C7A:=FALSE,6131E6974801E51BDBFAD7B2AC63C39F:=FALSE,4BA20AD64CA697910DF70AA25AAC6A2B:=FALSE,4B4843364174F44A102CB2B9AB40879D:=FALSE,10045F4A4BA5DEAFB8E3949B7A69D2C5:=FALSE,74586366458A8F6061721C80FDBCA4CC:=FALSE,FB3BB2A943ED09BE3B2CB1B230AFD03F:=551097991168,7AD37E0A4AEA08EF9769F68F31034DA0:=551097991168,794F018F432AD6B45C4CB5849B9A91E9:=0,A11569334ECE874F5251E29802CD0148:=0,80C5D9784228A865D7A0A79323F2CB93:=0,9DE1B06140E31B059DEF93B73D02F98E:=0,14D05D0241C36FC6B10D3F8F242F7620:=0,60FE9D40454E55844945E0BA1C003E73:=(30F694B64C99174A04374C8016FC8BF2:=TRUE,7D9B610443B54043879AD88B0497E088:=TRUE,9DD8E566491F0CEA7EA95B860999C845:=FALSE,62565B114B8898782647C69804C74D57:=FALSE,E9EBC28A4D3E249DD5F285BD59EF3D15:=FALSE),E48B9E8F482F96CFFD42578B46360781:=FALSE,17283C434A0594CA88E4F78313CB2B26:=FALSE,A71FBDD445173C76F46435AEC27EB844:=FALSE,2997011349F25F3469B723A9DCFC8F1E:=FALSE,0FDC12F34C16F08C5C2C1D9A12AC4778:=FALSE,05CF7DA2440A1011926D0DBDFD5A655C:=0,D069F50C43CBF51B3BA9A9AB65FF99FA:=FALSE,23D0818F49BCFACE0CB275AF1DB5C53E:=FALSE,7850959044E97EAACCA3F0B4FAE3168D:=FALSE,B4D9422A4C6239304AF12FB4E63E2860:=FALSE,0DC10F6C48022009CAD222A7F937796E:=(30F694B64C99174A04374C8016FC8BF2:=TRUE,7D9B610443B54043879AD88B0497E088:=TRUE,9DD8E566491F0CEA7EA95B860999C845:=FALSE,62565B114B8898782647C69804C74D57:=FALSE,E9EBC28A4D3E249DD5F285BD59EF3D15:=FALSE),BA75DA7E4A0021231C50A3914DDEFBC9:=FALSE,388C7F394B8C009926165B9FDE1A060D:=FALSE,F44E77404F696F1486ACDDB6556244D3:=FALSE,BE53AF204B6F1725EF2D7C8D7B9CA655:=FALSE,6BFF84884160ADC242CCB4B30210404B:=FALSE,70C5B94E46172AC0222DA0A126A41A98:=FALSE,76BE5E6249977067160C4AB631CF9F3D:=FALSE,04706D6A40D43CC803AE94B75C331F10:=FALSE,ABD00A0B4987A0032DE3789A5E9B310A:=FALSE,EAE121334701047D80BBD386D103EA75:=FALSE))" Usage="internal" />
        <Variable UUID="G3JYBF3AXYKUJBPTXOTJOPBOSA" Name="Imit" Type="FB_Imit" TypeUUID="6FYJFI56GMYUTBC5ILWW7D63N4" Usage="internal" />
        <Variable UUID="J4BXL6MPIJFUJH522QEABGDVGU" Name="Logic" Type="FB_Logic" TypeUUID="OY4VRGEYRUEEVLGDJX4GYJGV7U" Usage="internal" />
        <Variable UUID="N4HYKPCONO2ULFHSHGSKNAHASI" Name="tmpBTN_ArchUser" Type="BOOL" Usage="internal" />
        <Variable UUID="Y456HMPZC2VUZK5XO4236DDQEM" Name="proc_NMS_BVKS_drv" Type="FB_BVKS_drv" TypeUUID="ZXET7WSMSAUUXILUSQOITHLNBQ" Usage="internal" />
    </Variables>
    <ST><![CDATA[//Определение длительности цикла
//cycle_time:
tim.tmpREALtime := CLOCK();
tim.cycle := LREAL_TO_REAL(tim.tmpREALtime - tim.tmpREALtime_prev);
tim.tmpREALtime_prev := tim.tmpREALtime;
//================================== Имитаторы ===================================
if ImitOn then Imit(); end_if;
//================================== ввод ==================================
//Обработка
NMS_AI_CallAll();
ANB_CallAll();
NMS_DI_CallAll();
//=== Драйверы смежных подсистем ===
//= БВКС - блочная воздушная компрессорная станция
proc_NMS_BVKS_drv();
//================================== АПС ==================================
APS_Init();
APS_CallAll(NMS_BTN.Deblock);
//================================== Регуляторы ==================================
//Инициализация
//Обработка
//================================== Логика =====================================
Logic();
//================================== ППУ ==================================
//Инициализация
//Обработка
//================================== Граф режимов ==================================
Mode_CallAll();
//================================== Барабаны ==================================
//DRM_CallAll();
//================================== Алгоритм ==================================
Alg_NMS();
//================================== ИМ ==================================
//Резервированные
//Обычные
IM_Call();
//================================== Тренды ==================================
Trends(); // передача данных в тренды
//= запись архивов
NMS_SS.ArchStop := NMS_Mode.AONMS;//= Архив останова
//= включение/выключение Пользовательского архива
tmpBTN_ArchUser := NMS_BTN.ArchUser;
NMS_BTN.ArchUser := FALSE;
if tmpBTN_ArchUser then
  if NMS_SS.ArchUser Then
    NMS_SS.ArchUser := FALSE;
  else
    NMS_SS.ArchUser := TRUE;
  end_if;
end_if;
//================================== Обмен по интерфейсам ==================================
//================================== вывод ==================================
NMS_DO_CallAll();

//меандр
Pulse(true, T#1s, NMS_SS.CPU_HeartBit);
init:= true;//=]]></ST>
    <DataTypes>
        <Struct UUID="VZ3H6GEVT3CUTI65HAA5AALRAY" Name="T_AI_FromHMI" Comment="команды из ЧМИ">
            <Field UUID="SCKERE4PHRDEBGWST4LC2RTTSE" Name="manualTarget" Comment="Задание из ЧМИ" Type="REAL" />
            <Field UUID="P47TXVXBU2GUBJ5JZEXSX4KSJ4" Name="BTNmanualOn" Comment="Кнопка вкл. задания значения из ЧМИ" Type="BOOL" />
            <Field UUID="GZSU6SS7CYNUPOLP767OZHJUK4" Name="BTNrepairOn" Comment="Кнопка вкл. ремонта" Type="BOOL" />
            <Field UUID="DI7XBJR5XPIE7L7MXPXMVNN3JI" Name="BTNworkOn" Comment="Кнопка перекл. в работу" Type="BOOL" />
            <Field UUID="R7L6QVFARZUU3FCBO456DXWXDQ" Name="BTNrepairProlong" Comment="Кнопка продления ремонта" Type="BOOL" />
        </Struct>
        <Struct UUID="GZ6UU5D6R5EXXPFY4TZ3EOTECU" Name="T_AI_Internal" Comment="Настройки канала">
            <Field UUID="URGJ7HGIJFACLBUMROBSRYNGTY" Name="qCycleROC" Comment="Количество циклов для контроля РОК" Type="INT" />
            <Field UUID="Z7HE4D7FEJA6XEO3ZT5EA5LEYI" Name="summCycleROC" Comment="сумма значений для РОК" Type="REAL" />
            <Field UUID="RW4U6LB23JHNFML2N4BQA7MLUE" Name="prevMeasure" Comment="Значение на предыдущем цикле" Type="REAL" />
            <Field UUID="QZTLVLZCD5A2FNOJWEQSSKV6WQ" Name="validMeasure" Comment="Последнее валидное измерение" Type="REAL" />
            <Field UUID="OTAS6CSOKJEYPNL7XMDFHUW3H4" Name="prevFault" Comment="наличие неисправности на предыдущем цикле " Type="BOOL" />
            <Field UUID="XWXRWWREWFAVBI2RI4EGZVP3HQ" Name="timerRecover" Comment="Таймер восстановления канала в работу после неисправности" Type="REAL" />
            <Field UUID="KKF6R5ONEBFP3DN2NJV3RM2STQ" Name="timerRepair" Comment="Таймер ремонта реальный" Type="REAL" />
        </Struct>
        <Struct UUID="XHUY6ZRHGRQEVOF35XEJI5L2SE" Name="T_AI_Settings" Comment="Настройки канала">
            <Field UUID="3KRWP62AKYDUFINJHEYQWHS2UU" Name="min" Comment="минимум шкалы канала, ед.изм. Не может быть &gt;= max" Type="REAL" />
            <Field UUID="RHO37XVNDVTUPEFTMJHSLHKUNY" Name="max" Comment="максимум шкалы канала, ед.изм. Не может быть &lt;= min" Type="REAL" />
            <Field UUID="RT6HE3WIDNSU7NDWHC2ZBOTRCI" Name="hiLim" Comment="уровень зашкала вверх, ед.изм. Не может быть &lt;= loLim и &gt; max" Type="REAL" />
            <Field UUID="NONAD4XZLCAUFCYSSF3ZG5Y2RM" Name="loLim" Comment="уровень зашкала вниз, ед.изм. Не может быть &gt;= hiLim и &lt; min" Type="REAL" />
            <Field UUID="IUL5HZOYX5CRDAD2EFAJYKUZ5Y" Name="hiBrk" Comment="уровень обрыва вверх, ед.изм. Не может быть &lt;= hiLim" Type="REAL" />
            <Field UUID="MYIPHEQSBJAADA2AH7XXTJLX64" Name="loBrk" Comment="уровень зашкала вниз, ед.изм. Не может быть &gt;= loLim" Type="REAL" />
            <Field UUID="35MUITRQHY5EPKM27DJOZ4D6SQ" Name="minADC" Comment="значение АЦП, соответствующее минимуму шкалы канала, б.р." Type="REAL" />
            <Field UUID="DW4YTEEV6RPEFHVBRONZ7WJRDI" Name="maxADC" Comment="значение АЦП, соотв. макс. шкалы, б.р. Не может быть равно minADC" Type="REAL" />
            <Field UUID="WIQAREZUYVCIVMICFARE4YILCI" Name="corrADC" Comment="корректировка минимуму АЦП" Type="REAL" />
            <Field UUID="YT5OLJPK5IAU7MM5REJ76FO7HM" Name="maxROC" Comment="макс. допустимая скорость роста, ед.изм./сек. Если «0» - скорость роста не анализируется" Type="REAL" />
            <Field UUID="Y52LQTQH7KVEPHEO2JGKSNLEYQ" Name="recoveryTime" Comment="время восстановления после неисправности, сек. Не может быть меньше &quot;0&quot;" Type="REAL" />
            <Field UUID="MX7EBZEDTNJUXGLTSFW2KWSO7U" Name="repairTime" Comment="максимальное время в ремонте, сек. Не может быть меньше или равно «0»" Type="INT" />
            <Field UUID="65QNI3SAURVUXMDDIVWNLWTPRA" Name="tau" Comment="тау фильтра, сек. Если «0» - фильтрация отсутствует" Type="REAL" />
            <Field UUID="CZKTSP7UMKMUHNAN43U4PZ3TDA" Name="id" Comment="номер по порядку" Type="INT" />
        </Struct>
        <Struct UUID="J74RQIZG5I6EZDCM32A6SZRKIM" Name="T_AI_ToHMI" Comment="устанавливаются программой обработки канала">
            <Field UUID="QJ6PEGLAUPLUFEIFAGBJIT6PW4" Name="PV" Comment="значение для САУ. Рассчитывается из  measure, Manual_Target с учётом неисправностей и фильтрации" Type="REAL" />
            <Field UUID="WBZOXI5CNLLEXLWHLINZ2KMYF4" Name="measure" Comment="Пересчёт кода АЦП в инженерные единицы" Type="REAL" />
            <Field UUID="6ZWUCOB6MR2ENPVJU6GJK7ZWXI" Name="CurrentTimeOfRepair" Comment="оставшееся время ремонта" Type="INT" />
            <Field UUID="GJY3VEM5KRNE5LIEPIA5A6MP5I" Name="fault_common" Comment="обобщённая неисправность. Образуется по «ИЛИ» от break,up_scale,down_scale,ROC,settingErr" Type="BOOL" />
            <Field UUID="3BIE4PEO6GDEZOARVMTGWNRJF4" Name="break" Comment="обрыв канала" Type="BOOL" />
            <Field UUID="JCRW2DPM2TFEDNS2CN4EMDRYHU" Name="up_scale" Comment="выход за верхний зашкал" Type="BOOL" />
            <Field UUID="4KBYMW34KEZE5ECIADCEQTZ6OA" Name="down_scale" Comment="выход за нижний зашкал" Type="BOOL" />
            <Field UUID="CKL3UGPLCBNUJBWI6XLA2VGNRQ" Name="ROC" Comment="превышение скорости изменения вверх или вниз" Type="BOOL" />
            <Field UUID="267MAGDT2FWEXMF4G7MQVHR24E" Name="settingErr" Comment="ошибка задания настроек – несоответствие допустимым значениям" Type="BOOL" />
            <Field UUID="S2TVATEJGHLUFBOP4OOPDLYPRA" Name="manual" Comment="канал в дист.упр." Type="BOOL" />
            <Field UUID="RBLIJTEXCENEXF4ULLUV3Q7PRU" Name="repair" Comment="канал в ремонте" Type="BOOL" />
            <Field UUID="TG5OXUO2FTCU5GZL2PWACX4G7E" Name="repair_time_less_10_percent" Comment="до конца ремонта осталось меньше 10% от заданного времени" Type="BOOL" />
            <Field UUID="YSARYMFTNDSE5LGQ3JNIXZZXTA" Name="as" Comment="отображать красным. Выставляется при выходе канала за аварийную уставку." Type="BOOL" />
            <Field UUID="UMPPDYIYCIUUFF73JAE2OWAUZM" Name="os" Comment="отображать фиолетовым. Выставляется при выходе канала за ограничительную уставку." Type="BOOL" />
            <Field UUID="I74VSDZAHPDUBF3C5UMMHZZF7M" Name="ps" Comment="отображать жёлтым. Выставляется при выходе канала за предупредительную уставку." Type="BOOL" />
            <Field UUID="RFUGWRJCW2IETLDPVQDEZRSKSE" Name="criticalFault" Comment="Критическая ошибка обработки" Type="BOOL" />
            <Field UUID="NAC3XDBC7TKE5COYOS7EGC37CY" Name="hint" Type="STRING" />
        </Struct>
        <Struct UUID="ANRR6BLMKETURJI5AWVQRMBAWA" Name="T_AM_Type" Comment="Типы ИМ">
            <Field UUID="R5GH244D3G6E5DEQ2KVL3QUOPI" Name="am1x0" Comment="1 команда, 0 конечников" Type="INT" />
            <Field UUID="EJFBQPJBB3XULMGIE7YE5QDS5Y" Name="am2x2fh" Comment="2 команды, 2 конечника (открытие, удержание)" Type="INT" />
            <Field UUID="PEAWQ344DBNUBPNVEK6VIDXUMQ" Name="am1x1" Comment="1 команда, 1 конечник" Type="INT" />
            <Field UUID="YXE6GIVXD3UUNKU3HRZPTTZBOE" Name="am1x2" Comment="1 команда, 2 конечника" Type="INT" />
            <Field UUID="MFOXKBTRKOKU3IUXG27BRR6PJU" Name="am2x1" Comment="2 команды, 1 конечник" Type="INT" />
            <Field UUID="CDSXEEZ5QJVETJCNSILRMROO5Q" Name="am2x2" Comment="2 команды, 2 конечника" Type="INT" />
            <Field UUID="XF7TYKMMVOAEXDRIKZ7ZD4YPTI" Name="am1ofx1of" Comment="1 команда OF, 1 конечник OF" Type="INT" />
            <Field UUID="QCC7QFFLWAIUFCBCEJXJDPMERY" Name="am1ofx2" Comment="1 команда OF, 2 конечника" Type="INT" />
            <Field UUID="4UM4UUEK6RMUPM6VL5ID7Q7ROY" Name="am1x1of" Comment="1 команда , 1 конечник OF" Type="INT" />
            <Field UUID="Y4PYZ4D5FQJUJN7SZNZX54JCW4" Name="amPos" Comment="Прочие с положением (АПК, ТРК...)" Type="INT" />
            <Field UUID="KBA3PS23ZYPEHHLFPRWZ6K2HSU" Name="am3x2" Comment="3 команды (on, off, stop), 2 конечника" Type="INT" />
            <Field UUID="ZMCVOELEKJSEHDWZMR7RVCXAQQ" Name="am2x2x3ware" Comment="2 команды, 2 конечника, трёхпроводная схема" Type="INT" />
            <Field UUID="5XGMK4PV7ZFK5OVFGH6GCCODQU" Name="am1x4nku" Comment="1 команда, 4 сигнала от НКУ" Type="INT" />
            <Field UUID="3ETYUGWR4FDSTEGO7ONOD7ACZA" Name="am2x7upp" Comment="2 команды (БП и УПП) и 7 сигналов от НКУ" Type="INT" />
            <Field UUID="ROV7ATBVJFGPPIFIL3A5A73ZOQ" Name="am2x8nku" Comment="2 команды и 8 сигналов от НКУ" Type="INT" />
        </Struct>
        <Struct UUID="I7SVZ4ZR3CPE7BHJZXJTI4JZXI" Name="T_ANB_Settings" Comment="Настройки уставки">
            <Field UUID="UXSEBOXIDKYENBCFLBBAZN2RZA" Name="setForFault" Comment="значение, записываемое в ANB при неисправности канала: 0 - FALSE, 1 - TRUE, 2 - оставить то что было" Type="INT" />
            <Field UUID="IPWZCJVRWK6U7JLH7P5RM5FSCQ" Name="isUp" Comment="направление срабатывания верхнее (FALSE - нижнее)" Type="BOOL" />
            <Field UUID="GDXKQ5WSUIYE5GF3QWM5WECPLM" Name="delay" Comment="задержка на срабатывание" Type="REAL" />
        </Struct>
        <Struct UUID="Y2SUFYR34WCUVAETREJRLVIA74" Name="T_APS_Internal">
            <Field UUID="SW4246EO2NWU5CQN5ODA6OPOUI" Name="tmr" Comment="Счетчик времени задержки" Type="REAL" />
            <Field UUID="V6KC3PUL2GGUXCYZ4IXVPRX4NI" Name="pr_value" Comment="пред. значение" Type="BOOL" />
            <Field UUID="IYUBAOIBGQXEFF5UWNT4SITBCQ" Name="target" Comment="Реакция 1 пожар, 2 АОС, 3 АОБ, 4 АС, 5 ПС" Type="INT" />
        </Struct>
        <Struct UUID="3LFH3SQ4BNEUBDNWSPIFNTUGVM" Name="T_Alarm">
            <Field UUID="TP6VLFNYNVEF7BIWDTBZDPRT3Y" Name="PV" Comment="выход сигнализации" Type="BOOL" />
            <Field UUID="JMKHYKFLKRGTZFLJ5TNHWAUBSA" Name="in" Comment="входной сигнал" Type="BOOL" />
            <Field UUID="WAKIF66KNRGTPLOADFU6DYKTKA" Name="reset" Comment="сброс триггера сигнализации" Type="BOOL" />
            <Field UUID="EASYBTH2TJCUTOXQR33HQF3RHQ" Name="message" Comment="Сообщение в окне сигнализации и журнале событий" Type="STRING" />
            <Field UUID="4ORPFEZSGJEZPMMKOGHZYD3NNU" Name="category" Comment="Категория сигнала" Type="DINT" />
            <Field UUID="GGENP5F4QZBWRB5HSA4NRTUMT4" Name="tag" Comment="допинфо для служебных целей" Type="STRING" />
            <Field UUID="3FT5IZPWNVDLLKHR3CY5JIYW4A" Name="source" Comment="Источник сигнала" Type="STRING" />
            <Field UUID="O5BP7PZQHW2UTHK6E7UGS7KUJ4" Name="delay" Comment="Задержка аварии" Type="REAL" />
            <Field UUID="H5L4U32UMVFI7AQNSK2CE57B2M" Name="target" Comment="Режим, инициируемый сигналом" Type="INT" />
        </Struct>
        <Struct UUID="CB63GVNINFXE5NDGOS62CUMGSY" Name="T_DI_FromHMI" Comment="команды из ЧМИ">
            <Field UUID="ALOR7DBMYYIEBCY2WB7KWCUIGU" Name="manualTarget" Comment="Задание из ЧМИ" Type="BOOL" />
            <Field UUID="B22NFHW4UO5ETI7GYQLXF3XAJM" Name="BTNmanualOn" Comment="Кнопка вкл. задания значения из ЧМИ" Type="BOOL" />
            <Field UUID="S7MY7EBTY62UHGFUKNDBNJEETM" Name="BTNrepairOn" Comment="Кнопка вкл. ремонта" Type="BOOL" />
            <Field UUID="JJ6OIYCGVKUURBCSRNZ6KZLHKE" Name="BTNworkOn" Comment="Кнопка перекл. в работу" Type="BOOL" />
            <Field UUID="6QZL235TTWWEFK6PJPHINDPP5Y" Name="BTNrepairProlong" Comment="Кнопка продления ремонта" Type="BOOL" />
        </Struct>
        <Struct UUID="AZLZGZOBJZBF3NOVFVJWX37NVA" Name="T_DI_Internal">
            <Field UUID="YN54AUR7NFHDJHYR7DISKVNB5Y" Name="timerRepair" Comment="таймер ремонта" Type="REAL" />
            <Field UUID="4I4YCSS2CFBTJMCGATBEXGG5SE" Name="timerAntiTremor" Comment="таймер антидребезга" Type="REAL" />
        </Struct>
        <Struct UUID="YYQ4LFBFOMREFPHHDI3SPZLDYM" Name="T_DI_Settings" Comment="настройки дискретного канала">
            <Field UUID="7BUOL5BGDSCU7DUITC6LJYC3EE" Name="del" Comment="задержка для устранения дребезга, сек." Type="REAL" />
            <Field UUID="65RJRGUGBJYUTJEW5S27QVKBII" Name="repairTime" Comment="максимальное время в ремонте, сек. Не может быть «0»" Type="INT" />
            <Field UUID="E6BN5T6PFMLUNLPCUXHL4REAAE" Name="inv" Comment="необходимость инвертирования измеренного значения" Type="BOOL" />
            <Field UUID="L2JGFBG6KZFEFAFNVUGMAVU6YE" Name="id" Comment="номер по порядку" Type="INT" />
        </Struct>
        <Struct UUID="GHOQ5H5MCDOEHDF2HTYC2D4HJI" Name="T_DI_ToHMI" Comment="устанавливаются программой обработки канала">
            <Field UUID="TNUWHHXWAKSE7ARXDZINL2OUL4" Name="CurrentTimeOfRepair" Comment="оставшееся время ремонта" Type="INT" />
            <Field UUID="Q5OI5ENSF7VEHIS4O4MQ3YADRU" Name="settingErr" Comment="ошибка задания настроек – несоответствие допустимым значениям" Type="BOOL" />
            <Field UUID="4EHQPHFYYZ5EDCSGTFQTH6IA2I" Name="manual" Comment="канал в дист.упр." Type="BOOL" />
            <Field UUID="26KRQPMZSAFUHEQWAFEZYCEXNA" Name="repair" Comment="канал в ремонте" Type="BOOL" />
            <Field UUID="2FXLROIDYK2UXEJA6MWOZVCPEQ" Name="repair_time_less_10_percent" Comment="до конца ремонта осталось меньше 10% от заданного времени" Type="BOOL" />
            <Field UUID="RHBQXEPMIJENTNXBIRDAZVI6ZM" Name="fault_common" Comment="обобщённая неисправность. Образуется по «ИЛИ» от settingErr и неисправности цепи датчика" Type="BOOL" />
            <Field UUID="6W6OANKZ3VDE7IFEAF7IFND5TY" Name="hint" Type="STRING" />
        </Struct>
        <Struct UUID="ICYCYA5WR5FTZMTITNXXGA6V4U" Name="T_DO_FromHMI">
            <Field UUID="YQBDUQ2SLVH4VLPEMFQCTQ7MSA" Name="manualTarget" Comment="Задание из ЧМИ" Type="BOOL" />
            <Field UUID="5X47MBB46NFXXFQYHPGECOG46U" Name="BTNforceOn" Comment="кнопка включения режима форсировки" Type="BOOL" />
            <Field UUID="2LUBNMQXIBEO7NYA7FMHMSQMQA" Name="BTNworkOn" Comment="Кнопка перекл. в работу" Type="BOOL" />
        </Struct>
        <Struct UUID="JPIXI5FFWBGSRAAFIJ2MBV77UE" Name="T_DO_ToHMI">
            <Field UUID="37PITYONYNCEPAA4FZ7CYI4ZZU" Name="forsPermit" Comment="Форсировка разрешена" Type="BOOL" />
            <Field UUID="EW23HL5DEBFQJMV2GMGKR3LXTE" Name="forsEnable" Comment="Форсировка включена" Type="BOOL" />
            <Field UUID="WP3KGWM747AURJEIHTUIQJLS5M" Name="hint" Type="STRING" />
        </Struct>
        <Struct UUID="KHQWP3RHOTWEFJWBPCB6JIVNWI" Name="T_Graph">
            <Field UUID="57SADCQ574VUDHSCYRYH5NMZQU" Name="cond" Comment="Условия перехода" Type="DWORD" Size="32" Array="TRUE" />
            <Field UUID="VJA4I3MIFT3U3DQCKXBULCRNXU" Name="state" Comment="Номер режима" Type="INT" />
        </Struct>
        <Struct UUID="EKXWTT2XQFVEBA2O4SGLDA6X4E" Name="T_tuneAM">
            <Field UUID="O6YCSYX2QRLUTFJS52ZQUGTAWU" Name="delayChangeOvertimeAlert" Comment="Время перестановки, при превышении которого выдается предупреждение" Type="REAL" />
            <Field UUID="JGXKJLANO2SELHO62MUIPISOLM" Name="delayQTimeout" Comment="Время перестановки, при превышении которого снимается выходная команда" Type="REAL" />
            <Field UUID="WCIMRV5J5ANE7HJUA6CNAGFFG4" Name="delayExtraOn" Comment="Время дожима на открытие" Type="REAL" />
            <Field UUID="TI3CBQNB5L5UXB5JAB22HNT2WE" Name="delayExtraOff" Comment="Время дожима на закрытие" Type="REAL" />
            <Field UUID="F5QLAOOZQ23E5PP4LDMIH4DAZU" Name="delayNotMoveAlert" Comment="Задержка формирования нестрагивания" Type="REAL" />
            <Field UUID="TYZJFVKVMAREDE55SVBM4IKIQQ" Name="delayCircBrkAlert" Comment="Задержка формирования обрыва контроля цепи" Type="REAL" />
        </Struct>
        <Struct UUID="JOKANQL3O4QURP2EITPYYDMUV4" Name="support_AM" Comment="v1.0 от 20170724">
            <Field UUID="AJPZSGTBOZSURAEDGCYX3WHU3E" Name="iOn" Comment="Вход - &quot;включен&quot; (открыт)" Type="BOOL" />
            <Field UUID="6OD2DJH7NPKELOTUDZ75Y2AKVQ" Name="iOff" Comment="Вход - &quot;отключен&quot; (закрыт)" Type="BOOL" />
            <Field UUID="TB67SA6DTYPEDKISO6NAMC5SWQ" Name="iCon" Comment="Вход - контроль цепи включения (открытия)" Type="BOOL" />
            <Field UUID="EIFZU5L22RQUXBFPPCCT236FCQ" Name="iCoff" Comment="Вход - контроль цепи отключения (закрытия)" Type="BOOL" />
            <Field UUID="GIVBYIHUOBNU5DS3D7NB6IIQEA" Name="qOn" Comment="Выход - &quot;включить&quot; (открыть, форсировка)" Type="BOOL" />
            <Field UUID="B3U4CEPC5FQEXKDEAGWOPCDWZU" Name="qOff" Comment="Выход - &quot;отключить&quot; (закрыть)" Type="BOOL" />
            <Field UUID="5OXOOXY3F2CEHER2BZBJPT3FSA" Name="qHoldOn" Comment="Выход - &quot;удержание&quot; (трехходовой клапан)" Type="BOOL" />
            <Field UUID="W6BNQGNNUFSUXGQ3RZQ4V2XMD4" Name="algOn" Comment="Команда включения из алгоритма" Type="BOOL" />
            <Field UUID="Z3KAE3E5VX5UDAOPXTO4SUHYEY" Name="algOff" Comment="Команда отключения из алгоритма" Type="BOOL" />
            <Field UUID="U3KPWCQJYP4E7O6Z6S6U43Q2V4" Name="modeManual" Comment="Режим ручного управления" Type="BOOL" />
            <Field UUID="VSW5JXZJSMLUZFMXRYKWIBFB2I" Name="disableManual" Comment="Блокировка ручного управления" Type="BOOL" />
            <Field UUID="JO4FIXI66MRULCSWOZ7JRQSOBA" Name="disableCon" Comment="Не учитывать контроль цепи управления команды &apos;открыть&apos;" Type="BOOL" />
            <Field UUID="UZCWPJ5FO2OETORGJUJ77MHWEQ" Name="disableCoff" Comment="Не учитывать контроль цепи управления команды &apos;закрыть&apos;" Type="BOOL" />
            <Field UUID="XB6FRKLPQHBU3KBCQJ2O4LMWOI" Name="btnMode" Comment="Кнопка переключения режима Ручной/Авто (СКАДА)" Type="BOOL" />
            <Field UUID="HQXXP3VK6B7UFEZCLYPOAIJCVE" Name="btnOn" Comment="Кнопка &quot;включить&quot; (СКАДА)" Type="BOOL" />
            <Field UUID="EUREFPVUSAJU5MPE72IMKULFAQ" Name="btnOff" Comment="Кнопка &quot;отключить&quot; (СКАДА)" Type="BOOL" />
            <Field UUID="AILDXTDC3NIELCLUI3YK5YT24Q" Name="prmBtnOn" Comment="Разрешение ручного включения в авто-режиме (для повтора команды)" Type="BOOL" />
            <Field UUID="N3ML4S2CGYTUNLC75YT4BMSOZE" Name="prmBtnOff" Comment="Разрешение ручного отключения в авто-режиме (для повтора команды)" Type="BOOL" />
            <Field UUID="T6O6PYG5FOHE5M2XV53ZQ6EC4Q" Name="fNotOn" Comment="Не включен" Type="BOOL" />
            <Field UUID="FGO5HC5NS2AENDSJ7FTV6YTIKM" Name="fNotOff" Comment="Не отключен" Type="BOOL" />
            <Field UUID="SUNJAVMMKXFUTFOAEJWMDGD4B4" Name="fNotStart" Comment="Не стронулся" Type="BOOL" />
            <Field UUID="UOQBPEA7JBMU7KFLOB4CAR2Q5A" Name="fSelfOn" Comment="Самопроизвольное включение" Type="BOOL" />
            <Field UUID="DJLHHLRC674EHNL2W5UHHLPB4Y" Name="fSelfOff" Comment="Самопроизвольное отключение" Type="BOOL" />
            <Field UUID="URJGYYBT4DXU5N4YI3XNJOKP5M" Name="fFB" Comment="Двойное положение" Type="BOOL" />
            <Field UUID="WPU7QKFWK6TU5DDMTVHYF5AIOY" Name="fCon" Comment="Нет контроля цепи включения" Type="BOOL" />
            <Field UUID="WJBPVHFY5IPEZOLM74FY44PYMY" Name="fCoff" Comment="Нет контроля цепи отключения" Type="BOOL" />
            <Field UUID="3QBLSEMS7OCERKXNV3GPVS7PNM" Name="fCommon" Comment="Обобщенная неисправность" Type="BOOL" />
        </Struct>
    </DataTypes>
    <FBLibrary>
        <Folder Name="IM" Comment="" Data="" UUID="VNMD2OOZLFFEPDPMH5MDG3U3DM">
            <FunctionBlock UUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Name="FB_IM" Comment="FB Исполнительных механизмов">
                <Variables>
                    <Variable UUID="5XYFD3YZLLBUNB42KO2XYNFDCU" Name="AMtype" Comment="тип ИМ" Type="INT" Usage="input" />
                    <Variable UUID="PETOOKKOZ5ZUHGDFGUI235UOWE" Name="AM" Comment="структура ИМ" Type="support_AM" TypeUUID="JOKANQL3O4QURP2EITPYYDMUV4" Usage="inout" />
                    <Variable UUID="FECD53T2D3CUTMVI42ECGHMCLY" Name="tuns" Comment="Настройки ИМ" Type="T_tuneAM" TypeUUID="EKXWTT2XQFVEBA2O4SGLDA6X4E" Usage="input" />
                    <Variable UUID="EDVZIRQWLT3UDFKHACOVGWPYM4" Name="cycle" Comment="цикл вызова (с)" Type="REAL" Usage="input" />
                    <Variable UUID="MC7WZK735E7EDGYPA7FMYZ6ZYY" Name="onImit" Comment="включить режим имитации" Type="BOOL" Usage="input" />
                    <Variable UUID="KNJWSZAW7KLUHKINAJIYOXQUFU" Name="imtChangeTime" Comment="время переключения состояния для имитатора" Type="REAL" InitialValue="2" Usage="input" />
                    <Variable UUID="YJALDEKXZIAEBF7TAWFK34VG7A" Name="I_ON" Type="BOOL" Usage="input" />
                    <Variable UUID="JACB2RJGQM3EJFEEH5UBKF5TIM" Name="I_OFF" Type="BOOL" Usage="input" />
                    <Variable UUID="ICKZ3QWAXBMUTKG6JQNPTEC2QM" Name="I_Con" Type="BOOL" Usage="input" />
                    <Variable UUID="EMWHYR3US7OUVAQURMVK5WK2VU" Name="I_Coff" Type="BOOL" Usage="input" />
                    <Variable UUID="7M6X7SOAZ6CE3C3LKAET4H3KUA" Name="unlock" Type="BOOL" Usage="input" />
                    <Variable UUID="PDPZIK7RNIGEZALSPLREI2IPK4" Name="Q_ON" Type="BOOL" Usage="output" />
                    <Variable UUID="V6MUNN55PDPUTAJTEWOJUXQR6U" Name="Q_OFF" Type="BOOL" Usage="output" />
                    <Variable UUID="RKQGJ6QQUGQUXAIFQADPHSMOUM" Name="Q_HoldOn" Type="BOOL" Usage="output" />
                    <Variable UUID="BTZJYNYJ2UUURFURQFWR6S5O3Y" Name="ps" Comment="Сигналка предупреждения" Type="BOOL" Usage="output" />
                    <Variable UUID="HO5QMS37KGRUFNJ4JJRITZIMP4" Name="algOn" Comment="команда открытия от алгоритма" Type="BOOL" Usage="internal" />
                    <Variable UUID="CMXCEEFW6Z6ENAFCXGRHJOGI6M" Name="algOff" Comment="команда закрытия от алгоритма" Type="BOOL" Usage="internal" />
                    <Variable UUID="IZJKEDDZ47GUFO7BOZC7YKLQZE" Name="iOn" Comment="сигнал (конечник) открытия" Type="BOOL" Usage="internal" />
                    <Variable UUID="IT7YET3ZRL2EDH6OY4RZ7F5AKI" Name="iOff" Comment="сигнал (конечник) закрытия" Type="BOOL" Usage="internal" />
                    <Variable UUID="JZG6WQHPJMMUZBZE7X2FA4VPKM" Name="qOn" Comment="выход на открытие" Type="BOOL" Usage="internal" />
                    <Variable UUID="ZPLMRSLMHTCUHIP6TYW4CL2N5I" Name="qOff" Comment="выход на закрытие" Type="BOOL" Usage="internal" />
                    <Variable UUID="VUPVKP7RMWTERJ7AZBTZVEYPCY" Name="btnOn" Comment="кнопка открытия (включения)" Type="BOOL" Usage="internal" />
                    <Variable UUID="KGF35AM36CXUJJFX4C37TTI4EU" Name="btnOff" Comment="кнопка закрытия (отключения)" Type="BOOL" Usage="internal" />
                    <Variable UUID="6WBGZYIOBLMETEEEQZ6B5ASQII" Name="modeManual" Comment="ручное управление" Type="BOOL" Usage="internal" />
                    <Variable UUID="TNVNQT5NADZUHEA5XCOVODKHHM" Name="notOn" Comment="не открыт (не включен)" Type="BOOL" Usage="internal" />
                    <Variable UUID="RQOS2DNCVDXUXMEHU43U66PC2M" Name="notOff" Comment="не закрыт (не выключен)" Type="BOOL" Usage="internal" />
                    <Variable UUID="XWDUTHDWEMTEXF363ZDXUPB2FI" Name="setOn" Comment="обобщенная команда на открытие" Type="BOOL" Usage="internal" />
                    <Variable UUID="S7TDCYI34UAURMWX7LNZ7Q3DVQ" Name="setOff" Comment="обобщенная команда на закрытие" Type="BOOL" Usage="internal" />
                    <Variable UUID="2YFKES4RS6TEZIQK64GSW2VMLI" Name="int_iOn" Type="BOOL" Usage="internal" />
                    <Variable UUID="GZBUQS2K6R2EDONSFQIJ3B2AVM" Name="int_iOff" Type="BOOL" Usage="internal" />
                    <Variable UUID="JJPQIEFP32SUXG4U4O4MLUTJPI" Name="qOnPrev" Type="BOOL" Usage="internal" />
                    <Variable UUID="MZRVQ5DAR6FELAA4OJQ4ZJF47U" Name="qOffPrev" Type="BOOL" Usage="internal" />
                    <Variable UUID="VGZDX656BHWUHMVRFQ5T7UFPGA" Name="timeQOn" Comment="текущее время подачи команды открытия" Type="REAL" Usage="internal" />
                    <Variable UUID="BJ7NG6XPBDVEVD7WNGL2ATIDGE" Name="timeQOff" Comment="текущее время подачи команды закрытия" Type="REAL" Usage="internal" />
                    <Variable UUID="R4AU66NU2YVEHBFVJROOTEM2TM" Name="timeExtraOn" Comment="текущее время дожима открытия" Type="REAL" Usage="internal" />
                    <Variable UUID="GNURLIKPQ7HE5GHCKFJEQAONAI" Name="timeExtraOff" Comment="текущее время дожима закрытия" Type="REAL" Usage="internal" />
                    <Variable UUID="PDM4LADFVAUEFE5HUDLZHS7SEM" Name="timeCircBrkOn" Comment="текущее время КЦУ On" Type="REAL" Usage="internal" />
                    <Variable UUID="MGYODHIFDPRUBN4T56OY56ICHU" Name="timeCircBrkOff" Comment="текущее время КЦУ Off" Type="REAL" Usage="internal" />
                    <Variable UUID="AJO5AFGGN7BUDDZ7BWYSA5RPEQ" Name="changeCounter" Comment="количество попыток перевода в текущее положение" Type="INT" Usage="internal" />
                    <Variable UUID="ICO74YEEKVHELOXAIVEXGPQADQ" Name="FRONT_BTN" Comment="передний фронт кнопки РУ" Type="R_TRIG" TypeUUID="S45Q5WLSRRGU3MJDOGDVF24XVA" Usage="internal" />
                    <Variable UUID="R6PIXZGPSYXURC2XIL6YCBZWIY" Name="frBTN" Comment="передний фронт кнопки РУ" Type="BOOL" Usage="internal" />
                    <Variable UUID="IM6CQF6KSQCUVA7X4SECMK6LCM" Name="wasOn" Type="BOOL" Usage="internal" />
                    <Variable UUID="2S6R7J3WHQLULLRVMT2EJOD6YI" Name="wasOff" Type="BOOL" Usage="internal" />
                    <Variable UUID="CMAZOKJUL7ZETKJDW5UR5D743Q" Name="selfOn" Comment="самопроизвольное открытие (включение)" Type="BOOL" Usage="internal" />
                    <Variable UUID="6MJNYD4M6ALEZGQ5FROHQR5MCI" Name="selfOff" Comment="самопроизвольное закрытие (отключение)" Type="BOOL" Usage="internal" />
                    <Variable UUID="UJ646BIRCAFEJPINNWJFYZK27U" Name="imtState" Comment="текущее состояние" Type="REAL" Usage="internal" />
                    <Variable UUID="BT2WTUA36XFUHK5JVE57VGP7MU" Name="imt_qOn" Comment="внутренний сигнал ON (для унификации разнотипных ИМ)" Type="BOOL" Usage="internal" />
                    <Variable UUID="R6A5AI6O7K6ETL3VWIGD5RNVDU" Name="imt_qOff" Comment="внутренний сигнал OFF (для унификации разнотипных ИМ)" Type="BOOL" Usage="internal" />
                    <Variable UUID="SCKVA6FKP3UUJNHQUPGI2FXD7I" Name="iCon" Comment="контроль цепи" Type="BOOL" Usage="internal" />
                    <Variable UUID="FJBNTNBQHFREZNBP6FFGAKB64Y" Name="iCoff" Comment="контроль цепи" Type="BOOL" Usage="internal" />
                    <Variable UUID="NQH4CDIJEABERJZC2LFG46JX7E" Name="frontImitOn" Type="R_TRIG" TypeUUID="S45Q5WLSRRGU3MJDOGDVF24XVA" Usage="internal" />
                    <Variable UUID="P3NHLORDEEAEVENDKAOMT666JU" Name="frImitOn" Type="BOOL" Usage="internal" />
                    <Variable UUID="HF7YYOEZACGEXH23CYTA2BQ23Y" Name="disableManual" Comment="запрет ручного режима (внутренний сигнал)" Type="BOOL" Usage="internal" />
                    <Variable UUID="IB3U55AUN5UU7NW5VSDNGRDCKU" Name="fNotOn_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="ECXVHPRFC5XUXDL4FXXVLJU4PM" Name="fNotOff_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="RCCP626CVVQEDM5UZRBEWQAQAI" Name="fNotStart_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="J244K4GAFILUNINAFURJQGVEEY" Name="fSelfOn_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="MJPL45THOCLUTNSKBQLD3H6PGE" Name="fSelfOff_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="NJWXABGIHTKEBN4UVYBRAHZTLQ" Name="fFB_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="BMFNBKYDUCDUTGTY4MWQUMM3LY" Name="fCon_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="GMQ6D2T5AQAUPBWTXOAHL2QD2E" Name="fCoff_prv" Type="BOOL" Usage="internal" />
                </Variables>
                <ST><![CDATA[// ==================== Макрос для исполнительных механизмов =====================================

// константы AMtype
// 2-ИМ 1Q 0FB 1 команда 0 конечников (1x0)
// 3-ИМ 2Q(Fors+Hold) 2FB 2 команды 0 конечников (2x0)
// 4-ИМ 1Q 1FB 1 команда 1 конечник (1x1)
// 5-ИМ 1Q 2FB 1 команда 2 конечника (1x2)
// 6-ИМ 2Q 1FB 2 команды 1 конечник (2x1)
// 7-ИМ 2Q 2FB 2 команды 2 конечника (2x2)
// 8-ИМ 1Q 1FB с командой/конечником OFF
// 9-ИМ 1Q 2FB с командой OFF и двумя конечниками
// 10-ИМ 1Q 1FB с командой ON/ конечником OF 
// 11-ИМ ТРК, АПК и прочие с положением

  AM.iOn   := I_ON;
  AM.iOff  := I_OFF;
  AM.iCon  := I_Con;
  AM.iCoff := I_Coff;

// привязка к входам структуры AM
  btnOn  := AM.btnOn;
  btnOff := AM.btnOff;
  algOn  := AM.algOn;
  algOff := AM.algOff;
  modeManual := AM.modeManual;
 //запись типа ИМ в структуру  
//  AM.AMtype := AMtype; 

// инициализация задержек (если в структуре задержка не инициализирована - используем значение по-умолчанию)
//время перестановки, при превышении которого выдается предупреждение
IF tuns.delayChangeOvertimeAlert = 0.0 THEN tuns.delayChangeOvertimeAlert := 45.0; END_IF; 
//		delayChangeOvertimeAlert := 45.0; 
//	ELSE delayChangeOvertimeAlert := tuns.delayChangeOvertimeAlert; 
//END_IF; 

//время перестановки, при превышении которого снимается выходная команда
IF tuns.delayQTimeout = 0.0 THEN tuns.delayQTimeout := 90.0; END_IF; 
//	ELSE delayQTimeout := AM.delayQTimeout; 
//END_IF; 

//delayExtraOn := AM.delayExtraOn; //время дожима на открытие
//delayExtraOff := AM.delayExtraOff; //время дожима на закрытие
//задержка формирования нестрагивания
IF tuns.delayNotMoveAlert = 0.0 THEN tuns.delayNotMoveAlert := 4.0; END_IF; 
//ELSE delayNotMoveAlert := AM.delayNotMoveAlert; 
//END_IF; 
//задержка формирования обрыва контроля цепи
IF tuns.delayCircBrkAlert = 0.0 THEN tuns.delayCircBrkAlert := 1.0; END_IF; 
//	ELSE delayCircBrkAlert := AM.delayCircBrkAlert; 
//END_IF; 
// обобщенная неисправность
AM.fCommon := AM.fNotOn OR AM.fNotOff OR AM.fNotStart OR AM.fSelfOn OR AM.fSelfOff OR AM.fFB OR AM.fCon OR AM.fCoff;
// запрет ручного режима (внутренний сигнал)
disableManual := AM.disableManual AND NOT (AM.fNotOn OR AM.fNotOff); 

//** Переключатель РУЧНОГО РЕЖИМА (переключение по одному сигналу)
FRONT_BTN(AM.btnMode, frBTN); //передний фронт кнопки сохраняем в темп (frBTN)
IF frBTN AND AM.modeManual OR disableManual THEN //если есть фронт кнопки, и включен ручной режим - сброс ручного режима так же, ручной режим сбрасывается, когда он не разрешен!
	AM.modeManual := FALSE; //сброс ручного режима
	frBTN := FALSE; //сброс фронта
//	AM.btnMode := FALSE; //сброс кнопки --- в конце блока безусловный сброс кнопки steam
END_IF;
//если есть фронт кнопки, ручной режим не включен, и нет запрета ручного режима
IF frBTN AND NOT AM.modeManual AND NOT disableManual THEN 
	AM.modeManual := TRUE; //включение ручного режима
	frBTN := FALSE; //сброс фронта
//	AM.btnMode := FALSE; //сброс кнопки
END_IF;

//=========================================================================================================
CASE AMtype OF

2: // AM_1Q0FB *************************** ИМ 1Q 0FB ******************************************************

qOn := NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn) OR  modeManual AND (btnOn OR qOn) AND NOT btnOff;
       
// сигналы положения (конечники)
AM.iOn := AM.qOn;
AM.iOff := NOT AM.iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// обрыв КЦУ
IF iCon or qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
//обрыв КЦУ команды "открыть (включить)"
AM.fCon := NOT AM.disableCon AND timeCircBrkOn > tuns.delayCircBrkAlert;      

3: // AM_2Q_FH *************************** ИМ 2Q(Fors+Hold) 2FB *******************************************

// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := AM.iOff;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// формирование внутренних сигналов для реализации дожима
IF iOff OR NOT iOn THEN timeExtraOn  := 0.0; 
	ELSIF timeExtraOn  < 10000000.0 THEN timeExtraOn  := timeExtraOn  + cycle; 
END_IF;
int_iOn := timeExtraOn > tuns.delayExtraOn; // на время дожима - задерживаем сигналы открытия...

IF iOn OR NOT iOff THEN timeExtraOff  := 0.0; 
	ELSIF timeExtraOff  < 10000000.0 THEN timeExtraOff  := timeExtraOff  + cycle; 
END_IF;
int_iOff := timeExtraOff > tuns.delayExtraOff; // ...и закрытия.

// обобщенные команды от алгоритма и от кнопок РУ
AM.qHoldOn := int_iOn AND NOT setOff; //команда "удержание"
// обобщенная команда: открыть
setOn  := (modeManual AND  btnOn OR NOT modeManual AND algOn  OR setOn ) 
          AND NOT (modeManual  AND btnOff  OR NOT modeManual AND algOff); 
// обобщенная команда: закрыть
setOff := (modeManual AND btnOff OR NOT modeManual AND algOff OR setOff) 
          AND NOT (modeManual  AND  btnOn  OR NOT modeManual AND algOn ); 
 // выход на ИМ: открыть
qOn  := setOn  AND NOT int_iOn  AND timeQOn < tuns.delayQTimeout AND (changeCounter < 2  OR qOn );  

// подсчет попыток перестановки - только для ИМ (2х )
IF changeCounter > 0 AND (qOff OR btnOn) OR changeCounter < 0 AND (qOn OR btnOff) (*OR reset*) THEN changeCounter := 0;
	ELSIF NOT qOnPrev  AND qOn  THEN changeCounter := changeCounter + 1;
	ELSIF NOT qOffPrev AND qOff THEN changeCounter := changeCounter - 1;
END_IF;
qOnPrev := qOn;
qOffPrev := qOff;

// накапливаем время подачи команды открытия (включения)
IF NOT setOn  OR btnOn  THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;
IF NOT setOff OR btnOff THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// нестрагивание (только для ИМ с двумя конечниками)
//на закрытие
AM.fNotStart := (timeQOn > tuns.delayNotMoveAlert AND qOn AND iOff)    //на открытие
             OR (timeQOff > tuns.delayNotMoveAlert AND NOT qOn AND NOT AM.qHoldOn AND iOn); 

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > tuns.delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT int_iOn;     // не открыт
notOff := (timeQOff > tuns.delayChangeOvertimeAlert AND qOff OR notOff) AND NOT int_iOff;    // не закрыт

// неисправность концевых выключателей
AM.fFB:= iOff AND iOn; //двойное положение

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOn  := iOn AND (qOn OR AM.qHoldOn);
wasOff := (iOff OR wasOff) AND NOT (qOn OR AM.qHoldOn);

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

4: // AM_1Q1FB *************************** ИМ 1Q 1FB ******************************************************
// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := NOT iOn;
AM.iOff := NOT iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// обобщенные команды от алгоритма и от кнопок РУ
qOn := NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn)
       OR  modeManual AND (btnOn OR qOn) AND NOT btnOff;

// накапливаем время подачи команды открытия (включения)
IF NOT qOn THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;

IF qOn THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := timeQOn  > tuns.delayChangeOvertimeAlert AND NOT iOn;      // не включен
notOff := timeQOff > tuns.delayChangeOvertimeAlert AND NOT iOff;     // не выключен

// обрыв КЦУ
IF iCon or qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
//обрыв КЦУ команды "открыть (включить)"
AM.fCon := NOT AM.disableCon AND timeCircBrkOn > tuns.delayCircBrkAlert;      


// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOn  := iOn AND qOn;
wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

5: // AM_1Q2FB *************************** ИМ 1Q 2FB ******************************************************
// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := AM.iOff;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

//  обобщенные команды от алгоритма и от кнопок РУ
qOn := NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn)
       OR  modeManual AND (btnOn OR qOn) AND NOT btnOff;

// накапливаем время подачи команды открытия (включения)
IF NOT qOn THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;

IF qOn THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// нестрагивание (только для ИМ с двумя конечниками)
 //на закрытие
AM.fNotStart := (timeQOn > tuns.delayNotMoveAlert AND qOn AND iOff)    //на открытие
             OR (timeQOff > tuns.delayNotMoveAlert AND NOT qOn AND NOT AM.qHoldOn AND iOn);

// не включен (не открыт) / не выключен (не закрыт)
notOn  := timeQOn  > tuns.delayChangeOvertimeAlert AND NOT iOn;      // не включен
notOff := timeQOff > tuns.delayChangeOvertimeAlert AND NOT iOff;     // не выключен

// обрыв КЦУ
IF iCon or qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
AM.fCon := NOT AM.disableCon AND timeCircBrkOn > tuns.delayCircBrkAlert;      //обрыв КЦУ команды "открыть (включить)"

// неисправность концевых выключателей
AM.fFB:= iOff AND iOn; //двойное положение

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOn  := iOn AND qOn;
wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

6: // AM_2Q1FB *************************** ИМ 2Q 1FB ******************************************************   // 
// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := NOT iOn;
AM.iOff := NOT iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// формирование внутренних сигналов для реализации дожима
IF iOff OR NOT iOn THEN timeExtraOn  := 0.0; 
	ELSIF timeExtraOn  < 10000000.0 THEN timeExtraOn  := timeExtraOn  + cycle; 
END_IF;
int_iOn := timeExtraOn > tuns.delayExtraOn; // на время дожима - задерживаем сигналы открытия...

IF iOn OR NOT iOff THEN timeExtraOff  := 0.0; 
	ELSIF timeExtraOff  < 10000000.0 THEN timeExtraOff  := timeExtraOff  + cycle; 
END_IF;
int_iOff := timeExtraOff > tuns.delayExtraOff; // ...и закрытия.

//  обобщенные команды от алгоритма и от кнопок РУ
// обобщенная команда: открыть  
  setOn  := (modeManual AND btnOn OR NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn) OR setOn)  
					AND NOT (modeManual  AND btnOff  OR NOT modeManual AND algOff); 
 
 setOff := (modeManual AND btnOff OR NOT modeManual AND (algOff OR btnOff AND AM.prmBtnOff) OR setOff) 
						AND NOT (modeManual  AND  btnOn  OR NOT modeManual AND algOn); // обобщенная команда: закрыть
 
 qOn  := setOn  AND NOT int_iOn  AND timeQOn < tuns.delayQTimeout AND (changeCounter < 2  OR qOn);   // выход на ИМ: открыть 
 qOff := setOff AND NOT int_iOff AND timeQOff< tuns.delayQTimeout AND (changeCounter > -2 OR qOff);   // выход на ИМ: закрыть

// подсчет попыток перестановки - только для ИМ (2х )
IF changeCounter > 0 AND (qOff OR btnOn) OR changeCounter < 0 AND (qOn OR btnOff) (*OR reset*) THEN changeCounter := 0;
	ELSIF NOT qOnPrev  AND qOn  THEN changeCounter := changeCounter + 1;
	ELSIF NOT qOffPrev AND qOff THEN changeCounter := changeCounter - 1;
END_IF;
qOnPrev := qOn;
qOffPrev := qOff;

// накапливаем время подачи команды открытия (включения)
IF NOT setOn  OR btnOn  THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;

IF NOT setOff OR btnOff THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > tuns.delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT int_iOn;     // не открыт
notOff := (timeQOff > tuns.delayChangeOvertimeAlert AND qOff OR notOff) AND NOT int_iOff;    // не закрыт

// обрыв КЦУ
IF NOT qOn AND iCon OR qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
AM.fCon := NOT AM.disableCon AND (timeCircBrkOn > tuns.delayCircBrkAlert OR AM.fCon) AND NOT iCon;      //обрыв КЦУ команды "открыть (включить)"

IF NOT qOff AND iCoff OR qOff THEN timeCircBrkOff := 0.0;
	ELSIF timeCircBrkOff < tuns.delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; 
END_IF;
AM.fCoff := NOT AM.disableCoff AND (timeCircBrkOff > tuns.delayCircBrkAlert OR AM.fCoff) AND NOT iCoff; //обрыв КЦУ команды "закрыть (отключить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
  selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
  selfOff := (wasOn AND NOT iOn OR selfOff) AND NOT (iOn OR qOff); //
  wasOn  := (iOn OR wasOn) AND NOT qOff;
  wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

7: // AM_2Q2FB *************************** ИМ 2Q 2FB ******************************************************
// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := AM.iOff;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// формирование внутренних сигналов для реализации дожима
IF iOff OR NOT iOn THEN timeExtraOn  := 0.0; 
	ELSIF timeExtraOn  < 10000000.0 THEN timeExtraOn  := timeExtraOn  + cycle; 
END_IF;
int_iOn := timeExtraOn > tuns.delayExtraOn; // на время дожима - задерживаем сигналы открытия...

IF iOn OR NOT iOff THEN timeExtraOff  := 0.0; 
	ELSIF timeExtraOff  < 10000000.0 THEN timeExtraOff  := timeExtraOff  + cycle; 
END_IF;
int_iOff := timeExtraOff > tuns.delayExtraOff; // ...и закрытия.

//  обобщенные команды от алгоритма и от кнопок РУ
setOn  := (modeManual AND  btnOn OR NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn)  OR setOn)
          AND NOT (modeManual  AND btnOff  OR NOT modeManual AND algOff); // обобщенная команда: открыть
setOff := (modeManual AND btnOff OR NOT modeManual AND (algOff OR btnOff AND AM.prmBtnOff) OR setOff)           
          AND NOT (modeManual  AND  btnOn  OR NOT modeManual AND algOn); // обобщенная команда: закрыть

qOn  := setOn  AND NOT int_iOn  AND timeQOn < tuns.delayQTimeout AND (changeCounter < 2  OR qOn );   // выход на ИМ: открыть 
qOff := setOff AND NOT int_iOff AND timeQOff< tuns.delayQTimeout AND (changeCounter > -2 OR qOff);   // выход на ИМ: закрыть

// подсчет попыток перестановки - только для ИМ (2х )
IF changeCounter > 0 AND (qOff OR btnOn) OR changeCounter < 0 AND (qOn OR btnOff) (*OR reset*) THEN changeCounter := 0;
	ELSIF NOT qOnPrev  AND qOn  THEN changeCounter := changeCounter + 1;
	ELSIF NOT qOffPrev AND qOff THEN changeCounter := changeCounter - 1;
END_IF;
qOnPrev := qOn;
qOffPrev := qOff;

// накапливаем время подачи команды открытия (включения)
IF NOT setOn  OR btnOn  THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;

IF NOT setOff OR btnOff THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// нестрагивание (только для ИМ с двумя конечниками)
AM.fNotStart := (timeQOn > tuns.delayNotMoveAlert AND qOn AND iOff)    //на открытие
             OR (timeQOff > tuns.delayNotMoveAlert AND qOff AND iOn);   //на закрытие

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > tuns.delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT int_iOn;     // не открыт
notOff := (timeQOff > tuns.delayChangeOvertimeAlert AND qOff OR notOff) AND NOT int_iOff;    // не закрыт

// обрыв КЦУ
IF iCon or qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
AM.fCon := NOT AM.disableCon AND timeCircBrkOn > tuns.delayCircBrkAlert;      //обрыв КЦУ команды "открыть (включить)"

IF iCoff or qOff THEN timeCircBrkOff := 0.0;
	ELSIF timeCircBrkOff < tuns.delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; 
END_IF;
AM.fCoff := NOT AM.disableCoff AND timeCircBrkOff > tuns.delayCircBrkAlert; //обрыв КЦУ команды "закрыть (отключить)"

// неисправность концевых выключателей
AM.fFB:= iOff AND iOn; //двойное положение

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn AND NOT iOn OR selfOff) AND NOT (iOn OR qOff); 
wasOn  := (iOn OR wasOn) AND NOT qOff;
wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

8: // AM_inv1Q1FB ************************ ИМ 1Q 1FB с командой/конечником OFF ****************************
// сигналы положения (конечники)
iOff := AM.iOff;
iOn  := NOT iOff;
AM.iOn := NOT iOff; 

// сигналы контроля цепи
iCoff := AM.iCoff;

//  обобщенные команды от алгоритма и от кнопок РУ
qOff := NOT modeManual AND (algOff OR btnOff AND AM.prmBtnOff) OR modeManual AND (btnOff OR qOff) AND NOT btnOn;
       
// накапливаем время подачи команды открытия (включения)
IF NOT qOff THEN timeQOff  := 0.0; 
	ELSIF timeQOff  < 10000000.0 THEN timeQOff  := timeQOff  + cycle; 
END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > tuns.delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT iOn;     // не открыт
notOff := (timeQOff > tuns.delayChangeOvertimeAlert AND qOff OR notOff) AND NOT iOff;    // не закрыт

// обрыв КЦУ
IF NOT qOff AND iCoff OR qOff THEN timeCircBrkOff := 0.0;
	ELSIF timeCircBrkOff < tuns.delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; 
END_IF;
AM.fCoff := NOT AM.disableCoff AND (timeCircBrkOff > tuns.delayCircBrkAlert OR AM.fCoff) AND NOT iCoff; //обрыв КЦУ команды "закрыть (отключить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOff  := iOff AND qOff;
wasOn := (iOn OR wasOn) AND NOT qOff;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

9: // AM_inv1Q2FB ************************ ИМ 1Q 2FB с командой OFF/ и двумя конечниками ******************
// сигналы положения (конечники)
iOff := AM.iOff;
iOn  := AM.iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

//  обобщенные команды от алгоритма и от кнопок РУ
qOff := NOT modeManual AND (algOff OR btnOff AND AM.prmBtnOff) OR  modeManual AND (btnOff OR qOff) AND NOT btnOn;
       

// накапливаем время подачи команды открытия (включения)
IF NOT qOff THEN timeQOff  := 0.0; 
	ELSIF timeQOff  < 10000000.0 THEN timeQOff  := timeQOff  + cycle; 
END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > tuns.delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT iOn;     // не открыт
notOff := (timeQOff > tuns.delayChangeOvertimeAlert AND qOff OR notOff) AND NOT iOff;    // не закрыт

// обрыв КЦУ
IF NOT qOff AND iCoff OR qOff THEN timeCircBrkOff := 0.0;
	ELSIF timeCircBrkOff < tuns.delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; 
END_IF;
AM.fCoff := NOT AM.disableCoff AND (timeCircBrkOff > tuns.delayCircBrkAlert OR AM.fCoff) AND NOT iCoff; //обрыв КЦУ команды "закрыть (отключить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOff  := iOff AND qOff;
wasOn := (iOn OR wasOn) AND NOT qOff;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

10: // AM_1Q1CFB *************************** ИМ 1Q 1FB ******************************************************

// сигналы положения (конечники)
iOff := AM.iOff;
iOn  := NOT iOff;
AM.iOn := NOT iOff; 

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// обобщенные команды от алгоритма и от кнопок РУ
qOn := NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn) OR  modeManual AND (btnOn OR qOn) AND NOT btnOff;
      
// накапливаем время подачи команды открытия (включения)
IF NOT qOn or unlock THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;

IF qOn or unlock THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := timeQOn  > tuns.delayChangeOvertimeAlert AND NOT iOn;      // не включен
notOff := timeQOff > tuns.delayChangeOvertimeAlert AND NOT iOff;     // не выключен

// обрыв КЦУ
IF NOT qOn AND iCon OR qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
AM.fCon := NOT AM.disableCon AND (timeCircBrkOn > tuns.delayCircBrkAlert OR AM.fCon) AND NOT iCon;      //обрыв КЦУ команды "открыть (включить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn or unlock);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT (iOn or unlock);
wasOn  := iOn AND qOn;
wasOff := (iOff OR wasOff) AND NOT (qOn or unlock);

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

END_CASE;

//------------------------------------ Имитатор ИМ ---------------------------------------------------------

frontImitOn(onImit, frImitOn); //передний фронт onImit

IF onImit THEN //Начало имитации

	IF frImitOn THEN // по переднему фронту onImit инициализация положение ИМ
	  IF iOn AND NOT iOff THEN imtState := imtChangeTime; // открыт
		ELSIF iOff AND NOT iOn THEN imtState := 0.0; //закрыт
		ELSE imtState := imtChangeTime / 2.0; // ставим в середину
	  END_IF;
	END_IF;

	// формирование внутренних команд в соответствии с типом ИМ
	IF AMtype = 1 OR AMtype = 6 OR AMtype = 7 THEN // ИМ с двумя командами
	  imt_qOn  := qOn;
	  imt_qOff := qOff;
	ELSIF AMtype = 3 THEN // ИМ с форсировкой-удержанием
	  imt_qOn  := qOn OR AM.qHoldOn;
	  imt_qOff := NOT imt_qOn;
	ELSIF AMtype = 8 OR AMtype = 9 THEN // для ИМ (1x1) (с командой/конечником OFF)
	  imt_qOff  := qOff;
	  imt_qOn := NOT qOff;
	ELSE // ИМ с одной командой
	  imt_qOn  := qOn;
	  imt_qOff := NOT qOn;
	END_IF;    

	IF imt_qOn  THEN imtState := imtState + cycle; END_IF; // перемещение -> ON
	IF imt_qOff THEN imtState := imtState - cycle; END_IF; // перемещение -> OFF

	IF imtState > imtChangeTime THEN imtState := imtChangeTime; END_IF; // ограничение
	IF imtState < 0.0 THEN imtState := 0.0; END_IF;

	//концевики
	IF AMtype = 4 OR AMtype = 6 THEN
	  AM.iOn  := imtState/imtChangeTime > 0.9; // формируем выход при 90% перемещения 
	  AM.iOff := NOT iOn; // для ИМ 2х1
	ELSIF AMtype = 8 THEN // для ИМ (1x1) (с командой/конечником OFF)
	  AM.iOff  := imtState/imtChangeTime < 0.1; 
	  AM.iOn := NOT iOff; // для ИМ 2х1
	ELSIF AMtype = 11 THEN // для ИМ ТРК, АПК и прочих 
	  AM.iOff  := I_OFF; 
	  AM.iOn :=  I_ON; 
	ELSIF AMtype <> 2 THEN
	  AM.iOn  := imtState/imtChangeTime > 0.9; // формируем выход при 90% перемещения
	  AM.iOff := imtState/imtChangeTime < 0.1; // формируем выход при 10% перемещения
	END_IF;

	//КЦУ (формируется, когда не подается команда управления)
	AM.iCon  := NOT imt_qOn;
	AM.iCoff := NOT imt_qOff;

END_IF; //Конец имитации

//---------------------------------------------------------------------
IF unlock THEN 
	notOn   := FALSE;
	notOff  := FALSE;
	selfOn  := FALSE;
	selfOff := FALSE;
	wasOn:= FALSE; //Добавлено
	wasOff:= FALSE; //Добавлено
	changeCounter := 0; //Добавлено
END_IF;

// привязка к выходам структуры AM
AM.fNotOn  := notOn;	//не включен (не открыт)
AM.fNotOff := notOff;	//не выключен (не закрыт)
AM.fSelfOn  := selfOn;	//самопроизвольное открытие
AM.fSelfOff := selfOff;	//самопроизвольное закрытие
AM.qOn  := qOn;
AM.qOff := qOff;
// передача выходных сигналов
Q_ON     := AM.qOn;
Q_OFF    := AM.qOff;
Q_HoldOn := AM.qHoldOn;
// сброс кнопок РУ (откр/закр)
AM.btnOn  := FALSE;
AM.btnOff := FALSE;
AM.btnMode := FALSE;

//ПС по ИМ для сирены. Снимать там же где и остальные ПС
ps := AM.fNotOn and not fNotOn_prv
	  or AM.fNotOff and not fNotOff_prv
	  or AM.fNotStart and not fNotStart_prv
	  or AM.fSelfOn and not fSelfOn_prv
	  or AM.fSelfOff and not fSelfOff_prv
	  or AM.fFB and not fFB_prv
	  or AM.fCon and not fCon_prv
	  or AM.fCoff and not fCoff_prv;

fNotOn_prv		:= AM.fNotOn;
fNotOff_prv		:= AM.fNotOff;
fNotStart_prv	:= AM.fNotStart;
fSelfOn_prv		:=	AM.fSelfOn;
fSelfOff_prv	:=	AM.fSelfOff;
fFB_prv			:=	AM.fFB;
fCon_prv		:=	AM.fCon;
fCoff_prv		:=	AM.fCoff;

]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="V6ZIHOW4JNZUNPUIBCY2U2IC34" Name="FB_IM_Call">
                <Variables>
                    <Variable UUID="PMJNKKYXGJ5EVF7GZGHU7JWV3Q" Name="IM_type" Type="T_AM_Type" TypeUUID="ANRR6BLMKETURJI5AWVQRMBAWA" Usage="internal" />
                    <Variable UUID="URYL3WIN3HFERG6C3HVRJLBOLQ" Name="Proc_NMs1" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="4FBQC2S4F2MUHB4NTT7OBQRQYU" Name="Proc_NMs2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="NWLSWPBHHYBENJA3IK22OTO5IY" Name="Proc_NMs3" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="3RPS25HWMGXEZCW5TGALW4GLOE" Name="Proc_NMs4" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="2WO5WTC7HE6ELNDOXKPYMSSG54" Name="Proc_NMs5" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="D7BARYFHSADEZGKBPC5FHTAUFU" Name="Proc_NMs6" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                </Variables>
                <ST><![CDATA[//Steam
//Константы ИМ
if not init then 
	IM_type.am1x0	   	:= 2; //ИМ 1 команда, 0 конечников
	IM_type.am2x2fh	   	:= 3; //ИМ 2 команды, 2 конечника (открытие, удержание)
	IM_type.am1x1	   	:= 4; //ИМ 1 команда, 1 конечник
	IM_type.am1x2	   	:= 5; //ИМ 1 команда, 2 конечника
	IM_type.am2x1	   	:= 6; //ИМ 2 команды, 1 конечник
	IM_type.am2x2	   	:= 7; //ИМ 2 команды, 2 конечника
	IM_type.am1ofx1of  	:= 8; //ИМ 1 команда OF, 1 конечник OF
	IM_type.am1ofx2	   	:= 9; //ИМ 1 команда OF, 2 конечника
	IM_type.am1x1of		:= 10; //ИМ 1 команда, 1 конечник OF
	IM_type.amPos		:= 11; //ИМ прочие с положением (АПК, ТРК...)
	IM_type.am3x2		:= 12; //ИМ 3 команды (on, off, stop), 2 конечника
	IM_type.am2x2x3ware	:= 13; //ИМ 2 команды, 2 конечника, трёхпроводная схема
	IM_type.am1x4nku	:= 14; //ИМ 1 команда, 4 сигнала от НКУ
	IM_type.am2x7upp	:= 15; //ИМ 2 команды (БП и УПП) и 7 сигналов от НКУ
	IM_type.am2x8nku	:= 16; //ИМ 2 команды и 8 сигналов от НКУ
	IM_Init(); 
end_if;

// --------------------------------------------
ps_im := false; //звуковое предупреждение по ИМ

//= Насос Н1 ----------------------------------------------------------------------------------------------------
// 1x1		AMtype = 8; //ИМ 1 команда OF, 1 конечник OF
NMS_AM.NMs1.disableManual	:=	not NMS_TS.DU_IM;  //Запрет РУ
//= NMS_AM.NMs1.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=

Proc_NMs1(AMtype := IM_type.am1ofx1of, AM := NMS_AM.NMs1, onImit := ImitOn,   cycle := tim.cycle, unlock := NMS_BTN.Deblock,
tuns := TuneAM.NMs1,
I_OFF      := NOT NMS_DI.N1_ON,
I_Coff     := TRUE,
Q_OFF     	=> NMS_DO.N1_OF);
ps_im := ps_im OR Proc_NMs1.ps;

//= Насос Н2 ----------------------------------------------------------------------------------------------------
// 1x1		AMtype = 8; //ИМ 1 команда OF, 1 конечник OF
NMS_AM.NMs2.disableManual	:=	not NMS_TS.DU_IM;  //Запрет РУ
//= NMS_AM.NMs2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=

Proc_NMs2(AMtype := IM_type.am1ofx1of, AM := NMS_AM.NMs2, onImit := ImitOn,   cycle := tim.cycle, unlock := NMS_BTN.Deblock,
tuns := TuneAM.NMs2,
I_OFF      := NOT NMS_DI.N2_ON,
I_Coff     := TRUE,
Q_OFF     	=> NMS_DO.N2_OF);
ps_im := ps_im OR Proc_NMs2.ps;

//= Насос Н3 ----------------------------------------------------------------------------------------------------
// 1x1		AMtype = 8; //ИМ 1 команда OF, 1 конечник OF
NMS_AM.NMs3.disableManual	:=	not NMS_TS.DU_IM;  //Запрет РУ
//= NMS_AM.NMs3.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=

Proc_NMs3(AMtype := IM_type.am1ofx1of, AM := NMS_AM.NMs3, onImit := ImitOn,   cycle := tim.cycle, unlock := NMS_BTN.Deblock,
tuns := TuneAM.NMs3,
I_OFF      := NOT NMS_DI.N3_ON,
I_Coff     := TRUE,
Q_OFF     	=> NMS_DO.N3_OF);
ps_im := ps_im OR Proc_NMs3.ps;

//= Насос Н4 ----------------------------------------------------------------------------------------------------
// 1x1		AMtype = 8; //ИМ 1 команда OF, 1 конечник OF
NMS_AM.NMs4.disableManual	:=	not NMS_TS.DU_IM;  //Запрет РУ
//= NMS_AM.NMs4.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=

Proc_NMs4(AMtype := IM_type.am1ofx1of, AM := NMS_AM.NMs4, onImit := ImitOn,   cycle := tim.cycle, unlock := NMS_BTN.Deblock,
tuns := TuneAM.NMs4,
I_OFF      := NOT NMS_DI.N4_ON,
I_Coff     := TRUE,
Q_OFF     	=> NMS_DO.N4_OF);
ps_im := ps_im OR Proc_NMs4.ps;

//= Насос Н5 ----------------------------------------------------------------------------------------------------
// 1x1		AMtype = 8; //ИМ 1 команда OF, 1 конечник OF
NMS_AM.NMs5.disableManual	:=	not NMS_TS.DU_IM;  //Запрет РУ
//= NMS_AM.NMs5.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=

Proc_NMs5(AMtype := IM_type.am1ofx1of, AM := NMS_AM.NMs5, onImit := ImitOn,   cycle := tim.cycle, unlock := NMS_BTN.Deblock,
tuns := TuneAM.NMs5,
I_OFF      := NOT NMS_DI.N5_ON,
I_Coff     := TRUE,
Q_OFF     	=> NMS_DO.N5_OF);
ps_im := ps_im OR Proc_NMs5.ps;


//= Насос Н6 ----------------------------------------------------------------------------------------------------
// 1x1		AMtype = 8; //ИМ 1 команда OF, 1 конечник OF
NMS_AM.NMs6.disableManual	:=	not NMS_TS.DU_IM;  //Запрет РУ
//= NMS_AM.NMs6.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=

Proc_NMs6(AMtype := IM_type.am1ofx1of, AM := NMS_AM.NMs6, onImit := ImitOn,   cycle := tim.cycle, unlock := NMS_BTN.Deblock,
tuns := TuneAM.NMs6,
I_OFF      := NOT NMS_DI.N6_ON,
I_Coff     := TRUE,
Q_OFF     	=> NMS_DO.N6_OF);
ps_im := ps_im OR Proc_NMs6.ps;]]></ST>
            </FunctionBlock>
            <Function UUID="CODNAAKPURQE5ISSMFLXHEFINI" Name="IM_Init" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables />
                <ST><![CDATA[
//Насос 1
TuneAM.NMs1.delayChangeOvertimeAlert             := 15.0;
TuneAM.NMs1.delayQTimeout                        := 20.0;
TuneAM.NMs1.delayExtraOn                         := 1.0;
TuneAM.NMs1.delayExtraOff                        := 1.0;
TuneAM.NMs1.delayNotMoveAlert                    := 5.0;
TuneAM.NMs1.delayCircBrkAlert                    := 1.0;

//Насос 2
TuneAM.NMs2.delayChangeOvertimeAlert             := 15.0;
TuneAM.NMs2.delayQTimeout                        := 20.0;
TuneAM.NMs2.delayExtraOn                         := 1.0;
TuneAM.NMs2.delayExtraOff                        := 1.0;
TuneAM.NMs2.delayNotMoveAlert                    := 5.0;
TuneAM.NMs2.delayCircBrkAlert                    := 1.0;

//Насос 3
TuneAM.NMs3.delayChangeOvertimeAlert             := 15.0;
TuneAM.NMs3.delayQTimeout                        := 20.0;
TuneAM.NMs3.delayExtraOn                         := 1.0;
TuneAM.NMs3.delayExtraOff                        := 1.0;
TuneAM.NMs3.delayNotMoveAlert                    := 5.0;
TuneAM.NMs3.delayCircBrkAlert                    := 1.0;

//Насос 4
TuneAM.NMs4.delayChangeOvertimeAlert             := 15.0;
TuneAM.NMs4.delayQTimeout                        := 20.0;
TuneAM.NMs4.delayExtraOn                         := 1.0;
TuneAM.NMs4.delayExtraOff                        := 1.0;
TuneAM.NMs4.delayNotMoveAlert                    := 5.0;
TuneAM.NMs4.delayCircBrkAlert                    := 1.0;

//Насос 5
TuneAM.NMs5.delayChangeOvertimeAlert             := 15.0;
TuneAM.NMs5.delayQTimeout                        := 20.0;
TuneAM.NMs5.delayExtraOn                         := 1.0;
TuneAM.NMs5.delayExtraOff                        := 1.0;
TuneAM.NMs5.delayNotMoveAlert                    := 5.0;
TuneAM.NMs5.delayCircBrkAlert                    := 1.0;

//Насос 6
TuneAM.NMs6.delayChangeOvertimeAlert             := 15.0;
TuneAM.NMs6.delayQTimeout                        := 20.0;
TuneAM.NMs6.delayExtraOn                         := 1.0;
TuneAM.NMs6.delayExtraOff                        := 1.0;
TuneAM.NMs6.delayNotMoveAlert                    := 5.0;
TuneAM.NMs6.delayCircBrkAlert                    := 1.0;]]></ST>
            </Function>
        </Folder>
        <Folder Name="InOut" Comment="" Data="" UUID="BZROJCBAYT6E5BSGYSMFK4JWV4">
            <Folder Name="AI" Comment="" Data="" UUID="K35VVPZKFE5E3GXTHUSEH35ATE">
                <Folder Name="ANB" Comment="" Data="" UUID="LIQOOFYDKUQUDORAKPPDEZHKIY">
                    <Function UUID="BYAR3MRKOBFE3ASGP7ZBFBDZQA" Name="ANB_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then

NMS_Ust.Tm_R1_Pn := 18.0; // Температура масла в P1. Склад ГСМ, поз.38: предупредительная нижняя
NMS_Ust.Tm_R1_Pv := 35.0; // Температура масла в P1. Склад ГСМ, поз.38: предупредительная верхняя
NMS_Ust.Tm_R1_Av := 45.0; // Температура масла в P1. Склад ГСМ, поз.38: аварийная верхняя
NMS_Ust.Tm_R2_Pn := 18.0; // Температура масла в P2. Склад ГСМ, поз.38: предупредительная нижняя
NMS_Ust.Tm_R2_Pv := 35.0; // Температура масла в P2. Склад ГСМ, поз.38: предупредительная верхняя
NMS_Ust.Tm_R2_Av := 45.0; // Температура масла в P2. Склад ГСМ, поз.38: аварийная верхняя
NMS_Ust.Tm_R3_Pn := 18.0; // Температура масла в P3. Склад ГСМ, поз.38: предупредительная нижняя
NMS_Ust.Tm_R3_Pv := 35.0; // Температура масла в P3. Склад ГСМ, поз.38: предупредительная верхняя
NMS_Ust.Tm_R3_Av := 45.0; // Температура масла в P3. Склад ГСМ, поз.38: аварийная верхняя
NMS_Ust.Tm_R4_Pn := 18.0; // Температура масла в P4. Склад ГСМ, поз.38: предупредительная нижняя
NMS_Ust.Tm_R4_Pv := 35.0; // Температура масла в P4. Склад ГСМ, поз.38: предупредительная верхняя
NMS_Ust.Tm_R4_Av := 45.0; // Температура масла в P4. Склад ГСМ, поз.38: аварийная верхняя
NMS_Ust.Tm_R5_Pn := 18.0; // Температура масла в P5. Склад ГСМ, поз.38: предупредительная нижняя
NMS_Ust.Tm_R5_Pv := 35.0; // Температура масла в P5. Склад ГСМ, поз.38: предупредительная верхняя
NMS_Ust.Tm_R5_Av := 45.0; // Температура масла в P5. Склад ГСМ, поз.38: аварийная верхняя
NMS_Ust.Tm_R6_Pn := 18.0; // Температура масла в P6. Склад ГСМ, поз.38: предупредительная нижняя
NMS_Ust.Tm_R6_Pv := 35.0; // Температура масла в P6. Склад ГСМ, поз.38: предупредительная верхняя
NMS_Ust.Tm_R6_Av := 45.0; // Температура масла в P6. Склад ГСМ, поз.38: аварийная верхняя
NMS_Ust.Tm_R7_Pn := 18.0; // Температура масла в P7. Склад ГСМ, поз.38: предупредительная нижняя
NMS_Ust.Tm_R7_Pv := 35.0; // Температура масла в P7. Склад ГСМ, поз.38: предупредительная верхняя
NMS_Ust.Tm_R7_Av := 45.0; // Температура масла в P7. Склад ГСМ, поз.38: аварийная верхняя
NMS_Ust.Lm_R1_An := 300.0; // Уровень масла в P1. Склад ГСМ, поз.38: аварийная нижняя
NMS_Ust.Lm_R1_Pn := 350.0; // Уровень масла в P1. Склад ГСМ, поз.38: предупредительная нижняя
NMS_Ust.Lm_R1_Pv := 1550.0; // Уровень масла в P1. Склад ГСМ, поз.38: предупредительная верхняя
NMS_Ust.Lm_R1_Av := 1600.0; // Уровень масла в P1. Склад ГСМ, поз.38: аварийная верхняя
NMS_Ust.Lm_R2_An := 300.0; // Уровень масла в P2. Склад ГСМ, поз.38: аварийная нижняя
NMS_Ust.Lm_R2_Pn := 350.0; // Уровень масла в P2. Склад ГСМ, поз.38: предупредительная нижняя
NMS_Ust.Lm_R2_Pv := 1550.0; // Уровень масла в P2. Склад ГСМ, поз.38: предупредительная верхняя
NMS_Ust.Lm_R2_Av := 1600.0; // Уровень масла в P2. Склад ГСМ, поз.38: аварийная верхняя
NMS_Ust.Lm_R3_An := 300.0; // Уровень масла в P3. Склад ГСМ, поз.38: аварийная нижняя
NMS_Ust.Lm_R3_Pn := 350.0; // Уровень масла в P3. Склад ГСМ, поз.38: предупредительная нижняя
NMS_Ust.Lm_R3_Pv := 1550.0; // Уровень масла в P3. Склад ГСМ, поз.38: предупредительная верхняя
NMS_Ust.Lm_R3_Av := 1600.0; // Уровень масла в P3. Склад ГСМ, поз.38: аварийная верхняя
NMS_Ust.Lm_R4_An := 300.0; // Уровень масла в P4. Склад ГСМ, поз.38: аварийная нижняя
NMS_Ust.Lm_R4_Pn := 350.0; // Уровень масла в P4. Склад ГСМ, поз.38: предупредительная нижняя
NMS_Ust.Lm_R4_Pv := 1550.0; // Уровень масла в P4. Склад ГСМ, поз.38: предупредительная верхняя
NMS_Ust.Lm_R4_Av := 1600.0; // Уровень масла в P4. Склад ГСМ, поз.38: аварийная верхняя
NMS_Ust.Lm_R5_An := 300.0; // Уровень масла в P5. Склад ГСМ, поз.38: аварийная нижняя
NMS_Ust.Lm_R5_Pn := 350.0; // Уровень масла в P5. Склад ГСМ, поз.38: предупредительная нижняя
NMS_Ust.Lm_R5_Pv := 1550.0; // Уровень масла в P5. Склад ГСМ, поз.38: предупредительная верхняя
NMS_Ust.Lm_R5_Av := 1600.0; // Уровень масла в P5. Склад ГСМ, поз.38: аварийная верхняя
NMS_Ust.Lm_R6_An := 300.0; // Уровень масла в P6. Склад ГСМ, поз.38: аварийная нижняя
NMS_Ust.Lm_R6_Pn := 350.0; // Уровень масла в P6. Склад ГСМ, поз.38: предупредительная нижняя
NMS_Ust.Lm_R6_Pv := 1550.0; // Уровень масла в P6. Склад ГСМ, поз.38: предупредительная верхняя
NMS_Ust.Lm_R6_Av := 1600.0; // Уровень масла в P6. Склад ГСМ, поз.38: аварийная верхняя
NMS_Ust.Lm_R7_An := 300.0; // Уровень масла в P7. Склад ГСМ, поз.38: аварийная нижняя
NMS_Ust.Lm_R7_Pn := 350.0; // Уровень масла в P7. Склад ГСМ, поз.38: предупредительная нижняя
NMS_Ust.Lm_R7_Pv := 1550.0; // Уровень масла в P7. Склад ГСМ, поз.38: предупредительная верхняя
NMS_Ust.Lm_R7_Av := 1600.0; // Уровень масла в P7. Склад ГСМ, поз.38: аварийная верхняя
NMS_Ust.Pm_out_N1_An := 0.15; // Давление на нагнетательном т/п насоса Н1. Насосная масел, поз.38.3: аварийная нижняя
NMS_Ust.Pm_out_N1_Pn := 0.17; // Давление на нагнетательном т/п насоса Н1. Насосная масел, поз.38.3: предупредительная нижняя
NMS_Ust.Pm_out_N1_Pv := 0.27; // Давление на нагнетательном т/п насоса Н1. Насосная масел, поз.38.3: предупредительная верхняя
NMS_Ust.Pm_out_N1_Av := 0.29; // Давление на нагнетательном т/п насоса Н1. Насосная масел, поз.38.3: аварийная верхняя
NMS_Ust.Pm_out_N2_An := 0.15; // Давление на нагнетательном т/п насоса Н2. Насосная масел, поз.38.3: аварийная нижняя
NMS_Ust.Pm_out_N2_Pn := 0.17; // Давление на нагнетательном т/п насоса Н2. Насосная масел, поз.38.3: предупредительная нижняя
NMS_Ust.Pm_out_N2_Pv := 0.27; // Давление на нагнетательном т/п насоса Н2. Насосная масел, поз.38.3: предупредительная верхняя
NMS_Ust.Pm_out_N2_Av := 0.29; // Давление на нагнетательном т/п насоса Н2. Насосная масел, поз.38.3: аварийная верхняя
NMS_Ust.Pm_out_N3_An := 0.15; // Давление на нагнетательном т/п насоса Н3. Насосная масел, поз.38.3: аварийная нижняя
NMS_Ust.Pm_out_N3_Pn := 0.17; // Давление на нагнетательном т/п насоса Н3. Насосная масел, поз.38.3: предупредительная нижняя
NMS_Ust.Pm_out_N3_Pv := 0.27; // Давление на нагнетательном т/п насоса Н3. Насосная масел, поз.38.3: предупредительная верхняя
NMS_Ust.Pm_out_N3_Av := 0.29; // Давление на нагнетательном т/п насоса Н3. Насосная масел, поз.38.3: аварийная верхняя
NMS_Ust.Pm_out_N4_An := 0.15; // Давление на нагнетательном т/п насоса Н4. Насосная масел, поз.38.3: аварийная нижняя
NMS_Ust.Pm_out_N4_Pn := 0.17; // Давление на нагнетательном т/п насоса Н4. Насосная масел, поз.38.3: предупредительная нижняя
NMS_Ust.Pm_out_N4_Pv := 0.27; // Давление на нагнетательном т/п насоса Н4. Насосная масел, поз.38.3: предупредительная верхняя
NMS_Ust.Pm_out_N4_Av := 0.29; // Давление на нагнетательном т/п насоса Н4. Насосная масел, поз.38.3: аварийная верхняя
NMS_Ust.Pm_out_N5_An := 0.15; // Давление на нагнетательном т/п насоса Н5. Насосная масел, поз.38.3: аварийная нижняя
NMS_Ust.Pm_out_N5_Pn := 0.17; // Давление на нагнетательном т/п насоса Н5. Насосная масел, поз.38.3: предупредительная нижняя
NMS_Ust.Pm_out_N5_Pv := 0.27; // Давление на нагнетательном т/п насоса Н5. Насосная масел, поз.38.3: предупредительная верхняя
NMS_Ust.Pm_out_N5_Av := 0.29; // Давление на нагнетательном т/п насоса Н5. Насосная масел, поз.38.3: аварийная верхняя
NMS_Ust.Pm_out_N6_An := 0.15; // Давление на нагнетательном т/п насоса Н6. Насосная масел, поз.38.3: аварийная нижняя
NMS_Ust.Pm_out_N6_Pn := 0.17; // Давление на нагнетательном т/п насоса Н6. Насосная масел, поз.38.3: предупредительная нижняя
NMS_Ust.Pm_out_N6_Pv := 0.27; // Давление на нагнетательном т/п насоса Н6. Насосная масел, поз.38.3: предупредительная верхняя
NMS_Ust.Pm_out_N6_Av := 0.29; // Давление на нагнетательном т/п насоса Н6. Насосная масел, поз.38.3: аварийная верхняя
NMS_Ust.Tm_E1_Pn := 18.0; // Температура в ёмкости масла E1. Насосная масел, поз.38.3: предупредительная нижняя
NMS_Ust.Tm_E1_Pv := 35.0; // Температура в ёмкости масла E1. Насосная масел, поз.38.3: предупредительная верхняя
NMS_Ust.Tm_E1_Av := 45.0; // Температура в ёмкости масла E1. Насосная масел, поз.38.3: аварийная верхняя
NMS_Ust.Tm_E2_Pn := 18.0; // Температура в ёмкости масла E2. Насосная масел, поз.38.3: предупредительная нижняя
NMS_Ust.Tm_E2_Pv := 35.0; // Температура в ёмкости масла E2. Насосная масел, поз.38.3: предупредительная верхняя
NMS_Ust.Tm_E2_Av := 45.0; // Температура в ёмкости масла E2. Насосная масел, поз.38.3: аварийная верхняя
NMS_Ust.Tm_E3_Pn := 18.0; // Температура в ёмкости масла E3. Насосная масел, поз.38.3: предупредительная нижняя
NMS_Ust.Tm_E3_Pv := 35.0; // Температура в ёмкости масла E3. Насосная масел, поз.38.3: предупредительная верхняя
NMS_Ust.Tm_E3_Av := 45.0; // Температура в ёмкости масла E3. Насосная масел, поз.38.3: аварийная верхняя
NMS_Ust.Tm_E4_Pn := 18.0; // Температура в ёмкости масла E4. Насосная масел, поз.38.3: предупредительная нижняя
NMS_Ust.Tm_E4_Pv := 35.0; // Температура в ёмкости масла E4. Насосная масел, поз.38.3: предупредительная верхняя
NMS_Ust.Tm_E4_Av := 45.0; // Температура в ёмкости масла E4. Насосная масел, поз.38.3: аварийная верхняя
NMS_Ust.Tm_E5_Pn := 18.0; // Температура в ёмкости масла E5. Насосная масел, поз.38.3: предупредительная нижняя
NMS_Ust.Tm_E5_Pv := 35.0; // Температура в ёмкости масла E5. Насосная масел, поз.38.3: предупредительная верхняя
NMS_Ust.Tm_E5_Av := 45.0; // Температура в ёмкости масла E5. Насосная масел, поз.38.3: аварийная верхняя
NMS_Ust.Tm_E6_Pn := 18.0; // Температура в ёмкости масла E6. Насосная масел, поз.38.3: предупредительная нижняя
NMS_Ust.Tm_E6_Pv := 35.0; // Температура в ёмкости масла E6. Насосная масел, поз.38.3: предупредительная верхняя
NMS_Ust.Tm_E6_Av := 45.0; // Температура в ёмкости масла E6. Насосная масел, поз.38.3: аварийная верхняя
NMS_Ust.Uosn_SAU_Pn := 187.0; // Основное напряжение питания ~220 В: предупредительная нижняя
NMS_Ust.Uosn_SAU_Pv := 242.0; // Основное напряжение питания ~220 В : предупредительная верхняя
NMS_Ust.Urez_SAU_Pn := 187.0; // Резервное напряжение питания ~220 В: предупредительная нижняя
NMS_Ust.Urez_SAU_Pv := 242.0; // Резервное напряжение питания ~220 В : предупредительная верхняя

//= Lm_R1_n-Lm_R7_n
NMS_Ust.Lm_R1_n_Pn := 12.0; //= Сигнализация мин. уровня в Р1. Склад ГСМ, поз.38
NMS_Ust.Lm_R2_n_Pn := 12.0; //= Сигнализация мин. уровня в Р2. Склад ГСМ, поз.38
NMS_Ust.Lm_R3_n_Pn := 12.0; //= Сигнализация мин. уровня в Р3. Склад ГСМ, поз.38
NMS_Ust.Lm_R4_n_Pn := 12.0; //= Сигнализация мин. уровня в Р4. Склад ГСМ, поз.38
NMS_Ust.Lm_R5_n_Pn := 12.0; //= Сигнализация мин. уровня в Р5. Склад ГСМ, поз.38
NMS_Ust.Lm_R6_n_Pn := 12.0; //= Сигнализация мин. уровня в Р6. Склад ГСМ, поз.38
NMS_Ust.Lm_R7_n_Pn := 12.0; //= Сигнализация мин. уровня в Р7. Склад ГСМ, поз.38
//= Lm_R1_v-Lm_R7_v
NMS_Ust.Lm_R1_v_Pv := 9.0; //= Сигнализация макс. уровня в Р1. Склад ГСМ, поз.38
NMS_Ust.Lm_R2_v_Pv := 9.0; //= Сигнализация макс. уровня в Р2. Склад ГСМ, поз.38
NMS_Ust.Lm_R3_v_Pv := 9.0; //= Сигнализация макс. уровня в Р3. Склад ГСМ, поз.38
NMS_Ust.Lm_R4_v_Pv := 9.0; //= Сигнализация макс. уровня в Р4. Склад ГСМ, поз.38
NMS_Ust.Lm_R5_v_Pv := 9.0; //= Сигнализация макс. уровня в Р5. Склад ГСМ, поз.38
NMS_Ust.Lm_R6_v_Pv := 9.0; //= Сигнализация макс. уровня в Р6. Склад ГСМ, поз.38
NMS_Ust.Lm_R7_v_Pv := 9.0; //= Сигнализация макс. уровня в Р7. Склад ГСМ, поз.38

//= Lm_E1_n-Lm_E6_n
NMS_Ust.Lm_E1_n_Pn := 12.0; //= Сигнализация мин. уровня в ёмкости Е1. Насосная масел, поз.38.3
NMS_Ust.Lm_E2_n_Pn := 12.0; //= Сигнализация мин. уровня в ёмкости Е2. Насосная масел, поз.38.3
NMS_Ust.Lm_E3_n_Pn := 12.0; //= Сигнализация мин. уровня в ёмкости Е3. Насосная масел, поз.38.3
NMS_Ust.Lm_E4_n_Pn := 12.0; //= Сигнализация мин. уровня в ёмкости Е4. Насосная масел, поз.38.3
NMS_Ust.Lm_E5_n_Pn := 12.0; //= Сигнализация мин. уровня в ёмкости Е5. Насосная масел, поз.38.3
NMS_Ust.Lm_E6_n_Pn := 12.0; //= Сигнализация мин. уровня в ёмкости Е6. Насосная масел, поз.38.3
//= Lm_E1_v-Lm_E6_v
NMS_Ust.Lm_E1_v_Pv := 9.0; //= Сигнализация макс. уровня в ёмкости Е1. Насосная масел, поз.38.3
NMS_Ust.Lm_E2_v_Pv := 9.0; //= Сигнализация макс. уровня в ёмкости Е2. Насосная масел, поз.38.3
NMS_Ust.Lm_E3_v_Pv := 9.0; //= Сигнализация макс. уровня в ёмкости Е3. Насосная масел, поз.38.3
NMS_Ust.Lm_E4_v_Pv := 9.0; //= Сигнализация макс. уровня в ёмкости Е4. Насосная масел, поз.38.3
NMS_Ust.Lm_E5_v_Pv := 9.0; //= Сигнализация макс. уровня в ёмкости Е5. Насосная масел, поз.38.3
NMS_Ust.Lm_E6_v_Pv := 9.0; //= Сигнализация макс. уровня в ёмкости Е6. Насосная масел, поз.38.3
//= Lm_R8_v
NMS_Ust.Lm_R8_v_Pv := 9.0; //= Сигнализация уровня в емкости. Емкость для аварийного слива масла, поз.38.4


//=====================================||уставка||setForFault||true - верхняя, false - нижняя||задержка||=================================

NMS_ANB_Settings.Tm_R1_Pn := ANB_init(0, false, 1.0); //Температура масла в P1. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB_Settings.Tm_R1_Pv := ANB_init(0, true, 1.0); //Температура масла в P1. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB_Settings.Tm_R1_Av := ANB_init(0, true, 1.0); //Температура масла в P1. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB_Settings.Tm_R2_Pn := ANB_init(0, false, 1.0); //Температура масла в P2. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB_Settings.Tm_R2_Pv := ANB_init(0, true, 1.0); //Температура масла в P2. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB_Settings.Tm_R2_Av := ANB_init(0, true, 1.0); //Температура масла в P2. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB_Settings.Tm_R3_Pn := ANB_init(0, false, 1.0); //Температура масла в P3. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB_Settings.Tm_R3_Pv := ANB_init(0, true, 1.0); //Температура масла в P3. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB_Settings.Tm_R3_Av := ANB_init(0, true, 1.0); //Температура масла в P3. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB_Settings.Tm_R4_Pn := ANB_init(0, false, 1.0); //Температура масла в P4. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB_Settings.Tm_R4_Pv := ANB_init(0, true, 1.0); //Температура масла в P4. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB_Settings.Tm_R4_Av := ANB_init(0, true, 1.0); //Температура масла в P4. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB_Settings.Tm_R5_Pn := ANB_init(0, false, 1.0); //Температура масла в P5. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB_Settings.Tm_R5_Pv := ANB_init(0, true, 1.0); //Температура масла в P5. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB_Settings.Tm_R5_Av := ANB_init(0, true, 1.0); //Температура масла в P5. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB_Settings.Tm_R6_Pn := ANB_init(0, false, 1.0); //Температура масла в P6. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB_Settings.Tm_R6_Pv := ANB_init(0, true, 1.0); //Температура масла в P6. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB_Settings.Tm_R6_Av := ANB_init(0, true, 1.0); //Температура масла в P6. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB_Settings.Tm_R7_Pn := ANB_init(0, false, 1.0); //Температура масла в P7. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB_Settings.Tm_R7_Pv := ANB_init(0, true, 1.0); //Температура масла в P7. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB_Settings.Tm_R7_Av := ANB_init(0, true, 1.0); //Температура масла в P7. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB_Settings.Lm_R1_An := ANB_init(0, false, 1.0); //Уровень масла в P1. Склад ГСМ, поз.38: аварийная нижняя
NMS_ANB_Settings.Lm_R1_Pn := ANB_init(0, false, 1.0); //Уровень масла в P1. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB_Settings.Lm_R1_Pv := ANB_init(0, true, 1.0); //Уровень масла в P1. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB_Settings.Lm_R1_Av := ANB_init(0, true, 1.0); //Уровень масла в P1. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB_Settings.Lm_R2_An := ANB_init(0, false, 1.0); //Уровень масла в P2. Склад ГСМ, поз.38: аварийная нижняя
NMS_ANB_Settings.Lm_R2_Pn := ANB_init(0, false, 1.0); //Уровень масла в P2. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB_Settings.Lm_R2_Pv := ANB_init(0, true, 1.0); //Уровень масла в P2. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB_Settings.Lm_R2_Av := ANB_init(0, true, 1.0); //Уровень масла в P2. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB_Settings.Lm_R3_An := ANB_init(0, false, 1.0); //Уровень масла в P3. Склад ГСМ, поз.38: аварийная нижняя
NMS_ANB_Settings.Lm_R3_Pn := ANB_init(0, false, 1.0); //Уровень масла в P3. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB_Settings.Lm_R3_Pv := ANB_init(0, true, 1.0); //Уровень масла в P3. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB_Settings.Lm_R3_Av := ANB_init(0, true, 1.0); //Уровень масла в P3. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB_Settings.Lm_R4_An := ANB_init(0, false, 1.0); //Уровень масла в P4. Склад ГСМ, поз.38: аварийная нижняя
NMS_ANB_Settings.Lm_R4_Pn := ANB_init(0, false, 1.0); //Уровень масла в P4. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB_Settings.Lm_R4_Pv := ANB_init(0, true, 1.0); //Уровень масла в P4. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB_Settings.Lm_R4_Av := ANB_init(0, true, 1.0); //Уровень масла в P4. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB_Settings.Lm_R5_An := ANB_init(0, false, 1.0); //Уровень масла в P5. Склад ГСМ, поз.38: аварийная нижняя
NMS_ANB_Settings.Lm_R5_Pn := ANB_init(0, false, 1.0); //Уровень масла в P5. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB_Settings.Lm_R5_Pv := ANB_init(0, true, 1.0); //Уровень масла в P5. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB_Settings.Lm_R5_Av := ANB_init(0, true, 1.0); //Уровень масла в P5. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB_Settings.Lm_R6_An := ANB_init(0, false, 1.0); //Уровень масла в P6. Склад ГСМ, поз.38: аварийная нижняя
NMS_ANB_Settings.Lm_R6_Pn := ANB_init(0, false, 1.0); //Уровень масла в P6. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB_Settings.Lm_R6_Pv := ANB_init(0, true, 1.0); //Уровень масла в P6. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB_Settings.Lm_R6_Av := ANB_init(0, true, 1.0); //Уровень масла в P6. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB_Settings.Lm_R7_An := ANB_init(0, false, 1.0); //Уровень масла в P7. Склад ГСМ, поз.38: аварийная нижняя
NMS_ANB_Settings.Lm_R7_Pn := ANB_init(0, false, 1.0); //Уровень масла в P7. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB_Settings.Lm_R7_Pv := ANB_init(0, true, 1.0); //Уровень масла в P7. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB_Settings.Lm_R7_Av := ANB_init(0, true, 1.0); //Уровень масла в P7. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB_Settings.Pm_out_N1_An := ANB_init(0, false, 1.0); //Давление на нагнетательном т/п насоса Н1. Насосная масел, поз.38.3: аварийная нижняя
NMS_ANB_Settings.Pm_out_N1_Pn := ANB_init(0, false, 1.0); //Давление на нагнетательном т/п насоса Н1. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB_Settings.Pm_out_N1_Pv := ANB_init(0, true, 1.0); //Давление на нагнетательном т/п насоса Н1. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB_Settings.Pm_out_N1_Av := ANB_init(0, true, 1.0); //Давление на нагнетательном т/п насоса Н1. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB_Settings.Pm_out_N2_An := ANB_init(0, false, 1.0); //Давление на нагнетательном т/п насоса Н2. Насосная масел, поз.38.3: аварийная нижняя
NMS_ANB_Settings.Pm_out_N2_Pn := ANB_init(0, false, 1.0); //Давление на нагнетательном т/п насоса Н2. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB_Settings.Pm_out_N2_Pv := ANB_init(0, true, 1.0); //Давление на нагнетательном т/п насоса Н2. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB_Settings.Pm_out_N2_Av := ANB_init(0, true, 1.0); //Давление на нагнетательном т/п насоса Н2. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB_Settings.Pm_out_N3_An := ANB_init(0, false, 1.0); //Давление на нагнетательном т/п насоса Н3. Насосная масел, поз.38.3: аварийная нижняя
NMS_ANB_Settings.Pm_out_N3_Pn := ANB_init(0, false, 1.0); //Давление на нагнетательном т/п насоса Н3. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB_Settings.Pm_out_N3_Pv := ANB_init(0, true, 1.0); //Давление на нагнетательном т/п насоса Н3. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB_Settings.Pm_out_N3_Av := ANB_init(0, true, 1.0); //Давление на нагнетательном т/п насоса Н3. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB_Settings.Pm_out_N4_An := ANB_init(0, false, 1.0); //Давление на нагнетательном т/п насоса Н4. Насосная масел, поз.38.3: аварийная нижняя
NMS_ANB_Settings.Pm_out_N4_Pn := ANB_init(0, false, 1.0); //Давление на нагнетательном т/п насоса Н4. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB_Settings.Pm_out_N4_Pv := ANB_init(0, true, 1.0); //Давление на нагнетательном т/п насоса Н4. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB_Settings.Pm_out_N4_Av := ANB_init(0, true, 1.0); //Давление на нагнетательном т/п насоса Н4. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB_Settings.Pm_out_N5_An := ANB_init(0, false, 1.0); //Давление на нагнетательном т/п насоса Н5. Насосная масел, поз.38.3: аварийная нижняя
NMS_ANB_Settings.Pm_out_N5_Pn := ANB_init(0, false, 1.0); //Давление на нагнетательном т/п насоса Н5. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB_Settings.Pm_out_N5_Pv := ANB_init(0, true, 1.0); //Давление на нагнетательном т/п насоса Н5. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB_Settings.Pm_out_N5_Av := ANB_init(0, true, 1.0); //Давление на нагнетательном т/п насоса Н5. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB_Settings.Pm_out_N6_An := ANB_init(0, false, 1.0); //Давление на нагнетательном т/п насоса Н6. Насосная масел, поз.38.3: аварийная нижняя
NMS_ANB_Settings.Pm_out_N6_Pn := ANB_init(0, false, 1.0); //Давление на нагнетательном т/п насоса Н6. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB_Settings.Pm_out_N6_Pv := ANB_init(0, true, 1.0); //Давление на нагнетательном т/п насоса Н6. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB_Settings.Pm_out_N6_Av := ANB_init(0, true, 1.0); //Давление на нагнетательном т/п насоса Н6. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB_Settings.Tm_E1_Pn := ANB_init(0, false, 1.0); //Температура в ёмкости масла E1. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB_Settings.Tm_E1_Pv := ANB_init(0, true, 1.0); //Температура в ёмкости масла E1. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB_Settings.Tm_E1_Av := ANB_init(0, true, 1.0); //Температура в ёмкости масла E1. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB_Settings.Tm_E2_Pn := ANB_init(0, false, 1.0); //Температура в ёмкости масла E2. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB_Settings.Tm_E2_Pv := ANB_init(0, true, 1.0); //Температура в ёмкости масла E2. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB_Settings.Tm_E2_Av := ANB_init(0, true, 1.0); //Температура в ёмкости масла E2. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB_Settings.Tm_E3_Pn := ANB_init(0, false, 1.0); //Температура в ёмкости масла E3. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB_Settings.Tm_E3_Pv := ANB_init(0, true, 1.0); //Температура в ёмкости масла E3. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB_Settings.Tm_E3_Av := ANB_init(0, true, 1.0); //Температура в ёмкости масла E3. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB_Settings.Tm_E4_Pn := ANB_init(0, false, 1.0); //Температура в ёмкости масла E4. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB_Settings.Tm_E4_Pv := ANB_init(0, true, 1.0); //Температура в ёмкости масла E4. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB_Settings.Tm_E4_Av := ANB_init(0, true, 1.0); //Температура в ёмкости масла E4. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB_Settings.Tm_E5_Pn := ANB_init(0, false, 1.0); //Температура в ёмкости масла E5. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB_Settings.Tm_E5_Pv := ANB_init(0, true, 1.0); //Температура в ёмкости масла E5. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB_Settings.Tm_E5_Av := ANB_init(0, true, 1.0); //Температура в ёмкости масла E5. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB_Settings.Tm_E6_Pn := ANB_init(0, false, 1.0); //Температура в ёмкости масла E6. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB_Settings.Tm_E6_Pv := ANB_init(0, true, 1.0); //Температура в ёмкости масла E6. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB_Settings.Tm_E6_Av := ANB_init(0, true, 1.0); //Температура в ёмкости масла E6. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB_Settings.Uosn_SAU_Pn := ANB_init(0, false, 1.0); //Основное напряжение питания ~220 В: предупредительная нижняя
NMS_ANB_Settings.Uosn_SAU_Pv := ANB_init(0, true, 1.0); //Основное напряжение питания ~220 В : предупредительная верхняя
NMS_ANB_Settings.Urez_SAU_Pn := ANB_init(0, false, 1.0); //Резервное напряжение питания ~220 В: предупредительная нижняя
NMS_ANB_Settings.Urez_SAU_Pv := ANB_init(0, true, 1.0); //Резервное напряжение питания ~220 В : предупредительная верхняя

//= Lm_R1_n-Lm_R7_n
NMS_ANB_Settings.Lm_R1_n_Pn := ANB_init(0, true, 1.0); //= Сигнализация мин. уровня в Р1. Склад ГСМ, поз.38
NMS_ANB_Settings.Lm_R2_n_Pn := ANB_init(0, true, 1.0); //= Сигнализация мин. уровня в Р2. Склад ГСМ, поз.38
NMS_ANB_Settings.Lm_R3_n_Pn := ANB_init(0, true, 1.0); //= Сигнализация мин. уровня в Р3. Склад ГСМ, поз.38
NMS_ANB_Settings.Lm_R4_n_Pn := ANB_init(0, true, 1.0); //= Сигнализация мин. уровня в Р4. Склад ГСМ, поз.38
NMS_ANB_Settings.Lm_R5_n_Pn := ANB_init(0, true, 1.0); //= Сигнализация мин. уровня в Р5. Склад ГСМ, поз.38
NMS_ANB_Settings.Lm_R6_n_Pn := ANB_init(0, true, 1.0); //= Сигнализация мин. уровня в Р6. Склад ГСМ, поз.38
NMS_ANB_Settings.Lm_R7_n_Pn := ANB_init(0, true, 1.0); //= Сигнализация мин. уровня в Р7. Склад ГСМ, поз.38
//= Lm_R1_v-Lm_R7_v
NMS_ANB_Settings.Lm_R1_v_Pv := ANB_init(0, false, 1.0); //= Сигнализация макс. уровня в Р1. Склад ГСМ, поз.38
NMS_ANB_Settings.Lm_R2_v_Pv := ANB_init(0, false, 1.0); //= Сигнализация макс. уровня в Р2. Склад ГСМ, поз.38
NMS_ANB_Settings.Lm_R3_v_Pv := ANB_init(0, false, 1.0); //= Сигнализация макс. уровня в Р3. Склад ГСМ, поз.38
NMS_ANB_Settings.Lm_R4_v_Pv := ANB_init(0, false, 1.0); //= Сигнализация макс. уровня в Р4. Склад ГСМ, поз.38
NMS_ANB_Settings.Lm_R5_v_Pv := ANB_init(0, false, 1.0); //= Сигнализация макс. уровня в Р5. Склад ГСМ, поз.38
NMS_ANB_Settings.Lm_R6_v_Pv := ANB_init(0, false, 1.0); //= Сигнализация макс. уровня в Р6. Склад ГСМ, поз.38
NMS_ANB_Settings.Lm_R7_v_Pv := ANB_init(0, false, 1.0); //= Сигнализация макс. уровня в Р7. Склад ГСМ, поз.38

//= Lm_E1_n-Lm_E6_n
NMS_ANB_Settings.Lm_E1_n_Pn := ANB_init(0, true, 1.0); //= Сигнализация мин. уровня в ёмкости Е1. Насосная масел, поз.38.3
NMS_ANB_Settings.Lm_E2_n_Pn := ANB_init(0, true, 1.0); //= Сигнализация мин. уровня в ёмкости Е2. Насосная масел, поз.38.3
NMS_ANB_Settings.Lm_E3_n_Pn := ANB_init(0, true, 1.0); //= Сигнализация мин. уровня в ёмкости Е3. Насосная масел, поз.38.3
NMS_ANB_Settings.Lm_E4_n_Pn := ANB_init(0, true, 1.0); //= Сигнализация мин. уровня в ёмкости Е4. Насосная масел, поз.38.3
NMS_ANB_Settings.Lm_E5_n_Pn := ANB_init(0, true, 1.0); //= Сигнализация мин. уровня в ёмкости Е5. Насосная масел, поз.38.3
NMS_ANB_Settings.Lm_E6_n_Pn := ANB_init(0, true, 1.0); //= Сигнализация мин. уровня в ёмкости Е6. Насосная масел, поз.38.3
//= Lm_E1_v-Lm_E6_v
NMS_ANB_Settings.Lm_E1_v_Pv := ANB_init(0, false, 1.0); //= Сигнализация макс. уровня в ёмкости Е1. Насосная масел, поз.38.3
NMS_ANB_Settings.Lm_E2_v_Pv := ANB_init(0, false, 1.0); //= Сигнализация макс. уровня в ёмкости Е2. Насосная масел, поз.38.3
NMS_ANB_Settings.Lm_E3_v_Pv := ANB_init(0, false, 1.0); //= Сигнализация макс. уровня в ёмкости Е3. Насосная масел, поз.38.3
NMS_ANB_Settings.Lm_E4_v_Pv := ANB_init(0, false, 1.0); //= Сигнализация макс. уровня в ёмкости Е4. Насосная масел, поз.38.3
NMS_ANB_Settings.Lm_E5_v_Pv := ANB_init(0, false, 1.0); //= Сигнализация макс. уровня в ёмкости Е5. Насосная масел, поз.38.3
NMS_ANB_Settings.Lm_E6_v_Pv := ANB_init(0, false, 1.0); //= Сигнализация макс. уровня в ёмкости Е6. Насосная масел, поз.38.3
//= Lm_R8_v
NMS_ANB_Settings.Lm_R8_v_Pv := ANB_init(0, false, 1.0); //= Сигнализация уровня в емкости. Емкость для аварийного слива масла, поз.38.4

end_if;

//========================================================================================================================================

NMS_ANB.Tm_R1_Pn := ANB_Processing(NMS_Ust.Tm_R1_Pn, NMS_AI_ToHMI.Tm_R1.PV, NMS_AI_ToHMI.Tm_R1.fault_common, NMS_ANB_Settings.Tm_R1_Pn, NMS_ANB_Internal.Tm_R1_Pn); // Температура масла в P1. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB.Tm_R1_Pv := ANB_Processing(NMS_Ust.Tm_R1_Pv, NMS_AI_ToHMI.Tm_R1.PV, NMS_AI_ToHMI.Tm_R1.fault_common, NMS_ANB_Settings.Tm_R1_Pv, NMS_ANB_Internal.Tm_R1_Pv); // Температура масла в P1. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB.Tm_R1_Av := ANB_Processing(NMS_Ust.Tm_R1_Av, NMS_AI_ToHMI.Tm_R1.PV, NMS_AI_ToHMI.Tm_R1.fault_common, NMS_ANB_Settings.Tm_R1_Av, NMS_ANB_Internal.Tm_R1_Av); // Температура масла в P1. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB.Tm_R2_Pn := ANB_Processing(NMS_Ust.Tm_R2_Pn, NMS_AI_ToHMI.Tm_R2.PV, NMS_AI_ToHMI.Tm_R2.fault_common, NMS_ANB_Settings.Tm_R2_Pn, NMS_ANB_Internal.Tm_R2_Pn); // Температура масла в P2. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB.Tm_R2_Pv := ANB_Processing(NMS_Ust.Tm_R2_Pv, NMS_AI_ToHMI.Tm_R2.PV, NMS_AI_ToHMI.Tm_R2.fault_common, NMS_ANB_Settings.Tm_R2_Pv, NMS_ANB_Internal.Tm_R2_Pv); // Температура масла в P2. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB.Tm_R2_Av := ANB_Processing(NMS_Ust.Tm_R2_Av, NMS_AI_ToHMI.Tm_R2.PV, NMS_AI_ToHMI.Tm_R2.fault_common, NMS_ANB_Settings.Tm_R2_Av, NMS_ANB_Internal.Tm_R2_Av); // Температура масла в P2. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB.Tm_R3_Pn := ANB_Processing(NMS_Ust.Tm_R3_Pn, NMS_AI_ToHMI.Tm_R3.PV, NMS_AI_ToHMI.Tm_R3.fault_common, NMS_ANB_Settings.Tm_R3_Pn, NMS_ANB_Internal.Tm_R3_Pn); // Температура масла в P3. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB.Tm_R3_Pv := ANB_Processing(NMS_Ust.Tm_R3_Pv, NMS_AI_ToHMI.Tm_R3.PV, NMS_AI_ToHMI.Tm_R3.fault_common, NMS_ANB_Settings.Tm_R3_Pv, NMS_ANB_Internal.Tm_R3_Pv); // Температура масла в P3. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB.Tm_R3_Av := ANB_Processing(NMS_Ust.Tm_R3_Av, NMS_AI_ToHMI.Tm_R3.PV, NMS_AI_ToHMI.Tm_R3.fault_common, NMS_ANB_Settings.Tm_R3_Av, NMS_ANB_Internal.Tm_R3_Av); // Температура масла в P3. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB.Tm_R4_Pn := ANB_Processing(NMS_Ust.Tm_R4_Pn, NMS_AI_ToHMI.Tm_R4.PV, NMS_AI_ToHMI.Tm_R4.fault_common, NMS_ANB_Settings.Tm_R4_Pn, NMS_ANB_Internal.Tm_R4_Pn); // Температура масла в P4. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB.Tm_R4_Pv := ANB_Processing(NMS_Ust.Tm_R4_Pv, NMS_AI_ToHMI.Tm_R4.PV, NMS_AI_ToHMI.Tm_R4.fault_common, NMS_ANB_Settings.Tm_R4_Pv, NMS_ANB_Internal.Tm_R4_Pv); // Температура масла в P4. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB.Tm_R4_Av := ANB_Processing(NMS_Ust.Tm_R4_Av, NMS_AI_ToHMI.Tm_R4.PV, NMS_AI_ToHMI.Tm_R4.fault_common, NMS_ANB_Settings.Tm_R4_Av, NMS_ANB_Internal.Tm_R4_Av); // Температура масла в P4. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB.Tm_R5_Pn := ANB_Processing(NMS_Ust.Tm_R5_Pn, NMS_AI_ToHMI.Tm_R5.PV, NMS_AI_ToHMI.Tm_R5.fault_common, NMS_ANB_Settings.Tm_R5_Pn, NMS_ANB_Internal.Tm_R5_Pn); // Температура масла в P5. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB.Tm_R5_Pv := ANB_Processing(NMS_Ust.Tm_R5_Pv, NMS_AI_ToHMI.Tm_R5.PV, NMS_AI_ToHMI.Tm_R5.fault_common, NMS_ANB_Settings.Tm_R5_Pv, NMS_ANB_Internal.Tm_R5_Pv); // Температура масла в P5. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB.Tm_R5_Av := ANB_Processing(NMS_Ust.Tm_R5_Av, NMS_AI_ToHMI.Tm_R5.PV, NMS_AI_ToHMI.Tm_R5.fault_common, NMS_ANB_Settings.Tm_R5_Av, NMS_ANB_Internal.Tm_R5_Av); // Температура масла в P5. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB.Tm_R6_Pn := ANB_Processing(NMS_Ust.Tm_R6_Pn, NMS_AI_ToHMI.Tm_R6.PV, NMS_AI_ToHMI.Tm_R6.fault_common, NMS_ANB_Settings.Tm_R6_Pn, NMS_ANB_Internal.Tm_R6_Pn); // Температура масла в P6. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB.Tm_R6_Pv := ANB_Processing(NMS_Ust.Tm_R6_Pv, NMS_AI_ToHMI.Tm_R6.PV, NMS_AI_ToHMI.Tm_R6.fault_common, NMS_ANB_Settings.Tm_R6_Pv, NMS_ANB_Internal.Tm_R6_Pv); // Температура масла в P6. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB.Tm_R6_Av := ANB_Processing(NMS_Ust.Tm_R6_Av, NMS_AI_ToHMI.Tm_R6.PV, NMS_AI_ToHMI.Tm_R6.fault_common, NMS_ANB_Settings.Tm_R6_Av, NMS_ANB_Internal.Tm_R6_Av); // Температура масла в P6. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB.Tm_R7_Pn := ANB_Processing(NMS_Ust.Tm_R7_Pn, NMS_AI_ToHMI.Tm_R7.PV, NMS_AI_ToHMI.Tm_R7.fault_common, NMS_ANB_Settings.Tm_R7_Pn, NMS_ANB_Internal.Tm_R7_Pn); // Температура масла в P7. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB.Tm_R7_Pv := ANB_Processing(NMS_Ust.Tm_R7_Pv, NMS_AI_ToHMI.Tm_R7.PV, NMS_AI_ToHMI.Tm_R7.fault_common, NMS_ANB_Settings.Tm_R7_Pv, NMS_ANB_Internal.Tm_R7_Pv); // Температура масла в P7. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB.Tm_R7_Av := ANB_Processing(NMS_Ust.Tm_R7_Av, NMS_AI_ToHMI.Tm_R7.PV, NMS_AI_ToHMI.Tm_R7.fault_common, NMS_ANB_Settings.Tm_R7_Av, NMS_ANB_Internal.Tm_R7_Av); // Температура масла в P7. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB.Lm_R1_An := ANB_Processing(NMS_Ust.Lm_R1_An, NMS_AI_ToHMI.Lm_R1.PV, NMS_AI_ToHMI.Lm_R1.fault_common, NMS_ANB_Settings.Lm_R1_An, NMS_ANB_Internal.Lm_R1_An); // Уровень масла в P1. Склад ГСМ, поз.38: аварийная нижняя
NMS_ANB.Lm_R1_Pn := ANB_Processing(NMS_Ust.Lm_R1_Pn, NMS_AI_ToHMI.Lm_R1.PV, NMS_AI_ToHMI.Lm_R1.fault_common, NMS_ANB_Settings.Lm_R1_Pn, NMS_ANB_Internal.Lm_R1_Pn); // Уровень масла в P1. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB.Lm_R1_Pv := ANB_Processing(NMS_Ust.Lm_R1_Pv, NMS_AI_ToHMI.Lm_R1.PV, NMS_AI_ToHMI.Lm_R1.fault_common, NMS_ANB_Settings.Lm_R1_Pv, NMS_ANB_Internal.Lm_R1_Pv); // Уровень масла в P1. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB.Lm_R1_Av := ANB_Processing(NMS_Ust.Lm_R1_Av, NMS_AI_ToHMI.Lm_R1.PV, NMS_AI_ToHMI.Lm_R1.fault_common, NMS_ANB_Settings.Lm_R1_Av, NMS_ANB_Internal.Lm_R1_Av); // Уровень масла в P1. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB.Lm_R2_An := ANB_Processing(NMS_Ust.Lm_R2_An, NMS_AI_ToHMI.Lm_R2.PV, NMS_AI_ToHMI.Lm_R2.fault_common, NMS_ANB_Settings.Lm_R2_An, NMS_ANB_Internal.Lm_R2_An); // Уровень масла в P2. Склад ГСМ, поз.38: аварийная нижняя
NMS_ANB.Lm_R2_Pn := ANB_Processing(NMS_Ust.Lm_R2_Pn, NMS_AI_ToHMI.Lm_R2.PV, NMS_AI_ToHMI.Lm_R2.fault_common, NMS_ANB_Settings.Lm_R2_Pn, NMS_ANB_Internal.Lm_R2_Pn); // Уровень масла в P2. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB.Lm_R2_Pv := ANB_Processing(NMS_Ust.Lm_R2_Pv, NMS_AI_ToHMI.Lm_R2.PV, NMS_AI_ToHMI.Lm_R2.fault_common, NMS_ANB_Settings.Lm_R2_Pv, NMS_ANB_Internal.Lm_R2_Pv); // Уровень масла в P2. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB.Lm_R2_Av := ANB_Processing(NMS_Ust.Lm_R2_Av, NMS_AI_ToHMI.Lm_R2.PV, NMS_AI_ToHMI.Lm_R2.fault_common, NMS_ANB_Settings.Lm_R2_Av, NMS_ANB_Internal.Lm_R2_Av); // Уровень масла в P2. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB.Lm_R3_An := ANB_Processing(NMS_Ust.Lm_R3_An, NMS_AI_ToHMI.Lm_R3.PV, NMS_AI_ToHMI.Lm_R3.fault_common, NMS_ANB_Settings.Lm_R3_An, NMS_ANB_Internal.Lm_R3_An); // Уровень масла в P3. Склад ГСМ, поз.38: аварийная нижняя
NMS_ANB.Lm_R3_Pn := ANB_Processing(NMS_Ust.Lm_R3_Pn, NMS_AI_ToHMI.Lm_R3.PV, NMS_AI_ToHMI.Lm_R3.fault_common, NMS_ANB_Settings.Lm_R3_Pn, NMS_ANB_Internal.Lm_R3_Pn); // Уровень масла в P3. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB.Lm_R3_Pv := ANB_Processing(NMS_Ust.Lm_R3_Pv, NMS_AI_ToHMI.Lm_R3.PV, NMS_AI_ToHMI.Lm_R3.fault_common, NMS_ANB_Settings.Lm_R3_Pv, NMS_ANB_Internal.Lm_R3_Pv); // Уровень масла в P3. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB.Lm_R3_Av := ANB_Processing(NMS_Ust.Lm_R3_Av, NMS_AI_ToHMI.Lm_R3.PV, NMS_AI_ToHMI.Lm_R3.fault_common, NMS_ANB_Settings.Lm_R3_Av, NMS_ANB_Internal.Lm_R3_Av); // Уровень масла в P3. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB.Lm_R4_An := ANB_Processing(NMS_Ust.Lm_R4_An, NMS_AI_ToHMI.Lm_R4.PV, NMS_AI_ToHMI.Lm_R4.fault_common, NMS_ANB_Settings.Lm_R4_An, NMS_ANB_Internal.Lm_R4_An); // Уровень масла в P4. Склад ГСМ, поз.38: аварийная нижняя
NMS_ANB.Lm_R4_Pn := ANB_Processing(NMS_Ust.Lm_R4_Pn, NMS_AI_ToHMI.Lm_R4.PV, NMS_AI_ToHMI.Lm_R4.fault_common, NMS_ANB_Settings.Lm_R4_Pn, NMS_ANB_Internal.Lm_R4_Pn); // Уровень масла в P4. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB.Lm_R4_Pv := ANB_Processing(NMS_Ust.Lm_R4_Pv, NMS_AI_ToHMI.Lm_R4.PV, NMS_AI_ToHMI.Lm_R4.fault_common, NMS_ANB_Settings.Lm_R4_Pv, NMS_ANB_Internal.Lm_R4_Pv); // Уровень масла в P4. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB.Lm_R4_Av := ANB_Processing(NMS_Ust.Lm_R4_Av, NMS_AI_ToHMI.Lm_R4.PV, NMS_AI_ToHMI.Lm_R4.fault_common, NMS_ANB_Settings.Lm_R4_Av, NMS_ANB_Internal.Lm_R4_Av); // Уровень масла в P4. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB.Lm_R5_An := ANB_Processing(NMS_Ust.Lm_R5_An, NMS_AI_ToHMI.Lm_R5.PV, NMS_AI_ToHMI.Lm_R5.fault_common, NMS_ANB_Settings.Lm_R5_An, NMS_ANB_Internal.Lm_R5_An); // Уровень масла в P5. Склад ГСМ, поз.38: аварийная нижняя
NMS_ANB.Lm_R5_Pn := ANB_Processing(NMS_Ust.Lm_R5_Pn, NMS_AI_ToHMI.Lm_R5.PV, NMS_AI_ToHMI.Lm_R5.fault_common, NMS_ANB_Settings.Lm_R5_Pn, NMS_ANB_Internal.Lm_R5_Pn); // Уровень масла в P5. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB.Lm_R5_Pv := ANB_Processing(NMS_Ust.Lm_R5_Pv, NMS_AI_ToHMI.Lm_R5.PV, NMS_AI_ToHMI.Lm_R5.fault_common, NMS_ANB_Settings.Lm_R5_Pv, NMS_ANB_Internal.Lm_R5_Pv); // Уровень масла в P5. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB.Lm_R5_Av := ANB_Processing(NMS_Ust.Lm_R5_Av, NMS_AI_ToHMI.Lm_R5.PV, NMS_AI_ToHMI.Lm_R5.fault_common, NMS_ANB_Settings.Lm_R5_Av, NMS_ANB_Internal.Lm_R5_Av); // Уровень масла в P5. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB.Lm_R6_An := ANB_Processing(NMS_Ust.Lm_R6_An, NMS_AI_ToHMI.Lm_R6.PV, NMS_AI_ToHMI.Lm_R6.fault_common, NMS_ANB_Settings.Lm_R6_An, NMS_ANB_Internal.Lm_R6_An); // Уровень масла в P6. Склад ГСМ, поз.38: аварийная нижняя
NMS_ANB.Lm_R6_Pn := ANB_Processing(NMS_Ust.Lm_R6_Pn, NMS_AI_ToHMI.Lm_R6.PV, NMS_AI_ToHMI.Lm_R6.fault_common, NMS_ANB_Settings.Lm_R6_Pn, NMS_ANB_Internal.Lm_R6_Pn); // Уровень масла в P6. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB.Lm_R6_Pv := ANB_Processing(NMS_Ust.Lm_R6_Pv, NMS_AI_ToHMI.Lm_R6.PV, NMS_AI_ToHMI.Lm_R6.fault_common, NMS_ANB_Settings.Lm_R6_Pv, NMS_ANB_Internal.Lm_R6_Pv); // Уровень масла в P6. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB.Lm_R6_Av := ANB_Processing(NMS_Ust.Lm_R6_Av, NMS_AI_ToHMI.Lm_R6.PV, NMS_AI_ToHMI.Lm_R6.fault_common, NMS_ANB_Settings.Lm_R6_Av, NMS_ANB_Internal.Lm_R6_Av); // Уровень масла в P6. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB.Lm_R7_An := ANB_Processing(NMS_Ust.Lm_R7_An, NMS_AI_ToHMI.Lm_R7.PV, NMS_AI_ToHMI.Lm_R7.fault_common, NMS_ANB_Settings.Lm_R7_An, NMS_ANB_Internal.Lm_R7_An); // Уровень масла в P7. Склад ГСМ, поз.38: аварийная нижняя
NMS_ANB.Lm_R7_Pn := ANB_Processing(NMS_Ust.Lm_R7_Pn, NMS_AI_ToHMI.Lm_R7.PV, NMS_AI_ToHMI.Lm_R7.fault_common, NMS_ANB_Settings.Lm_R7_Pn, NMS_ANB_Internal.Lm_R7_Pn); // Уровень масла в P7. Склад ГСМ, поз.38: предупредительная нижняя
NMS_ANB.Lm_R7_Pv := ANB_Processing(NMS_Ust.Lm_R7_Pv, NMS_AI_ToHMI.Lm_R7.PV, NMS_AI_ToHMI.Lm_R7.fault_common, NMS_ANB_Settings.Lm_R7_Pv, NMS_ANB_Internal.Lm_R7_Pv); // Уровень масла в P7. Склад ГСМ, поз.38: предупредительная верхняя
NMS_ANB.Lm_R7_Av := ANB_Processing(NMS_Ust.Lm_R7_Av, NMS_AI_ToHMI.Lm_R7.PV, NMS_AI_ToHMI.Lm_R7.fault_common, NMS_ANB_Settings.Lm_R7_Av, NMS_ANB_Internal.Lm_R7_Av); // Уровень масла в P7. Склад ГСМ, поз.38: аварийная верхняя
NMS_ANB.Pm_out_N1_An := ANB_Processing(NMS_Ust.Pm_out_N1_An, NMS_AI_ToHMI.Pm_out_N1.PV, NMS_AI_ToHMI.Pm_out_N1.fault_common, NMS_ANB_Settings.Pm_out_N1_An, NMS_ANB_Internal.Pm_out_N1_An); // Давление на нагнетательном т/п насоса Н1. Насосная масел, поз.38.3: аварийная нижняя
NMS_ANB.Pm_out_N1_Pn := ANB_Processing(NMS_Ust.Pm_out_N1_Pn, NMS_AI_ToHMI.Pm_out_N1.PV, NMS_AI_ToHMI.Pm_out_N1.fault_common, NMS_ANB_Settings.Pm_out_N1_Pn, NMS_ANB_Internal.Pm_out_N1_Pn); // Давление на нагнетательном т/п насоса Н1. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB.Pm_out_N1_Pv := ANB_Processing(NMS_Ust.Pm_out_N1_Pv, NMS_AI_ToHMI.Pm_out_N1.PV, NMS_AI_ToHMI.Pm_out_N1.fault_common, NMS_ANB_Settings.Pm_out_N1_Pv, NMS_ANB_Internal.Pm_out_N1_Pv); // Давление на нагнетательном т/п насоса Н1. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB.Pm_out_N1_Av := ANB_Processing(NMS_Ust.Pm_out_N1_Av, NMS_AI_ToHMI.Pm_out_N1.PV, NMS_AI_ToHMI.Pm_out_N1.fault_common, NMS_ANB_Settings.Pm_out_N1_Av, NMS_ANB_Internal.Pm_out_N1_Av); // Давление на нагнетательном т/п насоса Н1. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB.Pm_out_N2_An := ANB_Processing(NMS_Ust.Pm_out_N2_An, NMS_AI_ToHMI.Pm_out_N2.PV, NMS_AI_ToHMI.Pm_out_N2.fault_common, NMS_ANB_Settings.Pm_out_N2_An, NMS_ANB_Internal.Pm_out_N2_An); // Давление на нагнетательном т/п насоса Н2. Насосная масел, поз.38.3: аварийная нижняя
NMS_ANB.Pm_out_N2_Pn := ANB_Processing(NMS_Ust.Pm_out_N2_Pn, NMS_AI_ToHMI.Pm_out_N2.PV, NMS_AI_ToHMI.Pm_out_N2.fault_common, NMS_ANB_Settings.Pm_out_N2_Pn, NMS_ANB_Internal.Pm_out_N2_Pn); // Давление на нагнетательном т/п насоса Н2. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB.Pm_out_N2_Pv := ANB_Processing(NMS_Ust.Pm_out_N2_Pv, NMS_AI_ToHMI.Pm_out_N2.PV, NMS_AI_ToHMI.Pm_out_N2.fault_common, NMS_ANB_Settings.Pm_out_N2_Pv, NMS_ANB_Internal.Pm_out_N2_Pv); // Давление на нагнетательном т/п насоса Н2. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB.Pm_out_N2_Av := ANB_Processing(NMS_Ust.Pm_out_N2_Av, NMS_AI_ToHMI.Pm_out_N2.PV, NMS_AI_ToHMI.Pm_out_N2.fault_common, NMS_ANB_Settings.Pm_out_N2_Av, NMS_ANB_Internal.Pm_out_N2_Av); // Давление на нагнетательном т/п насоса Н2. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB.Pm_out_N3_An := ANB_Processing(NMS_Ust.Pm_out_N3_An, NMS_AI_ToHMI.Pm_out_N3.PV, NMS_AI_ToHMI.Pm_out_N3.fault_common, NMS_ANB_Settings.Pm_out_N3_An, NMS_ANB_Internal.Pm_out_N3_An); // Давление на нагнетательном т/п насоса Н3. Насосная масел, поз.38.3: аварийная нижняя
NMS_ANB.Pm_out_N3_Pn := ANB_Processing(NMS_Ust.Pm_out_N3_Pn, NMS_AI_ToHMI.Pm_out_N3.PV, NMS_AI_ToHMI.Pm_out_N3.fault_common, NMS_ANB_Settings.Pm_out_N3_Pn, NMS_ANB_Internal.Pm_out_N3_Pn); // Давление на нагнетательном т/п насоса Н3. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB.Pm_out_N3_Pv := ANB_Processing(NMS_Ust.Pm_out_N3_Pv, NMS_AI_ToHMI.Pm_out_N3.PV, NMS_AI_ToHMI.Pm_out_N3.fault_common, NMS_ANB_Settings.Pm_out_N3_Pv, NMS_ANB_Internal.Pm_out_N3_Pv); // Давление на нагнетательном т/п насоса Н3. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB.Pm_out_N3_Av := ANB_Processing(NMS_Ust.Pm_out_N3_Av, NMS_AI_ToHMI.Pm_out_N3.PV, NMS_AI_ToHMI.Pm_out_N3.fault_common, NMS_ANB_Settings.Pm_out_N3_Av, NMS_ANB_Internal.Pm_out_N3_Av); // Давление на нагнетательном т/п насоса Н3. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB.Pm_out_N4_An := ANB_Processing(NMS_Ust.Pm_out_N4_An, NMS_AI_ToHMI.Pm_out_N4.PV, NMS_AI_ToHMI.Pm_out_N4.fault_common, NMS_ANB_Settings.Pm_out_N4_An, NMS_ANB_Internal.Pm_out_N4_An); // Давление на нагнетательном т/п насоса Н4. Насосная масел, поз.38.3: аварийная нижняя
NMS_ANB.Pm_out_N4_Pn := ANB_Processing(NMS_Ust.Pm_out_N4_Pn, NMS_AI_ToHMI.Pm_out_N4.PV, NMS_AI_ToHMI.Pm_out_N4.fault_common, NMS_ANB_Settings.Pm_out_N4_Pn, NMS_ANB_Internal.Pm_out_N4_Pn); // Давление на нагнетательном т/п насоса Н4. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB.Pm_out_N4_Pv := ANB_Processing(NMS_Ust.Pm_out_N4_Pv, NMS_AI_ToHMI.Pm_out_N4.PV, NMS_AI_ToHMI.Pm_out_N4.fault_common, NMS_ANB_Settings.Pm_out_N4_Pv, NMS_ANB_Internal.Pm_out_N4_Pv); // Давление на нагнетательном т/п насоса Н4. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB.Pm_out_N4_Av := ANB_Processing(NMS_Ust.Pm_out_N4_Av, NMS_AI_ToHMI.Pm_out_N4.PV, NMS_AI_ToHMI.Pm_out_N4.fault_common, NMS_ANB_Settings.Pm_out_N4_Av, NMS_ANB_Internal.Pm_out_N4_Av); // Давление на нагнетательном т/п насоса Н4. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB.Pm_out_N5_An := ANB_Processing(NMS_Ust.Pm_out_N5_An, NMS_AI_ToHMI.Pm_out_N5.PV, NMS_AI_ToHMI.Pm_out_N5.fault_common, NMS_ANB_Settings.Pm_out_N5_An, NMS_ANB_Internal.Pm_out_N5_An); // Давление на нагнетательном т/п насоса Н5. Насосная масел, поз.38.3: аварийная нижняя
NMS_ANB.Pm_out_N5_Pn := ANB_Processing(NMS_Ust.Pm_out_N5_Pn, NMS_AI_ToHMI.Pm_out_N5.PV, NMS_AI_ToHMI.Pm_out_N5.fault_common, NMS_ANB_Settings.Pm_out_N5_Pn, NMS_ANB_Internal.Pm_out_N5_Pn); // Давление на нагнетательном т/п насоса Н5. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB.Pm_out_N5_Pv := ANB_Processing(NMS_Ust.Pm_out_N5_Pv, NMS_AI_ToHMI.Pm_out_N5.PV, NMS_AI_ToHMI.Pm_out_N5.fault_common, NMS_ANB_Settings.Pm_out_N5_Pv, NMS_ANB_Internal.Pm_out_N5_Pv); // Давление на нагнетательном т/п насоса Н5. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB.Pm_out_N5_Av := ANB_Processing(NMS_Ust.Pm_out_N5_Av, NMS_AI_ToHMI.Pm_out_N5.PV, NMS_AI_ToHMI.Pm_out_N5.fault_common, NMS_ANB_Settings.Pm_out_N5_Av, NMS_ANB_Internal.Pm_out_N5_Av); // Давление на нагнетательном т/п насоса Н5. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB.Pm_out_N6_An := ANB_Processing(NMS_Ust.Pm_out_N6_An, NMS_AI_ToHMI.Pm_out_N6.PV, NMS_AI_ToHMI.Pm_out_N6.fault_common, NMS_ANB_Settings.Pm_out_N6_An, NMS_ANB_Internal.Pm_out_N6_An); // Давление на нагнетательном т/п насоса Н6. Насосная масел, поз.38.3: аварийная нижняя
NMS_ANB.Pm_out_N6_Pn := ANB_Processing(NMS_Ust.Pm_out_N6_Pn, NMS_AI_ToHMI.Pm_out_N6.PV, NMS_AI_ToHMI.Pm_out_N6.fault_common, NMS_ANB_Settings.Pm_out_N6_Pn, NMS_ANB_Internal.Pm_out_N6_Pn); // Давление на нагнетательном т/п насоса Н6. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB.Pm_out_N6_Pv := ANB_Processing(NMS_Ust.Pm_out_N6_Pv, NMS_AI_ToHMI.Pm_out_N6.PV, NMS_AI_ToHMI.Pm_out_N6.fault_common, NMS_ANB_Settings.Pm_out_N6_Pv, NMS_ANB_Internal.Pm_out_N6_Pv); // Давление на нагнетательном т/п насоса Н6. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB.Pm_out_N6_Av := ANB_Processing(NMS_Ust.Pm_out_N6_Av, NMS_AI_ToHMI.Pm_out_N6.PV, NMS_AI_ToHMI.Pm_out_N6.fault_common, NMS_ANB_Settings.Pm_out_N6_Av, NMS_ANB_Internal.Pm_out_N6_Av); // Давление на нагнетательном т/п насоса Н6. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB.Tm_E1_Pn := ANB_Processing(NMS_Ust.Tm_E1_Pn, NMS_AI_ToHMI.Tm_E1.PV, NMS_AI_ToHMI.Tm_E1.fault_common, NMS_ANB_Settings.Tm_E1_Pn, NMS_ANB_Internal.Tm_E1_Pn); // Температура в ёмкости масла E1. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB.Tm_E1_Pv := ANB_Processing(NMS_Ust.Tm_E1_Pv, NMS_AI_ToHMI.Tm_E1.PV, NMS_AI_ToHMI.Tm_E1.fault_common, NMS_ANB_Settings.Tm_E1_Pv, NMS_ANB_Internal.Tm_E1_Pv); // Температура в ёмкости масла E1. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB.Tm_E1_Av := ANB_Processing(NMS_Ust.Tm_E1_Av, NMS_AI_ToHMI.Tm_E1.PV, NMS_AI_ToHMI.Tm_E1.fault_common, NMS_ANB_Settings.Tm_E1_Av, NMS_ANB_Internal.Tm_E1_Av); // Температура в ёмкости масла E1. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB.Tm_E2_Pn := ANB_Processing(NMS_Ust.Tm_E2_Pn, NMS_AI_ToHMI.Tm_E2.PV, NMS_AI_ToHMI.Tm_E2.fault_common, NMS_ANB_Settings.Tm_E2_Pn, NMS_ANB_Internal.Tm_E2_Pn); // Температура в ёмкости масла E2. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB.Tm_E2_Pv := ANB_Processing(NMS_Ust.Tm_E2_Pv, NMS_AI_ToHMI.Tm_E2.PV, NMS_AI_ToHMI.Tm_E2.fault_common, NMS_ANB_Settings.Tm_E2_Pv, NMS_ANB_Internal.Tm_E2_Pv); // Температура в ёмкости масла E2. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB.Tm_E2_Av := ANB_Processing(NMS_Ust.Tm_E2_Av, NMS_AI_ToHMI.Tm_E2.PV, NMS_AI_ToHMI.Tm_E2.fault_common, NMS_ANB_Settings.Tm_E2_Av, NMS_ANB_Internal.Tm_E2_Av); // Температура в ёмкости масла E2. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB.Tm_E3_Pn := ANB_Processing(NMS_Ust.Tm_E3_Pn, NMS_AI_ToHMI.Tm_E3.PV, NMS_AI_ToHMI.Tm_E3.fault_common, NMS_ANB_Settings.Tm_E3_Pn, NMS_ANB_Internal.Tm_E3_Pn); // Температура в ёмкости масла E3. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB.Tm_E3_Pv := ANB_Processing(NMS_Ust.Tm_E3_Pv, NMS_AI_ToHMI.Tm_E3.PV, NMS_AI_ToHMI.Tm_E3.fault_common, NMS_ANB_Settings.Tm_E3_Pv, NMS_ANB_Internal.Tm_E3_Pv); // Температура в ёмкости масла E3. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB.Tm_E3_Av := ANB_Processing(NMS_Ust.Tm_E3_Av, NMS_AI_ToHMI.Tm_E3.PV, NMS_AI_ToHMI.Tm_E3.fault_common, NMS_ANB_Settings.Tm_E3_Av, NMS_ANB_Internal.Tm_E3_Av); // Температура в ёмкости масла E3. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB.Tm_E4_Pn := ANB_Processing(NMS_Ust.Tm_E4_Pn, NMS_AI_ToHMI.Tm_E4.PV, NMS_AI_ToHMI.Tm_E4.fault_common, NMS_ANB_Settings.Tm_E4_Pn, NMS_ANB_Internal.Tm_E4_Pn); // Температура в ёмкости масла E4. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB.Tm_E4_Pv := ANB_Processing(NMS_Ust.Tm_E4_Pv, NMS_AI_ToHMI.Tm_E4.PV, NMS_AI_ToHMI.Tm_E4.fault_common, NMS_ANB_Settings.Tm_E4_Pv, NMS_ANB_Internal.Tm_E4_Pv); // Температура в ёмкости масла E4. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB.Tm_E4_Av := ANB_Processing(NMS_Ust.Tm_E4_Av, NMS_AI_ToHMI.Tm_E4.PV, NMS_AI_ToHMI.Tm_E4.fault_common, NMS_ANB_Settings.Tm_E4_Av, NMS_ANB_Internal.Tm_E4_Av); // Температура в ёмкости масла E4. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB.Tm_E5_Pn := ANB_Processing(NMS_Ust.Tm_E5_Pn, NMS_AI_ToHMI.Tm_E5.PV, NMS_AI_ToHMI.Tm_E5.fault_common, NMS_ANB_Settings.Tm_E5_Pn, NMS_ANB_Internal.Tm_E5_Pn); // Температура в ёмкости масла E5. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB.Tm_E5_Pv := ANB_Processing(NMS_Ust.Tm_E5_Pv, NMS_AI_ToHMI.Tm_E5.PV, NMS_AI_ToHMI.Tm_E5.fault_common, NMS_ANB_Settings.Tm_E5_Pv, NMS_ANB_Internal.Tm_E5_Pv); // Температура в ёмкости масла E5. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB.Tm_E5_Av := ANB_Processing(NMS_Ust.Tm_E5_Av, NMS_AI_ToHMI.Tm_E5.PV, NMS_AI_ToHMI.Tm_E5.fault_common, NMS_ANB_Settings.Tm_E5_Av, NMS_ANB_Internal.Tm_E5_Av); // Температура в ёмкости масла E5. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB.Tm_E6_Pn := ANB_Processing(NMS_Ust.Tm_E6_Pn, NMS_AI_ToHMI.Tm_E6.PV, NMS_AI_ToHMI.Tm_E6.fault_common, NMS_ANB_Settings.Tm_E6_Pn, NMS_ANB_Internal.Tm_E6_Pn); // Температура в ёмкости масла E6. Насосная масел, поз.38.3: предупредительная нижняя
NMS_ANB.Tm_E6_Pv := ANB_Processing(NMS_Ust.Tm_E6_Pv, NMS_AI_ToHMI.Tm_E6.PV, NMS_AI_ToHMI.Tm_E6.fault_common, NMS_ANB_Settings.Tm_E6_Pv, NMS_ANB_Internal.Tm_E6_Pv); // Температура в ёмкости масла E6. Насосная масел, поз.38.3: предупредительная верхняя
NMS_ANB.Tm_E6_Av := ANB_Processing(NMS_Ust.Tm_E6_Av, NMS_AI_ToHMI.Tm_E6.PV, NMS_AI_ToHMI.Tm_E6.fault_common, NMS_ANB_Settings.Tm_E6_Av, NMS_ANB_Internal.Tm_E6_Av); // Температура в ёмкости масла E6. Насосная масел, поз.38.3: аварийная верхняя
NMS_ANB.Uosn_SAU_Pn := ANB_Processing(NMS_Ust.Uosn_SAU_Pn, NMS_AI_ToHMI.Uosn_SAU.PV, NMS_AI_ToHMI.Uosn_SAU.fault_common, NMS_ANB_Settings.Uosn_SAU_Pn, NMS_ANB_Internal.Uosn_SAU_Pn); // Основное напряжение питания ~220 В: предупредительная нижняя
NMS_ANB.Uosn_SAU_Pv := ANB_Processing(NMS_Ust.Uosn_SAU_Pv, NMS_AI_ToHMI.Uosn_SAU.PV, NMS_AI_ToHMI.Uosn_SAU.fault_common, NMS_ANB_Settings.Uosn_SAU_Pv, NMS_ANB_Internal.Uosn_SAU_Pv); // Основное напряжение питания ~220 В : предупредительная верхняя
NMS_ANB.Urez_SAU_Pn := ANB_Processing(NMS_Ust.Urez_SAU_Pn, NMS_AI_ToHMI.Urez_SAU.PV, NMS_AI_ToHMI.Urez_SAU.fault_common, NMS_ANB_Settings.Urez_SAU_Pn, NMS_ANB_Internal.Urez_SAU_Pn); // Резервное напряжение питания ~220 В: предупредительная нижняя
NMS_ANB.Urez_SAU_Pv := ANB_Processing(NMS_Ust.Urez_SAU_Pv, NMS_AI_ToHMI.Urez_SAU.PV, NMS_AI_ToHMI.Urez_SAU.fault_common, NMS_ANB_Settings.Urez_SAU_Pv, NMS_ANB_Internal.Urez_SAU_Pv); // Резервное напряжение питания ~220 В : предупредительная верхняя

//= Lm_R1_n-Lm_R7_n
NMS_ANB.Lm_R1_n_Pn := ANB_Processing(NMS_Ust.Lm_R1_n_Pn, NMS_AI_ToHMI.Lm_R1_n.PV, NMS_AI_ToHMI.Lm_R1_n.fault_common, NMS_ANB_Settings.Lm_R1_n_Pn, NMS_ANB_Internal.Lm_R1_n_Pn); //= Сигнализация мин. уровня в Р1. Склад ГСМ, поз.38
NMS_ANB.Lm_R2_n_Pn := ANB_Processing(NMS_Ust.Lm_R2_n_Pn, NMS_AI_ToHMI.Lm_R2_n.PV, NMS_AI_ToHMI.Lm_R2_n.fault_common, NMS_ANB_Settings.Lm_R2_n_Pn, NMS_ANB_Internal.Lm_R2_n_Pn); //= Сигнализация мин. уровня в Р2. Склад ГСМ, поз.38
NMS_ANB.Lm_R3_n_Pn := ANB_Processing(NMS_Ust.Lm_R3_n_Pn, NMS_AI_ToHMI.Lm_R3_n.PV, NMS_AI_ToHMI.Lm_R3_n.fault_common, NMS_ANB_Settings.Lm_R3_n_Pn, NMS_ANB_Internal.Lm_R3_n_Pn); //= Сигнализация мин. уровня в Р3. Склад ГСМ, поз.38
NMS_ANB.Lm_R4_n_Pn := ANB_Processing(NMS_Ust.Lm_R4_n_Pn, NMS_AI_ToHMI.Lm_R4_n.PV, NMS_AI_ToHMI.Lm_R4_n.fault_common, NMS_ANB_Settings.Lm_R4_n_Pn, NMS_ANB_Internal.Lm_R4_n_Pn); //= Сигнализация мин. уровня в Р4. Склад ГСМ, поз.38
NMS_ANB.Lm_R5_n_Pn := ANB_Processing(NMS_Ust.Lm_R5_n_Pn, NMS_AI_ToHMI.Lm_R5_n.PV, NMS_AI_ToHMI.Lm_R5_n.fault_common, NMS_ANB_Settings.Lm_R5_n_Pn, NMS_ANB_Internal.Lm_R5_n_Pn); //= Сигнализация мин. уровня в Р5. Склад ГСМ, поз.38
NMS_ANB.Lm_R6_n_Pn := ANB_Processing(NMS_Ust.Lm_R6_n_Pn, NMS_AI_ToHMI.Lm_R6_n.PV, NMS_AI_ToHMI.Lm_R6_n.fault_common, NMS_ANB_Settings.Lm_R6_n_Pn, NMS_ANB_Internal.Lm_R6_n_Pn); //= Сигнализация мин. уровня в Р6. Склад ГСМ, поз.38
NMS_ANB.Lm_R7_n_Pn := ANB_Processing(NMS_Ust.Lm_R7_n_Pn, NMS_AI_ToHMI.Lm_R7_n.PV, NMS_AI_ToHMI.Lm_R7_n.fault_common, NMS_ANB_Settings.Lm_R7_n_Pn, NMS_ANB_Internal.Lm_R7_n_Pn); //= Сигнализация мин. уровня в Р7. Склад ГСМ, поз.38
//= Lm_R1_v-Lm_R7_v
NMS_ANB.Lm_R1_v_Pv := ANB_Processing(NMS_Ust.Lm_R1_v_Pv, NMS_AI_ToHMI.Lm_R1_v.PV, NMS_AI_ToHMI.Lm_R1_v.fault_common, NMS_ANB_Settings.Lm_R1_v_Pv, NMS_ANB_Internal.Lm_R1_v_Pv); //= Сигнализация макс. уровня в Р1. Склад ГСМ, поз.38
NMS_ANB.Lm_R2_v_Pv := ANB_Processing(NMS_Ust.Lm_R2_v_Pv, NMS_AI_ToHMI.Lm_R2_v.PV, NMS_AI_ToHMI.Lm_R2_v.fault_common, NMS_ANB_Settings.Lm_R2_v_Pv, NMS_ANB_Internal.Lm_R2_v_Pv); //= Сигнализация макс. уровня в Р2. Склад ГСМ, поз.38
NMS_ANB.Lm_R3_v_Pv := ANB_Processing(NMS_Ust.Lm_R3_v_Pv, NMS_AI_ToHMI.Lm_R3_v.PV, NMS_AI_ToHMI.Lm_R3_v.fault_common, NMS_ANB_Settings.Lm_R3_v_Pv, NMS_ANB_Internal.Lm_R3_v_Pv); //= Сигнализация макс. уровня в Р3. Склад ГСМ, поз.38
NMS_ANB.Lm_R4_v_Pv := ANB_Processing(NMS_Ust.Lm_R4_v_Pv, NMS_AI_ToHMI.Lm_R4_v.PV, NMS_AI_ToHMI.Lm_R4_v.fault_common, NMS_ANB_Settings.Lm_R4_v_Pv, NMS_ANB_Internal.Lm_R4_v_Pv); //= Сигнализация макс. уровня в Р4. Склад ГСМ, поз.38
NMS_ANB.Lm_R5_v_Pv := ANB_Processing(NMS_Ust.Lm_R5_v_Pv, NMS_AI_ToHMI.Lm_R5_v.PV, NMS_AI_ToHMI.Lm_R5_v.fault_common, NMS_ANB_Settings.Lm_R5_v_Pv, NMS_ANB_Internal.Lm_R5_v_Pv); //= Сигнализация макс. уровня в Р5. Склад ГСМ, поз.38
NMS_ANB.Lm_R6_v_Pv := ANB_Processing(NMS_Ust.Lm_R6_v_Pv, NMS_AI_ToHMI.Lm_R6_v.PV, NMS_AI_ToHMI.Lm_R6_v.fault_common, NMS_ANB_Settings.Lm_R6_v_Pv, NMS_ANB_Internal.Lm_R6_v_Pv); //= Сигнализация макс. уровня в Р6. Склад ГСМ, поз.38
NMS_ANB.Lm_R7_v_Pv := ANB_Processing(NMS_Ust.Lm_R7_v_Pv, NMS_AI_ToHMI.Lm_R7_v.PV, NMS_AI_ToHMI.Lm_R7_v.fault_common, NMS_ANB_Settings.Lm_R7_v_Pv, NMS_ANB_Internal.Lm_R7_v_Pv); //= Сигнализация макс. уровня в Р7. Склад ГСМ, поз.38

//= Lm_E1_n-Lm_E6_n
NMS_ANB.Lm_E1_n_Pn := ANB_Processing(NMS_Ust.Lm_E1_n_Pn, NMS_AI_ToHMI.Lm_E1_n.PV, NMS_AI_ToHMI.Lm_E1_n.fault_common, NMS_ANB_Settings.Lm_E1_n_Pn, NMS_ANB_Internal.Lm_E1_n_Pn); //= Сигнализация мин. уровня в ёмкости Е1. Насосная масел, поз.38.3
NMS_ANB.Lm_E2_n_Pn := ANB_Processing(NMS_Ust.Lm_E2_n_Pn, NMS_AI_ToHMI.Lm_E2_n.PV, NMS_AI_ToHMI.Lm_E2_n.fault_common, NMS_ANB_Settings.Lm_E2_n_Pn, NMS_ANB_Internal.Lm_E2_n_Pn); //= Сигнализация мин. уровня в ёмкости Е2. Насосная масел, поз.38.3
NMS_ANB.Lm_E3_n_Pn := ANB_Processing(NMS_Ust.Lm_E3_n_Pn, NMS_AI_ToHMI.Lm_E3_n.PV, NMS_AI_ToHMI.Lm_E3_n.fault_common, NMS_ANB_Settings.Lm_E3_n_Pn, NMS_ANB_Internal.Lm_E3_n_Pn); //= Сигнализация мин. уровня в ёмкости Е3. Насосная масел, поз.38.3
NMS_ANB.Lm_E4_n_Pn := ANB_Processing(NMS_Ust.Lm_E4_n_Pn, NMS_AI_ToHMI.Lm_E4_n.PV, NMS_AI_ToHMI.Lm_E4_n.fault_common, NMS_ANB_Settings.Lm_E4_n_Pn, NMS_ANB_Internal.Lm_E4_n_Pn); //= Сигнализация мин. уровня в ёмкости Е4. Насосная масел, поз.38.3
NMS_ANB.Lm_E5_n_Pn := ANB_Processing(NMS_Ust.Lm_E5_n_Pn, NMS_AI_ToHMI.Lm_E5_n.PV, NMS_AI_ToHMI.Lm_E5_n.fault_common, NMS_ANB_Settings.Lm_E5_n_Pn, NMS_ANB_Internal.Lm_E5_n_Pn); //= Сигнализация мин. уровня в ёмкости Е5. Насосная масел, поз.38.3
NMS_ANB.Lm_E6_n_Pn := ANB_Processing(NMS_Ust.Lm_E6_n_Pn, NMS_AI_ToHMI.Lm_E6_n.PV, NMS_AI_ToHMI.Lm_E6_n.fault_common, NMS_ANB_Settings.Lm_E6_n_Pn, NMS_ANB_Internal.Lm_E6_n_Pn); //= Сигнализация мин. уровня в ёмкости Е6. Насосная масел, поз.38.3
//= Lm_E1_v-Lm_E6_v
NMS_ANB.Lm_E1_v_Pv := ANB_Processing(NMS_Ust.Lm_E1_v_Pv, NMS_AI_ToHMI.Lm_E1_v.PV, NMS_AI_ToHMI.Lm_E1_v.fault_common, NMS_ANB_Settings.Lm_E1_v_Pv, NMS_ANB_Internal.Lm_E1_v_Pv); //= Сигнализация макс. уровня в ёмкости Е1. Насосная масел, поз.38.3
NMS_ANB.Lm_E2_v_Pv := ANB_Processing(NMS_Ust.Lm_E2_v_Pv, NMS_AI_ToHMI.Lm_E2_v.PV, NMS_AI_ToHMI.Lm_E2_v.fault_common, NMS_ANB_Settings.Lm_E2_v_Pv, NMS_ANB_Internal.Lm_E2_v_Pv); //= Сигнализация макс. уровня в ёмкости Е2. Насосная масел, поз.38.3
NMS_ANB.Lm_E3_v_Pv := ANB_Processing(NMS_Ust.Lm_E3_v_Pv, NMS_AI_ToHMI.Lm_E3_v.PV, NMS_AI_ToHMI.Lm_E3_v.fault_common, NMS_ANB_Settings.Lm_E3_v_Pv, NMS_ANB_Internal.Lm_E3_v_Pv); //= Сигнализация макс. уровня в ёмкости Е3. Насосная масел, поз.38.3
NMS_ANB.Lm_E4_v_Pv := ANB_Processing(NMS_Ust.Lm_E4_v_Pv, NMS_AI_ToHMI.Lm_E4_v.PV, NMS_AI_ToHMI.Lm_E4_v.fault_common, NMS_ANB_Settings.Lm_E4_v_Pv, NMS_ANB_Internal.Lm_E4_v_Pv); //= Сигнализация макс. уровня в ёмкости Е4. Насосная масел, поз.38.3
NMS_ANB.Lm_E5_v_Pv := ANB_Processing(NMS_Ust.Lm_E5_v_Pv, NMS_AI_ToHMI.Lm_E5_v.PV, NMS_AI_ToHMI.Lm_E5_v.fault_common, NMS_ANB_Settings.Lm_E5_v_Pv, NMS_ANB_Internal.Lm_E5_v_Pv); //= Сигнализация макс. уровня в ёмкости Е5. Насосная масел, поз.38.3
NMS_ANB.Lm_E6_v_Pv := ANB_Processing(NMS_Ust.Lm_E6_v_Pv, NMS_AI_ToHMI.Lm_E6_v.PV, NMS_AI_ToHMI.Lm_E6_v.fault_common, NMS_ANB_Settings.Lm_E6_v_Pv, NMS_ANB_Internal.Lm_E6_v_Pv); //= Сигнализация макс. уровня в ёмкости Е6. Насосная масел, поз.38.3
//= Lm_R8_v
NMS_ANB.Lm_R8_v_Pv := ANB_Processing(NMS_Ust.Lm_R8_v_Pv, NMS_AI_ToHMI.Lm_R8_v.PV, NMS_AI_ToHMI.Lm_R8_v.fault_common, NMS_ANB_Settings.Lm_R8_v_Pv, NMS_ANB_Internal.Lm_R8_v_Pv); //= Сигнализация уровня в емкости. Емкость для аварийного слива масла, поз.38.4

//========================================
NMS_AI_ToHMI.Tm_R1.ps := NMS_ANB.Tm_R1_Pn;
NMS_AI_ToHMI.Tm_R1.ps := NMS_ANB.Tm_R1_Pv;
NMS_AI_ToHMI.Tm_R1.as := NMS_ANB.Tm_R1_Av;
NMS_AI_ToHMI.Tm_R2.ps := NMS_ANB.Tm_R2_Pn;
NMS_AI_ToHMI.Tm_R2.ps := NMS_ANB.Tm_R2_Pv;
NMS_AI_ToHMI.Tm_R2.as := NMS_ANB.Tm_R2_Av;
NMS_AI_ToHMI.Tm_R3.ps := NMS_ANB.Tm_R3_Pn;
NMS_AI_ToHMI.Tm_R3.ps := NMS_ANB.Tm_R3_Pv;
NMS_AI_ToHMI.Tm_R3.as := NMS_ANB.Tm_R3_Av;
NMS_AI_ToHMI.Tm_R4.ps := NMS_ANB.Tm_R4_Pn;
NMS_AI_ToHMI.Tm_R4.ps := NMS_ANB.Tm_R4_Pv;
NMS_AI_ToHMI.Tm_R4.as := NMS_ANB.Tm_R4_Av;
NMS_AI_ToHMI.Tm_R5.ps := NMS_ANB.Tm_R5_Pn;
NMS_AI_ToHMI.Tm_R5.ps := NMS_ANB.Tm_R5_Pv;
NMS_AI_ToHMI.Tm_R5.as := NMS_ANB.Tm_R5_Av;
NMS_AI_ToHMI.Tm_R6.ps := NMS_ANB.Tm_R6_Pn;
NMS_AI_ToHMI.Tm_R6.ps := NMS_ANB.Tm_R6_Pv;
NMS_AI_ToHMI.Tm_R6.as := NMS_ANB.Tm_R6_Av;
NMS_AI_ToHMI.Tm_R7.ps := NMS_ANB.Tm_R7_Pn;
NMS_AI_ToHMI.Tm_R7.ps := NMS_ANB.Tm_R7_Pv;
NMS_AI_ToHMI.Tm_R7.as := NMS_ANB.Tm_R7_Av;
NMS_AI_ToHMI.Lm_R1.as := NMS_ANB.Lm_R1_An;
NMS_AI_ToHMI.Lm_R1.ps := NMS_ANB.Lm_R1_Pn;
NMS_AI_ToHMI.Lm_R1.ps := NMS_ANB.Lm_R1_Pv;
NMS_AI_ToHMI.Lm_R1.as := NMS_ANB.Lm_R1_Av;
NMS_AI_ToHMI.Lm_R2.as := NMS_ANB.Lm_R2_An;
NMS_AI_ToHMI.Lm_R2.ps := NMS_ANB.Lm_R2_Pn;
NMS_AI_ToHMI.Lm_R2.ps := NMS_ANB.Lm_R2_Pv;
NMS_AI_ToHMI.Lm_R2.as := NMS_ANB.Lm_R2_Av;
NMS_AI_ToHMI.Lm_R3.as := NMS_ANB.Lm_R3_An;
NMS_AI_ToHMI.Lm_R3.ps := NMS_ANB.Lm_R3_Pn;
NMS_AI_ToHMI.Lm_R3.ps := NMS_ANB.Lm_R3_Pv;
NMS_AI_ToHMI.Lm_R3.as := NMS_ANB.Lm_R3_Av;
NMS_AI_ToHMI.Lm_R4.as := NMS_ANB.Lm_R4_An;
NMS_AI_ToHMI.Lm_R4.ps := NMS_ANB.Lm_R4_Pn;
NMS_AI_ToHMI.Lm_R4.ps := NMS_ANB.Lm_R4_Pv;
NMS_AI_ToHMI.Lm_R4.as := NMS_ANB.Lm_R4_Av;
NMS_AI_ToHMI.Lm_R5.as := NMS_ANB.Lm_R5_An;
NMS_AI_ToHMI.Lm_R5.ps := NMS_ANB.Lm_R5_Pn;
NMS_AI_ToHMI.Lm_R5.ps := NMS_ANB.Lm_R5_Pv;
NMS_AI_ToHMI.Lm_R5.as := NMS_ANB.Lm_R5_Av;
NMS_AI_ToHMI.Lm_R6.as := NMS_ANB.Lm_R6_An;
NMS_AI_ToHMI.Lm_R6.ps := NMS_ANB.Lm_R6_Pn;
NMS_AI_ToHMI.Lm_R6.ps := NMS_ANB.Lm_R6_Pv;
NMS_AI_ToHMI.Lm_R6.as := NMS_ANB.Lm_R6_Av;
NMS_AI_ToHMI.Lm_R7.as := NMS_ANB.Lm_R7_An;
NMS_AI_ToHMI.Lm_R7.ps := NMS_ANB.Lm_R7_Pn;
NMS_AI_ToHMI.Lm_R7.ps := NMS_ANB.Lm_R7_Pv;
NMS_AI_ToHMI.Lm_R7.as := NMS_ANB.Lm_R7_Av;
NMS_AI_ToHMI.Pm_out_N1.as := NMS_ANB.Pm_out_N1_An;
NMS_AI_ToHMI.Pm_out_N1.ps := NMS_ANB.Pm_out_N1_Pn;
NMS_AI_ToHMI.Pm_out_N1.ps := NMS_ANB.Pm_out_N1_Pv;
NMS_AI_ToHMI.Pm_out_N1.as := NMS_ANB.Pm_out_N1_Av;
NMS_AI_ToHMI.Pm_out_N2.as := NMS_ANB.Pm_out_N2_An;
NMS_AI_ToHMI.Pm_out_N2.ps := NMS_ANB.Pm_out_N2_Pn;
NMS_AI_ToHMI.Pm_out_N2.ps := NMS_ANB.Pm_out_N2_Pv;
NMS_AI_ToHMI.Pm_out_N2.as := NMS_ANB.Pm_out_N2_Av;
NMS_AI_ToHMI.Pm_out_N3.as := NMS_ANB.Pm_out_N3_An;
NMS_AI_ToHMI.Pm_out_N3.ps := NMS_ANB.Pm_out_N3_Pn;
NMS_AI_ToHMI.Pm_out_N3.ps := NMS_ANB.Pm_out_N3_Pv;
NMS_AI_ToHMI.Pm_out_N3.as := NMS_ANB.Pm_out_N3_Av;
NMS_AI_ToHMI.Pm_out_N4.as := NMS_ANB.Pm_out_N4_An;
NMS_AI_ToHMI.Pm_out_N4.ps := NMS_ANB.Pm_out_N4_Pn;
NMS_AI_ToHMI.Pm_out_N4.ps := NMS_ANB.Pm_out_N4_Pv;
NMS_AI_ToHMI.Pm_out_N4.as := NMS_ANB.Pm_out_N4_Av;
NMS_AI_ToHMI.Pm_out_N5.as := NMS_ANB.Pm_out_N5_An;
NMS_AI_ToHMI.Pm_out_N5.ps := NMS_ANB.Pm_out_N5_Pn;
NMS_AI_ToHMI.Pm_out_N5.ps := NMS_ANB.Pm_out_N5_Pv;
NMS_AI_ToHMI.Pm_out_N5.as := NMS_ANB.Pm_out_N5_Av;
NMS_AI_ToHMI.Pm_out_N6.as := NMS_ANB.Pm_out_N6_An;
NMS_AI_ToHMI.Pm_out_N6.ps := NMS_ANB.Pm_out_N6_Pn;
NMS_AI_ToHMI.Pm_out_N6.ps := NMS_ANB.Pm_out_N6_Pv;
NMS_AI_ToHMI.Pm_out_N6.as := NMS_ANB.Pm_out_N6_Av;
NMS_AI_ToHMI.Tm_E1.ps := NMS_ANB.Tm_E1_Pn;
NMS_AI_ToHMI.Tm_E1.ps := NMS_ANB.Tm_E1_Pv;
NMS_AI_ToHMI.Tm_E1.as := NMS_ANB.Tm_E1_Av;
NMS_AI_ToHMI.Tm_E2.ps := NMS_ANB.Tm_E2_Pn;
NMS_AI_ToHMI.Tm_E2.ps := NMS_ANB.Tm_E2_Pv;
NMS_AI_ToHMI.Tm_E2.as := NMS_ANB.Tm_E2_Av;
NMS_AI_ToHMI.Tm_E3.ps := NMS_ANB.Tm_E3_Pn;
NMS_AI_ToHMI.Tm_E3.ps := NMS_ANB.Tm_E3_Pv;
NMS_AI_ToHMI.Tm_E3.as := NMS_ANB.Tm_E3_Av;
NMS_AI_ToHMI.Tm_E4.ps := NMS_ANB.Tm_E4_Pn;
NMS_AI_ToHMI.Tm_E4.ps := NMS_ANB.Tm_E4_Pv;
NMS_AI_ToHMI.Tm_E4.as := NMS_ANB.Tm_E4_Av;
NMS_AI_ToHMI.Tm_E5.ps := NMS_ANB.Tm_E5_Pn;
NMS_AI_ToHMI.Tm_E5.ps := NMS_ANB.Tm_E5_Pv;
NMS_AI_ToHMI.Tm_E5.as := NMS_ANB.Tm_E5_Av;
NMS_AI_ToHMI.Tm_E6.ps := NMS_ANB.Tm_E6_Pn;
NMS_AI_ToHMI.Tm_E6.ps := NMS_ANB.Tm_E6_Pv;
NMS_AI_ToHMI.Tm_E6.as := NMS_ANB.Tm_E6_Av;
NMS_AI_ToHMI.Uosn_SAU.ps := NMS_ANB.Uosn_SAU_Pn;
NMS_AI_ToHMI.Uosn_SAU.ps := NMS_ANB.Uosn_SAU_Pv;
NMS_AI_ToHMI.Urez_SAU.ps := NMS_ANB.Urez_SAU_Pn;
NMS_AI_ToHMI.Urez_SAU.ps := NMS_ANB.Urez_SAU_Pv;
//========================================

//= Lm_R1_n-Lm_R7_n
NMS_AI_ToHMI.Lm_R1_n.ps := NMS_ANB.Lm_R1_n_Pn; //= Сигнализация мин. уровня в Р1. Склад ГСМ, поз.38
NMS_AI_ToHMI.Lm_R2_n.ps := NMS_ANB.Lm_R2_n_Pn; //= Сигнализация мин. уровня в Р2. Склад ГСМ, поз.38
NMS_AI_ToHMI.Lm_R3_n.ps := NMS_ANB.Lm_R3_n_Pn; //= Сигнализация мин. уровня в Р3. Склад ГСМ, поз.38
NMS_AI_ToHMI.Lm_R4_n.ps := NMS_ANB.Lm_R4_n_Pn; //= Сигнализация мин. уровня в Р4. Склад ГСМ, поз.38
NMS_AI_ToHMI.Lm_R5_n.ps := NMS_ANB.Lm_R5_n_Pn; //= Сигнализация мин. уровня в Р5. Склад ГСМ, поз.38
NMS_AI_ToHMI.Lm_R6_n.ps := NMS_ANB.Lm_R6_n_Pn; //= Сигнализация мин. уровня в Р6. Склад ГСМ, поз.38
NMS_AI_ToHMI.Lm_R7_n.ps := NMS_ANB.Lm_R7_n_Pn; //= Сигнализация мин. уровня в Р7. Склад ГСМ, поз.38
//= Lm_R1_v-Lm_R7_v
NMS_AI_ToHMI.Lm_R1_v.ps := NMS_ANB.Lm_R1_v_Pv; //= Сигнализация макс. уровня в Р1. Склад ГСМ, поз.38
NMS_AI_ToHMI.Lm_R2_v.ps := NMS_ANB.Lm_R2_v_Pv; //= Сигнализация макс. уровня в Р2. Склад ГСМ, поз.38
NMS_AI_ToHMI.Lm_R3_v.ps := NMS_ANB.Lm_R3_v_Pv; //= Сигнализация макс. уровня в Р3. Склад ГСМ, поз.38
NMS_AI_ToHMI.Lm_R4_v.ps := NMS_ANB.Lm_R4_v_Pv; //= Сигнализация макс. уровня в Р4. Склад ГСМ, поз.38
NMS_AI_ToHMI.Lm_R5_v.ps := NMS_ANB.Lm_R5_v_Pv; //= Сигнализация макс. уровня в Р5. Склад ГСМ, поз.38
NMS_AI_ToHMI.Lm_R6_v.ps := NMS_ANB.Lm_R6_v_Pv; //= Сигнализация макс. уровня в Р6. Склад ГСМ, поз.38
NMS_AI_ToHMI.Lm_R7_v.ps := NMS_ANB.Lm_R7_v_Pv; //= Сигнализация макс. уровня в Р7. Склад ГСМ, поз.38

//= Lm_E1_n-Lm_E6_n
NMS_AI_ToHMI.Lm_E1_n.ps := NMS_ANB.Lm_E1_n_Pn; //= Сигнализация мин. уровня в ёмкости Е1. Насосная масел, поз.38.3
NMS_AI_ToHMI.Lm_E2_n.ps := NMS_ANB.Lm_E2_n_Pn; //= Сигнализация мин. уровня в ёмкости Е2. Насосная масел, поз.38.3
NMS_AI_ToHMI.Lm_E3_n.ps := NMS_ANB.Lm_E3_n_Pn; //= Сигнализация мин. уровня в ёмкости Е3. Насосная масел, поз.38.3
NMS_AI_ToHMI.Lm_E4_n.ps := NMS_ANB.Lm_E4_n_Pn; //= Сигнализация мин. уровня в ёмкости Е4. Насосная масел, поз.38.3
NMS_AI_ToHMI.Lm_E5_n.ps := NMS_ANB.Lm_E5_n_Pn; //= Сигнализация мин. уровня в ёмкости Е5. Насосная масел, поз.38.3
NMS_AI_ToHMI.Lm_E6_n.ps := NMS_ANB.Lm_E6_n_Pn; //= Сигнализация мин. уровня в ёмкости Е6. Насосная масел, поз.38.3
//= Lm_E1_v-Lm_E6_v
NMS_AI_ToHMI.Lm_E1_v.ps := NMS_ANB.Lm_E1_v_Pv; //= Сигнализация макс. уровня в ёмкости Е1. Насосная масел, поз.38.3
NMS_AI_ToHMI.Lm_E2_v.ps := NMS_ANB.Lm_E2_v_Pv; //= Сигнализация макс. уровня в ёмкости Е2. Насосная масел, поз.38.3
NMS_AI_ToHMI.Lm_E3_v.ps := NMS_ANB.Lm_E3_v_Pv; //= Сигнализация макс. уровня в ёмкости Е3. Насосная масел, поз.38.3
NMS_AI_ToHMI.Lm_E4_v.ps := NMS_ANB.Lm_E4_v_Pv; //= Сигнализация макс. уровня в ёмкости Е4. Насосная масел, поз.38.3
NMS_AI_ToHMI.Lm_E5_v.ps := NMS_ANB.Lm_E5_v_Pv; //= Сигнализация макс. уровня в ёмкости Е5. Насосная масел, поз.38.3
NMS_AI_ToHMI.Lm_E6_v.ps := NMS_ANB.Lm_E6_v_Pv; //= Сигнализация макс. уровня в ёмкости Е6. Насосная масел, поз.38.3
//= Lm_R8_v
NMS_AI_ToHMI.Lm_R8_v.ps := NMS_ANB.Lm_R8_v_Pv; //= Сигнализация уровня в емкости. Емкость для аварийного слива масла, поз.38.4
//=]]></ST>
                    </Function>
                    <Function UUID="XYBPO55BLI4UPLMLN7IPM2G3AE" Name="ANB_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="NGTALOKOFQQEJCXFO5K2WRVOEM" Name="limit" Comment="порог срабатывания" Type="REAL" Usage="input" />
                            <Variable UUID="OYP2F37VW5REJFKT3KXRET4S3M" Name="anp" Type="REAL" Usage="input" />
                            <Variable UUID="QHRSZQ2O22ZUDO3RO7LZCS7TCQ" Name="fault" Type="BOOL" Usage="input" />
                            <Variable UUID="XZFZFVGE5NOUHBKTICGTXHSDWI" Name="set" Type="T_ANB_Settings" TypeUUID="I7SVZ4ZR3CPE7BHJZXJTI4JZXI" Usage="input" />
                            <Variable UUID="6A7WAZF3BDRUBOHX4IKMI5L3CY" Name="timer" Type="REAL" Usage="inout" />
                        </Variables>
                        <ST><![CDATA[if fault then
	if    set.setForFault = 0 then ANB_Processing := false;
	elsif set.setForFault = 1 then ANB_Processing := true; 
	end_if;
else
	if anp < limit xor set.isUp then
		timer := timer + tim.cycle;
	else
		timer := 0.0;
	end_if;
	ANB_Processing := timer >(*=*) set.delay; //= неравенство д.б. строгим
(*anp.ps := ANB_Processing and set.tip = 1;
anp.as := ANB_Processing and set.tip = 2; 
anp.os := ANB_Processing and set.tip = 3; 
*)
end_if;]]></ST>
                    </Function>
                    <Function UUID="QLH3Q4CCZZNUZDE6GAV5NNELHQ" Name="ANB_init" ResultTypeUUID="I7SVZ4ZR3CPE7BHJZXJTI4JZXI">
                        <Variables>
                            <Variable UUID="J3PMJZQQPFCKTLXZKHCSBVW2FY" Name="setForFault" Type="INT" Usage="input" />
                            <Variable UUID="PPFZBCEPQNDGDPXS4GFZ5DG2R4" Name="isUp" Type="BOOL" Usage="input" />
                            <Variable UUID="YGKONKKT2ZACFPHVF5HQIODJOQ" Name="delay" Type="REAL" Usage="input" />
                        </Variables>
                        <ST><![CDATA[//setStruct.spVal := spVal;//значения уставки
ANB_init.setForFault := setForFault;//значение, записываемое в ANB при неисправности канала: 0 - FALSE, 1 - TRUE, 2 - оставить то что было
ANB_init.isUp := isUp;//направление срабатывания. TRUE - верхняя, FALSE - нижняя
ANB_init.delay := delay;//задержка на срабатывание
//ANB_init.tip := tip; // тип уставки (1 ПС, 2 АС, 3 ОС)]]></ST>
                    </Function>
                </Folder>
                <Function UUID="FRQ7F67BQNBCDLLM53Q4UKPGR4" Name="AI_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="L27BSM7XEZH7PBAFCWXQPDPAHM" Name="in" Type="REAL" Usage="input" />
                        <Variable UUID="3RRZ672T65H27KGUANWIHJUTAQ" Name="set" Type="T_AI_Settings" TypeUUID="XHUY6ZRHGRQEVOF35XEJI5L2SE" Usage="input" />
                        <Variable UUID="6GENIMNWPJBGLDUSADU5POKSIU" Name="btn" Type="T_AI_FromHMI" TypeUUID="VZ3H6GEVT3CUTI65HAA5AALRAY" Usage="input" />
                        <Variable UUID="2ISD2SFA6RHOVBLDUJA43YIYKA" Name="out" Type="T_AI_ToHMI" TypeUUID="J74RQIZG5I6EZDCM32A6SZRKIM" Usage="inout" />
                        <Variable UUID="KNUNDWLBWVFKTOYD3CUNK54D2I" Name="my" Type="T_AI_Internal" TypeUUID="GZ6UU5D6R5EXXPFY4TZ3EOTECU" Usage="inout" />
                        <Variable UUID="Z3VWPXEY7ZHYHLOJY634T36OTI" Name="tmp" Type="INT" Usage="internal" />
                        <Variable UUID="3JRCDCALYZAKDD252W6PF3GDLA" Name="qCycleCheckROC" Comment="Количество циклов контроля РОК" Type="INT" Usage="internal" />
                        <Variable UUID="5M2NFBWVLJEB5GONNQSVU37O3M" Name="tau" Type="REAL" Usage="internal" />
                        <Variable UUID="4FOVGDDSVNDJVMJ33BNQD4UHBQ" Name="criticalSettingErr" Type="BOOL" Usage="internal" />
                        <Variable UUID="SIMSIEIFINHRJIC55L2DCXT3CM" Name="limSettingErr" Type="BOOL" Usage="internal" />
                        <Variable UUID="BGOHZRGBKVHJFGQBERMGBC6VXU" Name="brkSettingErr" Type="BOOL" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[//---------------------- Поиск ошибок задания настроек – несоответствие допустимым значениям (BOOL)-----------------------------------------
criticalSettingErr := (set.min >= set.max or 
					set.minADC = set.maxADC or
					set.repairTime = 0 or set.recoveryTime < 0.0)  and not out.manual ;     //AKV
limSettingErr := (set.loLim >= set.hiLim or set.loLim >= set.max or set.hiLim <= set.min)  and not out.manual ;    //AKV
brkSettingErr := (set.hiBrk <= set.hiLim or set.loBrk >= set.loLim)  and not out.manual ;     //AKV
out.settingErr := criticalSettingErr or limSettingErr or brkSettingErr;
	out.fault_common := (out.settingErr or out.break or out.up_scale or out.down_scale or out.ROC)  and not out.manual ;  //AKV //обобщённая неисправность. Образуется по «ИЛИ» от break,up_scale,down_scale,ROC,settingErr (BOOL)
	out.criticalFault := (criticalSettingErr or out.break or out.ROC)  and not out.manual ;   //AKV //Критическая ошибка, свидетельствующая о полной неисправности канала

//---------------- таймер восстановления канала после неисправности или ремонта или ДУ ----------------------------------------------------------------
if not (criticalSettingErr or out.repair or out.manual) and my.prevFault then
	my.timerRecover := set.recoveryTime;
elsif my.timerRecover > 0.0 then
	my.timerRecover := my.timerRecover - tim.cycle;
else
	my.timerRecover := 0.0;
end_if;
my.prevFault := criticalSettingErr or out.repair or out.manual;
if criticalSettingErr then return; end_if; //Если есть ошибки настроек - прекращаем обработку
//---------------------------------------------------------------------------------------------------------------------------------------------
//----------------- Пересчёт парамера из кодов АЦП в единицы измерения -----------------------------------------------------------------------
out.measure := (in - set.minADC  + set.corrADC)/(set.maxADC - set.minADC)*(set.max - set.min)+set.min;//Пересчёт кода АЦП в инженерные единицы (REAL)
//---------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------- Определение обрыва и зашкалов -----------------------------------------------------------------------
if not brkSettingErr and not out.manual then    //AKV
	out.break      := out.break      and not btn.BTNworkOn or out.measure > set.hiBrk or out.measure < set.loBrk;	//обрыв канала (BOOL)
	elsif out.manual then
		out.break      := false;

end_if;
if not limSettingErr and not out.manual then //AKV
	out.up_scale   := out.up_scale   and not btn.BTNworkOn or out.measure > set.hiLim;							//выход за верхний зашкал (BOOL)
	out.down_scale := out.down_scale and not btn.BTNworkOn or out.manual or out.measure < set.loLim;							//выход за нижний зашкал (BOOL)
		elsif out.manual then
			out.up_scale   :=false;
			out.down_scale :=false;

end_if;
//---------------------------------------------------------------------------------------------------------------------------------------------
//----------- Расчёт превышения максимальной скорости изменения парамера -----------------------------------------------------------------------
if set.maxROC > 0.0 and tim.cycle > 0.0 then //Работает только если макс.скорость задана и есть корректное время цикла
	qCycleCheckROC := 3; //Количество циклов подряд, когда скорость изменения параметра превышает заданный предел
	if (out.measure - my.prevMeasure)/tim.cycle > set.maxROC  then //если новый замер больше старого на заданную величину приведённую к времени цикла
		if    my.qCycleROC >= 0 and my.qCycleROC < qCycleCheckROC then my.qCycleROC := my.qCycleROC + 1; //и предыдущий тоже был больше или никаким - увеличиваем счётчик на 1
		elsif my.qCycleROC < 0 then my.qCycleROC := 1;														//если предыдущая проверка показала падение скорости - устанавливаем счётчик на 1
		end_if;
	elsif (my.prevMeasure - out.measure)/tim.cycle > set.maxROC then // то же делаем для отрицательной разницы
		if    my.qCycleROC <= 0 and my.qCycleROC > -qCycleCheckROC then my.qCycleROC := my.qCycleROC - 1;
		elsif my.qCycleROC < 0 then my.qCycleROC := -1;
		end_if;
	else
		my.qCycleROC := 0; 		//если скорость в норме - обнуляем счётчик превышений подряд
								//и, если таймер восстановления не запущен, запоминаем достоверное значение
		//------- Обработка вывода канала в работу ----------------------------------------------------------------------------------------------------------
		if my.timerRecover <= 0.0 then my.validMeasure := out.measure;
		else my.validMeasure := my.validMeasure + (out.measure - my.validMeasure)*(set.recoveryTime - my.timerRecover + 1.0)/(set.recoveryTime + 1.0);
		end_if;
	end_if;
else
	//------- Обработка вывода канала в работу ----------------------------------------------------------------------------------------------------------
	if my.timerRecover <= 0.0 then my.validMeasure := out.measure;
	else my.validMeasure := my.validMeasure + (out.measure - my.validMeasure)*(set.recoveryTime - my.timerRecover + 1.0)/(set.recoveryTime + 1.0);
	end_if;
end_if;
//Если количество циклов с превышением скорости больше заданного количества, неисправность запоминаем до нажатия кнопки "в работу"
//= out.ROC := out.ROC and not btn.BTNworkOn or (my.qCycleROC >= qCycleCheckROC) or (my.qCycleROC <= -qCycleCheckROC);
out.ROC := (out.ROC and not btn.BTNworkOn or (my.qCycleROC >= qCycleCheckROC) or (my.qCycleROC <= -qCycleCheckROC)) and set.maxROC > 0.0;//=
my.prevMeasure := out.measure; //запоминаем предыдущее измерение.
//------------------------------------------------------------------------------------------------------------------------------------------------
out.repair := (btn.BTNrepairOn or out.repair) and not(btn.BTNworkOn or btn.BTNmanualOn or out.CurrentTimeOfRepair > set.repairTime);//канал в ремонте (BOOL)
out.manual := (btn.BTNmanualOn or out.manual) and not(btn.BTNworkOn or btn.BTNrepairOn);//канал в дист.упр. (BOOL)
//------------------- Обработка ремонта ----------------------------------------------------------------------------------------------------------
if out.repair and not btn.BTNrepairProlong then
	my.timerRepair := my.timerRepair + tim.cycle;//оставшееся время ремонта (INT)
else
	my.timerRepair := 0.0;
end_if;
tmp := set.repairTime - REAL_TO_INT(my.timerRepair);
if tmp >= 0 then out.CurrentTimeOfRepair := tmp;
else out.CurrentTimeOfRepair := 0;
end_if;
out.repair_time_less_10_percent := out.CurrentTimeOfRepair < set.repairTime/10;//до конца ремонта осталось меньше 10% от заданного времени (BOOL)
if out.repair then return; end_if; //если выставлен ремонт - не обновляем значение параметра для алгоритма
//------------------------------------------------------------------------------------------------------------------------------------------------
//------------------- Обработка ДУ ----------------------------------------------------------------------------------------------------------
if out.manual then
	my.validMeasure := btn.manualTarget;//значение для САУ. Рассчитывается из  measure, Manual_Target с учётом неисправностей и фильтрации (REAL)
else
	btn.manualTarget := my.validMeasure;
end_if;
//------------------------------------------------------------------------------------------------------------------------------------------------
//------------------- Расчёт PV ----------------------------------------------------------------------------------------------------------
//значение для САУ. Рассчитывается из  measure, Manual_Target с учётом неисправностей и фильтрации (REAL)
if tim.cycle > 0.0 then
	tau := 4.0 * set.tau/tim.cycle;
	if tau > 1.0 then
		out.PV := out.PV + (my.validMeasure - out.PV)/tau;
	else
		out.PV := my.validMeasure;
	end_if;
else
	out.PV := my.validMeasure;
end_if;
(*
set.min := ;//минимум шкалы канала, ед.изм. Не может быть >= max
set.max := ;//максимум шкалы канала, ед.изм. Не может быть <= min
set.loLim := ;//уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
set.hiLim := ;//уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
set.minADC := ;//значение АЦП, соответствующее минимуму шкалы канала, б.р.
set.maxADC := ;//значение АЦП, соотв. макс. шкалы, б.р. Не может быть равно minADC
set.minROC := ;//макс. допустимая скорость сниж. показаний, ед.изм./сек. Если «0» - скорость падения не анализируется
set.maxROC := ;//макс. допустимая скорость роста, ед.изм./сек. Если «0» - скорость роста не анализируется
set.ROC_time := ;//время, за которое анализируется скорость изменения, сек. Если «0» - скорость не анализируется
set.recoveryTime := ;//время восстановления после неисправности, сек. Не может быть < «0»
set.repairTime := ;//максимальное время в ремонте, сек. Не может быть «0»
set.tau := ;//тау фильтра, сек. Если «0» - фильтрация отсутствует
set.id := ;//номер по порядку
btn.manualTarget //Задание из ЧМИ
btn.BTNmanualOn //Кнопка вкл. задания значения из ЧМИ
btn.BTNrepairOn //Кнопка вкл. ремонта
btn.BTNworkOn //Кнопка перекл. в работу
btn.BTNrepairProlong //Кнопка продления ремонта
*)]]></ST>
                </Function>
                <Function UUID="CF4QENKSGJC3PJ2UNFRMVS5ILY" Name="AI_init" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="3PUM5EGSZZGW5B46GT7GJGJYHY" Name="setStruct" Type="T_AI_Settings" TypeUUID="XHUY6ZRHGRQEVOF35XEJI5L2SE" Usage="output" />
                        <Variable UUID="A4X47N4MTNEGBMHG5JCV54OYD4" Name="min" Type="REAL" Usage="input" />
                        <Variable UUID="J3PMJZQQPFCKTLXZKHCSBVW2FY" Name="max" Type="REAL" Usage="input" />
                        <Variable UUID="PPFZBCEPQNDGDPXS4GFZ5DG2R4" Name="minADC" Type="REAL" Usage="input" />
                        <Variable UUID="YGKONKKT2ZACFPHVF5HQIODJOQ" Name="maxADC" Type="REAL" Usage="input" />
                        <Variable UUID="SNMC52OSVNCEJC2WKNQ55IXRDU" Name="loLim" Type="REAL" Usage="input" />
                        <Variable UUID="C5FFNJBSORADZKDONAJYIOYQMM" Name="hiLim" Type="REAL" Usage="input" />
                        <Variable UUID="BLJ7QPD3B5GIFOK5INHVLE4N4M" Name="loBrk" Type="REAL" Usage="input" />
                        <Variable UUID="BRAZ2SPNOBCCNMKASNN375STCQ" Name="hiBrk" Type="REAL" Usage="input" />
                        <Variable UUID="A5ZCH4MWLNBG7GEVV73JJRNRZ4" Name="maxROC" Type="REAL" Usage="input" />
                        <Variable UUID="322VB4Q5PNEOBO55S4FRZSF2IQ" Name="recoveryTime" Type="REAL" Usage="input" />
                        <Variable UUID="UCAGZSJ77NAYTFYRM4N5QV62A4" Name="repairTime" Type="INT" Usage="input" />
                        <Variable UUID="3WUETIGW3VCGPPNXPQHEFM4NP4" Name="tau" Type="REAL" Usage="input" />
                        <Variable UUID="O2PSTUZUB5EIRAZBONFYBOPYXU" Name="id" Type="INT" Usage="input" />
                    </Variables>
                    <ST><![CDATA[setStruct.min:= min;//минимум шкалы канала, ед.изм. Не может быть >= max
setStruct.max:= max;//максимум шкалы канала, ед.изм. Не может быть <= min
setStruct.minADC:= minADC;//значение АЦП, соответствующее минимуму шкалы канала, б.р.
setStruct.maxADC:= maxADC;//значение АЦП, соотв. макс. шкалы, б.р. Не может быть равно minADC
setStruct.loLim:= loLim;//уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
setStruct.hiLim:= hiLim;//уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
setStruct.loBrk:= loBrk;//уровень зашкала вниз, ед.изм. Не может быть >= loLim
setStruct.hiBrk:= hiBrk;//уровень обрыва вверх, ед.изм. Не может быть <= hiLim
setStruct.maxROC:= maxROC;//макс. допустимая скорость роста, ед.изм./сек. Если «0» - скорость роста не анализируется
setStruct.recoveryTime:= recoveryTime;//время восстановления после неисправности, сек. Не может быть меньше "0"
setStruct.repairTime:= repairTime;//максимальное время в ремонте, сек. Не может быть меньше или равно «0»
setStruct.tau:= tau;//тау фильтра, сек. Если «0» - фильтрация отсутствует
setStruct.id:= id;//номер по порядку	
setStruct.corrADC:= 0.0;//корректировка минимумa АЦП
]]></ST>
                </Function>
                <Function UUID="2IB74NCRI4IZ6HH6DKQR42QTDI" Name="NMS_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="repTime" Type="INT" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[repTime := 3600;
if init = false then

//------------------------------- аргументы функции инициализации --------------------------------
//минимум шкалы канала, ед.изм. Не может быть >= max
//максимум шкалы канала, ед.изм. Не может быть <= min
//значение АЦП, соответствующее минимуму шкалы канала, б.р.
//значение АЦП, соотв. макс. шкалы, б.р. Не может быть равно minADC
//уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
//уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
//уровень зашкала вниз, ед.изм. Не может быть >= loLim
//уровень обрыва вверх, ед.изм. Не может быть <= hiLim
//макс. допустимая скорость роста, ед.изм./сек. Если «0» - скорость роста не анализируется
//время восстановления после неисправности, сек. Не может быть меньше "0"
//максимальное время в ремонте, сек. Не может быть меньше или равно «0»
//тау фильтра, сек. Если «0» - фильтрация отсутствует
//номер по порядку	
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура в P1 (склад ГСМ)
AI_init(NMS_AI_Settings.Tm_R1,-50.0,100.0,11773.0,59714.0,-54.5,104.5,-59.0,109.0,0.0,1.0,repTime,1.0,0);
//Температура в P2 (склад ГСМ)
AI_init(NMS_AI_Settings.Tm_R2,-50.0,100.0,11773.0,59714.0,-54.5,104.5,-59.0,109.0,0.0,1.0,repTime,1.0,1);
//Температура в P3 (склад ГСМ)
AI_init(NMS_AI_Settings.Tm_R3,-50.0,100.0,11773.0,59714.0,-54.5,104.5,-59.0,109.0,0.0,1.0,repTime,1.0,2);
//Температура в P4 (склад ГСМ)
AI_init(NMS_AI_Settings.Tm_R4,-50.0,100.0,11773.0,59714.0,-54.5,104.5,-59.0,109.0,0.0,1.0,repTime,1.0,3);
//Температура в P5 (склад ГСМ)
AI_init(NMS_AI_Settings.Tm_R5,-50.0,100.0,11773.0,59714.0,-54.5,104.5,-59.0,109.0,0.0,1.0,repTime,1.0,4);
//Температура в P6 (склад ГСМ)
AI_init(NMS_AI_Settings.Tm_R6,-50.0,100.0,11773.0,59714.0,-54.5,104.5,-59.0,109.0,0.0,1.0,repTime,1.0,5);
//Температура в P7 (склад ГСМ)
AI_init(NMS_AI_Settings.Tm_R7,-50.0,100.0,11773.0,59714.0,-54.5,104.5,-59.0,109.0,0.0,1.0,repTime,1.0,6);
//Уровень масла в P1 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R1,0.0,1600.0,11773.0,59714.0,-48.0,1648.0,-96.0,1696.0,0.0,1.0,repTime,1.0,7);
//Уровень масла в P2 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R2,0.0,1600.0,11773.0,59714.0,-48.0,1648.0,-96.0,1696.0,0.0,1.0,repTime,1.0,8);
//Уровень масла в P3 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R3,0.0,1600.0,11773.0,59714.0,-48.0,1648.0,-96.0,1696.0,0.0,1.0,repTime,1.0,9);
//Уровень масла в P4 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R4,0.0,1600.0,11773.0,59714.0,-48.0,1648.0,-96.0,1696.0,0.0,1.0,repTime,1.0,10);
//Уровень масла в P5 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R5,0.0,1600.0,11773.0,59714.0,-48.0,1648.0,-96.0,1696.0,0.0,1.0,repTime,1.0,11);
//Уровень масла в P6 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R6,0.0,1600.0,11773.0,59714.0,-48.0,1648.0,-96.0,1696.0,0.0,1.0,repTime,1.0,12);
//Уровень масла в P7 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R7,0.0,1600.0,11773.0,59714.0,-48.0,1648.0,-96.0,1696.0,0.0,1.0,repTime,1.0,13);
//Резерв
AI_init(NMS_AI_Settings.Res_0,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,14);
//Резерв
AI_init(NMS_AI_Settings.Res_1,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,15);
//Мин. уровень в Р1 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R1_n,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,16);
//Мин. уровень в Р2 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R2_n,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,17);
//Мин. уровень в Р3 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R3_n,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,18);
//Мин. уровень в Р4 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R4_n,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,19);
//Мин. уровень в Р5 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R5_n,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,20);
//Мин. уровень в Р6 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R6_n,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,21);
//Мин. уровень в Р7 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R7_n,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,22);
//Макс. уровень в Р1 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R1_v,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,23);
//Макс. уровень в Р2 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R2_v,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,24);
//Макс. уровень в Р3 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R3_v,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,25);
//Макс. уровень в Р4 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R4_v,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,26);
//Макс. уровень в Р5 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R5_v,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,27);
//Макс. уровень в Р6 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R6_v,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,28);
//Макс. уровень в Р7 (склад ГСМ)
AI_init(NMS_AI_Settings.Lm_R7_v,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,29);
//Резерв
AI_init(NMS_AI_Settings.Res_2,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,30);
//Резерв
AI_init(NMS_AI_Settings.Res_3,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,31);
//Давление на нагнетании насоса Н1 (насосная масел)
AI_init(NMS_AI_Settings.Pm_out_N1,0.0,4.0,11773.0,59714.0,-0.12,4.12,-0.24,4.24,0.0,1.0,repTime,1.0,32);//= исправлено с 1.0 МПа на 4.0 МПа 25.03.2021 на ПНР (ОАЕ)
//Давление на нагнетании насоса Н2 (насосная масел)
AI_init(NMS_AI_Settings.Pm_out_N2,0.0,4.0,11773.0,59714.0,-0.12,4.12,-0.24,4.24,0.0,1.0,repTime,1.0,33);//= исправлено с 1.0 МПа на 4.0 МПа 25.03.2021 на ПНР (ОАЕ)
//Давление на нагнетании насоса Н3 (насосная масел)
AI_init(NMS_AI_Settings.Pm_out_N3,0.0,4.0,11773.0,59714.0,-0.12,4.12,-0.24,4.24,0.0,1.0,repTime,1.0,34);//= исправлено с 1.0 МПа на 4.0 МПа 25.03.2021 на ПНР (ОАЕ)
//Давление на нагнетании насоса Н4 (насосная масел)
AI_init(NMS_AI_Settings.Pm_out_N4,0.0,4.0,11773.0,59714.0,-0.12,4.12,-0.24,4.24,0.0,1.0,repTime,1.0,35);//= исправлено с 1.0 МПа на 4.0 МПа 25.03.2021 на ПНР (ОАЕ)
//Давление на нагнетании насоса Н5 (насосная масел)
AI_init(NMS_AI_Settings.Pm_out_N5,0.0,4.0,11773.0,59714.0,-0.12,4.12,-0.24,4.24,0.0,1.0,repTime,1.0,36);//= исправлено с 1.0 МПа на 4.0 МПа 25.03.2021 на ПНР (ОАЕ)
//Давление на нагнетании насоса Н6 (насосная масел)
AI_init(NMS_AI_Settings.Pm_out_N6,0.0,4.0,11773.0,59714.0,-0.12,4.12,-0.24,4.24,0.0,1.0,repTime,1.0,37);//= исправлено с 1.0 МПа на 4.0 МПа 25.03.2021 на ПНР (ОАЕ)
//Температура в ёмкости масла E1 (насосная масел)
AI_init(NMS_AI_Settings.Tm_E1,-50.0,100.0,11773.0,59714.0,-54.5,104.5,-59.0,109.0,0.0,1.0,repTime,1.0,38);
//Температура в ёмкости масла E2 (насосная масел)
AI_init(NMS_AI_Settings.Tm_E2,-50.0,100.0,11773.0,59714.0,-54.5,104.5,-59.0,109.0,0.0,1.0,repTime,1.0,39);
//Температура в ёмкости масла E3 (насосная масел)
AI_init(NMS_AI_Settings.Tm_E3,-50.0,100.0,11773.0,59714.0,-54.5,104.5,-59.0,109.0,0.0,1.0,repTime,1.0,40);
//Температура в ёмкости масла E4 (насосная масел)
AI_init(NMS_AI_Settings.Tm_E4,-50.0,100.0,11773.0,59714.0,-54.5,104.5,-59.0,109.0,0.0,1.0,repTime,1.0,41);
//Температура в ёмкости масла E5 (насосная масел)
AI_init(NMS_AI_Settings.Tm_E5,-50.0,100.0,11773.0,59714.0,-54.5,104.5,-59.0,109.0,0.0,1.0,repTime,1.0,42);
//Температура в ёмкости масла E6 (насосная масел)
AI_init(NMS_AI_Settings.Tm_E6,-50.0,100.0,11773.0,59714.0,-54.5,104.5,-59.0,109.0,0.0,1.0,repTime,1.0,43);
//Резерв
AI_init(NMS_AI_Settings.Res_4,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,44);
//Резерв
AI_init(NMS_AI_Settings.Res_5,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,45);
//Резерв
AI_init(NMS_AI_Settings.Res_6,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,46);
//Резерв
AI_init(NMS_AI_Settings.Res_7,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,47);
//Мин. уровень в ёмкости Е1 (насосная масел)
AI_init(NMS_AI_Settings.Lm_E1_n,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,48);
//Мин. уровень в ёмкости Е2 (насосная масел)
AI_init(NMS_AI_Settings.Lm_E2_n,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,49);
//Мин. уровень в ёмкости Е3 (насосная масел)
AI_init(NMS_AI_Settings.Lm_E3_n,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,50);
//Мин. уровень в ёмкости Е4 (насосная масел)
AI_init(NMS_AI_Settings.Lm_E4_n,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,51);
//Мин. уровень в ёмкости Е5 (насосная масел)
AI_init(NMS_AI_Settings.Lm_E5_n,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,52);
//Мин. уровень в ёмкости Е6 (насосная масел)
AI_init(NMS_AI_Settings.Lm_E6_n,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,53);
//Макс. уровень в ёмкости Е1 (насосная масел)
AI_init(NMS_AI_Settings.Lm_E1_v,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,54);
//Макс. уровень в ёмкости Е2 (насосная масел)
AI_init(NMS_AI_Settings.Lm_E2_v,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,55);
//Макс. уровень в ёмкости Е3 (насосная масел)
AI_init(NMS_AI_Settings.Lm_E3_v,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,56);
//Макс. уровень в ёмкости Е4 (насосная масел)
AI_init(NMS_AI_Settings.Lm_E4_v,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,57);
//Макс. уровень в ёмкости Е5 (насосная масел)
AI_init(NMS_AI_Settings.Lm_E5_v,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,58);
//Макс. уровень в ёмкости Е6 (насосная масел)
AI_init(NMS_AI_Settings.Lm_E6_v,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,59);
//Макс. уровень в емкости аварийного слива масла Р8
AI_init(NMS_AI_Settings.Lm_R8_v,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,60);
//Резерв
AI_init(NMS_AI_Settings.Res_8,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,61);
//Резерв
AI_init(NMS_AI_Settings.Res_9,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,62);
//Резерв
AI_init(NMS_AI_Settings.Res_10,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,63);
//Расход масла после наосов Н1, Н2
AI_init(NMS_AI_Settings.Qm_out_N1,2.74,27.43,11773.0,59714.0,1.9993,28.1707,1.2586,28.9114,0.0,1.0,repTime,1.0,64);
//Расход масла после наосов Н3
AI_init(NMS_AI_Settings.Qm_out_N3,2.68,26.85,11773.0,59714.0,1.9549,27.5751,1.2298,28.3002,0.0,1.0,repTime,1.0,65);
//Расход масла после наосов Н4
AI_init(NMS_AI_Settings.Qm_out_N4,2.67,26.73,11773.0,59714.0,1.9482,27.4518,1.2264,28.1736,0.0,1.0,repTime,1.0,66);
//Резерв
AI_init(NMS_AI_Settings.Res_11,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,67);
//Измерение основного напряжения САУ НМ
AI_init(NMS_AI_Settings.Uosn_SAU,0.0,370.0,11773.0,59714.0,-11.1,381.1,-22.2,392.2,0.0,1.0,repTime,1.0,68);
//Измерение резервного напряжения САУ НМ
AI_init(NMS_AI_Settings.Urez_SAU,0.0,370.0,11773.0,59714.0,-11.1,381.1,-22.2,392.2,0.0,1.0,repTime,1.0,69);
//Резерв
AI_init(NMS_AI_Settings.Res_12,0.0,100.0,11773.0,59714.0,0.0,0.0,0.0,0.0,0.0,1.0,repTime,1.0,70);
//Резерв
AI_init(NMS_AI_Settings.Res_13,0.0,100.0,11773.0,59714.0,0.0,0.0,0.0,0.0,0.0,1.0,repTime,1.0,71);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура в P1 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Tm_R1,NMS_AI_Settings.Tm_R1,NMS_AI_FromHMI.Tm_R1,NMS_AI_ToHMI.Tm_R1,NMS_AI_Internal.Tm_R1);
//Температура в P2 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Tm_R2,NMS_AI_Settings.Tm_R2,NMS_AI_FromHMI.Tm_R2,NMS_AI_ToHMI.Tm_R2,NMS_AI_Internal.Tm_R2);
//Температура в P3 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Tm_R3,NMS_AI_Settings.Tm_R3,NMS_AI_FromHMI.Tm_R3,NMS_AI_ToHMI.Tm_R3,NMS_AI_Internal.Tm_R3);
//Температура в P4 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Tm_R4,NMS_AI_Settings.Tm_R4,NMS_AI_FromHMI.Tm_R4,NMS_AI_ToHMI.Tm_R4,NMS_AI_Internal.Tm_R4);
//Температура в P5 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Tm_R5,NMS_AI_Settings.Tm_R5,NMS_AI_FromHMI.Tm_R5,NMS_AI_ToHMI.Tm_R5,NMS_AI_Internal.Tm_R5);
//Температура в P6 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Tm_R6,NMS_AI_Settings.Tm_R6,NMS_AI_FromHMI.Tm_R6,NMS_AI_ToHMI.Tm_R6,NMS_AI_Internal.Tm_R6);
//Температура в P7 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Tm_R7,NMS_AI_Settings.Tm_R7,NMS_AI_FromHMI.Tm_R7,NMS_AI_ToHMI.Tm_R7,NMS_AI_Internal.Tm_R7);
//Уровень масла в P1 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R1,NMS_AI_Settings.Lm_R1,NMS_AI_FromHMI.Lm_R1,NMS_AI_ToHMI.Lm_R1,NMS_AI_Internal.Lm_R1);
//Уровень масла в P2 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R2,NMS_AI_Settings.Lm_R2,NMS_AI_FromHMI.Lm_R2,NMS_AI_ToHMI.Lm_R2,NMS_AI_Internal.Lm_R2);
//Уровень масла в P3 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R3,NMS_AI_Settings.Lm_R3,NMS_AI_FromHMI.Lm_R3,NMS_AI_ToHMI.Lm_R3,NMS_AI_Internal.Lm_R3);
//Уровень масла в P4 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R4,NMS_AI_Settings.Lm_R4,NMS_AI_FromHMI.Lm_R4,NMS_AI_ToHMI.Lm_R4,NMS_AI_Internal.Lm_R4);
//Уровень масла в P5 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R5,NMS_AI_Settings.Lm_R5,NMS_AI_FromHMI.Lm_R5,NMS_AI_ToHMI.Lm_R5,NMS_AI_Internal.Lm_R5);
//Уровень масла в P6 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R6,NMS_AI_Settings.Lm_R6,NMS_AI_FromHMI.Lm_R6,NMS_AI_ToHMI.Lm_R6,NMS_AI_Internal.Lm_R6);
//Уровень масла в P7 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R7,NMS_AI_Settings.Lm_R7,NMS_AI_FromHMI.Lm_R7,NMS_AI_ToHMI.Lm_R7,NMS_AI_Internal.Lm_R7);
//Резерв
AI_Processing(NMS_AI_DRV.Res_0,NMS_AI_Settings.Res_0,NMS_AI_FromHMI.Res_0,NMS_AI_ToHMI.Res_0,NMS_AI_Internal.Res_0);
//Резерв
AI_Processing(NMS_AI_DRV.Res_1,NMS_AI_Settings.Res_1,NMS_AI_FromHMI.Res_1,NMS_AI_ToHMI.Res_1,NMS_AI_Internal.Res_1);
//Мин. уровень в Р1 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R1_n,NMS_AI_Settings.Lm_R1_n,NMS_AI_FromHMI.Lm_R1_n,NMS_AI_ToHMI.Lm_R1_n,NMS_AI_Internal.Lm_R1_n);
//Мин. уровень в Р2 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R2_n,NMS_AI_Settings.Lm_R2_n,NMS_AI_FromHMI.Lm_R2_n,NMS_AI_ToHMI.Lm_R2_n,NMS_AI_Internal.Lm_R2_n);
//Мин. уровень в Р3 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R3_n,NMS_AI_Settings.Lm_R3_n,NMS_AI_FromHMI.Lm_R3_n,NMS_AI_ToHMI.Lm_R3_n,NMS_AI_Internal.Lm_R3_n);
//Мин. уровень в Р4 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R4_n,NMS_AI_Settings.Lm_R4_n,NMS_AI_FromHMI.Lm_R4_n,NMS_AI_ToHMI.Lm_R4_n,NMS_AI_Internal.Lm_R4_n);
//Мин. уровень в Р5 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R5_n,NMS_AI_Settings.Lm_R5_n,NMS_AI_FromHMI.Lm_R5_n,NMS_AI_ToHMI.Lm_R5_n,NMS_AI_Internal.Lm_R5_n);
//Мин. уровень в Р6 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R6_n,NMS_AI_Settings.Lm_R6_n,NMS_AI_FromHMI.Lm_R6_n,NMS_AI_ToHMI.Lm_R6_n,NMS_AI_Internal.Lm_R6_n);
//Мин. уровень в Р7 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R7_n,NMS_AI_Settings.Lm_R7_n,NMS_AI_FromHMI.Lm_R7_n,NMS_AI_ToHMI.Lm_R7_n,NMS_AI_Internal.Lm_R7_n);
//Макс. уровень в Р1 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R1_v,NMS_AI_Settings.Lm_R1_v,NMS_AI_FromHMI.Lm_R1_v,NMS_AI_ToHMI.Lm_R1_v,NMS_AI_Internal.Lm_R1_v);
//Макс. уровень в Р2 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R2_v,NMS_AI_Settings.Lm_R2_v,NMS_AI_FromHMI.Lm_R2_v,NMS_AI_ToHMI.Lm_R2_v,NMS_AI_Internal.Lm_R2_v);
//Макс. уровень в Р3 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R3_v,NMS_AI_Settings.Lm_R3_v,NMS_AI_FromHMI.Lm_R3_v,NMS_AI_ToHMI.Lm_R3_v,NMS_AI_Internal.Lm_R3_v);
//Макс. уровень в Р4 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R4_v,NMS_AI_Settings.Lm_R4_v,NMS_AI_FromHMI.Lm_R4_v,NMS_AI_ToHMI.Lm_R4_v,NMS_AI_Internal.Lm_R4_v);
//Макс. уровень в Р5 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R5_v,NMS_AI_Settings.Lm_R5_v,NMS_AI_FromHMI.Lm_R5_v,NMS_AI_ToHMI.Lm_R5_v,NMS_AI_Internal.Lm_R5_v);
//Макс. уровень в Р6 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R6_v,NMS_AI_Settings.Lm_R6_v,NMS_AI_FromHMI.Lm_R6_v,NMS_AI_ToHMI.Lm_R6_v,NMS_AI_Internal.Lm_R6_v);
//Макс. уровень в Р7 (склад ГСМ)
AI_Processing(NMS_AI_DRV.Lm_R7_v,NMS_AI_Settings.Lm_R7_v,NMS_AI_FromHMI.Lm_R7_v,NMS_AI_ToHMI.Lm_R7_v,NMS_AI_Internal.Lm_R7_v);
//Резерв
AI_Processing(NMS_AI_DRV.Res_2,NMS_AI_Settings.Res_2,NMS_AI_FromHMI.Res_2,NMS_AI_ToHMI.Res_2,NMS_AI_Internal.Res_2);
//Резерв
AI_Processing(NMS_AI_DRV.Res_3,NMS_AI_Settings.Res_3,NMS_AI_FromHMI.Res_3,NMS_AI_ToHMI.Res_3,NMS_AI_Internal.Res_3);
//Давление на нагнетании насоса Н1 (насосная масел)
AI_Processing(NMS_AI_DRV.Pm_out_N1,NMS_AI_Settings.Pm_out_N1,NMS_AI_FromHMI.Pm_out_N1,NMS_AI_ToHMI.Pm_out_N1,NMS_AI_Internal.Pm_out_N1);
//Давление на нагнетании насоса Н2 (насосная масел)
AI_Processing(NMS_AI_DRV.Pm_out_N2,NMS_AI_Settings.Pm_out_N2,NMS_AI_FromHMI.Pm_out_N2,NMS_AI_ToHMI.Pm_out_N2,NMS_AI_Internal.Pm_out_N2);
//Давление на нагнетании насоса Н3 (насосная масел)
AI_Processing(NMS_AI_DRV.Pm_out_N3,NMS_AI_Settings.Pm_out_N3,NMS_AI_FromHMI.Pm_out_N3,NMS_AI_ToHMI.Pm_out_N3,NMS_AI_Internal.Pm_out_N3);
//Давление на нагнетании насоса Н4 (насосная масел)
AI_Processing(NMS_AI_DRV.Pm_out_N4,NMS_AI_Settings.Pm_out_N4,NMS_AI_FromHMI.Pm_out_N4,NMS_AI_ToHMI.Pm_out_N4,NMS_AI_Internal.Pm_out_N4);
//Давление на нагнетании насоса Н5 (насосная масел)
AI_Processing(NMS_AI_DRV.Pm_out_N5,NMS_AI_Settings.Pm_out_N5,NMS_AI_FromHMI.Pm_out_N5,NMS_AI_ToHMI.Pm_out_N5,NMS_AI_Internal.Pm_out_N5);
//Давление на нагнетании насоса Н6 (насосная масел)
AI_Processing(NMS_AI_DRV.Pm_out_N6,NMS_AI_Settings.Pm_out_N6,NMS_AI_FromHMI.Pm_out_N6,NMS_AI_ToHMI.Pm_out_N6,NMS_AI_Internal.Pm_out_N6);
//Температура в ёмкости масла E1 (насосная масел)
AI_Processing(NMS_AI_DRV.Tm_E1,NMS_AI_Settings.Tm_E1,NMS_AI_FromHMI.Tm_E1,NMS_AI_ToHMI.Tm_E1,NMS_AI_Internal.Tm_E1);
//Температура в ёмкости масла E2 (насосная масел)
AI_Processing(NMS_AI_DRV.Tm_E2,NMS_AI_Settings.Tm_E2,NMS_AI_FromHMI.Tm_E2,NMS_AI_ToHMI.Tm_E2,NMS_AI_Internal.Tm_E2);
//Температура в ёмкости масла E3 (насосная масел)
AI_Processing(NMS_AI_DRV.Tm_E3,NMS_AI_Settings.Tm_E3,NMS_AI_FromHMI.Tm_E3,NMS_AI_ToHMI.Tm_E3,NMS_AI_Internal.Tm_E3);
//Температура в ёмкости масла E4 (насосная масел)
AI_Processing(NMS_AI_DRV.Tm_E4,NMS_AI_Settings.Tm_E4,NMS_AI_FromHMI.Tm_E4,NMS_AI_ToHMI.Tm_E4,NMS_AI_Internal.Tm_E4);
//Температура в ёмкости масла E5 (насосная масел)
AI_Processing(NMS_AI_DRV.Tm_E5,NMS_AI_Settings.Tm_E5,NMS_AI_FromHMI.Tm_E5,NMS_AI_ToHMI.Tm_E5,NMS_AI_Internal.Tm_E5);
//Температура в ёмкости масла E6 (насосная масел)
AI_Processing(NMS_AI_DRV.Tm_E6,NMS_AI_Settings.Tm_E6,NMS_AI_FromHMI.Tm_E6,NMS_AI_ToHMI.Tm_E6,NMS_AI_Internal.Tm_E6);
//Резерв
AI_Processing(NMS_AI_DRV.Res_4,NMS_AI_Settings.Res_4,NMS_AI_FromHMI.Res_4,NMS_AI_ToHMI.Res_4,NMS_AI_Internal.Res_4);
//Резерв
AI_Processing(NMS_AI_DRV.Res_5,NMS_AI_Settings.Res_5,NMS_AI_FromHMI.Res_5,NMS_AI_ToHMI.Res_5,NMS_AI_Internal.Res_5);
//Резерв
AI_Processing(NMS_AI_DRV.Res_6,NMS_AI_Settings.Res_6,NMS_AI_FromHMI.Res_6,NMS_AI_ToHMI.Res_6,NMS_AI_Internal.Res_6);
//Резерв
AI_Processing(NMS_AI_DRV.Res_7,NMS_AI_Settings.Res_7,NMS_AI_FromHMI.Res_7,NMS_AI_ToHMI.Res_7,NMS_AI_Internal.Res_7);
//Мин. уровень в ёмкости Е1 (насосная масел)
AI_Processing(NMS_AI_DRV.Lm_E1_n,NMS_AI_Settings.Lm_E1_n,NMS_AI_FromHMI.Lm_E1_n,NMS_AI_ToHMI.Lm_E1_n,NMS_AI_Internal.Lm_E1_n);
//Мин. уровень в ёмкости Е2 (насосная масел)
AI_Processing(NMS_AI_DRV.Lm_E2_n,NMS_AI_Settings.Lm_E2_n,NMS_AI_FromHMI.Lm_E2_n,NMS_AI_ToHMI.Lm_E2_n,NMS_AI_Internal.Lm_E2_n);
//Мин. уровень в ёмкости Е3 (насосная масел)
AI_Processing(NMS_AI_DRV.Lm_E3_n,NMS_AI_Settings.Lm_E3_n,NMS_AI_FromHMI.Lm_E3_n,NMS_AI_ToHMI.Lm_E3_n,NMS_AI_Internal.Lm_E3_n);
//Мин. уровень в ёмкости Е4 (насосная масел)
AI_Processing(NMS_AI_DRV.Lm_E4_n,NMS_AI_Settings.Lm_E4_n,NMS_AI_FromHMI.Lm_E4_n,NMS_AI_ToHMI.Lm_E4_n,NMS_AI_Internal.Lm_E4_n);
//Мин. уровень в ёмкости Е5 (насосная масел)
AI_Processing(NMS_AI_DRV.Lm_E5_n,NMS_AI_Settings.Lm_E5_n,NMS_AI_FromHMI.Lm_E5_n,NMS_AI_ToHMI.Lm_E5_n,NMS_AI_Internal.Lm_E5_n);
//Мин. уровень в ёмкости Е6 (насосная масел)
AI_Processing(NMS_AI_DRV.Lm_E6_n,NMS_AI_Settings.Lm_E6_n,NMS_AI_FromHMI.Lm_E6_n,NMS_AI_ToHMI.Lm_E6_n,NMS_AI_Internal.Lm_E6_n);
//Макс. уровень в ёмкости Е1 (насосная масел)
AI_Processing(NMS_AI_DRV.Lm_E1_v,NMS_AI_Settings.Lm_E1_v,NMS_AI_FromHMI.Lm_E1_v,NMS_AI_ToHMI.Lm_E1_v,NMS_AI_Internal.Lm_E1_v);
//Макс. уровень в ёмкости Е2 (насосная масел)
AI_Processing(NMS_AI_DRV.Lm_E2_v,NMS_AI_Settings.Lm_E2_v,NMS_AI_FromHMI.Lm_E2_v,NMS_AI_ToHMI.Lm_E2_v,NMS_AI_Internal.Lm_E2_v);
//Макс. уровень в ёмкости Е3 (насосная масел)
AI_Processing(NMS_AI_DRV.Lm_E3_v,NMS_AI_Settings.Lm_E3_v,NMS_AI_FromHMI.Lm_E3_v,NMS_AI_ToHMI.Lm_E3_v,NMS_AI_Internal.Lm_E3_v);
//Макс. уровень в ёмкости Е4 (насосная масел)
AI_Processing(NMS_AI_DRV.Lm_E4_v,NMS_AI_Settings.Lm_E4_v,NMS_AI_FromHMI.Lm_E4_v,NMS_AI_ToHMI.Lm_E4_v,NMS_AI_Internal.Lm_E4_v);
//Макс. уровень в ёмкости Е5 (насосная масел)
AI_Processing(NMS_AI_DRV.Lm_E5_v,NMS_AI_Settings.Lm_E5_v,NMS_AI_FromHMI.Lm_E5_v,NMS_AI_ToHMI.Lm_E5_v,NMS_AI_Internal.Lm_E5_v);
//Макс. уровень в ёмкости Е6 (насосная масел)
AI_Processing(NMS_AI_DRV.Lm_E6_v,NMS_AI_Settings.Lm_E6_v,NMS_AI_FromHMI.Lm_E6_v,NMS_AI_ToHMI.Lm_E6_v,NMS_AI_Internal.Lm_E6_v);
//Макс. уровень в емкости аварийного слива масла Р8
AI_Processing(NMS_AI_DRV.Lm_R8_v,NMS_AI_Settings.Lm_R8_v,NMS_AI_FromHMI.Lm_R8_v,NMS_AI_ToHMI.Lm_R8_v,NMS_AI_Internal.Lm_R8_v);
//Резерв
AI_Processing(NMS_AI_DRV.Res_8,NMS_AI_Settings.Res_8,NMS_AI_FromHMI.Res_8,NMS_AI_ToHMI.Res_8,NMS_AI_Internal.Res_8);
//Резерв
AI_Processing(NMS_AI_DRV.Res_9,NMS_AI_Settings.Res_9,NMS_AI_FromHMI.Res_9,NMS_AI_ToHMI.Res_9,NMS_AI_Internal.Res_9);
//Резерв
AI_Processing(NMS_AI_DRV.Res_10,NMS_AI_Settings.Res_10,NMS_AI_FromHMI.Res_10,NMS_AI_ToHMI.Res_10,NMS_AI_Internal.Res_10);
//Расход масла после наосов Н1, Н2
AI_Processing(NMS_AI_DRV.Qm_out_N1,NMS_AI_Settings.Qm_out_N1,NMS_AI_FromHMI.Qm_out_N1,NMS_AI_ToHMI.Qm_out_N1,NMS_AI_Internal.Qm_out_N1);
//Расход масла после наосов Н3
AI_Processing(NMS_AI_DRV.Qm_out_N3,NMS_AI_Settings.Qm_out_N3,NMS_AI_FromHMI.Qm_out_N3,NMS_AI_ToHMI.Qm_out_N3,NMS_AI_Internal.Qm_out_N3);
//Расход масла после наосов Н4
AI_Processing(NMS_AI_DRV.Qm_out_N4,NMS_AI_Settings.Qm_out_N4,NMS_AI_FromHMI.Qm_out_N4,NMS_AI_ToHMI.Qm_out_N4,NMS_AI_Internal.Qm_out_N4);
//Резерв
AI_Processing(NMS_AI_DRV.Res_11,NMS_AI_Settings.Res_11,NMS_AI_FromHMI.Res_11,NMS_AI_ToHMI.Res_11,NMS_AI_Internal.Res_11);
//Измерение основного напряжения САУ НМ
AI_Processing(NMS_AI_DRV.Uosn_SAU,NMS_AI_Settings.Uosn_SAU,NMS_AI_FromHMI.Uosn_SAU,NMS_AI_ToHMI.Uosn_SAU,NMS_AI_Internal.Uosn_SAU);
//Измерение резервного напряжения САУ НМ
AI_Processing(NMS_AI_DRV.Urez_SAU,NMS_AI_Settings.Urez_SAU,NMS_AI_FromHMI.Urez_SAU,NMS_AI_ToHMI.Urez_SAU,NMS_AI_Internal.Urez_SAU);
//Резерв
AI_Processing(NMS_AI_DRV.Res_12,NMS_AI_Settings.Res_12,NMS_AI_FromHMI.Res_12,NMS_AI_ToHMI.Res_12,NMS_AI_Internal.Res_12);
//Резерв
AI_Processing(NMS_AI_DRV.Res_13,NMS_AI_Settings.Res_13,NMS_AI_FromHMI.Res_13,NMS_AI_ToHMI.Res_13,NMS_AI_Internal.Res_13);
//Конец сгенерированного кода


//= для коррекции нуля расходомеров масла:
if NMS_AI_ToHMI.Qm_out_N1.measure < 3.0 then NMS_AI_ToHMI.Qm_out_N1.PV := 0.0; end_if;
if NMS_AI_ToHMI.Qm_out_N3.measure < 3.0 then NMS_AI_ToHMI.Qm_out_N3.PV := 0.0; end_if;
if NMS_AI_ToHMI.Qm_out_N4.measure < 3.0 then NMS_AI_ToHMI.Qm_out_N4.PV := 0.0; end_if;




]]></ST>
                </Function>
            </Folder>
            <Folder Name="DI" Comment="" Data="" UUID="7F3NVSDPMCXETANNBE7V4CQHCQ">
                <Function UUID="P2XYAGEU5FGZTGPRCEWII4RCGE" Name="DI_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="L27BSM7XEZH7PBAFCWXQPDPAHM" Name="in" Type="BOOL" Usage="input" />
                        <Variable UUID="WHFS6UBDDVC7RDLEWVS6NYVJLQ" Name="externalFault" Type="BOOL" Usage="input" />
                        <Variable UUID="3RRZ672T65H27KGUANWIHJUTAQ" Name="set" Type="T_DI_Settings" TypeUUID="YYQ4LFBFOMREFPHHDI3SPZLDYM" Usage="input" />
                        <Variable UUID="6GENIMNWPJBGLDUSADU5POKSIU" Name="fromHMI" Type="T_DI_FromHMI" TypeUUID="CB63GVNINFXE5NDGOS62CUMGSY" Usage="inout" />
                        <Variable UUID="2ISD2SFA6RHOVBLDUJA43YIYKA" Name="toHMI" Type="T_DI_ToHMI" TypeUUID="GHOQ5H5MCDOEHDF2HTYC2D4HJI" Usage="inout" />
                        <Variable UUID="KNUNDWLBWVFKTOYD3CUNK54D2I" Name="my" Type="T_DI_Internal" TypeUUID="AZLZGZOBJZBF3NOVFVJWX37NVA" Usage="inout" />
                        <Variable UUID="BHQXJT3WMZFR5CMWIFB25VJNXQ" Name="out" Type="BOOL" Usage="inout" />
                        <Variable UUID="I6ZDT3YY5BCUHDXRDWGOOQPS74" Name="tmp" Type="INT" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[//---------------------- Поиск ошибок задания настроек – несоответствие допустимым значениям (BOOL)-----------------------------------------
toHMI.settingErr := set.repairTime = 0;
toHMI.fault_common := toHMI.settingErr or externalFault;//обобщённая неисправность. Образуется по «ИЛИ» от settingErr и неисправности цепи датчика
//---------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------
toHMI.repair := (fromHMI.BTNrepairOn or toHMI.repair) and not(fromHMI.BTNworkOn or fromHMI.BTNmanualOn or toHMI.CurrentTimeOfRepair > set.repairTime);//канал в ремонте (BOOL)
toHMI.manual := (fromHMI.BTNmanualOn or toHMI.manual) and not(fromHMI.BTNworkOn or fromHMI.BTNrepairOn);//канал в дист.упр. (BOOL)
//------------------- Обработка ремонта ----------------------------------------------------------------------------------------------------------
if toHMI.repair and not fromHMI.BTNrepairProlong then
	my.timerRepair := my.timerRepair + tim.cycle;//оставшееся время ремонта (INT)
else
	my.timerRepair := 0.0;
end_if;
tmp := set.repairTime - REAL_TO_INT(my.timerRepair);
if(tmp >= 0) then toHMI.CurrentTimeOfRepair := tmp;
else toHMI.CurrentTimeOfRepair := 0;
end_if;
toHMI.repair_time_less_10_percent := toHMI.CurrentTimeOfRepair < set.repairTime/10;//до конца ремонта осталось меньше 10% от заданного времени (BOOL)
if toHMI.repair then return; end_if; //если выставлен ремонт - не обновляем значение параметра для алгоритма
//------------------------------------------------------------------------------------------------------------------------------------------------
fromHMI.BTNrepairOn := false;
fromHMI.BTNworkOn	:= false;
fromHMI.BTNmanualOn	:= false;
fromHMI.BTNrepairProlong := false;
//------------------- Обработка ДУ ----------------------------------------------------------------------------------------------------------
if toHMI.manual then
	out := fromHMI.manualTarget;	//значение для САУ. Рассчитывается из  measure, Manual_Target с учётом неисправностей и фильтрации (REAL)
	return; 					//дальнейшие вычисления не нужны
else
	fromHMI.manualTarget := out;
end_if;
//------------------------------------------------------------------------------------------------------------------------------------------------
//------------------- Расчёт PV ----------------------------------------------------------------------------------------------------------
//значение для САУ
if set.del = 0.0 then
	out := in;
else
    if not out and in and my.timerAntiTremor < set.del then// or not out and in then
        if my.timerAntiTremor < 0.0 then
            my.timerAntiTremor := 0.0;
        end_if;
        my.timerAntiTremor := my.timerAntiTremor + tim.cycle;
    elsif out and not in and my.timerAntiTremor > -set.del then// or not out and in then
        if my.timerAntiTremor > 0.0 then
            my.timerAntiTremor := 0.0;
        end_if;
        my.timerAntiTremor := my.timerAntiTremor - tim.cycle;
	else
		my.timerAntiTremor := 0.0;
    end_if;
    out := in and my.timerAntiTremor >= set.del or out and (in or my.timerAntiTremor > -set.del);
end_if;
//-----------------------------------------------------------------------------------------------------------------------------------
]]></ST>
                </Function>
                <Function UUID="HNOM4UHXFVC4LPCSJFKZTYGF74" Name="DI_init" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="3PUM5EGSZZGW5B46GT7GJGJYHY" Name="setStruct" Type="T_DI_Settings" TypeUUID="YYQ4LFBFOMREFPHHDI3SPZLDYM" Usage="output" />
                        <Variable UUID="UCAGZSJ77NAYTFYRM4N5QV62A4" Name="repairTime" Type="INT" Usage="input" />
                        <Variable UUID="3WUETIGW3VCGPPNXPQHEFM4NP4" Name="del" Type="REAL" Usage="input" />
                        <Variable UUID="DOVR3SXOLZGSNMUJFQXZNFY4WQ" Name="inv" Type="BOOL" Usage="input" />
                        <Variable UUID="O2PSTUZUB5EIRAZBONFYBOPYXU" Name="id" Type="INT" Usage="input" />
                    </Variables>
                    <ST><![CDATA[setStruct.del:= del;//задержка от дребезга
setStruct.repairTime:= repairTime;//максимальное время в ремонте, сек. Не может быть меньше или равно «0»
setStruct.inv:= inv;//признак инверсии
setStruct.id:= id;//номер по порядку	]]></ST>
                </Function>
                <Function UUID="QL3CD5HDIIA4QZYW4GH5J6NXDU" Name="NMS_DI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="IPPP52UYWOXETJA3YKWVVFCKSM" Name="repTime" Type="INT" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[repTime := 3600;
if init = false then

//---------------- аргументы функции инициализации --------------------------
//задержка от дребезга
//максимальное время в ремонте, сек. Не может быть меньше или равно «0»
//признак инверсии
//номер по порядку	
//---------------------------------------------------------------------
//Начало сгенерированного кода DI_init
//Контроль основного питания ~220 В
DI_init(NMS_DI_Settings.Chk_AC220osn_SAU,repTime,0.0,false,0);
//Контроль резервного питания ~220 В
DI_init(NMS_DI_Settings.Chk_AC220rez_SAU,repTime,0.0,false,1);
//Автоматы питания включены
DI_init(NMS_DI_Settings.QF_ON,repTime,0.0,false,2);
//Контроль исправности разрядников
DI_init(NMS_DI_Settings.Chk_razr,repTime,0.0,false,3);
//Исправность осн. ИП =24 В внутренних цепей
DI_init(NMS_DI_Settings.DC24osn_Int_ok,repTime,0.0,false,4);
//Исправность рез. ИП =24 В внутренних цепей
DI_init(NMS_DI_Settings.DC24rez_Int_ok,repTime,0.0,false,5);
//Исправность осн. ИП =24 В AI,внешних цепей
DI_init(NMS_DI_Settings.DC24osn_AI_ok,repTime,0.0,false,6);
//Исправность рез. ИП =24 В AI,внешних цепей
DI_init(NMS_DI_Settings.DC24rez_AI_ok,repTime,0.0,false,7);
//Исправность осн. ИП =24 В D0,внешних цепей
DI_init(NMS_DI_Settings.DC24osn_DO_ok,repTime,0.0,false,8);
//Исправность рез. ИП =24 В D0,внешних цепей
DI_init(NMS_DI_Settings.DC24rez_DO_ok,repTime,0.0,false,9);
//Дверь СтУ-4 открыта
DI_init(NMS_DI_Settings.Dver_STU4_open,repTime,0.0,false,10);
//Резерв внутр.
DI_init(NMS_DI_Settings.Res_0,repTime,0.0,false,11);
//Резерв внутр.
DI_init(NMS_DI_Settings.Res_1,repTime,0.0,false,12);
//Резерв внутр.
DI_init(NMS_DI_Settings.Res_2,repTime,0.0,false,13);
//Резерв внутр.
DI_init(NMS_DI_Settings.Res_3,repTime,0.0,false,14);
//Резерв внутр.
DI_init(NMS_DI_Settings.Res_4,repTime,0.0,false,15);
//Ввод 1 380 VAC включен
DI_init(NMS_DI_Settings.Q1_AC380_ON,repTime,0.0,false,16);
//Ввод 1 380 VAC отключен
DI_init(NMS_DI_Settings.Q1_AC380_OF,repTime,0.0,false,17);
//Наличие 380 VAC на вводе 1
DI_init(NMS_DI_Settings.U1_AC380_ok,repTime,0.0,false,18);
//Ввод 1 380 VAC аварийно отключен
DI_init(NMS_DI_Settings.Q1_AC380_AOF,repTime,0.0,false,19);
//Ввод 2 380 VAC включен
DI_init(NMS_DI_Settings.Q2_AC380_ON,repTime,0.0,false,20);
//Ввод 2 380 VAC отключен
DI_init(NMS_DI_Settings.Q2_AC380_OF,repTime,0.0,false,21);
//Наличие 380 VAC на вводе 2
DI_init(NMS_DI_Settings.U2_AC380_ok,repTime,0.0,false,22);
//Ввод 2 380 VAC аварийно отключен
DI_init(NMS_DI_Settings.Q2_AC380_AOF,repTime,0.0,false,23);
//Ввод 3 380 VAC включен
DI_init(NMS_DI_Settings.Q3_AC380_ON,repTime,0.0,false,24);
//Ввод 3 380 VAC отключен
DI_init(NMS_DI_Settings.Q3_AC380_OF,repTime,0.0,false,25);
//Наличие 380 VAC на вводе 3
DI_init(NMS_DI_Settings.U3_AC380_ok,repTime,0.0,false,26);
//Ввод 3 380 VAC аварийно отключен
DI_init(NMS_DI_Settings.Q3_AC380_AOF,repTime,0.0,false,27);
//АВР сработал
DI_init(NMS_DI_Settings.AVR_work,repTime,0.0,false,28);
//Неисправность УЗИП
DI_init(NMS_DI_Settings.UZIP_Bad,repTime,0.0,false,29);
//Резерв
DI_init(NMS_DI_Settings.Res_5,repTime,0.0,false,30);
//Резерв
DI_init(NMS_DI_Settings.Res_6,repTime,0.0,false,31);
//Насос включен Н1
DI_init(NMS_DI_Settings.N1_ON,repTime,0.0,false,32);
//Насос включен Н2
DI_init(NMS_DI_Settings.N2_ON,repTime,0.0,false,33);
//Насос включен Н3
DI_init(NMS_DI_Settings.N3_ON,repTime,0.0,false,34);
//Насос включен Н4
DI_init(NMS_DI_Settings.N4_ON,repTime,0.0,false,35);
//Насос включен Н5
DI_init(NMS_DI_Settings.N5_ON,repTime,0.0,false,36);
//Насос включен Н6
DI_init(NMS_DI_Settings.N6_ON,repTime,0.0,false,37);
//Резерв
DI_init(NMS_DI_Settings.Res_7,repTime,0.0,false,38);
//Резерв
DI_init(NMS_DI_Settings.Res_8,repTime,0.0,false,39);
//Резерв
DI_init(NMS_DI_Settings.Res_9,repTime,0.0,false,40);
//Резерв
DI_init(NMS_DI_Settings.Res_10,repTime,0.0,false,41);
//Резерв
DI_init(NMS_DI_Settings.Res_11,repTime,0.0,false,42);
//Резерв
DI_init(NMS_DI_Settings.Res_12,repTime,0.0,false,43);
//Резерв
DI_init(NMS_DI_Settings.Res_13,repTime,0.0,false,44);
//Резерв
DI_init(NMS_DI_Settings.Res_14,repTime,0.0,false,45);
//Резерв
DI_init(NMS_DI_Settings.Res_15,repTime,0.0,false,46);
//Резерв
DI_init(NMS_DI_Settings.Res_16,repTime,0.0,false,47);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода DI_Processing
//Контроль основного питания ~220 В
DI_Processing(NMS_DI_DRV.Chk_AC220osn_SAU,false,NMS_DI_Settings.Chk_AC220osn_SAU,NMS_DI_FromHMI.Chk_AC220osn_SAU,NMS_DI_ToHMI.Chk_AC220osn_SAU,NMS_DI_Internal.Chk_AC220osn_SAU,NMS_DI.Chk_AC220osn_SAU);
//Контроль резервного питания ~220 В
DI_Processing(NMS_DI_DRV.Chk_AC220rez_SAU,false,NMS_DI_Settings.Chk_AC220rez_SAU,NMS_DI_FromHMI.Chk_AC220rez_SAU,NMS_DI_ToHMI.Chk_AC220rez_SAU,NMS_DI_Internal.Chk_AC220rez_SAU,NMS_DI.Chk_AC220rez_SAU);
//Автоматы питания включены
DI_Processing(NMS_DI_DRV.QF_ON,false,NMS_DI_Settings.QF_ON,NMS_DI_FromHMI.QF_ON,NMS_DI_ToHMI.QF_ON,NMS_DI_Internal.QF_ON,NMS_DI.QF_ON);
//Контроль исправности разрядников
DI_Processing(NMS_DI_DRV.Chk_razr,false,NMS_DI_Settings.Chk_razr,NMS_DI_FromHMI.Chk_razr,NMS_DI_ToHMI.Chk_razr,NMS_DI_Internal.Chk_razr,NMS_DI.Chk_razr);
//Исправность осн. ИП =24 В внутренних цепей
DI_Processing(NMS_DI_DRV.DC24osn_Int_ok,false,NMS_DI_Settings.DC24osn_Int_ok,NMS_DI_FromHMI.DC24osn_Int_ok,NMS_DI_ToHMI.DC24osn_Int_ok,NMS_DI_Internal.DC24osn_Int_ok,NMS_DI.DC24osn_Int_ok);
//Исправность рез. ИП =24 В внутренних цепей
DI_Processing(NMS_DI_DRV.DC24rez_Int_ok,false,NMS_DI_Settings.DC24rez_Int_ok,NMS_DI_FromHMI.DC24rez_Int_ok,NMS_DI_ToHMI.DC24rez_Int_ok,NMS_DI_Internal.DC24rez_Int_ok,NMS_DI.DC24rez_Int_ok);
//Исправность осн. ИП =24 В AI,внешних цепей
DI_Processing(NMS_DI_DRV.DC24osn_AI_ok,false,NMS_DI_Settings.DC24osn_AI_ok,NMS_DI_FromHMI.DC24osn_AI_ok,NMS_DI_ToHMI.DC24osn_AI_ok,NMS_DI_Internal.DC24osn_AI_ok,NMS_DI.DC24osn_AI_ok);
//Исправность рез. ИП =24 В AI,внешних цепей
DI_Processing(NMS_DI_DRV.DC24rez_AI_ok,false,NMS_DI_Settings.DC24rez_AI_ok,NMS_DI_FromHMI.DC24rez_AI_ok,NMS_DI_ToHMI.DC24rez_AI_ok,NMS_DI_Internal.DC24rez_AI_ok,NMS_DI.DC24rez_AI_ok);
//Исправность осн. ИП =24 В D0,внешних цепей
DI_Processing(NMS_DI_DRV.DC24osn_DO_ok,false,NMS_DI_Settings.DC24osn_DO_ok,NMS_DI_FromHMI.DC24osn_DO_ok,NMS_DI_ToHMI.DC24osn_DO_ok,NMS_DI_Internal.DC24osn_DO_ok,NMS_DI.DC24osn_DO_ok);
//Исправность рез. ИП =24 В D0,внешних цепей
DI_Processing(NMS_DI_DRV.DC24rez_DO_ok,false,NMS_DI_Settings.DC24rez_DO_ok,NMS_DI_FromHMI.DC24rez_DO_ok,NMS_DI_ToHMI.DC24rez_DO_ok,NMS_DI_Internal.DC24rez_DO_ok,NMS_DI.DC24rez_DO_ok);
//Дверь СтУ-4 открыта
DI_Processing(NMS_DI_DRV.Dver_STU4_open,false,NMS_DI_Settings.Dver_STU4_open,NMS_DI_FromHMI.Dver_STU4_open,NMS_DI_ToHMI.Dver_STU4_open,NMS_DI_Internal.Dver_STU4_open,NMS_DI.Dver_STU4_open);
//Резерв внутр.
DI_Processing(NMS_DI_DRV.Res_0,false,NMS_DI_Settings.Res_0,NMS_DI_FromHMI.Res_0,NMS_DI_ToHMI.Res_0,NMS_DI_Internal.Res_0,NMS_DI.Res_0);
//Резерв внутр.
DI_Processing(NMS_DI_DRV.Res_1,false,NMS_DI_Settings.Res_1,NMS_DI_FromHMI.Res_1,NMS_DI_ToHMI.Res_1,NMS_DI_Internal.Res_1,NMS_DI.Res_1);
//Резерв внутр.
DI_Processing(NMS_DI_DRV.Res_2,false,NMS_DI_Settings.Res_2,NMS_DI_FromHMI.Res_2,NMS_DI_ToHMI.Res_2,NMS_DI_Internal.Res_2,NMS_DI.Res_2);
//Резерв внутр.
DI_Processing(NMS_DI_DRV.Res_3,false,NMS_DI_Settings.Res_3,NMS_DI_FromHMI.Res_3,NMS_DI_ToHMI.Res_3,NMS_DI_Internal.Res_3,NMS_DI.Res_3);
//Резерв внутр.
DI_Processing(NMS_DI_DRV.Res_4,false,NMS_DI_Settings.Res_4,NMS_DI_FromHMI.Res_4,NMS_DI_ToHMI.Res_4,NMS_DI_Internal.Res_4,NMS_DI.Res_4);
//Ввод 1 380 VAC включен
DI_Processing(NMS_DI_DRV.Q1_AC380_ON,false,NMS_DI_Settings.Q1_AC380_ON,NMS_DI_FromHMI.Q1_AC380_ON,NMS_DI_ToHMI.Q1_AC380_ON,NMS_DI_Internal.Q1_AC380_ON,NMS_DI.Q1_AC380_ON);
//Ввод 1 380 VAC отключен
DI_Processing(NMS_DI_DRV.Q1_AC380_OF,false,NMS_DI_Settings.Q1_AC380_OF,NMS_DI_FromHMI.Q1_AC380_OF,NMS_DI_ToHMI.Q1_AC380_OF,NMS_DI_Internal.Q1_AC380_OF,NMS_DI.Q1_AC380_OF);
//Наличие 380 VAC на вводе 1
DI_Processing(NMS_DI_DRV.U1_AC380_ok,false,NMS_DI_Settings.U1_AC380_ok,NMS_DI_FromHMI.U1_AC380_ok,NMS_DI_ToHMI.U1_AC380_ok,NMS_DI_Internal.U1_AC380_ok,NMS_DI.U1_AC380_ok);
//Ввод 1 380 VAC аварийно отключен
DI_Processing(NMS_DI_DRV.Q1_AC380_AOF,false,NMS_DI_Settings.Q1_AC380_AOF,NMS_DI_FromHMI.Q1_AC380_AOF,NMS_DI_ToHMI.Q1_AC380_AOF,NMS_DI_Internal.Q1_AC380_AOF,NMS_DI.Q1_AC380_AOF);
//Ввод 2 380 VAC включен
DI_Processing(NMS_DI_DRV.Q2_AC380_ON,false,NMS_DI_Settings.Q2_AC380_ON,NMS_DI_FromHMI.Q2_AC380_ON,NMS_DI_ToHMI.Q2_AC380_ON,NMS_DI_Internal.Q2_AC380_ON,NMS_DI.Q2_AC380_ON);
//Ввод 2 380 VAC отключен
DI_Processing(NMS_DI_DRV.Q2_AC380_OF,false,NMS_DI_Settings.Q2_AC380_OF,NMS_DI_FromHMI.Q2_AC380_OF,NMS_DI_ToHMI.Q2_AC380_OF,NMS_DI_Internal.Q2_AC380_OF,NMS_DI.Q2_AC380_OF);
//Наличие 380 VAC на вводе 2
DI_Processing(NMS_DI_DRV.U2_AC380_ok,false,NMS_DI_Settings.U2_AC380_ok,NMS_DI_FromHMI.U2_AC380_ok,NMS_DI_ToHMI.U2_AC380_ok,NMS_DI_Internal.U2_AC380_ok,NMS_DI.U2_AC380_ok);
//Ввод 2 380 VAC аварийно отключен
DI_Processing(NMS_DI_DRV.Q2_AC380_AOF,false,NMS_DI_Settings.Q2_AC380_AOF,NMS_DI_FromHMI.Q2_AC380_AOF,NMS_DI_ToHMI.Q2_AC380_AOF,NMS_DI_Internal.Q2_AC380_AOF,NMS_DI.Q2_AC380_AOF);
//Ввод 3 380 VAC включен
DI_Processing(NMS_DI_DRV.Q3_AC380_ON,false,NMS_DI_Settings.Q3_AC380_ON,NMS_DI_FromHMI.Q3_AC380_ON,NMS_DI_ToHMI.Q3_AC380_ON,NMS_DI_Internal.Q3_AC380_ON,NMS_DI.Q3_AC380_ON);
//Ввод 3 380 VAC отключен
DI_Processing(NMS_DI_DRV.Q3_AC380_OF,false,NMS_DI_Settings.Q3_AC380_OF,NMS_DI_FromHMI.Q3_AC380_OF,NMS_DI_ToHMI.Q3_AC380_OF,NMS_DI_Internal.Q3_AC380_OF,NMS_DI.Q3_AC380_OF);
//Наличие 380 VAC на вводе 3
DI_Processing(NMS_DI_DRV.U3_AC380_ok,false,NMS_DI_Settings.U3_AC380_ok,NMS_DI_FromHMI.U3_AC380_ok,NMS_DI_ToHMI.U3_AC380_ok,NMS_DI_Internal.U3_AC380_ok,NMS_DI.U3_AC380_ok);
//Ввод 3 380 VAC аварийно отключен
DI_Processing(NMS_DI_DRV.Q3_AC380_AOF,false,NMS_DI_Settings.Q3_AC380_AOF,NMS_DI_FromHMI.Q3_AC380_AOF,NMS_DI_ToHMI.Q3_AC380_AOF,NMS_DI_Internal.Q3_AC380_AOF,NMS_DI.Q3_AC380_AOF);
//АВР сработал
DI_Processing(NMS_DI_DRV.AVR_work,false,NMS_DI_Settings.AVR_work,NMS_DI_FromHMI.AVR_work,NMS_DI_ToHMI.AVR_work,NMS_DI_Internal.AVR_work,NMS_DI.AVR_work);
//Неисправность УЗИП
DI_Processing(NMS_DI_DRV.UZIP_Bad,false,NMS_DI_Settings.UZIP_Bad,NMS_DI_FromHMI.UZIP_Bad,NMS_DI_ToHMI.UZIP_Bad,NMS_DI_Internal.UZIP_Bad,NMS_DI.UZIP_Bad);
//Резерв
DI_Processing(NMS_DI_DRV.Res_5,false,NMS_DI_Settings.Res_5,NMS_DI_FromHMI.Res_5,NMS_DI_ToHMI.Res_5,NMS_DI_Internal.Res_5,NMS_DI.Res_5);
//Резерв
DI_Processing(NMS_DI_DRV.Res_6,false,NMS_DI_Settings.Res_6,NMS_DI_FromHMI.Res_6,NMS_DI_ToHMI.Res_6,NMS_DI_Internal.Res_6,NMS_DI.Res_6);
//Насос включен Н1
DI_Processing(NMS_DI_DRV.N1_ON,false,NMS_DI_Settings.N1_ON,NMS_DI_FromHMI.N1_ON,NMS_DI_ToHMI.N1_ON,NMS_DI_Internal.N1_ON,NMS_DI.N1_ON);
//Насос включен Н2
DI_Processing(NMS_DI_DRV.N2_ON,false,NMS_DI_Settings.N2_ON,NMS_DI_FromHMI.N2_ON,NMS_DI_ToHMI.N2_ON,NMS_DI_Internal.N2_ON,NMS_DI.N2_ON);
//Насос включен Н3
DI_Processing(NMS_DI_DRV.N3_ON,false,NMS_DI_Settings.N3_ON,NMS_DI_FromHMI.N3_ON,NMS_DI_ToHMI.N3_ON,NMS_DI_Internal.N3_ON,NMS_DI.N3_ON);
//Насос включен Н4
DI_Processing(NMS_DI_DRV.N4_ON,false,NMS_DI_Settings.N4_ON,NMS_DI_FromHMI.N4_ON,NMS_DI_ToHMI.N4_ON,NMS_DI_Internal.N4_ON,NMS_DI.N4_ON);
//Насос включен Н5
DI_Processing(NMS_DI_DRV.N5_ON,false,NMS_DI_Settings.N5_ON,NMS_DI_FromHMI.N5_ON,NMS_DI_ToHMI.N5_ON,NMS_DI_Internal.N5_ON,NMS_DI.N5_ON);
//Насос включен Н6
DI_Processing(NMS_DI_DRV.N6_ON,false,NMS_DI_Settings.N6_ON,NMS_DI_FromHMI.N6_ON,NMS_DI_ToHMI.N6_ON,NMS_DI_Internal.N6_ON,NMS_DI.N6_ON);
//Резерв
DI_Processing(NMS_DI_DRV.Res_7,false,NMS_DI_Settings.Res_7,NMS_DI_FromHMI.Res_7,NMS_DI_ToHMI.Res_7,NMS_DI_Internal.Res_7,NMS_DI.Res_7);
//Резерв
DI_Processing(NMS_DI_DRV.Res_8,false,NMS_DI_Settings.Res_8,NMS_DI_FromHMI.Res_8,NMS_DI_ToHMI.Res_8,NMS_DI_Internal.Res_8,NMS_DI.Res_8);
//Резерв
DI_Processing(NMS_DI_DRV.Res_9,false,NMS_DI_Settings.Res_9,NMS_DI_FromHMI.Res_9,NMS_DI_ToHMI.Res_9,NMS_DI_Internal.Res_9,NMS_DI.Res_9);
//Резерв
DI_Processing(NMS_DI_DRV.Res_10,false,NMS_DI_Settings.Res_10,NMS_DI_FromHMI.Res_10,NMS_DI_ToHMI.Res_10,NMS_DI_Internal.Res_10,NMS_DI.Res_10);
//Резерв
DI_Processing(NMS_DI_DRV.Res_11,false,NMS_DI_Settings.Res_11,NMS_DI_FromHMI.Res_11,NMS_DI_ToHMI.Res_11,NMS_DI_Internal.Res_11,NMS_DI.Res_11);
//Резерв
DI_Processing(NMS_DI_DRV.Res_12,false,NMS_DI_Settings.Res_12,NMS_DI_FromHMI.Res_12,NMS_DI_ToHMI.Res_12,NMS_DI_Internal.Res_12,NMS_DI.Res_12);
//Резерв
DI_Processing(NMS_DI_DRV.Res_13,false,NMS_DI_Settings.Res_13,NMS_DI_FromHMI.Res_13,NMS_DI_ToHMI.Res_13,NMS_DI_Internal.Res_13,NMS_DI.Res_13);
//Резерв
DI_Processing(NMS_DI_DRV.Res_14,false,NMS_DI_Settings.Res_14,NMS_DI_FromHMI.Res_14,NMS_DI_ToHMI.Res_14,NMS_DI_Internal.Res_14,NMS_DI.Res_14);
//Резерв
DI_Processing(NMS_DI_DRV.Res_15,false,NMS_DI_Settings.Res_15,NMS_DI_FromHMI.Res_15,NMS_DI_ToHMI.Res_15,NMS_DI_Internal.Res_15,NMS_DI.Res_15);
//Резерв
DI_Processing(NMS_DI_DRV.Res_16,false,NMS_DI_Settings.Res_16,NMS_DI_FromHMI.Res_16,NMS_DI_ToHMI.Res_16,NMS_DI_Internal.Res_16,NMS_DI.Res_16);
//Конец сгенерированного кода
]]></ST>
                </Function>
            </Folder>
            <Folder Name="DO" Comment="" Data="" UUID="G5ERHSRWCIIUVG3ZNKVGADJARQ">
                <Function UUID="A5XW7BBUWNFW7M2YG2UJULUSFM" Name="DO_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="4AIZP6TN7OCU3GVNU6PSRDOTRA" Name="algOut" Type="BOOL" Usage="input" />
                        <Variable UUID="5R5WL3HGLRGMXN3ZVPA3FETS6Q" Name="fromHMI" Type="T_DO_FromHMI" TypeUUID="ICYCYA5WR5FTZMTITNXXGA6V4U" Usage="inout" />
                        <Variable UUID="EDA4FRWG6FGWJPKIBGBT6SNR2Q" Name="toHMI" Type="T_DO_ToHMI" TypeUUID="JPIXI5FFWBGSRAAFIJ2MBV77UE" Usage="inout" />
                        <Variable UUID="ROPOI5IJ6BZEBLSGQEGYPURC2I" Name="drv" Type="BOOL" Usage="output" />
                    </Variables>
                    <ST><![CDATA[toHMI.forsEnable := (toHMI.forsEnable or fromHMI.BTNforceOn) and toHMI.forsPermit and not fromHMI.BTNworkOn;
drv := algOut and not toHMI.forsEnable or fromHMI.manualTarget and toHMI.forsEnable;
fromHMI.manualTarget := drv;
//-------------------------------------------
fromHMI.BTNforceOn := false;
fromHMI.BTNworkOn := false;]]></ST>
                </Function>
                <Function UUID="RDMVL62AJXTGIEAHGCFSSYCGBA" Name="NMS_DO_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables />
                    <ST><![CDATA[//----------- Обработка дискретных выходов ---------------
//Начало сгенерированного кода DO_Processing
//Резерв
DO_Processing(NMS_DO.Res_0,NMS_DO_FromHMI.Res_0,NMS_DO_ToHMI.Res_0,NMS_DO_DRV.Res_0);
//Резерв
DO_Processing(NMS_DO.Res_1,NMS_DO_FromHMI.Res_1,NMS_DO_ToHMI.Res_1,NMS_DO_DRV.Res_1);
//Резерв
DO_Processing(NMS_DO.Res_2,NMS_DO_FromHMI.Res_2,NMS_DO_ToHMI.Res_2,NMS_DO_DRV.Res_2);
//Резерв
DO_Processing(NMS_DO.Res_3,NMS_DO_FromHMI.Res_3,NMS_DO_ToHMI.Res_3,NMS_DO_DRV.Res_3);
//Резерв
DO_Processing(NMS_DO.Res_4,NMS_DO_FromHMI.Res_4,NMS_DO_ToHMI.Res_4,NMS_DO_DRV.Res_4);
//Резерв
DO_Processing(NMS_DO.Res_5,NMS_DO_FromHMI.Res_5,NMS_DO_ToHMI.Res_5,NMS_DO_DRV.Res_5);
//Резерв
DO_Processing(NMS_DO.Res_6,NMS_DO_FromHMI.Res_6,NMS_DO_ToHMI.Res_6,NMS_DO_DRV.Res_6);
//Резерв
DO_Processing(NMS_DO.Res_7,NMS_DO_FromHMI.Res_7,NMS_DO_ToHMI.Res_7,NMS_DO_DRV.Res_7);
//Резерв
DO_Processing(NMS_DO.Res_8,NMS_DO_FromHMI.Res_8,NMS_DO_ToHMI.Res_8,NMS_DO_DRV.Res_8);
//Резерв
DO_Processing(NMS_DO.Res_9,NMS_DO_FromHMI.Res_9,NMS_DO_ToHMI.Res_9,NMS_DO_DRV.Res_9);
//Резерв
DO_Processing(NMS_DO.Res_10,NMS_DO_FromHMI.Res_10,NMS_DO_ToHMI.Res_10,NMS_DO_DRV.Res_10);
//Резерв
DO_Processing(NMS_DO.Res_11,NMS_DO_FromHMI.Res_11,NMS_DO_ToHMI.Res_11,NMS_DO_DRV.Res_11);
//Резерв
DO_Processing(NMS_DO.Res_12,NMS_DO_FromHMI.Res_12,NMS_DO_ToHMI.Res_12,NMS_DO_DRV.Res_12);
//Резерв
DO_Processing(NMS_DO.Res_13,NMS_DO_FromHMI.Res_13,NMS_DO_ToHMI.Res_13,NMS_DO_DRV.Res_13);
//Резерв
DO_Processing(NMS_DO.Res_14,NMS_DO_FromHMI.Res_14,NMS_DO_ToHMI.Res_14,NMS_DO_DRV.Res_14);
//Резерв
DO_Processing(NMS_DO.Res_15,NMS_DO_FromHMI.Res_15,NMS_DO_ToHMI.Res_15,NMS_DO_DRV.Res_15);
//Насос Н1 отключить
DO_Processing(NMS_DO.N1_OF,NMS_DO_FromHMI.N1_OF,NMS_DO_ToHMI.N1_OF,NMS_DO_DRV.N1_OF);
//Насос Н2 отключить
DO_Processing(NMS_DO.N2_OF,NMS_DO_FromHMI.N2_OF,NMS_DO_ToHMI.N2_OF,NMS_DO_DRV.N2_OF);
//Насос Н3 отключить
DO_Processing(NMS_DO.N3_OF,NMS_DO_FromHMI.N3_OF,NMS_DO_ToHMI.N3_OF,NMS_DO_DRV.N3_OF);
//Насос Н4 отключить
DO_Processing(NMS_DO.N4_OF,NMS_DO_FromHMI.N4_OF,NMS_DO_ToHMI.N4_OF,NMS_DO_DRV.N4_OF);
//Насос Н5 отключить
DO_Processing(NMS_DO.N5_OF,NMS_DO_FromHMI.N5_OF,NMS_DO_ToHMI.N5_OF,NMS_DO_DRV.N5_OF);
//Насос Н6 отключить
DO_Processing(NMS_DO.N6_OF,NMS_DO_FromHMI.N6_OF,NMS_DO_ToHMI.N6_OF,NMS_DO_DRV.N6_OF);
//Резерв
DO_Processing(NMS_DO.Res_16,NMS_DO_FromHMI.Res_16,NMS_DO_ToHMI.Res_16,NMS_DO_DRV.Res_16);
//Резерв
DO_Processing(NMS_DO.Res_17,NMS_DO_FromHMI.Res_17,NMS_DO_ToHMI.Res_17,NMS_DO_DRV.Res_17);
//Резерв
DO_Processing(NMS_DO.Res_18,NMS_DO_FromHMI.Res_18,NMS_DO_ToHMI.Res_18,NMS_DO_DRV.Res_18);
//Резерв
DO_Processing(NMS_DO.Res_19,NMS_DO_FromHMI.Res_19,NMS_DO_ToHMI.Res_19,NMS_DO_DRV.Res_19);
//Нагрев разрешен (Шкаф ШУН-202Г(1))
DO_Processing(NMS_DO.EN_SHUN1,NMS_DO_FromHMI.EN_SHUN1,NMS_DO_ToHMI.EN_SHUN1,NMS_DO_DRV.EN_SHUN1);
//Нагрев разрешен (Шкаф ШУН-202Г(2))
DO_Processing(NMS_DO.EN_SHUN2,NMS_DO_FromHMI.EN_SHUN2,NMS_DO_ToHMI.EN_SHUN2,NMS_DO_DRV.EN_SHUN2);
//Нагрев разрешен (Шкаф ШУН-202Г(3))
DO_Processing(NMS_DO.EN_SHUN3,NMS_DO_FromHMI.EN_SHUN3,NMS_DO_ToHMI.EN_SHUN3,NMS_DO_DRV.EN_SHUN3);
//Нагрев разрешен (Шкаф ШУН-202Г(4))
DO_Processing(NMS_DO.EN_SHUN4,NMS_DO_FromHMI.EN_SHUN4,NMS_DO_ToHMI.EN_SHUN4,NMS_DO_DRV.EN_SHUN4);
//Нагрев разрешен (Шкаф ШУН-202Г(5))
DO_Processing(NMS_DO.EN_SHUN5,NMS_DO_FromHMI.EN_SHUN5,NMS_DO_ToHMI.EN_SHUN5,NMS_DO_DRV.EN_SHUN5);
//Нагрев разрешен (Шкаф ШУН-202Г(6))
DO_Processing(NMS_DO.EN_SHUN6,NMS_DO_FromHMI.EN_SHUN6,NMS_DO_ToHMI.EN_SHUN6,NMS_DO_DRV.EN_SHUN6);
//Конец сгенерированного кода
]]></ST>
                </Function>
            </Folder>
        </Folder>
        <Folder Name="Tools" Comment="" Data="" UUID="C5DWCO6U6ZCEPO6W4DIAG7UOMY">
            <FunctionBlock UUID="LCERBCVHMURELEDEHKKNKLUZNQ" Name="FB_Pulse" Comment="Блок формирования импульсов с периодом Tp">
                <Variables>
                    <Variable UUID="CMR5BQDGRKPEZBIKWN5RA576SY" Name="on" Comment="Запуск ипульсов" Type="BOOL" Usage="input" />
                    <Variable UUID="B6IJ67FPJ3RUFJNLPAS7YG4QFE" Name="tp" Comment="Период следования импульсов" Type="TIME" Usage="input" />
                    <Variable UUID="XZGD3TDBOORUPN4TMQKQ32TE3I" Name="tic" Comment="Выход" Type="BOOL" Usage="output" />
                    <Variable UUID="TIVKZZA76UQEBDGHCVSWZRJTPI" Name="tmr" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
                </Variables>
                <ST><![CDATA[//таймер периода
tmr(IN:= on AND NOT tmr.Q, PT:= tp);
//на полупериоде установить 0
//выход
tic :=  tmr.ET < tp/2 AND NOT tmr.Q AND on;
//Steam
]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="PLKYQ7QWCLCEHE6Z74SZD2UYQY" Name="FB_Ttrg" Comment="Т-триггер на дискретных элементах">
                <Variables>
                    <Variable UUID="G733ZPQIUZCUZJXOIV7OQQT3G4" Name="c" Comment="Входной тактовый импульс" Type="BOOL" Usage="input" />
                    <Variable UUID="7QPJXKAOG7XUTMS7SZ3FDZDHCE" Name="r" Comment="Безусловный сброс" Type="BOOL" Usage="input" />
                    <Variable UUID="VBKMAUZHCLJUTLMX4GJ6QYJVRY" Name="q" Comment="Выход Т-триггера" Type="BOOL" Usage="output" />
                    <Variable UUID="EEKECSBDYVAELGKC3TOJWPG56M" Name="pr_c" Type="BOOL" Usage="internal" />
                </Variables>
                <ST><![CDATA[
q := (c AND NOT pr_c  AND NOT q OR q) AND NOT (c AND NOT pr_c  AND q OR r);
pr_c := c;]]></ST>
            </FunctionBlock>
        </Folder>
        <Folder Name="АПС" Comment="" Data="" UUID="CSCW6XWQPT6U3DVSHTPV7TLXNU">
            <Function UUID="FW42INRNPRHFXK54IV4UB5K24M" Name="APS_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="5KOTXMQ56XMUXOPGEVEUSMNRCY" Name="unlock" Comment="Деблокировка" Type="BOOL" Usage="input" />
                    <Variable UUID="A4RLFHSGO6HEPPBSGLD75OAVJA" Name="i" Type="INT" Usage="internal" />
                </Variables>
                <ST><![CDATA[
for i :=0 to 8 do AlarmTarget[i] := FALSE; end_for; // 5 - номер последнего типа сигнализации (target)
if unlock then NMS_FirstOutIndex := 0; end_if;

new_wrn := false;
new_crs := false;
i:= 0;
APS_Processing(NMS_ANB.Tm_R1_Av, 1.0, unlock, NMS_APS.Tm_R1_Av, NMS_APS_Internal.Tm_R1_Av, NMS_FirstOutIndex, i);                        // Температура масла в P1 высокая. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Tm_R2_Av, 1.0, unlock, NMS_APS.Tm_R2_Av, NMS_APS_Internal.Tm_R2_Av, NMS_FirstOutIndex, i);                        // Температура масла в P2 высокая. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Tm_R3_Av, 1.0, unlock, NMS_APS.Tm_R3_Av, NMS_APS_Internal.Tm_R3_Av, NMS_FirstOutIndex, i);                        // Температура масла в P3 высокая. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Tm_R4_Av, 1.0, unlock, NMS_APS.Tm_R4_Av, NMS_APS_Internal.Tm_R4_Av, NMS_FirstOutIndex, i);                        // Температура масла в P4 высокая. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Tm_R5_Av, 1.0, unlock, NMS_APS.Tm_R5_Av, NMS_APS_Internal.Tm_R5_Av, NMS_FirstOutIndex, i);                        // Температура масла в P5 высокая. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Tm_R6_Av, 1.0, unlock, NMS_APS.Tm_R6_Av, NMS_APS_Internal.Tm_R6_Av, NMS_FirstOutIndex, i);                        // Температура масла в P6 высокая. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Tm_R7_Av, 1.0, unlock, NMS_APS.Tm_R7_Av, NMS_APS_Internal.Tm_R7_Av, NMS_FirstOutIndex, i);                        // Температура масла в P7 высокая. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Lm_R1_An, 1.0, unlock, NMS_APS.Lm_R1_An, NMS_APS_Internal.Lm_R1_An, NMS_FirstOutIndex, i);                        // Уровень масла в P1 низкий. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Lm_R1_Av, 1.0, unlock, NMS_APS.Lm_R1_Av, NMS_APS_Internal.Lm_R1_Av, NMS_FirstOutIndex, i);                        // Уровень масла в P1 высокий. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Lm_R2_An, 1.0, unlock, NMS_APS.Lm_R2_An, NMS_APS_Internal.Lm_R2_An, NMS_FirstOutIndex, i);                        // Уровень масла в P2 низкий. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Lm_R2_Av, 1.0, unlock, NMS_APS.Lm_R2_Av, NMS_APS_Internal.Lm_R2_Av, NMS_FirstOutIndex, i);                        // Уровень масла в P2 высокий. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Lm_R3_An, 1.0, unlock, NMS_APS.Lm_R3_An, NMS_APS_Internal.Lm_R3_An, NMS_FirstOutIndex, i);                        // Уровень масла в P3 низкий. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Lm_R3_Av, 1.0, unlock, NMS_APS.Lm_R3_Av, NMS_APS_Internal.Lm_R3_Av, NMS_FirstOutIndex, i);                        // Уровень масла в P3 высокий. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Lm_R4_An, 1.0, unlock, NMS_APS.Lm_R4_An, NMS_APS_Internal.Lm_R4_An, NMS_FirstOutIndex, i);                        // Уровень масла в P4 низкий. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Lm_R4_Av, 1.0, unlock, NMS_APS.Lm_R4_Av, NMS_APS_Internal.Lm_R4_Av, NMS_FirstOutIndex, i);                        // Уровень масла в P4 высокий. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Lm_R5_An, 1.0, unlock, NMS_APS.Lm_R5_An, NMS_APS_Internal.Lm_R5_An, NMS_FirstOutIndex, i);                        // Уровень масла в P5 низкий. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Lm_R5_Av, 1.0, unlock, NMS_APS.Lm_R5_Av, NMS_APS_Internal.Lm_R5_Av, NMS_FirstOutIndex, i);                        // Уровень масла в P5 высокий. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Lm_R6_An, 1.0, unlock, NMS_APS.Lm_R6_An, NMS_APS_Internal.Lm_R6_An, NMS_FirstOutIndex, i);                        // Уровень масла в P6 низкий. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Lm_R6_Av, 1.0, unlock, NMS_APS.Lm_R6_Av, NMS_APS_Internal.Lm_R6_Av, NMS_FirstOutIndex, i);                        // Уровень масла в P6 высокий. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Lm_R7_An, 1.0, unlock, NMS_APS.Lm_R7_An, NMS_APS_Internal.Lm_R7_An, NMS_FirstOutIndex, i);                        // Уровень масла в P7 низкий. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Lm_R7_Av, 1.0, unlock, NMS_APS.Lm_R7_Av, NMS_APS_Internal.Lm_R7_Av, NMS_FirstOutIndex, i);                        // Уровень масла в P7 высокий. Склад ГСМ, поз.38 [AS]
APS_Processing(NMS_ANB.Pm_out_N1_An, 1.0, unlock, NMS_APS.Pm_out_N1_An, NMS_APS_Internal.Pm_out_N1_An, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н1 низкое. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Pm_out_N1_Av, 1.0, unlock, NMS_APS.Pm_out_N1_Av, NMS_APS_Internal.Pm_out_N1_Av, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н1 высокое. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Pm_out_N2_An, 1.0, unlock, NMS_APS.Pm_out_N2_An, NMS_APS_Internal.Pm_out_N2_An, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н2 низкое. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Pm_out_N2_Av, 1.0, unlock, NMS_APS.Pm_out_N2_Av, NMS_APS_Internal.Pm_out_N2_Av, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н2 высокое. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Pm_out_N3_An, 1.0, unlock, NMS_APS.Pm_out_N3_An, NMS_APS_Internal.Pm_out_N3_An, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н3 низкое. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Pm_out_N3_Av, 1.0, unlock, NMS_APS.Pm_out_N3_Av, NMS_APS_Internal.Pm_out_N3_Av, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н3 высокое. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Pm_out_N4_An, 1.0, unlock, NMS_APS.Pm_out_N4_An, NMS_APS_Internal.Pm_out_N4_An, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н4 низкое. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Pm_out_N4_Av, 1.0, unlock, NMS_APS.Pm_out_N4_Av, NMS_APS_Internal.Pm_out_N4_Av, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н4 высокое. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Pm_out_N5_An, 1.0, unlock, NMS_APS.Pm_out_N5_An, NMS_APS_Internal.Pm_out_N5_An, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н5 низкое. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Pm_out_N5_Av, 1.0, unlock, NMS_APS.Pm_out_N5_Av, NMS_APS_Internal.Pm_out_N5_Av, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н5 высокое. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Pm_out_N6_An, 1.0, unlock, NMS_APS.Pm_out_N6_An, NMS_APS_Internal.Pm_out_N6_An, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н6 низкое. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Pm_out_N6_Av, 1.0, unlock, NMS_APS.Pm_out_N6_Av, NMS_APS_Internal.Pm_out_N6_Av, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н6 высокое. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Tm_E1_Av, 1.0, unlock, NMS_APS.Tm_E1_Av, NMS_APS_Internal.Tm_E1_Av, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E1 высокая. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Tm_E2_Av, 1.0, unlock, NMS_APS.Tm_E2_Av, NMS_APS_Internal.Tm_E2_Av, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E2 высокая. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Tm_E3_Av, 1.0, unlock, NMS_APS.Tm_E3_Av, NMS_APS_Internal.Tm_E3_Av, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E3 высокая. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Tm_E4_Av, 1.0, unlock, NMS_APS.Tm_E4_Av, NMS_APS_Internal.Tm_E4_Av, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E4 высокая. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Tm_E5_Av, 1.0, unlock, NMS_APS.Tm_E5_Av, NMS_APS_Internal.Tm_E5_Av, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E5 высокая. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Tm_E6_Av, 1.0, unlock, NMS_APS.Tm_E6_Av, NMS_APS_Internal.Tm_E6_Av, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E6 высокая. Насосная масел, поз.38.3 [AS]
APS_Processing(NMS_ANB.Tm_R1_Pn, 1.0, unlock, NMS_APS.Tm_R1_Pn, NMS_APS_Internal.Tm_R1_Pn, NMS_FirstOutIndex, i);                        // Температура масла в P1 пониженная. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Tm_R1_Pv, 1.0, unlock, NMS_APS.Tm_R1_Pv, NMS_APS_Internal.Tm_R1_Pv, NMS_FirstOutIndex, i);                        // Температура масла в P1 повышенная. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Tm_R2_Pn, 1.0, unlock, NMS_APS.Tm_R2_Pn, NMS_APS_Internal.Tm_R2_Pn, NMS_FirstOutIndex, i);                        // Температура масла в P2 пониженная. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Tm_R2_Pv, 1.0, unlock, NMS_APS.Tm_R2_Pv, NMS_APS_Internal.Tm_R2_Pv, NMS_FirstOutIndex, i);                        // Температура масла в P2 повышенная. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Tm_R3_Pn, 1.0, unlock, NMS_APS.Tm_R3_Pn, NMS_APS_Internal.Tm_R3_Pn, NMS_FirstOutIndex, i);                        // Температура масла в P3 пониженная. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Tm_R3_Pv, 1.0, unlock, NMS_APS.Tm_R3_Pv, NMS_APS_Internal.Tm_R3_Pv, NMS_FirstOutIndex, i);                        // Температура масла в P3 повышенная. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Tm_R4_Pn, 1.0, unlock, NMS_APS.Tm_R4_Pn, NMS_APS_Internal.Tm_R4_Pn, NMS_FirstOutIndex, i);                        // Температура масла в P4 пониженная. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Tm_R4_Pv, 1.0, unlock, NMS_APS.Tm_R4_Pv, NMS_APS_Internal.Tm_R4_Pv, NMS_FirstOutIndex, i);                        // Температура масла в P4 повышенная. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Tm_R5_Pn, 1.0, unlock, NMS_APS.Tm_R5_Pn, NMS_APS_Internal.Tm_R5_Pn, NMS_FirstOutIndex, i);                        // Температура масла в P5 пониженная. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Tm_R5_Pv, 1.0, unlock, NMS_APS.Tm_R5_Pv, NMS_APS_Internal.Tm_R5_Pv, NMS_FirstOutIndex, i);                        // Температура масла в P5 повышенная. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Tm_R6_Pn, 1.0, unlock, NMS_APS.Tm_R6_Pn, NMS_APS_Internal.Tm_R6_Pn, NMS_FirstOutIndex, i);                        // Температура масла в P6 пониженная. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Tm_R6_Pv, 1.0, unlock, NMS_APS.Tm_R6_Pv, NMS_APS_Internal.Tm_R6_Pv, NMS_FirstOutIndex, i);                        // Температура масла в P6 повышенная. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Tm_R7_Pn, 1.0, unlock, NMS_APS.Tm_R7_Pn, NMS_APS_Internal.Tm_R7_Pn, NMS_FirstOutIndex, i);                        // Температура масла в P7 пониженная. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Tm_R7_Pv, 1.0, unlock, NMS_APS.Tm_R7_Pv, NMS_APS_Internal.Tm_R7_Pv, NMS_FirstOutIndex, i);                        // Температура масла в P7 повышенная. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Lm_R1_Pn or NMS_ANB.Lm_R1_n_Pn, 1.0, unlock, NMS_APS.Lm_R1_Pn, NMS_APS_Internal.Lm_R1_Pn, NMS_FirstOutIndex, i);  // Уровень масла в P1 пониженный. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Lm_R1_Pv or NMS_ANB.Lm_R1_v_Pv, 1.0, unlock, NMS_APS.Lm_R1_Pv, NMS_APS_Internal.Lm_R1_Pv, NMS_FirstOutIndex, i);  // Уровень масла в P1 повышенный. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Lm_R2_Pn or NMS_ANB.Lm_R2_n_Pn, 1.0, unlock, NMS_APS.Lm_R2_Pn, NMS_APS_Internal.Lm_R2_Pn, NMS_FirstOutIndex, i);  // Уровень масла в P2 пониженный. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Lm_R2_Pv or NMS_ANB.Lm_R2_v_Pv, 1.0, unlock, NMS_APS.Lm_R2_Pv, NMS_APS_Internal.Lm_R2_Pv, NMS_FirstOutIndex, i);  // Уровень масла в P2 повышенный. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Lm_R3_Pn or NMS_ANB.Lm_R3_n_Pn, 1.0, unlock, NMS_APS.Lm_R3_Pn, NMS_APS_Internal.Lm_R3_Pn, NMS_FirstOutIndex, i);  // Уровень масла в P3 пониженный. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Lm_R3_Pv or NMS_ANB.Lm_R3_v_Pv, 1.0, unlock, NMS_APS.Lm_R3_Pv, NMS_APS_Internal.Lm_R3_Pv, NMS_FirstOutIndex, i);  // Уровень масла в P3 повышенный. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Lm_R4_Pn or NMS_ANB.Lm_R4_n_Pn, 1.0, unlock, NMS_APS.Lm_R4_Pn, NMS_APS_Internal.Lm_R4_Pn, NMS_FirstOutIndex, i);  // Уровень масла в P4 пониженный. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Lm_R4_Pv or NMS_ANB.Lm_R4_v_Pv, 1.0, unlock, NMS_APS.Lm_R4_Pv, NMS_APS_Internal.Lm_R4_Pv, NMS_FirstOutIndex, i);  // Уровень масла в P4 повышенный. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Lm_R5_Pn or NMS_ANB.Lm_R5_n_Pn, 1.0, unlock, NMS_APS.Lm_R5_Pn, NMS_APS_Internal.Lm_R5_Pn, NMS_FirstOutIndex, i);  // Уровень масла в P5 пониженный. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Lm_R5_Pv or NMS_ANB.Lm_R5_v_Pv, 1.0, unlock, NMS_APS.Lm_R5_Pv, NMS_APS_Internal.Lm_R5_Pv, NMS_FirstOutIndex, i);  // Уровень масла в P5 повышенный. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Lm_R6_Pn or NMS_ANB.Lm_R6_n_Pn, 1.0, unlock, NMS_APS.Lm_R6_Pn, NMS_APS_Internal.Lm_R6_Pn, NMS_FirstOutIndex, i);  // Уровень масла в P6 пониженный. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Lm_R6_Pv or NMS_ANB.Lm_R6_v_Pv, 1.0, unlock, NMS_APS.Lm_R6_Pv, NMS_APS_Internal.Lm_R6_Pv, NMS_FirstOutIndex, i);  // Уровень масла в P6 повышенный. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Lm_R7_Pn or NMS_ANB.Lm_R7_n_Pn, 1.0, unlock, NMS_APS.Lm_R7_Pn, NMS_APS_Internal.Lm_R7_Pn, NMS_FirstOutIndex, i);  // Уровень масла в P7 пониженный. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Lm_R7_Pv or NMS_ANB.Lm_R7_v_Pv, 1.0, unlock, NMS_APS.Lm_R7_Pv, NMS_APS_Internal.Lm_R7_Pv, NMS_FirstOutIndex, i);  // Уровень масла в P7 повышенный. Склад ГСМ, поз.38 [PS]
APS_Processing(NMS_ANB.Pm_out_N1_Pn, 1.0, unlock, NMS_APS.Pm_out_N1_Pn, NMS_APS_Internal.Pm_out_N1_Pn, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н1 пониженное. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Pm_out_N1_Pv, 1.0, unlock, NMS_APS.Pm_out_N1_Pv, NMS_APS_Internal.Pm_out_N1_Pv, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н1 повышенное. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Pm_out_N2_Pn, 1.0, unlock, NMS_APS.Pm_out_N2_Pn, NMS_APS_Internal.Pm_out_N2_Pn, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н2 пониженное. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Pm_out_N2_Pv, 1.0, unlock, NMS_APS.Pm_out_N2_Pv, NMS_APS_Internal.Pm_out_N2_Pv, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н2 повышенное. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Pm_out_N3_Pn, 1.0, unlock, NMS_APS.Pm_out_N3_Pn, NMS_APS_Internal.Pm_out_N3_Pn, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н3 пониженное. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Pm_out_N3_Pv, 1.0, unlock, NMS_APS.Pm_out_N3_Pv, NMS_APS_Internal.Pm_out_N3_Pv, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н3 повышенное. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Pm_out_N4_Pn, 1.0, unlock, NMS_APS.Pm_out_N4_Pn, NMS_APS_Internal.Pm_out_N4_Pn, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н4 пониженное. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Pm_out_N4_Pv, 1.0, unlock, NMS_APS.Pm_out_N4_Pv, NMS_APS_Internal.Pm_out_N4_Pv, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н4 повышенное. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Pm_out_N5_Pn, 1.0, unlock, NMS_APS.Pm_out_N5_Pn, NMS_APS_Internal.Pm_out_N5_Pn, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н5 пониженное. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Pm_out_N5_Pv, 1.0, unlock, NMS_APS.Pm_out_N5_Pv, NMS_APS_Internal.Pm_out_N5_Pv, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н5 повышенное. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Pm_out_N6_Pn, 1.0, unlock, NMS_APS.Pm_out_N6_Pn, NMS_APS_Internal.Pm_out_N6_Pn, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н6 пониженное. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Pm_out_N6_Pv, 1.0, unlock, NMS_APS.Pm_out_N6_Pv, NMS_APS_Internal.Pm_out_N6_Pv, NMS_FirstOutIndex, i);            // Давление на нагнетательном т/п насоса Н6 повышенное. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Tm_E1_Pn, 1.0, unlock, NMS_APS.Tm_E1_Pn, NMS_APS_Internal.Tm_E1_Pn, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E1 пониженная. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Tm_E1_Pv, 1.0, unlock, NMS_APS.Tm_E1_Pv, NMS_APS_Internal.Tm_E1_Pv, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E1 повышенная. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Tm_E2_Pn, 1.0, unlock, NMS_APS.Tm_E2_Pn, NMS_APS_Internal.Tm_E2_Pn, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E2 пониженная. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Tm_E2_Pv, 1.0, unlock, NMS_APS.Tm_E2_Pv, NMS_APS_Internal.Tm_E2_Pv, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E2 повышенная. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Tm_E3_Pn, 1.0, unlock, NMS_APS.Tm_E3_Pn, NMS_APS_Internal.Tm_E3_Pn, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E3 пониженная. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Tm_E3_Pv, 1.0, unlock, NMS_APS.Tm_E3_Pv, NMS_APS_Internal.Tm_E3_Pv, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E3 повышенная. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Tm_E4_Pn, 1.0, unlock, NMS_APS.Tm_E4_Pn, NMS_APS_Internal.Tm_E4_Pn, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E4 пониженная. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Tm_E4_Pv, 1.0, unlock, NMS_APS.Tm_E4_Pv, NMS_APS_Internal.Tm_E4_Pv, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E4 повышенная. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Tm_E5_Pn, 1.0, unlock, NMS_APS.Tm_E5_Pn, NMS_APS_Internal.Tm_E5_Pn, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E5 пониженная. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Tm_E5_Pv, 1.0, unlock, NMS_APS.Tm_E5_Pv, NMS_APS_Internal.Tm_E5_Pv, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E5 повышенная. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Tm_E6_Pn, 1.0, unlock, NMS_APS.Tm_E6_Pn, NMS_APS_Internal.Tm_E6_Pn, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E6 пониженная. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Tm_E6_Pv, 1.0, unlock, NMS_APS.Tm_E6_Pv, NMS_APS_Internal.Tm_E6_Pv, NMS_FirstOutIndex, i);                        // Температура в ёмкости масла E6 повышенная. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Uosn_SAU_Pn, 1.0, unlock, NMS_APS.Uosn_SAU_Pn, NMS_APS_Internal.Uosn_SAU_Pn, NMS_FirstOutIndex, i);               // Основное напряжение питания ~220 В пониженное [PS]
APS_Processing(NMS_ANB.Uosn_SAU_Pv, 1.0, unlock, NMS_APS.Uosn_SAU_Pv, NMS_APS_Internal.Uosn_SAU_Pv, NMS_FirstOutIndex, i);               // Основное напряжение питания ~220 В  повышенное [PS]
APS_Processing(NMS_ANB.Urez_SAU_Pn, 1.0, unlock, NMS_APS.Urez_SAU_Pn, NMS_APS_Internal.Urez_SAU_Pn, NMS_FirstOutIndex, i);               // Резервное напряжение питания ~220 В пониженное [PS]
APS_Processing(NMS_ANB.Urez_SAU_Pv, 1.0, unlock, NMS_APS.Urez_SAU_Pv, NMS_APS_Internal.Urez_SAU_Pv, NMS_FirstOutIndex, i);               // Резервное напряжение питания ~220 В  повышенное [PS]
APS_Processing(NMS_ANB.Lm_E1_n_Pn, 1.0, unlock, NMS_APS.Lm_E1_n, NMS_APS_Internal.Lm_E1_n, NMS_FirstOutIndex, i);                            // Уровень в ёмкости Е1 минимальный. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Lm_E2_n_Pn, 1.0, unlock, NMS_APS.Lm_E2_n, NMS_APS_Internal.Lm_E2_n, NMS_FirstOutIndex, i);                            // Уровень в ёмкости Е2 минимальный. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Lm_E3_n_Pn, 1.0, unlock, NMS_APS.Lm_E3_n, NMS_APS_Internal.Lm_E3_n, NMS_FirstOutIndex, i);                            // Уровень в ёмкости Е3 минимальный. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Lm_E4_n_Pn, 1.0, unlock, NMS_APS.Lm_E4_n, NMS_APS_Internal.Lm_E4_n, NMS_FirstOutIndex, i);                            // Уровень в ёмкости Е4 минимальный. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Lm_E5_n_Pn, 1.0, unlock, NMS_APS.Lm_E5_n, NMS_APS_Internal.Lm_E5_n, NMS_FirstOutIndex, i);                            // Уровень в ёмкости Е5 минимальный. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Lm_E6_n_Pn, 1.0, unlock, NMS_APS.Lm_E6_n, NMS_APS_Internal.Lm_E6_n, NMS_FirstOutIndex, i);                            // Уровень в ёмкости Е6 минимальный. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Lm_E1_v_Pv, 1.0, unlock, NMS_APS.Lm_E1_v, NMS_APS_Internal.Lm_E1_v, NMS_FirstOutIndex, i);                            // Уровень в ёмкости Е1 максимальный. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Lm_E2_v_Pv, 1.0, unlock, NMS_APS.Lm_E2_v, NMS_APS_Internal.Lm_E2_v, NMS_FirstOutIndex, i);                            // Уровень в ёмкости Е2 максимальный. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Lm_E3_v_Pv, 1.0, unlock, NMS_APS.Lm_E3_v, NMS_APS_Internal.Lm_E3_v, NMS_FirstOutIndex, i);                            // Уровень в ёмкости Е3 максимальный. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Lm_E4_v_Pv, 1.0, unlock, NMS_APS.Lm_E4_v, NMS_APS_Internal.Lm_E4_v, NMS_FirstOutIndex, i);                            // Уровень в ёмкости Е4 максимальный. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Lm_E5_v_Pv, 1.0, unlock, NMS_APS.Lm_E5_v, NMS_APS_Internal.Lm_E5_v, NMS_FirstOutIndex, i);                            // Уровень в ёмкости Е5 максимальный. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Lm_E6_v_Pv, 1.0, unlock, NMS_APS.Lm_E6_v, NMS_APS_Internal.Lm_E6_v, NMS_FirstOutIndex, i);                            // Уровень в ёмкости Е6 максимальный. Насосная масел, поз.38.3 [PS]
APS_Processing(NMS_ANB.Lm_R8_v_Pv, 1.0, unlock, NMS_APS.Lm_R8_v, NMS_APS_Internal.Lm_R8_v, NMS_FirstOutIndex, i);                            // Уровень в емкости максимальный. Емкость для аварийного слива масла, поз.38.4 [PS]
APS_Processing(not NMS_DI.U1_AC380_ok, 1.0, unlock, NMS_APS.U1_AC380_ok, NMS_APS_Internal.U1_AC380_ok, NMS_FirstOutIndex, i);            // Нет напряжения 380 VAC на вводе 1 [PS]
APS_Processing(NMS_DI.Q1_AC380_AOF, 1.0, unlock, NMS_APS.Q1_AC380_AOF, NMS_APS_Internal.Q1_AC380_AOF, NMS_FirstOutIndex, i);             // Ввод 1 380 VAC аварийно отключен [PS]
APS_Processing(not NMS_DI.U2_AC380_ok, 1.0, unlock, NMS_APS.U2_AC380_ok, NMS_APS_Internal.U2_AC380_ok, NMS_FirstOutIndex, i);            // Нет напряжения 380 VAC на вводе 2 [PS]
APS_Processing(NMS_DI.Q2_AC380_AOF, 1.0, unlock, NMS_APS.Q2_AC380_AOF, NMS_APS_Internal.Q2_AC380_AOF, NMS_FirstOutIndex, i);             // Ввод 2 380 VAC аварийно отключен [PS]
APS_Processing(not NMS_DI.U3_AC380_ok, 1.0, unlock, NMS_APS.U3_AC380_ok, NMS_APS_Internal.U3_AC380_ok, NMS_FirstOutIndex, i);            // Нет напряжения 380 VAC на вводе 3 [PS]
APS_Processing(NMS_DI.Q3_AC380_AOF, 1.0, unlock, NMS_APS.Q3_AC380_AOF, NMS_APS_Internal.Q3_AC380_AOF, NMS_FirstOutIndex, i);             // Ввод 3 380 VAC аварийно отключен [PS]
APS_Processing(NMS_DI.AVR_work, 1.0, unlock, NMS_APS.AVR_work, NMS_APS_Internal.AVR_work, NMS_FirstOutIndex, i);                         // АВР сработал [PS]
APS_Processing(NMS_DI.UZIP_Bad, 1.0, unlock, NMS_APS.UZIP_Bad, NMS_APS_Internal.UZIP_Bad, NMS_FirstOutIndex, i);                         // Неисправность УЗИП [PS]
APS_Processing(not NMS_DI.Chk_AC220osn_SAU, 1.0, unlock, NMS_APS.Chk_AC220osn_SAU, NMS_APS_Internal.Chk_AC220osn_SAU, NMS_FirstOutIndex, i); // Нет основного питания ~220 В [PS]
APS_Processing(not NMS_DI.Chk_AC220rez_SAU, 1.0, unlock, NMS_APS.Chk_AC220rez_SAU, NMS_APS_Internal.Chk_AC220rez_SAU, NMS_FirstOutIndex, i); // Нет резервного питания ~220 В [PS]
APS_Processing(not NMS_DI.QF_ON, 1.0, unlock, NMS_APS.QF_ON, NMS_APS_Internal.QF_ON, NMS_FirstOutIndex, i);                              // Автоматы питания выключены [PS]
APS_Processing(not NMS_DI.Chk_razr, 1.0, unlock, NMS_APS.Chk_razr, NMS_APS_Internal.Chk_razr, NMS_FirstOutIndex, i);                         // Нет исправности разрядников [PS]
APS_Processing(not NMS_DI.DC24osn_Int_ok, 1.0, unlock, NMS_APS.DC24osn_Int_ok, NMS_APS_Internal.DC24osn_Int_ok, NMS_FirstOutIndex, i);   // Неисправность осн. ИП =24 В внутренних цепей [PS]
APS_Processing(not NMS_DI.DC24rez_Int_ok, 1.0, unlock, NMS_APS.DC24rez_Int_ok, NMS_APS_Internal.DC24rez_Int_ok, NMS_FirstOutIndex, i);   // Неисправность рез. ИП =24 В внутренних цепей [PS]
APS_Processing(not NMS_DI.DC24osn_AI_ok, 1.0, unlock, NMS_APS.DC24osn_AI_ok, NMS_APS_Internal.DC24osn_AI_ok, NMS_FirstOutIndex, i);      // Неисправность осн. ИП =24 В AI,внешних цепей [PS]
APS_Processing(not NMS_DI.DC24rez_AI_ok, 1.0, unlock, NMS_APS.DC24rez_AI_ok, NMS_APS_Internal.DC24rez_AI_ok, NMS_FirstOutIndex, i);      // Неисправность рез. ИП =24 В AI,внешних цепей [PS]
APS_Processing(not NMS_DI.DC24osn_DO_ok, 1.0, unlock, NMS_APS.DC24osn_DO_ok, NMS_APS_Internal.DC24osn_DO_ok, NMS_FirstOutIndex, i);      // Неисправность осн. ИП =24 В D0,внешних цепей [PS]
APS_Processing(not NMS_DI.DC24rez_DO_ok, 1.0, unlock, NMS_APS.DC24rez_DO_ok, NMS_APS_Internal.DC24rez_DO_ok, NMS_FirstOutIndex, i);      // Неисправность рез. ИП =24 В D0,внешних цепей [PS]
APS_Processing(NMS_DI.Dver_STU4_open, 1.0, unlock, NMS_APS.Dver_STU4_open, NMS_APS_Internal.Dver_STU4_open, NMS_FirstOutIndex, i);       // Дверь СтУ-4 открыта [PS]
APS_Processing(KC_CRS.AOs or KC_CRS.AOb, 1.0, unlock, NMS_APS.AO_KC, NMS_APS_Internal.AO_KC, NMS_FirstOutIndex, i); // Останов от цеховой системы


//------------------- Звук --------------------------------
(*

for i:=1 to 127 do
	new_wrn := NMS_APS.Arr[i] and not NMS_APS_Internal.Arr[i].pr_value and NMS_APS_Internal.Arr[i].target > 3 or new_wrn;
	new_crs := NMS_APS.Arr[i] and not NMS_APS_Internal.Arr[i].pr_value and NMS_APS_Internal.Arr[i].target < 4 or new_crs; 
	NMS_APS_Internal.Arr[i].pr_value  := NMS_APS.Arr[i];
end_for;
*)
NMS_Sound.alarm := (new_wrn or ps_im) or NMS_Sound.alarm and not (NMS_BTN.Sound_Off or unlock); // сигн. тревога
NMS_Sound.crash := new_crs or NMS_Sound.crash and not (NMS_BTN.Sound_Off or unlock); // сигн. авария
//признак отключения звука
NMS_SS.mute := (AlarmTarget[1] or AlarmTarget[2] or AlarmTarget[3] or AlarmTarget[4] or AlarmTarget[5]) and not NMS_Sound.crash  or 
			  (AlarmTarget[6] or AlarmTarget[7]) and not NMS_Sound.alarm;]]></ST>
            </Function>
            <Function UUID="JRWJCZBU4NHJNB6ORKLXITPVMQ" Name="APS_Init" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables />
                <ST><![CDATA[
if not init then

Alarms.Fire := 1; // Пожар
Alarms.AOs := 2; // Аварийный останов со стравливанием
Alarms.AOb := 3; // Аварийный останов без стравливания
Alarms.VOs := 4; // Вынужденный останов со стравливанием
Alarms.VOb := 5; // Вынужденный останов без стравливания
Alarms.AS  := 6; // Аварийная сигнализация без останова
Alarms.PS  := 7; // Предупредительная сигнализация
Alarms.OS  := 8; // Ограничительная сигнализация

NMS_APS_Internal.Tm_R1_Av.target         := Alarms.AS; // Температура масла в P1 высокая. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R2_Av.target         := Alarms.AS; // Температура масла в P2 высокая. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R3_Av.target         := Alarms.AS; // Температура масла в P3 высокая. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R4_Av.target         := Alarms.AS; // Температура масла в P4 высокая. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R5_Av.target         := Alarms.AS; // Температура масла в P5 высокая. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R6_Av.target         := Alarms.AS; // Температура масла в P6 высокая. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R7_Av.target         := Alarms.AS; // Температура масла в P7 высокая. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R1_An.target         := Alarms.AS; // Уровень масла в P1 низкий. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R1_Av.target         := Alarms.AS; // Уровень масла в P1 высокий. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R2_An.target         := Alarms.AS; // Уровень масла в P2 низкий. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R2_Av.target         := Alarms.AS; // Уровень масла в P2 высокий. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R3_An.target         := Alarms.AS; // Уровень масла в P3 низкий. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R3_Av.target         := Alarms.AS; // Уровень масла в P3 высокий. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R4_An.target         := Alarms.AS; // Уровень масла в P4 низкий. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R4_Av.target         := Alarms.AS; // Уровень масла в P4 высокий. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R5_An.target         := Alarms.AS; // Уровень масла в P5 низкий. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R5_Av.target         := Alarms.AS; // Уровень масла в P5 высокий. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R6_An.target         := Alarms.AS; // Уровень масла в P6 низкий. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R6_Av.target         := Alarms.AS; // Уровень масла в P6 высокий. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R7_An.target         := Alarms.AS; // Уровень масла в P7 низкий. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R7_Av.target         := Alarms.AS; // Уровень масла в P7 высокий. Склад ГСМ, поз.38
NMS_APS_Internal.Pm_out_N1_An.target     := Alarms.AS; // Давление на нагнетательном т/п насоса Н1 низкое. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N1_Av.target     := Alarms.AS; // Давление на нагнетательном т/п насоса Н1 высокое. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N2_An.target     := Alarms.AS; // Давление на нагнетательном т/п насоса Н2 низкое. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N2_Av.target     := Alarms.AS; // Давление на нагнетательном т/п насоса Н2 высокое. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N3_An.target     := Alarms.AS; // Давление на нагнетательном т/п насоса Н3 низкое. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N3_Av.target     := Alarms.AS; // Давление на нагнетательном т/п насоса Н3 высокое. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N4_An.target     := Alarms.AS; // Давление на нагнетательном т/п насоса Н4 низкое. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N4_Av.target     := Alarms.AS; // Давление на нагнетательном т/п насоса Н4 высокое. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N5_An.target     := Alarms.AS; // Давление на нагнетательном т/п насоса Н5 низкое. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N5_Av.target     := Alarms.AS; // Давление на нагнетательном т/п насоса Н5 высокое. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N6_An.target     := Alarms.AS; // Давление на нагнетательном т/п насоса Н6 низкое. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N6_Av.target     := Alarms.AS; // Давление на нагнетательном т/п насоса Н6 высокое. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E1_Av.target         := Alarms.AS; // Температура в ёмкости масла E1 высокая. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E2_Av.target         := Alarms.AS; // Температура в ёмкости масла E2 высокая. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E3_Av.target         := Alarms.AS; // Температура в ёмкости масла E3 высокая. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E4_Av.target         := Alarms.AS; // Температура в ёмкости масла E4 высокая. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E5_Av.target         := Alarms.AS; // Температура в ёмкости масла E5 высокая. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E6_Av.target         := Alarms.AS; // Температура в ёмкости масла E6 высокая. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_R1_Pn.target         := Alarms.PS; // Температура масла в P1 пониженная. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R1_Pv.target         := Alarms.PS; // Температура масла в P1 повышенная. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R2_Pn.target         := Alarms.PS; // Температура масла в P2 пониженная. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R2_Pv.target         := Alarms.PS; // Температура масла в P2 повышенная. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R3_Pn.target         := Alarms.PS; // Температура масла в P3 пониженная. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R3_Pv.target         := Alarms.PS; // Температура масла в P3 повышенная. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R4_Pn.target         := Alarms.PS; // Температура масла в P4 пониженная. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R4_Pv.target         := Alarms.PS; // Температура масла в P4 повышенная. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R5_Pn.target         := Alarms.PS; // Температура масла в P5 пониженная. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R5_Pv.target         := Alarms.PS; // Температура масла в P5 повышенная. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R6_Pn.target         := Alarms.PS; // Температура масла в P6 пониженная. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R6_Pv.target         := Alarms.PS; // Температура масла в P6 повышенная. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R7_Pn.target         := Alarms.PS; // Температура масла в P7 пониженная. Склад ГСМ, поз.38
NMS_APS_Internal.Tm_R7_Pv.target         := Alarms.PS; // Температура масла в P7 повышенная. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R1_Pn.target         := Alarms.PS; // Уровень масла в P1 пониженный. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R1_Pv.target         := Alarms.PS; // Уровень масла в P1 повышенный. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R2_Pn.target         := Alarms.PS; // Уровень масла в P2 пониженный. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R2_Pv.target         := Alarms.PS; // Уровень масла в P2 повышенный. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R3_Pn.target         := Alarms.PS; // Уровень масла в P3 пониженный. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R3_Pv.target         := Alarms.PS; // Уровень масла в P3 повышенный. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R4_Pn.target         := Alarms.PS; // Уровень масла в P4 пониженный. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R4_Pv.target         := Alarms.PS; // Уровень масла в P4 повышенный. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R5_Pn.target         := Alarms.PS; // Уровень масла в P5 пониженный. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R5_Pv.target         := Alarms.PS; // Уровень масла в P5 повышенный. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R6_Pn.target         := Alarms.PS; // Уровень масла в P6 пониженный. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R6_Pv.target         := Alarms.PS; // Уровень масла в P6 повышенный. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R7_Pn.target         := Alarms.PS; // Уровень масла в P7 пониженный. Склад ГСМ, поз.38
NMS_APS_Internal.Lm_R7_Pv.target         := Alarms.PS; // Уровень масла в P7 повышенный. Склад ГСМ, поз.38
NMS_APS_Internal.Pm_out_N1_Pn.target     := Alarms.PS; // Давление на нагнетательном т/п насоса Н1 пониженное. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N1_Pv.target     := Alarms.PS; // Давление на нагнетательном т/п насоса Н1 повышенное. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N2_Pn.target     := Alarms.PS; // Давление на нагнетательном т/п насоса Н2 пониженное. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N2_Pv.target     := Alarms.PS; // Давление на нагнетательном т/п насоса Н2 повышенное. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N3_Pn.target     := Alarms.PS; // Давление на нагнетательном т/п насоса Н3 пониженное. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N3_Pv.target     := Alarms.PS; // Давление на нагнетательном т/п насоса Н3 повышенное. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N4_Pn.target     := Alarms.PS; // Давление на нагнетательном т/п насоса Н4 пониженное. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N4_Pv.target     := Alarms.PS; // Давление на нагнетательном т/п насоса Н4 повышенное. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N5_Pn.target     := Alarms.PS; // Давление на нагнетательном т/п насоса Н5 пониженное. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N5_Pv.target     := Alarms.PS; // Давление на нагнетательном т/п насоса Н5 повышенное. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N6_Pn.target     := Alarms.PS; // Давление на нагнетательном т/п насоса Н6 пониженное. Насосная масел, поз.38.3
NMS_APS_Internal.Pm_out_N6_Pv.target     := Alarms.PS; // Давление на нагнетательном т/п насоса Н6 повышенное. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E1_Pn.target         := Alarms.PS; // Температура в ёмкости масла E1 пониженная. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E1_Pv.target         := Alarms.PS; // Температура в ёмкости масла E1 повышенная. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E2_Pn.target         := Alarms.PS; // Температура в ёмкости масла E2 пониженная. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E2_Pv.target         := Alarms.PS; // Температура в ёмкости масла E2 повышенная. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E3_Pn.target         := Alarms.PS; // Температура в ёмкости масла E3 пониженная. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E3_Pv.target         := Alarms.PS; // Температура в ёмкости масла E3 повышенная. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E4_Pn.target         := Alarms.PS; // Температура в ёмкости масла E4 пониженная. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E4_Pv.target         := Alarms.PS; // Температура в ёмкости масла E4 повышенная. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E5_Pn.target         := Alarms.PS; // Температура в ёмкости масла E5 пониженная. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E5_Pv.target         := Alarms.PS; // Температура в ёмкости масла E5 повышенная. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E6_Pn.target         := Alarms.PS; // Температура в ёмкости масла E6 пониженная. Насосная масел, поз.38.3
NMS_APS_Internal.Tm_E6_Pv.target         := Alarms.PS; // Температура в ёмкости масла E6 повышенная. Насосная масел, поз.38.3
NMS_APS_Internal.Uosn_SAU_Pn.target      := Alarms.PS; // Основное напряжение питания ~220 В пониженное
NMS_APS_Internal.Uosn_SAU_Pv.target      := Alarms.PS; // Основное напряжение питания ~220 В  повышенное
NMS_APS_Internal.Urez_SAU_Pn.target      := Alarms.PS; // Резервное напряжение питания ~220 В пониженное
NMS_APS_Internal.Urez_SAU_Pv.target      := Alarms.PS; // Резервное напряжение питания ~220 В  повышенное
NMS_APS_Internal.Lm_E1_n.target          := Alarms.PS; // Уровень в ёмкости Е1 минимальный. Насосная масел, поз.38.3
NMS_APS_Internal.Lm_E2_n.target          := Alarms.PS; // Уровень в ёмкости Е2 минимальный. Насосная масел, поз.38.3
NMS_APS_Internal.Lm_E3_n.target          := Alarms.PS; // Уровень в ёмкости Е3 минимальный. Насосная масел, поз.38.3
NMS_APS_Internal.Lm_E4_n.target          := Alarms.PS; // Уровень в ёмкости Е4 минимальный. Насосная масел, поз.38.3
NMS_APS_Internal.Lm_E5_n.target          := Alarms.PS; // Уровень в ёмкости Е5 минимальный. Насосная масел, поз.38.3
NMS_APS_Internal.Lm_E6_n.target          := Alarms.PS; // Уровень в ёмкости Е6 минимальный. Насосная масел, поз.38.3
NMS_APS_Internal.Lm_E1_v.target          := Alarms.PS; // Уровень в ёмкости Е1 максимальный. Насосная масел, поз.38.3
NMS_APS_Internal.Lm_E2_v.target          := Alarms.PS; // Уровень в ёмкости Е2 максимальный. Насосная масел, поз.38.3
NMS_APS_Internal.Lm_E3_v.target          := Alarms.PS; // Уровень в ёмкости Е3 максимальный. Насосная масел, поз.38.3
NMS_APS_Internal.Lm_E4_v.target          := Alarms.PS; // Уровень в ёмкости Е4 максимальный. Насосная масел, поз.38.3
NMS_APS_Internal.Lm_E5_v.target          := Alarms.PS; // Уровень в ёмкости Е5 максимальный. Насосная масел, поз.38.3
NMS_APS_Internal.Lm_E6_v.target          := Alarms.PS; // Уровень в ёмкости Е6 максимальный. Насосная масел, поз.38.3
NMS_APS_Internal.Lm_R8_v.target          := Alarms.PS; // Уровень в емкости максимальный. Емкость для аварийного слива масла, поз.38.4
NMS_APS_Internal.U1_AC380_ok.target      := Alarms.PS; // Нет напряжения 380 VAC на вводе 1
NMS_APS_Internal.Q1_AC380_AOF.target     := Alarms.PS; // Ввод 1 380 VAC аварийно отключен
NMS_APS_Internal.U2_AC380_ok.target      := Alarms.PS; // Нет напряжения 380 VAC на вводе 2
NMS_APS_Internal.Q2_AC380_AOF.target     := Alarms.PS; // Ввод 2 380 VAC аварийно отключен
NMS_APS_Internal.U3_AC380_ok.target      := Alarms.PS; // Нет напряжения 380 VAC на вводе 3
NMS_APS_Internal.Q3_AC380_AOF.target     := Alarms.PS; // Ввод 3 380 VAC аварийно отключен
NMS_APS_Internal.AVR_work.target         := Alarms.PS; // АВР сработал
NMS_APS_Internal.UZIP_Bad.target         := Alarms.PS; // Неисправность УЗИП
NMS_APS_Internal.Chk_AC220osn_SAU.target := Alarms.PS; // Нет основного питания ~220 В
NMS_APS_Internal.Chk_AC220rez_SAU.target := Alarms.PS; // Нет резервного питания ~220 В
NMS_APS_Internal.QF_ON.target            := Alarms.PS; // Автоматы питания выключены
NMS_APS_Internal.Chk_razr.target         := Alarms.PS; // Нет исправности разрядников
NMS_APS_Internal.DC24osn_Int_ok.target   := Alarms.PS; // Неисправность осн. ИП =24 В внутренних цепей
NMS_APS_Internal.DC24rez_Int_ok.target   := Alarms.PS; // Неисправность рез. ИП =24 В внутренних цепей
NMS_APS_Internal.DC24osn_AI_ok.target    := Alarms.PS; // Неисправность осн. ИП  =24 В AI,внешних цепей
NMS_APS_Internal.DC24rez_AI_ok.target    := Alarms.PS; // Неисправность рез. ИП  =24 В AI,внешних цепей
NMS_APS_Internal.DC24osn_DO_ok.target    := Alarms.PS; // Неисправность осн. ИП  =24 В D0,внешних цепей
NMS_APS_Internal.DC24rez_DO_ok.target    := Alarms.PS; // Неисправность рез. ИП  =24 В D0,внешних цепей
NMS_APS_Internal.Dver_STU4_open.target   := Alarms.PS; // Дверь СтУ-4 открыта
NMS_APS_Internal.AO_KC.target   		 := Alarms.AS; // Останов от цеховой системы

end_if;
]]></ST>
            </Function>
            <Function UUID="5JNGGSG7TFAZNF652CWSBV7ITU" Name="APS_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="XUPU5QSBXZB3VKJC3T2JHCQBBE" Name="cnd" Comment="условие защиты" Type="BOOL" Usage="input" />
                    <Variable UUID="JGZ43QLS3Y3ULHFPRNURAOQSIY" Name="delay" Comment="задержка, с" Type="REAL" Usage="input" />
                    <Variable UUID="6ZQWFLESTWCE5BISEPM5ARCL5U" Name="reset" Comment="сброс защиты" Type="BOOL" Usage="input" />
                    <Variable UUID="DGLQLOIG5VHVZKGYZCFYXHHMA4" Name="alr" Comment="выход аларма" Type="BOOL" Usage="inout" />
                    <Variable UUID="VBXXK6DJKZDA3NVMCEXSSROBZQ" Name="var" Type="T_APS_Internal" TypeUUID="Y2SUFYR34WCUVAETREJRLVIA74" Usage="inout" />
                    <Variable UUID="GPPVQEL7KXYEDFUOLVBG2MOKWM" Name="firstoutIndex" Comment="Индекс первопричины" Type="INT" Usage="inout" />
                    <Variable UUID="ZBDBYGOJVK6ENPJDBDHCVBPHWI" Name="index" Type="INT" Usage="inout" />
                    <Variable UUID="4IBTWEWRJZLETLRTLXSVV4O7U4" Name="av" Type="BOOL" Usage="internal" />
                </Variables>
                <ST><![CDATA[if cnd
	then if var.tmr <= delay then var.tmr := var.tmr + tim.cycle; end_if;  //отсчет задержки
	else var.tmr := 0.0; 
end_if;
av := var.tmr > delay ; //срабатывание аварии
//-- детектирование нового аларма (для звука)
new_wrn := av and not var.pr_value and var.target >= Alarms.AS or new_wrn; // новое предупреждение
new_crs := av and not var.pr_value and var.target <= Alarms.VOb or new_crs; //новая авария
var.pr_value := av;
//-- 
alr := av or alr and not reset; //выдача аларма
AlarmTarget[var.target] := AlarmTarget[var.target] or alr; //срабатывание защиты в алгоритм
//первопричина
if var.target >= Alarms.AS or firstoutIndex <> 0 then return; end_if;
index := index + 1;
if alr then firstoutIndex := index; end_if;	]]></ST>
            </Function>
        </Folder>
        <Folder Name="Алгоритм" Comment="" Data="" UUID="WE3UE3WD4OMEFG6MNJX4Q7MXPY">
            <Function UUID="ML2IACWZS7CEHJOW6R5PEBGND4" Name="Alg_NMS" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables />
                <ST><![CDATA[//====================================== НМс =======================================================
//==================================================================================================
//= АО от САУ КЦ algKC.AO

algNMS.AO := KC_Mode.AOssKC OR KC_Mode.AObsKC;
//===================================================================================================

(*=======    Вычислим чуть позже: //= сделаны через уставки

// Уровни
algNMS.Lm_E1_n	 :=	;	// 	Уровень в ёмкости Е1 минимальный. Насосная масел, поз.38.3
algNMS.Lm_E2_n	 :=	;	// 	Уровень в ёмкости Е2 минимальный. Насосная масел, поз.38.3
algNMS.Lm_E3_n	 :=	;	// 	Уровень в ёмкости Е3 минимальный. Насосная масел, поз.38.3
algNMS.Lm_E4_n	 :=	;	// 	Уровень в ёмкости Е4 минимальный. Насосная масел, поз.38.3
algNMS.Lm_E5_n	 :=	;	// 	Уровень в ёмкости Е5 минимальный. Насосная масел, поз.38.3
algNMS.Lm_E6_n	 :=	;	// 	Уровень в ёмкости Е6 минимальный. Насосная масел, поз.38.3
algNMS.Lm_E1_v	 :=	;	// 	Уровень в ёмкости Е1 максимальный. Насосная масел, поз.38.3
algNMS.Lm_E2_v	 :=	;	// 	Уровень в ёмкости Е2 максимальный. Насосная масел, поз.38.3
algNMS.Lm_E3_v	 :=	;	// 	Уровень в ёмкости Е3 максимальный. Насосная масел, поз.38.3
algNMS.Lm_E4_v	 :=	;	// 	Уровень в ёмкости Е4 максимальный. Насосная масел, поз.38.3
algNMS.Lm_E5_v	 :=	;	// 	Уровень в ёмкости Е5 максимальный. Насосная масел, поз.38.3
algNMS.Lm_E6_v	 :=	;	// 	Уровень в ёмкости Е6 максимальный. Насосная масел, поз.38.3
algNMS.Lm_R8_v	 :=	;	// 	Уровень в емкости максимальный. Емкость для аварийного слива масла, поз.38.4




// Аналоговые уровни
algNMS.Lm_R1_n :=	;	// 	Мин. уровень в Р1 (склад ГСМ)
algNMS.Lm_R2_n :=	;	// 	Мин. уровень в Р2 (склад ГСМ)
algNMS.Lm_R3_n :=	;	// 	Мин. уровень в Р3 (склад ГСМ)
algNMS.Lm_R4_n :=	;	// 	Мин. уровень в Р4 (склад ГСМ)
algNMS.Lm_R5_n :=	;	// 	Мин. уровень в Р5 (склад ГСМ)
algNMS.Lm_R6_n :=	;	// 	Мин. уровень в Р6 (склад ГСМ)
algNMS.Lm_R7_n :=	;	// 	Мин. уровень в Р7 (склад ГСМ)
algNMS.Lm_R1_v :=	;	// 	Макс. уровень в Р1 (склад ГСМ)
algNMS.Lm_R2_v :=	;	// 	Макс. уровень в Р2 (склад ГСМ)
algNMS.Lm_R3_v :=	;	// 	Макс. уровень в Р3 (склад ГСМ)
algNMS.Lm_R4_v :=	;	// 	Макс. уровень в Р4 (склад ГСМ)
algNMS.Lm_R5_v :=	;	// 	Макс. уровень в Р5 (склад ГСМ)
algNMS.Lm_R6_v :=	;	// 	Макс. уровень в Р6 (склад ГСМ)
algNMS.Lm_R7_v :=	;	// 	Макс. уровень в Р7 (склад ГСМ)


*)





]]></ST>
            </Function>
            <FunctionBlock UUID="OY4VRGEYRUEEVLGDJX4GYJGV7U" Name="FB_Logic">
                <Variables>
                    <Variable UUID="25XJYZBS3WKULKVPSMIAQEWIOA" Name="Kn_DU_IM" Type="FB_Ttrg" TypeUUID="PLKYQ7QWCLCEHE6Z74SZD2UYQY" Usage="internal" />
                </Variables>
                <ST><![CDATA[//====================================== НМс =======================================================
//==================================================================================================
//Включение ДУ для ИМ по кнопке
NMS_SS.Prm_DU_IM := NOT algNMS.AO; //разрешение кнопки
Kn_DU_IM(NMS_BTN.DU_IM, NOT NMS_SS.Prm_DU_IM, NMS_TS.DU_IM); //включение ДУ для ИМ (пропадание NMS_SS.Prm_DU_IM сбросит флаг ДУ NMS_TS.DU_IM в ноль)


//= Условия автоматического отключения насосов Н1-Н6 по защитам
NMS_AM.NMs1.algOff	:=	NMS_ANB.Lm_E2_n_Pn OR NMS_ANB.Lm_E2_v_Pv;  //Логическая команда на закр.(выкл.)
NMS_AM.NMs2.algOff	:=	NMS_ANB.Lm_E2_n_Pn OR NMS_ANB.Lm_E2_v_Pv;  //Логическая команда на закр.(выкл.)
NMS_AM.NMs3.algOff	:=	NMS_ANB.Lm_E5_n_Pn OR NMS_ANB.Lm_E5_v_Pv;  //Логическая команда на закр.(выкл.)
NMS_AM.NMs4.algOff	:=	NMS_ANB.Lm_E4_n_Pn OR NMS_ANB.Lm_E4_v_Pv;  //Логическая команда на закр.(выкл.)
NMS_AM.NMs5.algOff	:=	NMS_ANB.Lm_E1_n_Pn OR NMS_ANB.Lm_E1_v_Pv;  //Логическая команда на закр.(выкл.)
NMS_AM.NMs6.algOff	:=	NMS_ANB.Lm_E3_n_Pn OR NMS_ANB.Lm_E3_v_Pv or NMS_ANB.Lm_E6_n_Pn OR NMS_ANB.Lm_E6_v_Pv;  //Логическая команда на закр.(выкл.)]]></ST>
            </FunctionBlock>
        </Folder>
        <Folder Name="Драйверы" Comment="" Data="" UUID="ZOTBN43V5ZVUNIDKTGLJAONUPA">
            <Folder Name="БВКС" Comment="" Data="" UUID="5SM6ZFZ4RGIEXBJ75UX2NAWCUM">
                <FunctionBlock UUID="ZXET7WSMSAUUXILUSQOITHLNBQ" Name="FB_BVKS_drv">
                    <Variables>
                        <Variable UUID="7W4EBWCXSEAEZGI65KVZYEITXE" Name="DW_1" Type="DWORD" Usage="internal" />
                        <Variable UUID="F2FLKYU4LHNURHPRPXHTZGRWXE" Name="DW_2" Type="DWORD" Usage="internal" />
                        <Variable UUID="7V6REKJXDE4EVH5OXEZH4W6Y3Q" Name="DW_3" Type="DWORD" Usage="internal" />
                        <Variable UUID="A3N7RZPGHU5ETCEKFUJBPWXUKU" Name="DW_4" Type="DWORD" Usage="internal" />
                        <Variable UUID="YJXU6U64K3PUPPE3KUI7AUKXMM" Name="DW_5" Type="DWORD" Usage="internal" />
                        <Variable UUID="RFSCGSEXIWZUTNJN5LFD37NXUY" Name="DW_6" Type="DWORD" Usage="internal" />
                        <Variable UUID="Y7NDBDDBXIJEDBNEKNF2SS2URE" Name="DW_7" Type="DWORD" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[//===================	Драйвер связи с БВКС	======================================
//= 		БВКС - блочная воздушная компрессорная станция
//====================================================================================
NMS_BVKS.Tv_in_BVKS.PV:=REALS[1];//БВКС: TT01 – Температура воздуха на входе установки 
NMS_BVKS.Tv_in_KM1.PV:=REALS[2];//БВКС: TT49 – Температура воздуха на всасе компрессора КМ1
NMS_BVKS.Tv_in_KM2.PV:=REALS[3];//БВКС: TT50 - Температура воздуха на всасе компрессора КМ2
NMS_BVKS.Tv_in_ROOM.PV:=REALS[4];//БВКС: TT51 - Температура воздуха в помещении
NMS_BVKS.Pv_in_BVKS.PV:=REALS[5];//БВКС: PT01 – Давление воздуха на входе в установку
NMS_BVKS.Tdp_out_BVKS.PV:=REALS[6];//БВКС: МT01 – Температура точки росы воздуха на выходе установки
NMS_BVKS.Qv.PV:=REALS[7];//БВКС: FT01 - Расход воздуха
NMS_BVKS.Nv.PV:=REALS[8];//БВКС: FT01 - Количество наработанного воздуха

NMS_BVKS.KM1Time.PV:=INT_TO_REAL(INTS[8]);//БВКС: Наработка компрессора КМ1
NMS_BVKS.KM2Time.PV:=INT_TO_REAL(INTS[9]);//БВКС: Наработка компрессора КМ2
NMS_BVKS.OA1Time.PV:=INT_TO_REAL(INTS[10]);//БВКС: Наработка осушителя ОА1

//====================================================================================
DW_1 :=   INT_TO_DWORD(INTS[1]);
DW_2 :=   INT_TO_DWORD(INTS[2]);
DW_3 :=   INT_TO_DWORD(INTS[3]);
DW_4 :=   INT_TO_DWORD(INTS[4]);
DW_5 :=   INT_TO_DWORD(INTS[5]);
DW_6 :=   INT_TO_DWORD(INTS[6]);
DW_7 :=   INT_TO_DWORD(INTS[7]);
//====================================================================================
//= 1	БВКС: Состояние управляющих команд установки
(*
0 Аварийный останов установки
1 Штатный останов установки
2 Запуск установки
3 Резерв
4 Резерв
5 Резерв
6 Резерв
7 Резерв
8 Резерв
9 Резерв
10 Резерв
11 Резерв
12 Резерв
13 Резерв
14 Резерв
15 Резерв
*)
NMS_BVKS.AO_BVKS := EXTRACT(DW_1,0);//= АО
NMS_BVKS.NO_BVKS := EXTRACT(DW_1,1);//= НО
NMS_BVKS.Pusk_BVKS := EXTRACT(DW_1,2);//= Пуск
//=============================================================
//= 2	БВКС: Состояние работы установки
(*
NMS_BVKS.OperCond			???
*)
//=============================================================
//= 3	БВКС: Состояние осушителя ОА1
(*
0 ОА1 - Автоматический/Ручной режим
1 ОА1 – Включен/Выключен
2 ОА1 - Авария
3 Резерв
4 Резерв
5 Резерв
6 Резерв
7 Резерв
8 Резерв
9 Резерв
10 Резерв
11 Резерв
12 Резерв
13 Резерв
14 Резерв
15 Резерв
*)
NMS_BVKS.OA1_Auto := EXTRACT(DW_3,0);//= Авт. (1)/Ручн.(0) режим
NMS_BVKS.OA1_ON := EXTRACT(DW_3,1);//= Вкл. (1)/Выкл.(0)
NMS_BVKS.OA1_AO := EXTRACT(DW_3,2);//= Авария
//=============================================================
//= 4	БВКС: Состояние компрессоров КМ1 и КМ2
(*
0 КМ1 - Автоматический/Ручной режим
1 КМ1 – Включен/Выключен
2 КМ1 - Авария
3 КМ2- Автоматический/Ручной режим
4 КМ2– Включен/Выключен
5 КМ2- Авария
6 Резерв
7 Резерв
8 Резерв
9 Резерв
10 Резерв
11 Резерв
12 Резерв
13 Резерв
14 Резерв
15 Резерв
*)
NMS_BVKS.KM1_Auto := EXTRACT(DW_4,0);//= КМ1 Авт. (1)/Ручн.(0) режим
NMS_BVKS.KM1_ON := EXTRACT(DW_4,1);//= КМ1 Вкл. (1)/Выкл.(0)
NMS_BVKS.KM1_AO := EXTRACT(DW_4,2);//= КМ1 Авария
NMS_BVKS.KM2_Auto := EXTRACT(DW_4,3);//= КМ2 Авт. (1)/Ручн.(0) режим
NMS_BVKS.KM2_ON := EXTRACT(DW_4,4);//= КМ2 Вкл. (1)/Выкл.(0)
NMS_BVKS.KM2_AO := EXTRACT(DW_4,5);//= КМ2 Авария
//=============================================================
//= 5	БВКС: Состояние соленоидных клапанов
(*
0 ЭК01 – Включен/Выключен
1 ЭК02 – Включен/Выключен
2 ЭК03 – Включен/Выключен
3 Резерв
4 Резерв
5 Резерв
6 Резерв
7 Резерв
8 Резерв
9 Резерв
10 Резерв
11 Резерв
12 Резерв
13 Резерв
14 Резерв
15 Резерв
*)
NMS_BVKS.EK1_ON := EXTRACT(DW_5,0);//= ЭК01 Вкл. (1)/Выкл.(0)
NMS_BVKS.EK2_ON := EXTRACT(DW_5,1);//= ЭК02 Вкл. (1)/Выкл.(0)
NMS_BVKS.EK3_ON := EXTRACT(DW_5,2);//= ЭК03 Вкл. (1)/Выкл.(0)
//=============================================================
//= 6	БВКС: Состояние клапанов вентиляции
(*
0 KЛС01 - Открыт
1 KЛР01 - Закрыт
2 KЛП01 - Открыт
3 KЛС02 - Открыт
4 KЛР02 - Закрыт
5 KЛП10 - Открыт
6 ВВ10 - Включен
7 Резерв
8 Резерв
9 Резерв
10 Резерв
11 Резерв
12 Резерв
13 Резерв
14 Резерв
15 Резерв
*)
NMS_BVKS.KLC1_ON := EXTRACT(DW_6,0);//= КЛС01 Открыт
NMS_BVKS.KLR1_OF := EXTRACT(DW_6,1);//= КЛР01 Закрыт
NMS_BVKS.KLP1_ON := EXTRACT(DW_6,2);//= КЛП01 Открыт
NMS_BVKS.KLC2_ON := EXTRACT(DW_6,3);//= КЛС02 Открыт
NMS_BVKS.KLR2_OF := EXTRACT(DW_6,4);//= КЛР02 Закрыт
NMS_BVKS.KLP10_ON := EXTRACT(DW_6,5);//= КЛП10 Открыт
NMS_BVKS.VV10_ON := EXTRACT(DW_6,6);//= ВВ10 Включен
//=============================================================
//= 7	БВКС: Состояние измерительных каналов
(*
0 ТT01 – Отказ канала измерения
1 TT49 – Отказ канала измерения
2 TT50 – Отказ канала измерения
3 PT01 – Отказ канала измерения
4 МT01 – Отказ канала измерения
5 FT01 – Отказ канала измерения
6 Резерв
7 Резерв
8 Резерв
9 Резерв
10 Резерв
11 Резерв
12 Резерв
13 Резерв
14 Резерв
15 Резерв
*)
NMS_BVKS.TT01_brk := EXTRACT(DW_7,0);//= Отказ ТT01
NMS_BVKS.TT49_brk := EXTRACT(DW_7,1);//= Отказ ТT49
NMS_BVKS.TT50_brk := EXTRACT(DW_7,2);//= Отказ ТT50
NMS_BVKS.PT01_brk := EXTRACT(DW_7,3);//= Отказ PT01
NMS_BVKS.MT01_brk := EXTRACT(DW_7,4);//= Отказ MT01
NMS_BVKS.FT01_brk := EXTRACT(DW_7,5);//= Отказ FT01
//= для HMI
NMS_BVKS.Tv_in_BVKS.fault:=NMS_BVKS.TT01_brk;//= Отказ ТT01
NMS_BVKS.Tv_in_KM1.fault:=NMS_BVKS.TT49_brk;//= Отказ ТT49
NMS_BVKS.Tv_in_KM2.fault:=NMS_BVKS.TT50_brk;//= Отказ ТT50
NMS_BVKS.Pv_in_BVKS.fault:=NMS_BVKS.PT01_brk;//= Отказ PT01
NMS_BVKS.Tdp_out_BVKS.fault:=NMS_BVKS.MT01_brk;//= Отказ MT01
NMS_BVKS.Qv.fault:=NMS_BVKS.FT01_brk;//= Отказ FT01
NMS_BVKS.Nv.fault:=NMS_BVKS.FT01_brk;//= Отказ FT01]]></ST>
                </FunctionBlock>
            </Folder>
        </Folder>
        <Folder Name="Режимы" Comment="" Data="" UUID="F5A2CAG542BETDXCIDIPCCAJ6E">
            <Function UUID="4Q6M2NOJJZVU3L6AW4OON5QEFE" Name="Graph_Processing" ResultTypeUUID="J2GLKR5SZATEPPS6SYYJ4FXRO4">
                <Variables>
                    <Variable UUID="JAJ25GPVEBHEDJFPKUJ6NFJW5A" Name="graph" Type="T_Graph" TypeUUID="KHQWP3RHOTWEFJWBPCB6JIVNWI" Usage="inout" />
                    <Variable UUID="YFBXCL5MXYLUPBW4MBKKSVU7OQ" Name="i" Type="INT" Usage="internal" />
                    <Variable UUID="NMDCZXMXGX4UFDOHJS75GMLLJ4" Name="j" Type="INT" Usage="internal" />
                </Variables>
                <ST><![CDATA[(*for i := 0 to 32 do
	if graph.state = i then
		for j := 0 to 32 do
			if EXTRACT(graph.cond[i],j) then graph.state := j; end_if;
		end_for;
	end_if;
end_for;
*)

//=  31
for i := 0 to 31 do
//=	if graph.state = i then
		for j := 0 to 31 do
			if EXTRACT(graph.cond[i],j) then graph.state := j; (*exit;*) end_if;
		end_for;
//=	end_if;
end_for;


//= обнуляем условия переходов
for i:= 0 to 31 do
	graph.cond[i] := DWORD#0;
end_for;

Graph_Processing := graph.state;

]]></ST>
            </Function>
            <Function UUID="XOMDT3IVRFDTLE3KIXYOQ6CO2I" Name="Mode_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="4GGEESI4WEBELMXGJPCY6EMSXI" Name="AO" Type="INT" Usage="internal" />
                    <Variable UUID="NB5XWH7SF4PULE6RHMMEANS5QA" Name="Norma" Type="INT" Usage="internal" />
                    <Variable UUID="GMMSZZIWZ2QENHQ6ZGJYWZVZQM" Name="Fault" Type="INT" Usage="internal" />
                </Variables>
                <ST><![CDATA[//НМс
Fault  	:= 0;//Нет режима
//
AO  	:= 1;//АО
Norma  	:= 2;//Норма

//===========================================================================================================================================================================================

//=== АО    ========|======||======||=======================
if not algNMS.AO 	then mdeNMS.graph.cond[AO] := PUTBIT(mdeNMS.graph.cond[AO],  Norma, true); end_if;		// Из АО в Норма
//=== Норма  ========|======||======||=======================
if algNMS.AO 		then mdeNMS.graph.cond[Norma] := PUTBIT(mdeNMS.graph.cond[Norma],AO, 	true); end_if;		// в АО
//===========================================================================================================================================================================================
//============================================================================
NMS_Mode.Num := Graph_Processing(mdeNMS.graph);
//============================================================================
//===========================================================================================================================================================================================

NMS_Mode.AONMS 	:=  mdeNMS.graph.state = AO;	//АО
NMS_Mode.NormaNMS	:=  mdeNMS.graph.state = Norma;//Резерв

NMS_Mode.FaultNMS := not (NMS_Mode.NormaNMS or NMS_Mode.AONMS);// Нет режима
]]></ST>
            </Function>
        </Folder>
        <FunctionBlock UUID="6FYJFI56GMYUTBC5ILWW7D63N4" Name="FB_Imit">
            <Variables>
                <Variable UUID="54WEIN3B6QWEPCCDUJ3TRWWWDA" Name="tmr_init" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
            </Variables>
            <ST><![CDATA[tmr_init(IN:= ImitOn, PT:= T#1s);

if not tmr_init.Q then 
	NMS_DI_DRV.N1_ON   := TRUE;
	NMS_DI_DRV.N2_ON   := TRUE;
	NMS_DI_DRV.N3_ON   := TRUE;
	NMS_DI_DRV.N4_ON   := TRUE;
	NMS_DI_DRV.N5_ON   := TRUE;
	NMS_DI_DRV.N6_ON   := TRUE;


else

NMS_DI_DRV.N1_ON    := NMS_AM.NMs1.iOn;   //= NMS_DI_DRV.N1_OF   := NMS_AM.NMs1.iOff;
NMS_DI_DRV.N2_ON    := NMS_AM.NMs2.iOn;
NMS_DI_DRV.N3_ON    := NMS_AM.NMs3.iOn;
NMS_DI_DRV.N4_ON    := NMS_AM.NMs4.iOn;
NMS_DI_DRV.N5_ON    := NMS_AM.NMs5.iOn;
NMS_DI_DRV.N6_ON    := NMS_AM.NMs6.iOn; 


end_if;]]></ST>
        </FunctionBlock>
        <Function UUID="LLIEZ2LX25SUZMXLHIJJJUIOYQ" Name="Trends" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
            <Variables />
            <ST><![CDATA[//--------------------------------------- Формирование трендовых переменых --------------------------------------------
//#####################################################################################################################

//------------------------------AI---------------------------------------
NMS_AI_Trend.Tm_R1 := NMS_AI_ToHMI.Tm_R1.PV; //Температура в P1 (склад ГСМ)
NMS_AI_Trend.Tm_R2 := NMS_AI_ToHMI.Tm_R2.PV; //Температура в P2 (склад ГСМ)
NMS_AI_Trend.Tm_R3 := NMS_AI_ToHMI.Tm_R3.PV; //Температура в P3 (склад ГСМ)
NMS_AI_Trend.Tm_R4 := NMS_AI_ToHMI.Tm_R4.PV; //Температура в P4 (склад ГСМ)
NMS_AI_Trend.Tm_R5 := NMS_AI_ToHMI.Tm_R5.PV; //Температура в P5 (склад ГСМ)
NMS_AI_Trend.Tm_R6 := NMS_AI_ToHMI.Tm_R6.PV; //Температура в P6 (склад ГСМ)
NMS_AI_Trend.Tm_R7 := NMS_AI_ToHMI.Tm_R7.PV; //Температура в P7 (склад ГСМ)
NMS_AI_Trend.Lm_R1 := NMS_AI_ToHMI.Lm_R1.PV; //Уровень масла в P1 (склад ГСМ)
NMS_AI_Trend.Lm_R2 := NMS_AI_ToHMI.Lm_R2.PV; //Уровень масла в P2 (склад ГСМ)
NMS_AI_Trend.Lm_R3 := NMS_AI_ToHMI.Lm_R3.PV; //Уровень масла в P3 (склад ГСМ)
NMS_AI_Trend.Lm_R4 := NMS_AI_ToHMI.Lm_R4.PV; //Уровень масла в P4 (склад ГСМ)
NMS_AI_Trend.Lm_R5 := NMS_AI_ToHMI.Lm_R5.PV; //Уровень масла в P5 (склад ГСМ)
NMS_AI_Trend.Lm_R6 := NMS_AI_ToHMI.Lm_R6.PV; //Уровень масла в P6 (склад ГСМ)
NMS_AI_Trend.Lm_R7 := NMS_AI_ToHMI.Lm_R7.PV; //Уровень масла в P7 (склад ГСМ)
NMS_AI_Trend.Res_0 := NMS_AI_ToHMI.Res_0.PV; //Резерв
NMS_AI_Trend.Res_1 := NMS_AI_ToHMI.Res_1.PV; //Резерв
NMS_AI_Trend.Lm_R1_n := NMS_AI_ToHMI.Lm_R1_n.PV; //Мин. уровень в Р1 (склад ГСМ)
NMS_AI_Trend.Lm_R2_n := NMS_AI_ToHMI.Lm_R2_n.PV; //Мин. уровень в Р2 (склад ГСМ)
NMS_AI_Trend.Lm_R3_n := NMS_AI_ToHMI.Lm_R3_n.PV; //Мин. уровень в Р3 (склад ГСМ)
NMS_AI_Trend.Lm_R4_n := NMS_AI_ToHMI.Lm_R4_n.PV; //Мин. уровень в Р4 (склад ГСМ)
NMS_AI_Trend.Lm_R5_n := NMS_AI_ToHMI.Lm_R5_n.PV; //Мин. уровень в Р5 (склад ГСМ)
NMS_AI_Trend.Lm_R6_n := NMS_AI_ToHMI.Lm_R6_n.PV; //Мин. уровень в Р6 (склад ГСМ)
NMS_AI_Trend.Lm_R7_n := NMS_AI_ToHMI.Lm_R7_n.PV; //Мин. уровень в Р7 (склад ГСМ)
NMS_AI_Trend.Lm_R1_v := NMS_AI_ToHMI.Lm_R1_v.PV; //Макс. уровень в Р1 (склад ГСМ)
NMS_AI_Trend.Lm_R2_v := NMS_AI_ToHMI.Lm_R2_v.PV; //Макс. уровень в Р2 (склад ГСМ)
NMS_AI_Trend.Lm_R3_v := NMS_AI_ToHMI.Lm_R3_v.PV; //Макс. уровень в Р3 (склад ГСМ)
NMS_AI_Trend.Lm_R4_v := NMS_AI_ToHMI.Lm_R4_v.PV; //Макс. уровень в Р4 (склад ГСМ)
NMS_AI_Trend.Lm_R5_v := NMS_AI_ToHMI.Lm_R5_v.PV; //Макс. уровень в Р5 (склад ГСМ)
NMS_AI_Trend.Lm_R6_v := NMS_AI_ToHMI.Lm_R6_v.PV; //Макс. уровень в Р6 (склад ГСМ)
NMS_AI_Trend.Lm_R7_v := NMS_AI_ToHMI.Lm_R7_v.PV; //Макс. уровень в Р7 (склад ГСМ)
NMS_AI_Trend.Res_2 := NMS_AI_ToHMI.Res_2.PV; //Резерв
NMS_AI_Trend.Res_3 := NMS_AI_ToHMI.Res_3.PV; //Резерв
NMS_AI_Trend.Pm_out_N1 := NMS_AI_ToHMI.Pm_out_N1.PV; //Давление на нагнетании насоса Н1 (насосная масел)
NMS_AI_Trend.Pm_out_N2 := NMS_AI_ToHMI.Pm_out_N2.PV; //Давление на нагнетании насоса Н2 (насосная масел)
NMS_AI_Trend.Pm_out_N3 := NMS_AI_ToHMI.Pm_out_N3.PV; //Давление на нагнетании насоса Н3 (насосная масел)
NMS_AI_Trend.Pm_out_N4 := NMS_AI_ToHMI.Pm_out_N4.PV; //Давление на нагнетании насоса Н4 (насосная масел)
NMS_AI_Trend.Pm_out_N5 := NMS_AI_ToHMI.Pm_out_N5.PV; //Давление на нагнетании насоса Н5 (насосная масел)
NMS_AI_Trend.Pm_out_N6 := NMS_AI_ToHMI.Pm_out_N6.PV; //Давление на нагнетании насоса Н6 (насосная масел)
NMS_AI_Trend.Tm_E1 := NMS_AI_ToHMI.Tm_E1.PV; //Температура в ёмкости масла E1 (насосная масел)
NMS_AI_Trend.Tm_E2 := NMS_AI_ToHMI.Tm_E2.PV; //Температура в ёмкости масла E2 (насосная масел)
NMS_AI_Trend.Tm_E3 := NMS_AI_ToHMI.Tm_E3.PV; //Температура в ёмкости масла E3 (насосная масел)
NMS_AI_Trend.Tm_E4 := NMS_AI_ToHMI.Tm_E4.PV; //Температура в ёмкости масла E4 (насосная масел)
NMS_AI_Trend.Tm_E5 := NMS_AI_ToHMI.Tm_E5.PV; //Температура в ёмкости масла E5 (насосная масел)
NMS_AI_Trend.Tm_E6 := NMS_AI_ToHMI.Tm_E6.PV; //Температура в ёмкости масла E6 (насосная масел)
NMS_AI_Trend.Res_4 := NMS_AI_ToHMI.Res_4.PV; //Резерв
NMS_AI_Trend.Res_5 := NMS_AI_ToHMI.Res_5.PV; //Резерв
NMS_AI_Trend.Res_6 := NMS_AI_ToHMI.Res_6.PV; //Резерв
NMS_AI_Trend.Res_7 := NMS_AI_ToHMI.Res_7.PV; //Резерв
NMS_AI_Trend.Lm_E1_n := NMS_AI_ToHMI.Lm_E1_n.PV; //Мин. уровень в ёмкости Е1 (насосная масел)
NMS_AI_Trend.Lm_E2_n := NMS_AI_ToHMI.Lm_E2_n.PV; //Мин. уровень в ёмкости Е2 (насосная масел)
NMS_AI_Trend.Lm_E3_n := NMS_AI_ToHMI.Lm_E3_n.PV; //Мин. уровень в ёмкости Е3 (насосная масел)
NMS_AI_Trend.Lm_E4_n := NMS_AI_ToHMI.Lm_E4_n.PV; //Мин. уровень в ёмкости Е4 (насосная масел)
NMS_AI_Trend.Lm_E5_n := NMS_AI_ToHMI.Lm_E5_n.PV; //Мин. уровень в ёмкости Е5 (насосная масел)
NMS_AI_Trend.Lm_E6_n := NMS_AI_ToHMI.Lm_E6_n.PV; //Мин. уровень в ёмкости Е6 (насосная масел)
NMS_AI_Trend.Lm_E1_v := NMS_AI_ToHMI.Lm_E1_v.PV; //Макс. уровень в ёмкости Е1 (насосная масел)
NMS_AI_Trend.Lm_E2_v := NMS_AI_ToHMI.Lm_E2_v.PV; //Макс. уровень в ёмкости Е2 (насосная масел)
NMS_AI_Trend.Lm_E3_v := NMS_AI_ToHMI.Lm_E3_v.PV; //Макс. уровень в ёмкости Е3 (насосная масел)
NMS_AI_Trend.Lm_E4_v := NMS_AI_ToHMI.Lm_E4_v.PV; //Макс. уровень в ёмкости Е4 (насосная масел)
NMS_AI_Trend.Lm_E5_v := NMS_AI_ToHMI.Lm_E5_v.PV; //Макс. уровень в ёмкости Е5 (насосная масел)
NMS_AI_Trend.Lm_E6_v := NMS_AI_ToHMI.Lm_E6_v.PV; //Макс. уровень в ёмкости Е6 (насосная масел)
NMS_AI_Trend.Lm_R8_v := NMS_AI_ToHMI.Lm_R8_v.PV; //Макс. уровень в емкости аварийного слива масла Р8
NMS_AI_Trend.Res_8 := NMS_AI_ToHMI.Res_8.PV; //Резерв
NMS_AI_Trend.Res_9 := NMS_AI_ToHMI.Res_9.PV; //Резерв
NMS_AI_Trend.Res_10 := NMS_AI_ToHMI.Res_10.PV; //Резерв
NMS_AI_Trend.Qm_out_N1 := NMS_AI_ToHMI.Qm_out_N1.PV; //Расход масла после наосов Н1, Н2
NMS_AI_Trend.Qm_out_N3 := NMS_AI_ToHMI.Qm_out_N3.PV; //Расход масла после наосов Н3
NMS_AI_Trend.Qm_out_N4 := NMS_AI_ToHMI.Qm_out_N4.PV; //Расход масла после наосов Н4
NMS_AI_Trend.Res_11 := NMS_AI_ToHMI.Res_11.PV; //Резерв
NMS_AI_Trend.Uosn_SAU := NMS_AI_ToHMI.Uosn_SAU.PV; //Измерение основного напряжения САУ НМ
NMS_AI_Trend.Urez_SAU := NMS_AI_ToHMI.Urez_SAU.PV; //Измерение резервного напряжения САУ НМ
NMS_AI_Trend.Res_12 := NMS_AI_ToHMI.Res_12.PV; //Резерв
NMS_AI_Trend.Res_13 := NMS_AI_ToHMI.Res_13.PV; //Резерв
//------------------------------DI---------------------------------------
NMS_DI_Trend.Chk_AC220osn_SAU := NMS_DI.Chk_AC220osn_SAU; //Контроль основного питания ~220 В
NMS_DI_Trend.Chk_AC220rez_SAU := NMS_DI.Chk_AC220rez_SAU; //Контроль резервного питания ~220 В
NMS_DI_Trend.QF_ON := NMS_DI.QF_ON; //Автоматы питания включены
NMS_DI_Trend.Chk_razr := NMS_DI.Chk_razr; //Контроль исправности разрядников
NMS_DI_Trend.DC24osn_Int_ok := NMS_DI.DC24osn_Int_ok; //Исправность осн. ИП =24 В внутренних цепей
NMS_DI_Trend.DC24rez_Int_ok := NMS_DI.DC24rez_Int_ok; //Исправность рез. ИП =24 В внутренних цепей
NMS_DI_Trend.DC24osn_AI_ok := NMS_DI.DC24osn_AI_ok; //Исправность осн. ИП =24 В AI,внешних цепей
NMS_DI_Trend.DC24rez_AI_ok := NMS_DI.DC24rez_AI_ok; //Исправность рез. ИП =24 В AI,внешних цепей
NMS_DI_Trend.DC24osn_DO_ok := NMS_DI.DC24osn_DO_ok; //Исправность осн. ИП =24 В D0,внешних цепей
NMS_DI_Trend.DC24rez_DO_ok := NMS_DI.DC24rez_DO_ok; //Исправность рез. ИП =24 В D0,внешних цепей
NMS_DI_Trend.Dver_STU4_open := NMS_DI.Dver_STU4_open; //Дверь СтУ-4 открыта
NMS_DI_Trend.Res_0 := NMS_DI.Res_0; //Резерв внутр.
NMS_DI_Trend.Res_1 := NMS_DI.Res_1; //Резерв внутр.
NMS_DI_Trend.Res_2 := NMS_DI.Res_2; //Резерв внутр.
NMS_DI_Trend.Res_3 := NMS_DI.Res_3; //Резерв внутр.
NMS_DI_Trend.Res_4 := NMS_DI.Res_4; //Резерв внутр.
NMS_DI_Trend.Q1_AC380_ON := NMS_DI.Q1_AC380_ON; //Ввод 1 380 VAC включен
NMS_DI_Trend.Q1_AC380_OF := NMS_DI.Q1_AC380_OF; //Ввод 1 380 VAC отключен
NMS_DI_Trend.U1_AC380_ok := NMS_DI.U1_AC380_ok; //Наличие 380 VAC на вводе 1
NMS_DI_Trend.Q1_AC380_AOF := NMS_DI.Q1_AC380_AOF; //Ввод 1 380 VAC аварийно отключен
NMS_DI_Trend.Q2_AC380_ON := NMS_DI.Q2_AC380_ON; //Ввод 2 380 VAC включен
NMS_DI_Trend.Q2_AC380_OF := NMS_DI.Q2_AC380_OF; //Ввод 2 380 VAC отключен
NMS_DI_Trend.U2_AC380_ok := NMS_DI.U2_AC380_ok; //Наличие 380 VAC на вводе 2
NMS_DI_Trend.Q2_AC380_AOF := NMS_DI.Q2_AC380_AOF; //Ввод 2 380 VAC аварийно отключен
NMS_DI_Trend.Q3_AC380_ON := NMS_DI.Q3_AC380_ON; //Ввод 3 380 VAC включен
NMS_DI_Trend.Q3_AC380_OF := NMS_DI.Q3_AC380_OF; //Ввод 3 380 VAC отключен
NMS_DI_Trend.U3_AC380_ok := NMS_DI.U3_AC380_ok; //Наличие 380 VAC на вводе 3
NMS_DI_Trend.Q3_AC380_AOF := NMS_DI.Q3_AC380_AOF; //Ввод 3 380 VAC аварийно отключен
NMS_DI_Trend.AVR_work := NMS_DI.AVR_work; //АВР сработал
NMS_DI_Trend.UZIP_Bad := NMS_DI.UZIP_Bad; //Неисправность УЗИП
NMS_DI_Trend.Res_5 := NMS_DI.Res_5; //Резерв
NMS_DI_Trend.Res_6 := NMS_DI.Res_6; //Резерв
NMS_DI_Trend.N1_ON := NMS_DI.N1_ON; //Насос включен Н1
NMS_DI_Trend.N2_ON := NMS_DI.N2_ON; //Насос включен Н2
NMS_DI_Trend.N3_ON := NMS_DI.N3_ON; //Насос включен Н3
NMS_DI_Trend.N4_ON := NMS_DI.N4_ON; //Насос включен Н4
NMS_DI_Trend.N5_ON := NMS_DI.N5_ON; //Насос включен Н5
NMS_DI_Trend.N6_ON := NMS_DI.N6_ON; //Насос включен Н6
NMS_DI_Trend.Res_7 := NMS_DI.Res_7; //Резерв
NMS_DI_Trend.Res_8 := NMS_DI.Res_8; //Резерв
NMS_DI_Trend.Res_9 := NMS_DI.Res_9; //Резерв
NMS_DI_Trend.Res_10 := NMS_DI.Res_10; //Резерв
NMS_DI_Trend.Res_11 := NMS_DI.Res_11; //Резерв
NMS_DI_Trend.Res_12 := NMS_DI.Res_12; //Резерв
NMS_DI_Trend.Res_13 := NMS_DI.Res_13; //Резерв
NMS_DI_Trend.Res_14 := NMS_DI.Res_14; //Резерв
NMS_DI_Trend.Res_15 := NMS_DI.Res_15; //Резерв
NMS_DI_Trend.Res_16 := NMS_DI.Res_16; //Резерв
//------------------------------DO---------------------------------------
NMS_DO_Trend.Res_0 := NMS_DO.Res_0; //Резерв
NMS_DO_Trend.Res_1 := NMS_DO.Res_1; //Резерв
NMS_DO_Trend.Res_2 := NMS_DO.Res_2; //Резерв
NMS_DO_Trend.Res_3 := NMS_DO.Res_3; //Резерв
NMS_DO_Trend.Res_4 := NMS_DO.Res_4; //Резерв
NMS_DO_Trend.Res_5 := NMS_DO.Res_5; //Резерв
NMS_DO_Trend.Res_6 := NMS_DO.Res_6; //Резерв
NMS_DO_Trend.Res_7 := NMS_DO.Res_7; //Резерв
NMS_DO_Trend.Res_8 := NMS_DO.Res_8; //Резерв
NMS_DO_Trend.Res_9 := NMS_DO.Res_9; //Резерв
NMS_DO_Trend.Res_10 := NMS_DO.Res_10; //Резерв
NMS_DO_Trend.Res_11 := NMS_DO.Res_11; //Резерв
NMS_DO_Trend.Res_12 := NMS_DO.Res_12; //Резерв
NMS_DO_Trend.Res_13 := NMS_DO.Res_13; //Резерв
NMS_DO_Trend.Res_14 := NMS_DO.Res_14; //Резерв
NMS_DO_Trend.Res_15 := NMS_DO.Res_15; //Резерв
NMS_DO_Trend.N1_OF := NMS_DO.N1_OF; //Насос Н1 отключить
NMS_DO_Trend.N2_OF := NMS_DO.N2_OF; //Насос Н2 отключить
NMS_DO_Trend.N3_OF := NMS_DO.N3_OF; //Насос Н3 отключить
NMS_DO_Trend.N4_OF := NMS_DO.N4_OF; //Насос Н4 отключить
NMS_DO_Trend.N5_OF := NMS_DO.N5_OF; //Насос Н5 отключить
NMS_DO_Trend.N6_OF := NMS_DO.N6_OF; //Насос Н6 отключить
NMS_DO_Trend.Res_16 := NMS_DO.Res_16; //Резерв
NMS_DO_Trend.Res_17 := NMS_DO.Res_17; //Резерв
NMS_DO_Trend.Res_18 := NMS_DO.Res_18; //Резерв
NMS_DO_Trend.Res_19 := NMS_DO.Res_19; //Резерв
NMS_DO_Trend.EN_SHUN1 := NMS_DO.EN_SHUN1; //Нагрев разрешен (Шкаф ШУН-202Г(1))
NMS_DO_Trend.EN_SHUN2 := NMS_DO.EN_SHUN2; //Нагрев разрешен (Шкаф ШУН-202Г(2))
NMS_DO_Trend.EN_SHUN3 := NMS_DO.EN_SHUN3; //Нагрев разрешен (Шкаф ШУН-202Г(3))
NMS_DO_Trend.EN_SHUN4 := NMS_DO.EN_SHUN4; //Нагрев разрешен (Шкаф ШУН-202Г(4))
NMS_DO_Trend.EN_SHUN5 := NMS_DO.EN_SHUN5; //Нагрев разрешен (Шкаф ШУН-202Г(5))
NMS_DO_Trend.EN_SHUN6 := NMS_DO.EN_SHUN6; //Нагрев разрешен (Шкаф ШУН-202Г(6))]]></ST>
        </Function>
    </FBLibrary>
</Program>
