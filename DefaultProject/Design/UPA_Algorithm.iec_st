<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE Program >
<Program UUID="LACEGVUOXEWUHBRZBIXVNXJWSY" Name="UPA_Algorithm" Period="250" PutDataAtEndOfCycle="true">
    <Variables>
        <Variable UUID="QVCEIWR5ZDDUNCHJCVXMVLP2SA" Name="Pulse" Type="FB_Pulse" TypeUUID="LCERBCVHMURELEDEHKKNKLUZNQ" Usage="internal" />
        <Variable UUID="ILRJEM43SDCU5KIT2DJEZVUZEA" Name="proc_UPA_PIR_mb_AI_CallAll" Type="UPA_PIR_mb_AI" TypeUUID="7NYXJGRWY6AEXEDFHDIMWNW2UY" Usage="internal" />
        <Variable UUID="QDIUW7J5ANPENG6MA2GTLWIJEA" Name="IM_Call" Type="FB_IM_Call" TypeUUID="XICUTQAGUXZEZLSIPSBXR2UEV4" Usage="internal" />
        <Variable UUID="JZYJY6L5V5VE7NXHGUI56ER6WM" Name="Logic" Type="FB_Logic" TypeUUID="YFVWCR36G4AULLUU4VNZS6SAEA" Usage="internal" />
        <Variable UUID="FNNHHVDI2M5UTAISNEAQEPGTFA" Name="Imit" Type="FB_Imit" TypeUUID="6FYJFI56GMYUTBC5ILWW7D63N4" Usage="internal" />
        <Variable UUID="ZSJJODULYX3UDJCJL7IV3ZNTVA" Name="tmpBTN_ArchUser" Type="BOOL" Usage="internal" />
    </Variables>
    <ST><![CDATA[//Определение длительности цикла
//cycle_time:
tim.tmpREALtime := CLOCK();
tim.cycle := LREAL_TO_REAL(tim.tmpREALtime - tim.tmpREALtime_prev);
tim.tmpREALtime_prev := tim.tmpREALtime;
//================================== Имитаторы ===================================
if ImitOn then Imit(); end_if;
//================================== ввод ==================================
//Обработка
UPA_AI_CallAll();
ANB_CallAll();
UPA_DI_CallAll();
//=== Драйверы смежных подсистем ===
//= ПИР - ультразвуковой расходомер
proc_UPA_PIR_mb_AI_CallAll();
//================================== АПС ==================================
APS_Init();
APS_CallAll(UPA_BTN.Deblock);
//================================== Регуляторы ==================================
//Инициализация
//Обработка
//================================== Логика =====================================
Logic();
//================================== ППУ ==================================
//Инициализация
//Обработка
//================================== Граф режимов ==================================
Mode_CallAll();
//================================== Барабаны ==================================
//DRM_CallAll();
//================================== Алгоритм ==================================
Alg_UPA();
//================================== ИМ ==================================
//Резервированные
//Обычные
IM_Call();
//================================== Тренды ==================================
Trends(); // передача данных в тренды
//= запись архивов
UPA_SS.ArchStop := UPA_Mode.AOUPA;//= Архив останова
//= включение/выключение Пользовательского архива
tmpBTN_ArchUser := UPA_BTN.ArchUser;
UPA_BTN.ArchUser := FALSE;
if tmpBTN_ArchUser then
  if UPA_SS.ArchUser Then
    UPA_SS.ArchUser := FALSE;
  else
    UPA_SS.ArchUser := TRUE;
  end_if;
end_if;
//================================== Обмен по интерфейсам ==================================
//================================== вывод ==================================
UPA_DO_CallAll();

//меандр
Pulse(true, T#1s, UPA_SS.CPU_HeartBit);
init:= true;//=]]></ST>
    <DataTypes>
        <Struct UUID="VZ3H6GEVT3CUTI65HAA5AALRAY" Name="T_AI_FromHMI" Comment="команды из ЧМИ">
            <Field UUID="SCKERE4PHRDEBGWST4LC2RTTSE" Name="manualTarget" Comment="Задание из ЧМИ" Type="REAL" />
            <Field UUID="P47TXVXBU2GUBJ5JZEXSX4KSJ4" Name="BTNmanualOn" Comment="Кнопка вкл. задания значения из ЧМИ" Type="BOOL" />
            <Field UUID="GZSU6SS7CYNUPOLP767OZHJUK4" Name="BTNrepairOn" Comment="Кнопка вкл. ремонта" Type="BOOL" />
            <Field UUID="DI7XBJR5XPIE7L7MXPXMVNN3JI" Name="BTNworkOn" Comment="Кнопка перекл. в работу" Type="BOOL" />
            <Field UUID="R7L6QVFARZUU3FCBO456DXWXDQ" Name="BTNrepairProlong" Comment="Кнопка продления ремонта" Type="BOOL" />
        </Struct>
        <Struct UUID="GZ6UU5D6R5EXXPFY4TZ3EOTECU" Name="T_AI_Internal" Comment="Настройки канала">
            <Field UUID="URGJ7HGIJFACLBUMROBSRYNGTY" Name="qCycleROC" Comment="Количество циклов для контроля РОК" Type="INT" />
            <Field UUID="Z7HE4D7FEJA6XEO3ZT5EA5LEYI" Name="summCycleROC" Comment="сумма значений для РОК" Type="REAL" />
            <Field UUID="RW4U6LB23JHNFML2N4BQA7MLUE" Name="prevMeasure" Comment="Значение на предыдущем цикле" Type="REAL" />
            <Field UUID="QZTLVLZCD5A2FNOJWEQSSKV6WQ" Name="validMeasure" Comment="Последнее валидное измерение" Type="REAL" />
            <Field UUID="OTAS6CSOKJEYPNL7XMDFHUW3H4" Name="prevFault" Comment="наличие неисправности на предыдущем цикле " Type="BOOL" />
            <Field UUID="XWXRWWREWFAVBI2RI4EGZVP3HQ" Name="timerRecover" Comment="Таймер восстановления канала в работу после неисправности" Type="REAL" />
            <Field UUID="KKF6R5ONEBFP3DN2NJV3RM2STQ" Name="timerRepair" Comment="Таймер ремонта реальный" Type="REAL" />
        </Struct>
        <Struct UUID="XHUY6ZRHGRQEVOF35XEJI5L2SE" Name="T_AI_Settings" Comment="Настройки канала">
            <Field UUID="3KRWP62AKYDUFINJHEYQWHS2UU" Name="min" Comment="минимум шкалы канала, ед.изм. Не может быть &gt;= max" Type="REAL" />
            <Field UUID="RHO37XVNDVTUPEFTMJHSLHKUNY" Name="max" Comment="максимум шкалы канала, ед.изм. Не может быть &lt;= min" Type="REAL" />
            <Field UUID="RT6HE3WIDNSU7NDWHC2ZBOTRCI" Name="hiLim" Comment="уровень зашкала вверх, ед.изм. Не может быть &lt;= loLim и &gt; max" Type="REAL" />
            <Field UUID="NONAD4XZLCAUFCYSSF3ZG5Y2RM" Name="loLim" Comment="уровень зашкала вниз, ед.изм. Не может быть &gt;= hiLim и &lt; min" Type="REAL" />
            <Field UUID="IUL5HZOYX5CRDAD2EFAJYKUZ5Y" Name="hiBrk" Comment="уровень обрыва вверх, ед.изм. Не может быть &lt;= hiLim" Type="REAL" />
            <Field UUID="MYIPHEQSBJAADA2AH7XXTJLX64" Name="loBrk" Comment="уровень зашкала вниз, ед.изм. Не может быть &gt;= loLim" Type="REAL" />
            <Field UUID="35MUITRQHY5EPKM27DJOZ4D6SQ" Name="minADC" Comment="значение АЦП, соответствующее минимуму шкалы канала, б.р." Type="REAL" />
            <Field UUID="DW4YTEEV6RPEFHVBRONZ7WJRDI" Name="maxADC" Comment="значение АЦП, соотв. макс. шкалы, б.р. Не может быть равно minADC" Type="REAL" />
            <Field UUID="WIQAREZUYVCIVMICFARE4YILCI" Name="corrADC" Comment="корректировка минимуму АЦП" Type="REAL" />
            <Field UUID="YT5OLJPK5IAU7MM5REJ76FO7HM" Name="maxROC" Comment="макс. допустимая скорость роста, ед.изм./сек. Если «0» - скорость роста не анализируется" Type="REAL" />
            <Field UUID="Y52LQTQH7KVEPHEO2JGKSNLEYQ" Name="recoveryTime" Comment="время восстановления после неисправности, сек. Не может быть меньше &quot;0&quot;" Type="REAL" />
            <Field UUID="MX7EBZEDTNJUXGLTSFW2KWSO7U" Name="repairTime" Comment="максимальное время в ремонте, сек. Не может быть меньше или равно «0»" Type="INT" />
            <Field UUID="65QNI3SAURVUXMDDIVWNLWTPRA" Name="tau" Comment="тау фильтра, сек. Если «0» - фильтрация отсутствует" Type="REAL" />
            <Field UUID="CZKTSP7UMKMUHNAN43U4PZ3TDA" Name="id" Comment="номер по порядку" Type="INT" />
        </Struct>
        <Struct UUID="J74RQIZG5I6EZDCM32A6SZRKIM" Name="T_AI_ToHMI" Comment="устанавливаются программой обработки канала">
            <Field UUID="QJ6PEGLAUPLUFEIFAGBJIT6PW4" Name="PV" Comment="значение для САУ. Рассчитывается из  measure, Manual_Target с учётом неисправностей и фильтрации" Type="REAL" />
            <Field UUID="WBZOXI5CNLLEXLWHLINZ2KMYF4" Name="measure" Comment="Пересчёт кода АЦП в инженерные единицы" Type="REAL" />
            <Field UUID="6ZWUCOB6MR2ENPVJU6GJK7ZWXI" Name="CurrentTimeOfRepair" Comment="оставшееся время ремонта" Type="INT" />
            <Field UUID="GJY3VEM5KRNE5LIEPIA5A6MP5I" Name="fault_common" Comment="обобщённая неисправность. Образуется по «ИЛИ» от break,up_scale,down_scale,ROC,settingErr" Type="BOOL" />
            <Field UUID="3BIE4PEO6GDEZOARVMTGWNRJF4" Name="break" Comment="обрыв канала" Type="BOOL" />
            <Field UUID="JCRW2DPM2TFEDNS2CN4EMDRYHU" Name="up_scale" Comment="выход за верхний зашкал" Type="BOOL" />
            <Field UUID="4KBYMW34KEZE5ECIADCEQTZ6OA" Name="down_scale" Comment="выход за нижний зашкал" Type="BOOL" />
            <Field UUID="CKL3UGPLCBNUJBWI6XLA2VGNRQ" Name="ROC" Comment="превышение скорости изменения вверх или вниз" Type="BOOL" />
            <Field UUID="267MAGDT2FWEXMF4G7MQVHR24E" Name="settingErr" Comment="ошибка задания настроек – несоответствие допустимым значениям" Type="BOOL" />
            <Field UUID="S2TVATEJGHLUFBOP4OOPDLYPRA" Name="manual" Comment="канал в дист.упр." Type="BOOL" />
            <Field UUID="RBLIJTEXCENEXF4ULLUV3Q7PRU" Name="repair" Comment="канал в ремонте" Type="BOOL" />
            <Field UUID="TG5OXUO2FTCU5GZL2PWACX4G7E" Name="repair_time_less_10_percent" Comment="до конца ремонта осталось меньше 10% от заданного времени" Type="BOOL" />
            <Field UUID="YSARYMFTNDSE5LGQ3JNIXZZXTA" Name="as" Comment="отображать красным. Выставляется при выходе канала за аварийную уставку." Type="BOOL" />
            <Field UUID="UMPPDYIYCIUUFF73JAE2OWAUZM" Name="os" Comment="отображать фиолетовым. Выставляется при выходе канала за ограничительную уставку." Type="BOOL" />
            <Field UUID="I74VSDZAHPDUBF3C5UMMHZZF7M" Name="ps" Comment="отображать жёлтым. Выставляется при выходе канала за предупредительную уставку." Type="BOOL" />
            <Field UUID="RFUGWRJCW2IETLDPVQDEZRSKSE" Name="criticalFault" Comment="Критическая ошибка обработки" Type="BOOL" />
            <Field UUID="NAC3XDBC7TKE5COYOS7EGC37CY" Name="hint" Type="STRING" />
        </Struct>
        <Struct UUID="ANRR6BLMKETURJI5AWVQRMBAWA" Name="T_AM_Type" Comment="Типы ИМ">
            <Field UUID="R5GH244D3G6E5DEQ2KVL3QUOPI" Name="am1x0" Comment="1 команда, 0 конечников" Type="INT" />
            <Field UUID="EJFBQPJBB3XULMGIE7YE5QDS5Y" Name="am2x2fh" Comment="2 команды, 2 конечника (открытие, удержание)" Type="INT" />
            <Field UUID="PEAWQ344DBNUBPNVEK6VIDXUMQ" Name="am1x1" Comment="1 команда, 1 конечник" Type="INT" />
            <Field UUID="YXE6GIVXD3UUNKU3HRZPTTZBOE" Name="am1x2" Comment="1 команда, 2 конечника" Type="INT" />
            <Field UUID="MFOXKBTRKOKU3IUXG27BRR6PJU" Name="am2x1" Comment="2 команды, 1 конечник" Type="INT" />
            <Field UUID="CDSXEEZ5QJVETJCNSILRMROO5Q" Name="am2x2" Comment="2 команды, 2 конечника" Type="INT" />
            <Field UUID="XF7TYKMMVOAEXDRIKZ7ZD4YPTI" Name="am1ofx1of" Comment="1 команда OF, 1 конечник OF" Type="INT" />
            <Field UUID="QCC7QFFLWAIUFCBCEJXJDPMERY" Name="am1ofx2" Comment="1 команда OF, 2 конечника" Type="INT" />
            <Field UUID="4UM4UUEK6RMUPM6VL5ID7Q7ROY" Name="am1x1of" Comment="1 команда , 1 конечник OF" Type="INT" />
            <Field UUID="Y4PYZ4D5FQJUJN7SZNZX54JCW4" Name="amPos" Comment="Прочие с положением (АПК, ТРК...)" Type="INT" />
            <Field UUID="KBA3PS23ZYPEHHLFPRWZ6K2HSU" Name="am3x2" Comment="3 команды (on, off, stop), 2 конечника" Type="INT" />
            <Field UUID="ZMCVOELEKJSEHDWZMR7RVCXAQQ" Name="am2x2x3ware" Comment="2 команды, 2 конечника, трёхпроводная схема" Type="INT" />
            <Field UUID="5XGMK4PV7ZFK5OVFGH6GCCODQU" Name="am1x4nku" Comment="1 команда, 4 сигнала от НКУ" Type="INT" />
            <Field UUID="3ETYUGWR4FDSTEGO7ONOD7ACZA" Name="am2x7upp" Comment="2 команды (БП и УПП) и 7 сигналов от НКУ" Type="INT" />
            <Field UUID="ROV7ATBVJFGPPIFIL3A5A73ZOQ" Name="am2x8nku" Comment="2 команды и 8 сигналов от НКУ" Type="INT" />
        </Struct>
        <Struct UUID="I7SVZ4ZR3CPE7BHJZXJTI4JZXI" Name="T_ANB_Settings" Comment="Настройки уставки">
            <Field UUID="UXSEBOXIDKYENBCFLBBAZN2RZA" Name="setForFault" Comment="значение, записываемое в ANB при неисправности канала: 0 - FALSE, 1 - TRUE, 2 - оставить то что было" Type="INT" />
            <Field UUID="IPWZCJVRWK6U7JLH7P5RM5FSCQ" Name="isUp" Comment="направление срабатывания верхнее (FALSE - нижнее)" Type="BOOL" />
            <Field UUID="GDXKQ5WSUIYE5GF3QWM5WECPLM" Name="delay" Comment="задержка на срабатывание" Type="REAL" />
        </Struct>
        <Struct UUID="Y2SUFYR34WCUVAETREJRLVIA74" Name="T_APS_Internal">
            <Field UUID="SW4246EO2NWU5CQN5ODA6OPOUI" Name="tmr" Comment="Счетчик времени задержки" Type="REAL" />
            <Field UUID="V6KC3PUL2GGUXCYZ4IXVPRX4NI" Name="pr_value" Comment="пред. значение" Type="BOOL" />
            <Field UUID="IYUBAOIBGQXEFF5UWNT4SITBCQ" Name="target" Comment="Реакция 1 пожар, 2 АОС, 3 АОБ, 4 АС, 5 ПС" Type="INT" />
        </Struct>
        <Struct UUID="3LFH3SQ4BNEUBDNWSPIFNTUGVM" Name="T_Alarm">
            <Field UUID="TP6VLFNYNVEF7BIWDTBZDPRT3Y" Name="PV" Comment="выход сигнализации" Type="BOOL" />
            <Field UUID="JMKHYKFLKRGTZFLJ5TNHWAUBSA" Name="in" Comment="входной сигнал" Type="BOOL" />
            <Field UUID="WAKIF66KNRGTPLOADFU6DYKTKA" Name="reset" Comment="сброс триггера сигнализации" Type="BOOL" />
            <Field UUID="EASYBTH2TJCUTOXQR33HQF3RHQ" Name="message" Comment="Сообщение в окне сигнализации и журнале событий" Type="STRING" />
            <Field UUID="4ORPFEZSGJEZPMMKOGHZYD3NNU" Name="category" Comment="Категория сигнала" Type="DINT" />
            <Field UUID="GGENP5F4QZBWRB5HSA4NRTUMT4" Name="tag" Comment="допинфо для служебных целей" Type="STRING" />
            <Field UUID="3FT5IZPWNVDLLKHR3CY5JIYW4A" Name="source" Comment="Источник сигнала" Type="STRING" />
            <Field UUID="O5BP7PZQHW2UTHK6E7UGS7KUJ4" Name="delay" Comment="Задержка аварии" Type="REAL" />
            <Field UUID="H5L4U32UMVFI7AQNSK2CE57B2M" Name="target" Comment="Режим, инициируемый сигналом" Type="INT" />
        </Struct>
        <Struct UUID="CB63GVNINFXE5NDGOS62CUMGSY" Name="T_DI_FromHMI" Comment="команды из ЧМИ">
            <Field UUID="ALOR7DBMYYIEBCY2WB7KWCUIGU" Name="manualTarget" Comment="Задание из ЧМИ" Type="BOOL" />
            <Field UUID="B22NFHW4UO5ETI7GYQLXF3XAJM" Name="BTNmanualOn" Comment="Кнопка вкл. задания значения из ЧМИ" Type="BOOL" />
            <Field UUID="S7MY7EBTY62UHGFUKNDBNJEETM" Name="BTNrepairOn" Comment="Кнопка вкл. ремонта" Type="BOOL" />
            <Field UUID="JJ6OIYCGVKUURBCSRNZ6KZLHKE" Name="BTNworkOn" Comment="Кнопка перекл. в работу" Type="BOOL" />
            <Field UUID="6QZL235TTWWEFK6PJPHINDPP5Y" Name="BTNrepairProlong" Comment="Кнопка продления ремонта" Type="BOOL" />
        </Struct>
        <Struct UUID="AZLZGZOBJZBF3NOVFVJWX37NVA" Name="T_DI_Internal">
            <Field UUID="YN54AUR7NFHDJHYR7DISKVNB5Y" Name="timerRepair" Comment="таймер ремонта" Type="REAL" />
            <Field UUID="4I4YCSS2CFBTJMCGATBEXGG5SE" Name="timerAntiTremor" Comment="таймер антидребезга" Type="REAL" />
        </Struct>
        <Struct UUID="YYQ4LFBFOMREFPHHDI3SPZLDYM" Name="T_DI_Settings" Comment="настройки дискретного канала">
            <Field UUID="7BUOL5BGDSCU7DUITC6LJYC3EE" Name="del" Comment="задержка для устранения дребезга, сек." Type="REAL" />
            <Field UUID="65RJRGUGBJYUTJEW5S27QVKBII" Name="repairTime" Comment="максимальное время в ремонте, сек. Не может быть «0»" Type="INT" />
            <Field UUID="E6BN5T6PFMLUNLPCUXHL4REAAE" Name="inv" Comment="необходимость инвертирования измеренного значения" Type="BOOL" />
            <Field UUID="L2JGFBG6KZFEFAFNVUGMAVU6YE" Name="id" Comment="номер по порядку" Type="INT" />
        </Struct>
        <Struct UUID="GHOQ5H5MCDOEHDF2HTYC2D4HJI" Name="T_DI_ToHMI" Comment="устанавливаются программой обработки канала">
            <Field UUID="TNUWHHXWAKSE7ARXDZINL2OUL4" Name="CurrentTimeOfRepair" Comment="оставшееся время ремонта" Type="INT" />
            <Field UUID="Q5OI5ENSF7VEHIS4O4MQ3YADRU" Name="settingErr" Comment="ошибка задания настроек – несоответствие допустимым значениям" Type="BOOL" />
            <Field UUID="4EHQPHFYYZ5EDCSGTFQTH6IA2I" Name="manual" Comment="канал в дист.упр." Type="BOOL" />
            <Field UUID="26KRQPMZSAFUHEQWAFEZYCEXNA" Name="repair" Comment="канал в ремонте" Type="BOOL" />
            <Field UUID="2FXLROIDYK2UXEJA6MWOZVCPEQ" Name="repair_time_less_10_percent" Comment="до конца ремонта осталось меньше 10% от заданного времени" Type="BOOL" />
            <Field UUID="RHBQXEPMIJENTNXBIRDAZVI6ZM" Name="fault_common" Comment="обобщённая неисправность. Образуется по «ИЛИ» от settingErr и неисправности цепи датчика" Type="BOOL" />
            <Field UUID="6W6OANKZ3VDE7IFEAF7IFND5TY" Name="hint" Type="STRING" />
        </Struct>
        <Struct UUID="ICYCYA5WR5FTZMTITNXXGA6V4U" Name="T_DO_FromHMI">
            <Field UUID="YQBDUQ2SLVH4VLPEMFQCTQ7MSA" Name="manualTarget" Comment="Задание из ЧМИ" Type="BOOL" />
            <Field UUID="5X47MBB46NFXXFQYHPGECOG46U" Name="BTNforceOn" Comment="кнопка включения режима форсировки" Type="BOOL" />
            <Field UUID="2LUBNMQXIBEO7NYA7FMHMSQMQA" Name="BTNworkOn" Comment="Кнопка перекл. в работу" Type="BOOL" />
        </Struct>
        <Struct UUID="JPIXI5FFWBGSRAAFIJ2MBV77UE" Name="T_DO_ToHMI">
            <Field UUID="37PITYONYNCEPAA4FZ7CYI4ZZU" Name="forsPermit" Comment="Форсировка разрешена" Type="BOOL" />
            <Field UUID="EW23HL5DEBFQJMV2GMGKR3LXTE" Name="forsEnable" Comment="Форсировка включена" Type="BOOL" />
            <Field UUID="WP3KGWM747AURJEIHTUIQJLS5M" Name="hint" Type="STRING" />
        </Struct>
        <Struct UUID="KHQWP3RHOTWEFJWBPCB6JIVNWI" Name="T_Graph">
            <Field UUID="57SADCQ574VUDHSCYRYH5NMZQU" Name="cond" Comment="Условия перехода" Type="DWORD" Size="32" Array="TRUE" />
            <Field UUID="VJA4I3MIFT3U3DQCKXBULCRNXU" Name="state" Comment="Номер режима" Type="INT" />
        </Struct>
        <Struct UUID="ESHVMMDQRNWUVGD5OOWOXN2N44" Name="T_mb_AI_Settings" Comment="Настройки канала">
            <Field UUID="3KRWP62AKYDUFINJHEYQWHS2UU" Name="min" Comment="минимум шкалы канала, ед.изм. Не может быть &gt;= max" Type="REAL" />
            <Field UUID="RHO37XVNDVTUPEFTMJHSLHKUNY" Name="max" Comment="максимум шкалы канала, ед.изм. Не может быть &lt;= min" Type="REAL" />
            <Field UUID="RT6HE3WIDNSU7NDWHC2ZBOTRCI" Name="hiLim" Comment="уровень зашкала вверх, ед.изм. Не может быть &lt;= loLim и &gt; max" Type="REAL" />
            <Field UUID="NONAD4XZLCAUFCYSSF3ZG5Y2RM" Name="loLim" Comment="уровень зашкала вниз, ед.изм. Не может быть &gt;= hiLim и &lt; min" Type="REAL" />
            <Field UUID="IUL5HZOYX5CRDAD2EFAJYKUZ5Y" Name="hiBrk" Comment="уровень обрыва вверх, ед.изм. Не может быть &lt;= hiLim" Type="REAL" />
            <Field UUID="MYIPHEQSBJAADA2AH7XXTJLX64" Name="loBrk" Comment="уровень зашкала вниз, ед.изм. Не может быть &gt;= loLim" Type="REAL" />
            <Field UUID="6EEWY5YRIALELEVHNEOYVOVOKI" Name="format" Comment="Формат данных" Type="INT" />
            <Field UUID="UN2HNI376ZEU7EIB4YK7GZB34Y" Name="set1" Comment="Настройка 1" Type="REAL" />
            <Field UUID="OC357N75CFDUJLIQMDTSPYRANE" Name="set2" Comment="Настройка 2" Type="REAL" />
            <Field UUID="65QNI3SAURVUXMDDIVWNLWTPRA" Name="tau" Comment="тау фильтра, сек. Если «0» - фильтрация отсутствует" Type="REAL" />
            <Field UUID="CZKTSP7UMKMUHNAN43U4PZ3TDA" Name="id" Comment="номер по порядку" Type="INT" />
        </Struct>
        <Struct UUID="EKXWTT2XQFVEBA2O4SGLDA6X4E" Name="T_tuneAM">
            <Field UUID="O6YCSYX2QRLUTFJS52ZQUGTAWU" Name="delayChangeOvertimeAlert" Comment="Время перестановки, при превышении которого выдается предупреждение" Type="REAL" />
            <Field UUID="JGXKJLANO2SELHO62MUIPISOLM" Name="delayQTimeout" Comment="Время перестановки, при превышении которого снимается выходная команда" Type="REAL" />
            <Field UUID="WCIMRV5J5ANE7HJUA6CNAGFFG4" Name="delayExtraOn" Comment="Время дожима на открытие" Type="REAL" />
            <Field UUID="TI3CBQNB5L5UXB5JAB22HNT2WE" Name="delayExtraOff" Comment="Время дожима на закрытие" Type="REAL" />
            <Field UUID="F5QLAOOZQ23E5PP4LDMIH4DAZU" Name="delayNotMoveAlert" Comment="Задержка формирования нестрагивания" Type="REAL" />
            <Field UUID="TYZJFVKVMAREDE55SVBM4IKIQQ" Name="delayCircBrkAlert" Comment="Задержка формирования обрыва контроля цепи" Type="REAL" />
        </Struct>
        <Struct UUID="JOKANQL3O4QURP2EITPYYDMUV4" Name="support_AM" Comment="v1.0 от 20170724">
            <Field UUID="AJPZSGTBOZSURAEDGCYX3WHU3E" Name="iOn" Comment="Вход - &quot;включен&quot; (открыт)" Type="BOOL" />
            <Field UUID="6OD2DJH7NPKELOTUDZ75Y2AKVQ" Name="iOff" Comment="Вход - &quot;отключен&quot; (закрыт)" Type="BOOL" />
            <Field UUID="TB67SA6DTYPEDKISO6NAMC5SWQ" Name="iCon" Comment="Вход - контроль цепи включения (открытия)" Type="BOOL" />
            <Field UUID="EIFZU5L22RQUXBFPPCCT236FCQ" Name="iCoff" Comment="Вход - контроль цепи отключения (закрытия)" Type="BOOL" />
            <Field UUID="GIVBYIHUOBNU5DS3D7NB6IIQEA" Name="qOn" Comment="Выход - &quot;включить&quot; (открыть, форсировка)" Type="BOOL" />
            <Field UUID="B3U4CEPC5FQEXKDEAGWOPCDWZU" Name="qOff" Comment="Выход - &quot;отключить&quot; (закрыть)" Type="BOOL" />
            <Field UUID="5OXOOXY3F2CEHER2BZBJPT3FSA" Name="qHoldOn" Comment="Выход - &quot;удержание&quot; (трехходовой клапан)" Type="BOOL" />
            <Field UUID="W6BNQGNNUFSUXGQ3RZQ4V2XMD4" Name="algOn" Comment="Команда включения из алгоритма" Type="BOOL" />
            <Field UUID="Z3KAE3E5VX5UDAOPXTO4SUHYEY" Name="algOff" Comment="Команда отключения из алгоритма" Type="BOOL" />
            <Field UUID="U3KPWCQJYP4E7O6Z6S6U43Q2V4" Name="modeManual" Comment="Режим ручного управления" Type="BOOL" />
            <Field UUID="VSW5JXZJSMLUZFMXRYKWIBFB2I" Name="disableManual" Comment="Блокировка ручного управления" Type="BOOL" />
            <Field UUID="JO4FIXI66MRULCSWOZ7JRQSOBA" Name="disableCon" Comment="Не учитывать контроль цепи управления команды &apos;открыть&apos;" Type="BOOL" />
            <Field UUID="UZCWPJ5FO2OETORGJUJ77MHWEQ" Name="disableCoff" Comment="Не учитывать контроль цепи управления команды &apos;закрыть&apos;" Type="BOOL" />
            <Field UUID="XB6FRKLPQHBU3KBCQJ2O4LMWOI" Name="btnMode" Comment="Кнопка переключения режима Ручной/Авто (СКАДА)" Type="BOOL" />
            <Field UUID="HQXXP3VK6B7UFEZCLYPOAIJCVE" Name="btnOn" Comment="Кнопка &quot;включить&quot; (СКАДА)" Type="BOOL" />
            <Field UUID="EUREFPVUSAJU5MPE72IMKULFAQ" Name="btnOff" Comment="Кнопка &quot;отключить&quot; (СКАДА)" Type="BOOL" />
            <Field UUID="AILDXTDC3NIELCLUI3YK5YT24Q" Name="prmBtnOn" Comment="Разрешение ручного включения в авто-режиме (для повтора команды)" Type="BOOL" />
            <Field UUID="N3ML4S2CGYTUNLC75YT4BMSOZE" Name="prmBtnOff" Comment="Разрешение ручного отключения в авто-режиме (для повтора команды)" Type="BOOL" />
            <Field UUID="T6O6PYG5FOHE5M2XV53ZQ6EC4Q" Name="fNotOn" Comment="Не включен" Type="BOOL" />
            <Field UUID="FGO5HC5NS2AENDSJ7FTV6YTIKM" Name="fNotOff" Comment="Не отключен" Type="BOOL" />
            <Field UUID="SUNJAVMMKXFUTFOAEJWMDGD4B4" Name="fNotStart" Comment="Не стронулся" Type="BOOL" />
            <Field UUID="UOQBPEA7JBMU7KFLOB4CAR2Q5A" Name="fSelfOn" Comment="Самопроизвольное включение" Type="BOOL" />
            <Field UUID="DJLHHLRC674EHNL2W5UHHLPB4Y" Name="fSelfOff" Comment="Самопроизвольное отключение" Type="BOOL" />
            <Field UUID="URJGYYBT4DXU5N4YI3XNJOKP5M" Name="fFB" Comment="Двойное положение" Type="BOOL" />
            <Field UUID="WPU7QKFWK6TU5DDMTVHYF5AIOY" Name="fCon" Comment="Нет контроля цепи включения" Type="BOOL" />
            <Field UUID="WJBPVHFY5IPEZOLM74FY44PYMY" Name="fCoff" Comment="Нет контроля цепи отключения" Type="BOOL" />
            <Field UUID="3QBLSEMS7OCERKXNV3GPVS7PNM" Name="fCommon" Comment="Обобщенная неисправность" Type="BOOL" />
        </Struct>
    </DataTypes>
    <FBLibrary>
        <Folder Name="IM" Comment="" Data="" UUID="LW7DIVPLNJCULJ2X6MWO7FM52Y">
            <FunctionBlock UUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Name="FB_IM" Comment="FB Исполнительных механизмов">
                <Variables>
                    <Variable UUID="5XYFD3YZLLBUNB42KO2XYNFDCU" Name="AMtype" Comment="тип ИМ" Type="INT" Usage="input" />
                    <Variable UUID="PETOOKKOZ5ZUHGDFGUI235UOWE" Name="AM" Comment="структура ИМ" Type="support_AM" TypeUUID="JOKANQL3O4QURP2EITPYYDMUV4" Usage="inout" />
                    <Variable UUID="FECD53T2D3CUTMVI42ECGHMCLY" Name="tuns" Comment="Настройки ИМ" Type="T_tuneAM" TypeUUID="EKXWTT2XQFVEBA2O4SGLDA6X4E" Usage="input" />
                    <Variable UUID="EDVZIRQWLT3UDFKHACOVGWPYM4" Name="cycle" Comment="цикл вызова (с)" Type="REAL" Usage="input" />
                    <Variable UUID="MC7WZK735E7EDGYPA7FMYZ6ZYY" Name="onImit" Comment="включить режим имитации" Type="BOOL" Usage="input" />
                    <Variable UUID="KNJWSZAW7KLUHKINAJIYOXQUFU" Name="imtChangeTime" Comment="время переключения состояния для имитатора" Type="REAL" InitialValue="4" Usage="input" />
                    <Variable UUID="YJALDEKXZIAEBF7TAWFK34VG7A" Name="I_ON" Type="BOOL" Usage="input" />
                    <Variable UUID="JACB2RJGQM3EJFEEH5UBKF5TIM" Name="I_OFF" Type="BOOL" Usage="input" />
                    <Variable UUID="ICKZ3QWAXBMUTKG6JQNPTEC2QM" Name="I_Con" Type="BOOL" Usage="input" />
                    <Variable UUID="EMWHYR3US7OUVAQURMVK5WK2VU" Name="I_Coff" Type="BOOL" Usage="input" />
                    <Variable UUID="7M6X7SOAZ6CE3C3LKAET4H3KUA" Name="unlock" Type="BOOL" Usage="input" />
                    <Variable UUID="PDPZIK7RNIGEZALSPLREI2IPK4" Name="Q_ON" Type="BOOL" Usage="output" />
                    <Variable UUID="V6MUNN55PDPUTAJTEWOJUXQR6U" Name="Q_OFF" Type="BOOL" Usage="output" />
                    <Variable UUID="RKQGJ6QQUGQUXAIFQADPHSMOUM" Name="Q_HoldOn" Type="BOOL" Usage="output" />
                    <Variable UUID="BTZJYNYJ2UUURFURQFWR6S5O3Y" Name="ps" Comment="Сигналка предупреждения" Type="BOOL" Usage="output" />
                    <Variable UUID="HO5QMS37KGRUFNJ4JJRITZIMP4" Name="algOn" Comment="команда открытия от алгоритма" Type="BOOL" Usage="internal" />
                    <Variable UUID="CMXCEEFW6Z6ENAFCXGRHJOGI6M" Name="algOff" Comment="команда закрытия от алгоритма" Type="BOOL" Usage="internal" />
                    <Variable UUID="IZJKEDDZ47GUFO7BOZC7YKLQZE" Name="iOn" Comment="сигнал (конечник) открытия" Type="BOOL" Usage="internal" />
                    <Variable UUID="IT7YET3ZRL2EDH6OY4RZ7F5AKI" Name="iOff" Comment="сигнал (конечник) закрытия" Type="BOOL" Usage="internal" />
                    <Variable UUID="JZG6WQHPJMMUZBZE7X2FA4VPKM" Name="qOn" Comment="выход на открытие" Type="BOOL" Usage="internal" />
                    <Variable UUID="ZPLMRSLMHTCUHIP6TYW4CL2N5I" Name="qOff" Comment="выход на закрытие" Type="BOOL" Usage="internal" />
                    <Variable UUID="VUPVKP7RMWTERJ7AZBTZVEYPCY" Name="btnOn" Comment="кнопка открытия (включения)" Type="BOOL" Usage="internal" />
                    <Variable UUID="KGF35AM36CXUJJFX4C37TTI4EU" Name="btnOff" Comment="кнопка закрытия (отключения)" Type="BOOL" Usage="internal" />
                    <Variable UUID="6WBGZYIOBLMETEEEQZ6B5ASQII" Name="modeManual" Comment="ручное управление" Type="BOOL" Usage="internal" />
                    <Variable UUID="TNVNQT5NADZUHEA5XCOVODKHHM" Name="notOn" Comment="не открыт (не включен)" Type="BOOL" Usage="internal" />
                    <Variable UUID="RQOS2DNCVDXUXMEHU43U66PC2M" Name="notOff" Comment="не закрыт (не выключен)" Type="BOOL" Usage="internal" />
                    <Variable UUID="XWDUTHDWEMTEXF363ZDXUPB2FI" Name="setOn" Comment="обобщенная команда на открытие" Type="BOOL" Usage="internal" />
                    <Variable UUID="S7TDCYI34UAURMWX7LNZ7Q3DVQ" Name="setOff" Comment="обобщенная команда на закрытие" Type="BOOL" Usage="internal" />
                    <Variable UUID="2YFKES4RS6TEZIQK64GSW2VMLI" Name="int_iOn" Type="BOOL" Usage="internal" />
                    <Variable UUID="GZBUQS2K6R2EDONSFQIJ3B2AVM" Name="int_iOff" Type="BOOL" Usage="internal" />
                    <Variable UUID="JJPQIEFP32SUXG4U4O4MLUTJPI" Name="qOnPrev" Type="BOOL" Usage="internal" />
                    <Variable UUID="MZRVQ5DAR6FELAA4OJQ4ZJF47U" Name="qOffPrev" Type="BOOL" Usage="internal" />
                    <Variable UUID="VGZDX656BHWUHMVRFQ5T7UFPGA" Name="timeQOn" Comment="текущее время подачи команды открытия" Type="REAL" Usage="internal" />
                    <Variable UUID="BJ7NG6XPBDVEVD7WNGL2ATIDGE" Name="timeQOff" Comment="текущее время подачи команды закрытия" Type="REAL" Usage="internal" />
                    <Variable UUID="R4AU66NU2YVEHBFVJROOTEM2TM" Name="timeExtraOn" Comment="текущее время дожима открытия" Type="REAL" Usage="internal" />
                    <Variable UUID="GNURLIKPQ7HE5GHCKFJEQAONAI" Name="timeExtraOff" Comment="текущее время дожима закрытия" Type="REAL" Usage="internal" />
                    <Variable UUID="PDM4LADFVAUEFE5HUDLZHS7SEM" Name="timeCircBrkOn" Comment="текущее время КЦУ On" Type="REAL" Usage="internal" />
                    <Variable UUID="MGYODHIFDPRUBN4T56OY56ICHU" Name="timeCircBrkOff" Comment="текущее время КЦУ Off" Type="REAL" Usage="internal" />
                    <Variable UUID="AJO5AFGGN7BUDDZ7BWYSA5RPEQ" Name="changeCounter" Comment="количество попыток перевода в текущее положение" Type="INT" Usage="internal" />
                    <Variable UUID="ICO74YEEKVHELOXAIVEXGPQADQ" Name="FRONT_BTN" Comment="передний фронт кнопки РУ" Type="R_TRIG" TypeUUID="S45Q5WLSRRGU3MJDOGDVF24XVA" Usage="internal" />
                    <Variable UUID="R6PIXZGPSYXURC2XIL6YCBZWIY" Name="frBTN" Comment="передний фронт кнопки РУ" Type="BOOL" Usage="internal" />
                    <Variable UUID="IM6CQF6KSQCUVA7X4SECMK6LCM" Name="wasOn" Type="BOOL" Usage="internal" />
                    <Variable UUID="2S6R7J3WHQLULLRVMT2EJOD6YI" Name="wasOff" Type="BOOL" Usage="internal" />
                    <Variable UUID="CMAZOKJUL7ZETKJDW5UR5D743Q" Name="selfOn" Comment="самопроизвольное открытие (включение)" Type="BOOL" Usage="internal" />
                    <Variable UUID="6MJNYD4M6ALEZGQ5FROHQR5MCI" Name="selfOff" Comment="самопроизвольное закрытие (отключение)" Type="BOOL" Usage="internal" />
                    <Variable UUID="UJ646BIRCAFEJPINNWJFYZK27U" Name="imtState" Comment="текущее состояние" Type="REAL" Usage="internal" />
                    <Variable UUID="BT2WTUA36XFUHK5JVE57VGP7MU" Name="imt_qOn" Comment="внутренний сигнал ON (для унификации разнотипных ИМ)" Type="BOOL" Usage="internal" />
                    <Variable UUID="R6A5AI6O7K6ETL3VWIGD5RNVDU" Name="imt_qOff" Comment="внутренний сигнал OFF (для унификации разнотипных ИМ)" Type="BOOL" Usage="internal" />
                    <Variable UUID="SCKVA6FKP3UUJNHQUPGI2FXD7I" Name="iCon" Comment="контроль цепи" Type="BOOL" Usage="internal" />
                    <Variable UUID="FJBNTNBQHFREZNBP6FFGAKB64Y" Name="iCoff" Comment="контроль цепи" Type="BOOL" Usage="internal" />
                    <Variable UUID="NQH4CDIJEABERJZC2LFG46JX7E" Name="frontImitOn" Type="R_TRIG" TypeUUID="S45Q5WLSRRGU3MJDOGDVF24XVA" Usage="internal" />
                    <Variable UUID="P3NHLORDEEAEVENDKAOMT666JU" Name="frImitOn" Type="BOOL" Usage="internal" />
                    <Variable UUID="HF7YYOEZACGEXH23CYTA2BQ23Y" Name="disableManual" Comment="запрет ручного режима (внутренний сигнал)" Type="BOOL" Usage="internal" />
                    <Variable UUID="IB3U55AUN5UU7NW5VSDNGRDCKU" Name="fNotOn_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="ECXVHPRFC5XUXDL4FXXVLJU4PM" Name="fNotOff_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="RCCP626CVVQEDM5UZRBEWQAQAI" Name="fNotStart_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="J244K4GAFILUNINAFURJQGVEEY" Name="fSelfOn_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="MJPL45THOCLUTNSKBQLD3H6PGE" Name="fSelfOff_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="NJWXABGIHTKEBN4UVYBRAHZTLQ" Name="fFB_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="BMFNBKYDUCDUTGTY4MWQUMM3LY" Name="fCon_prv" Type="BOOL" Usage="internal" />
                    <Variable UUID="GMQ6D2T5AQAUPBWTXOAHL2QD2E" Name="fCoff_prv" Type="BOOL" Usage="internal" />
                </Variables>
                <ST><![CDATA[// ==================== Макрос для исполнительных механизмов =====================================

// константы AMtype
// 2-ИМ 1Q 0FB 1 команда 0 конечников (1x0)
// 3-ИМ 2Q(Fors+Hold) 2FB 2 команды 0 конечников (2x0)
// 4-ИМ 1Q 1FB 1 команда 1 конечник (1x1)
// 5-ИМ 1Q 2FB 1 команда 2 конечника (1x2)
// 6-ИМ 2Q 1FB 2 команды 1 конечник (2x1)
// 7-ИМ 2Q 2FB 2 команды 2 конечника (2x2)
// 8-ИМ 1Q 1FB с командой/конечником OFF
// 9-ИМ 1Q 2FB с командой OFF и двумя конечниками
// 10-ИМ 1Q 1FB с командой ON/ конечником OF 
// 11-ИМ ТРК, АПК и прочие с положением

  AM.iOn   := I_ON;
  AM.iOff  := I_OFF;
  AM.iCon  := I_Con;
  AM.iCoff := I_Coff;

// привязка к входам структуры AM
  btnOn  := AM.btnOn;
  btnOff := AM.btnOff;
  algOn  := AM.algOn;
  algOff := AM.algOff;
  modeManual := AM.modeManual;
 //запись типа ИМ в структуру  
//  AM.AMtype := AMtype; 

// инициализация задержек (если в структуре задержка не инициализирована - используем значение по-умолчанию)
//время перестановки, при превышении которого выдается предупреждение
IF tuns.delayChangeOvertimeAlert = 0.0 THEN tuns.delayChangeOvertimeAlert := 45.0; END_IF; 
//		delayChangeOvertimeAlert := 45.0; 
//	ELSE delayChangeOvertimeAlert := tuns.delayChangeOvertimeAlert; 
//END_IF; 

//время перестановки, при превышении которого снимается выходная команда
IF tuns.delayQTimeout = 0.0 THEN tuns.delayQTimeout := 90.0; END_IF; 
//	ELSE delayQTimeout := AM.delayQTimeout; 
//END_IF; 

//delayExtraOn := AM.delayExtraOn; //время дожима на открытие
//delayExtraOff := AM.delayExtraOff; //время дожима на закрытие
//задержка формирования нестрагивания
IF tuns.delayNotMoveAlert = 0.0 THEN tuns.delayNotMoveAlert := 4.0; END_IF; 
//ELSE delayNotMoveAlert := AM.delayNotMoveAlert; 
//END_IF; 
//задержка формирования обрыва контроля цепи
IF tuns.delayCircBrkAlert = 0.0 THEN tuns.delayCircBrkAlert := 1.0; END_IF; 
//	ELSE delayCircBrkAlert := AM.delayCircBrkAlert; 
//END_IF; 
// обобщенная неисправность
AM.fCommon := AM.fNotOn OR AM.fNotOff OR AM.fNotStart OR AM.fSelfOn OR AM.fSelfOff OR AM.fFB OR AM.fCon OR AM.fCoff;
// запрет ручного режима (внутренний сигнал)
disableManual := AM.disableManual AND NOT (AM.fNotOn OR AM.fNotOff); 

//** Переключатель РУЧНОГО РЕЖИМА (переключение по одному сигналу)
FRONT_BTN(AM.btnMode, frBTN); //передний фронт кнопки сохраняем в темп (frBTN)
IF frBTN AND AM.modeManual OR disableManual THEN //если есть фронт кнопки, и включен ручной режим - сброс ручного режима так же, ручной режим сбрасывается, когда он не разрешен!
	AM.modeManual := FALSE; //сброс ручного режима
	frBTN := FALSE; //сброс фронта
	AM.btnMode := FALSE; //сброс кнопки
END_IF;
//если есть фронт кнопки, ручной режим не включен, и нет запрета ручного режима
IF frBTN AND NOT AM.modeManual AND NOT disableManual THEN 
	AM.modeManual := TRUE; //включение ручного режима
	frBTN := FALSE; //сброс фронта
	AM.btnMode := FALSE; //сброс кнопки
END_IF;

//=========================================================================================================
CASE AMtype OF

2: // AM_1Q0FB *************************** ИМ 1Q 0FB ******************************************************

qOn := NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn) OR  modeManual AND (btnOn OR qOn) AND NOT btnOff;
       
// сигналы положения (конечники)
AM.iOn := AM.qOn;
AM.iOff := NOT AM.iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// обрыв КЦУ
IF iCon or qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
//обрыв КЦУ команды "открыть (включить)"
AM.fCon := NOT AM.disableCon AND timeCircBrkOn > tuns.delayCircBrkAlert;      

3: // AM_2Q_FH *************************** ИМ 2Q(Fors+Hold) 2FB *******************************************

// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := AM.iOff;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// формирование внутренних сигналов для реализации дожима
IF iOff OR NOT iOn THEN timeExtraOn  := 0.0; 
	ELSIF timeExtraOn  < 10000000.0 THEN timeExtraOn  := timeExtraOn  + cycle; 
END_IF;
int_iOn := timeExtraOn > tuns.delayExtraOn; // на время дожима - задерживаем сигналы открытия...

IF iOn OR NOT iOff THEN timeExtraOff  := 0.0; 
	ELSIF timeExtraOff  < 10000000.0 THEN timeExtraOff  := timeExtraOff  + cycle; 
END_IF;
int_iOff := timeExtraOff > tuns.delayExtraOff; // ...и закрытия.

// обобщенные команды от алгоритма и от кнопок РУ
AM.qHoldOn := int_iOn AND NOT setOff; //команда "удержание"
// обобщенная команда: открыть
setOn  := (modeManual AND  btnOn OR NOT modeManual AND algOn  OR setOn ) 
          AND NOT (modeManual  AND btnOff  OR NOT modeManual AND algOff); 
// обобщенная команда: закрыть
setOff := (modeManual AND btnOff OR NOT modeManual AND algOff OR setOff) 
          AND NOT (modeManual  AND  btnOn  OR NOT modeManual AND algOn ); 
 // выход на ИМ: открыть
qOn  := setOn  AND NOT int_iOn  AND timeQOn < tuns.delayQTimeout AND (changeCounter < 2  OR qOn );  

// подсчет попыток перестановки - только для ИМ (2х )
IF changeCounter > 0 AND (qOff OR btnOn) OR changeCounter < 0 AND (qOn OR btnOff) (*OR reset*) THEN changeCounter := 0;
	ELSIF NOT qOnPrev  AND qOn  THEN changeCounter := changeCounter + 1;
	ELSIF NOT qOffPrev AND qOff THEN changeCounter := changeCounter - 1;
END_IF;
qOnPrev := qOn;
qOffPrev := qOff;

// накапливаем время подачи команды открытия (включения)
IF NOT setOn  OR btnOn  THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;
IF NOT setOff OR btnOff THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// нестрагивание (только для ИМ с двумя конечниками)
//на закрытие
AM.fNotStart := (timeQOn > tuns.delayNotMoveAlert AND qOn AND iOff)    //на открытие
             OR (timeQOff > tuns.delayNotMoveAlert AND NOT qOn AND NOT AM.qHoldOn AND iOn); 

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > tuns.delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT int_iOn;     // не открыт
notOff := (timeQOff > tuns.delayChangeOvertimeAlert AND qOff OR notOff) AND NOT int_iOff;    // не закрыт

// неисправность концевых выключателей
AM.fFB:= iOff AND iOn; //двойное положение

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOn  := iOn AND (qOn OR AM.qHoldOn);
wasOff := (iOff OR wasOff) AND NOT (qOn OR AM.qHoldOn);

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

4: // AM_1Q1FB *************************** ИМ 1Q 1FB ******************************************************
// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := NOT iOn;
AM.iOff := NOT iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// обобщенные команды от алгоритма и от кнопок РУ
qOn := NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn)
       OR  modeManual AND (btnOn OR qOn) AND NOT btnOff;

// накапливаем время подачи команды открытия (включения)
IF NOT qOn THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;

IF qOn THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := timeQOn  > tuns.delayChangeOvertimeAlert AND NOT iOn;      // не включен
notOff := timeQOff > tuns.delayChangeOvertimeAlert AND NOT iOff;     // не выключен

// обрыв КЦУ
IF iCon or qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
//обрыв КЦУ команды "открыть (включить)"
AM.fCon := NOT AM.disableCon AND timeCircBrkOn > tuns.delayCircBrkAlert;      


// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOn  := iOn AND qOn;
wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

5: // AM_1Q2FB *************************** ИМ 1Q 2FB ******************************************************
// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := AM.iOff;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

//  обобщенные команды от алгоритма и от кнопок РУ
qOn := NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn)
       OR  modeManual AND (btnOn OR qOn) AND NOT btnOff;

// накапливаем время подачи команды открытия (включения)
IF NOT qOn THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;

IF qOn THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// нестрагивание (только для ИМ с двумя конечниками)
 //на закрытие
AM.fNotStart := (timeQOn > tuns.delayNotMoveAlert AND qOn AND iOff)    //на открытие
             OR (timeQOff > tuns.delayNotMoveAlert AND NOT qOn AND NOT AM.qHoldOn AND iOn);

// не включен (не открыт) / не выключен (не закрыт)
notOn  := timeQOn  > tuns.delayChangeOvertimeAlert AND NOT iOn;      // не включен
notOff := timeQOff > tuns.delayChangeOvertimeAlert AND NOT iOff;     // не выключен

// обрыв КЦУ
IF iCon or qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
AM.fCon := NOT AM.disableCon AND timeCircBrkOn > tuns.delayCircBrkAlert;      //обрыв КЦУ команды "открыть (включить)"

// неисправность концевых выключателей
AM.fFB:= iOff AND iOn; //двойное положение

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOn  := iOn AND qOn;
wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

6: // AM_2Q1FB *************************** ИМ 2Q 1FB ******************************************************   // 
// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := NOT iOn;
AM.iOff := NOT iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// формирование внутренних сигналов для реализации дожима
IF iOff OR NOT iOn THEN timeExtraOn  := 0.0; 
	ELSIF timeExtraOn  < 10000000.0 THEN timeExtraOn  := timeExtraOn  + cycle; 
END_IF;
int_iOn := timeExtraOn > tuns.delayExtraOn; // на время дожима - задерживаем сигналы открытия...

IF iOn OR NOT iOff THEN timeExtraOff  := 0.0; 
	ELSIF timeExtraOff  < 10000000.0 THEN timeExtraOff  := timeExtraOff  + cycle; 
END_IF;
int_iOff := timeExtraOff > tuns.delayExtraOff; // ...и закрытия.

//  обобщенные команды от алгоритма и от кнопок РУ
// обобщенная команда: открыть  
  setOn  := (modeManual AND btnOn OR NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn) OR setOn)  
					AND NOT (modeManual  AND btnOff  OR NOT modeManual AND algOff); 
 
 setOff := (modeManual AND btnOff OR NOT modeManual AND (algOff OR btnOff AND AM.prmBtnOff) OR setOff) 
						AND NOT (modeManual  AND  btnOn  OR NOT modeManual AND algOn); // обобщенная команда: закрыть
 
 qOn  := setOn  AND NOT int_iOn  AND timeQOn < tuns.delayQTimeout AND (changeCounter < 2  OR qOn);   // выход на ИМ: открыть 
 qOff := setOff AND NOT int_iOff AND timeQOff< tuns.delayQTimeout AND (changeCounter > -2 OR qOff);   // выход на ИМ: закрыть

// подсчет попыток перестановки - только для ИМ (2х )
IF changeCounter > 0 AND (qOff OR btnOn) OR changeCounter < 0 AND (qOn OR btnOff) (*OR reset*) THEN changeCounter := 0;
	ELSIF NOT qOnPrev  AND qOn  THEN changeCounter := changeCounter + 1;
	ELSIF NOT qOffPrev AND qOff THEN changeCounter := changeCounter - 1;
END_IF;
qOnPrev := qOn;
qOffPrev := qOff;

// накапливаем время подачи команды открытия (включения)
IF NOT setOn  OR btnOn  THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;

IF NOT setOff OR btnOff THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > tuns.delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT int_iOn;     // не открыт
notOff := (timeQOff > tuns.delayChangeOvertimeAlert AND qOff OR notOff) AND NOT int_iOff;    // не закрыт

// обрыв КЦУ
IF NOT qOn AND iCon OR qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
AM.fCon := NOT AM.disableCon AND (timeCircBrkOn > tuns.delayCircBrkAlert OR AM.fCon) AND NOT iCon;      //обрыв КЦУ команды "открыть (включить)"

IF NOT qOff AND iCoff OR qOff THEN timeCircBrkOff := 0.0;
	ELSIF timeCircBrkOff < tuns.delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; 
END_IF;
AM.fCoff := NOT AM.disableCoff AND (timeCircBrkOff > tuns.delayCircBrkAlert OR AM.fCoff) AND NOT iCoff; //обрыв КЦУ команды "закрыть (отключить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
  selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
  selfOff := (wasOn AND NOT iOn OR selfOff) AND NOT (iOn OR qOff); //
  wasOn  := (iOn OR wasOn) AND NOT qOff;
  wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

7: // AM_2Q2FB *************************** ИМ 2Q 2FB ******************************************************
// сигналы положения (конечники)
iOn  := AM.iOn;
iOff := AM.iOff;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// формирование внутренних сигналов для реализации дожима
IF iOff OR NOT iOn THEN timeExtraOn  := 0.0; 
	ELSIF timeExtraOn  < 10000000.0 THEN timeExtraOn  := timeExtraOn  + cycle; 
END_IF;
int_iOn := timeExtraOn > tuns.delayExtraOn; // на время дожима - задерживаем сигналы открытия...

IF iOn OR NOT iOff THEN timeExtraOff  := 0.0; 
	ELSIF timeExtraOff  < 10000000.0 THEN timeExtraOff  := timeExtraOff  + cycle; 
END_IF;
int_iOff := timeExtraOff > tuns.delayExtraOff; // ...и закрытия.

//  обобщенные команды от алгоритма и от кнопок РУ
setOn  := (modeManual AND  btnOn OR NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn)  OR setOn)
          AND NOT (modeManual  AND btnOff  OR NOT modeManual AND algOff); // обобщенная команда: открыть
setOff := (modeManual AND btnOff OR NOT modeManual AND (algOff OR btnOff AND AM.prmBtnOff) OR setOff)           
          AND NOT (modeManual  AND  btnOn  OR NOT modeManual AND algOn); // обобщенная команда: закрыть

qOn  := setOn  AND NOT int_iOn  AND timeQOn < tuns.delayQTimeout AND (changeCounter < 2  OR qOn );   // выход на ИМ: открыть 
qOff := setOff AND NOT int_iOff AND timeQOff< tuns.delayQTimeout AND (changeCounter > -2 OR qOff);   // выход на ИМ: закрыть

// подсчет попыток перестановки - только для ИМ (2х )
IF changeCounter > 0 AND (qOff OR btnOn) OR changeCounter < 0 AND (qOn OR btnOff) (*OR reset*) THEN changeCounter := 0;
	ELSIF NOT qOnPrev  AND qOn  THEN changeCounter := changeCounter + 1;
	ELSIF NOT qOffPrev AND qOff THEN changeCounter := changeCounter - 1;
END_IF;
qOnPrev := qOn;
qOffPrev := qOff;

// накапливаем время подачи команды открытия (включения)
IF NOT setOn  OR btnOn  THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;

IF NOT setOff OR btnOff THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// нестрагивание (только для ИМ с двумя конечниками)
AM.fNotStart := (timeQOn > tuns.delayNotMoveAlert AND qOn AND iOff)    //на открытие
             OR (timeQOff > tuns.delayNotMoveAlert AND qOff AND iOn);   //на закрытие

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > tuns.delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT int_iOn;     // не открыт
notOff := (timeQOff > tuns.delayChangeOvertimeAlert AND qOff OR notOff) AND NOT int_iOff;    // не закрыт

// обрыв КЦУ
IF iCon or qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
AM.fCon := NOT AM.disableCon AND timeCircBrkOn > tuns.delayCircBrkAlert;      //обрыв КЦУ команды "открыть (включить)"

IF iCoff or qOff THEN timeCircBrkOff := 0.0;
	ELSIF timeCircBrkOff < tuns.delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; 
END_IF;
AM.fCoff := NOT AM.disableCoff AND timeCircBrkOff > tuns.delayCircBrkAlert; //обрыв КЦУ команды "закрыть (отключить)"

// неисправность концевых выключателей
AM.fFB:= iOff AND iOn; //двойное положение

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn AND NOT iOn OR selfOff) AND NOT (iOn OR qOff); 
wasOn  := (iOn OR wasOn) AND NOT qOff;
wasOff := (iOff OR wasOff) AND NOT qOn;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

8: // AM_inv1Q1FB ************************ ИМ 1Q 1FB с командой/конечником OFF ****************************
// сигналы положения (конечники)
iOff := AM.iOff;
iOn  := NOT iOff;
AM.iOn := NOT iOff; 

// сигналы контроля цепи
iCoff := AM.iCoff;

//  обобщенные команды от алгоритма и от кнопок РУ
qOff := NOT modeManual AND (algOff OR btnOff AND AM.prmBtnOff) OR modeManual AND (btnOff OR qOff) AND NOT btnOn;
       
// накапливаем время подачи команды открытия (включения)
IF NOT qOff THEN timeQOff  := 0.0; 
	ELSIF timeQOff  < 10000000.0 THEN timeQOff  := timeQOff  + cycle; 
END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > tuns.delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT iOn;     // не открыт
notOff := (timeQOff > tuns.delayChangeOvertimeAlert AND qOff OR notOff) AND NOT iOff;    // не закрыт

// обрыв КЦУ
IF NOT qOff AND iCoff OR qOff THEN timeCircBrkOff := 0.0;
	ELSIF timeCircBrkOff < tuns.delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; 
END_IF;
AM.fCoff := NOT AM.disableCoff AND (timeCircBrkOff > tuns.delayCircBrkAlert OR AM.fCoff) AND NOT iCoff; //обрыв КЦУ команды "закрыть (отключить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOff  := iOff AND qOff;
wasOn := (iOn OR wasOn) AND NOT qOff;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

9: // AM_inv1Q2FB ************************ ИМ 1Q 2FB с командой OFF/ и двумя конечниками ******************
// сигналы положения (конечники)
iOff := AM.iOff;
iOn  := AM.iOn;

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

//  обобщенные команды от алгоритма и от кнопок РУ
qOff := NOT modeManual AND (algOff OR btnOff AND AM.prmBtnOff) OR  modeManual AND (btnOff OR qOff) AND NOT btnOn;
       

// накапливаем время подачи команды открытия (включения)
IF NOT qOff THEN timeQOff  := 0.0; 
	ELSIF timeQOff  < 10000000.0 THEN timeQOff  := timeQOff  + cycle; 
END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := (timeQOn  > tuns.delayChangeOvertimeAlert AND qOn  OR notOn)  AND NOT iOn;     // не открыт
notOff := (timeQOff > tuns.delayChangeOvertimeAlert AND qOff OR notOff) AND NOT iOff;    // не закрыт

// обрыв КЦУ
IF NOT qOff AND iCoff OR qOff THEN timeCircBrkOff := 0.0;
	ELSIF timeCircBrkOff < tuns.delayCircBrkAlert THEN timeCircBrkOff := timeCircBrkOff + cycle; 
END_IF;
AM.fCoff := NOT AM.disableCoff AND (timeCircBrkOff > tuns.delayCircBrkAlert OR AM.fCoff) AND NOT iCoff; //обрыв КЦУ команды "закрыть (отключить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT iOn;
wasOff  := iOff AND qOff;
wasOn := (iOn OR wasOn) AND NOT qOff;

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

10: // AM_1Q1CFB *************************** ИМ 1Q 1FB ******************************************************

// сигналы положения (конечники)
iOff := AM.iOff;
iOn  := NOT iOff;
AM.iOn := NOT iOff; 

// сигналы контроля цепи
iCon  := AM.iCon;
iCoff := AM.iCoff;

// обобщенные команды от алгоритма и от кнопок РУ
qOn := NOT modeManual AND (algOn OR btnOn AND AM.prmBtnOn) OR  modeManual AND (btnOn OR qOn) AND NOT btnOff;
      
// накапливаем время подачи команды открытия (включения)
IF NOT qOn or unlock THEN timeQOn  := 0.0; 
	ELSIF timeQOn  < 10000000.0 THEN timeQOn  := timeQOn  + cycle; 
END_IF;

IF qOn or unlock THEN timeQOff := 0.0; 
	ELSIF timeQOff < 10000000.0 THEN timeQOff := timeQOff + cycle; 
END_IF;

// не включен (не открыт) / не выключен (не закрыт)
notOn  := timeQOn  > tuns.delayChangeOvertimeAlert AND NOT iOn;      // не включен
notOff := timeQOff > tuns.delayChangeOvertimeAlert AND NOT iOff;     // не выключен

// обрыв КЦУ
IF NOT qOn AND iCon OR qOn THEN timeCircBrkOn := 0.0;
	ELSIF timeCircBrkOn < tuns.delayCircBrkAlert THEN timeCircBrkOn := timeCircBrkOn + cycle; 
END_IF;
AM.fCon := NOT AM.disableCon AND (timeCircBrkOn > tuns.delayCircBrkAlert OR AM.fCon) AND NOT iCon;      //обрыв КЦУ команды "открыть (включить)"

// самопроизвольное открытие/закрытие
// сигнал сбрасывается при наличии нужного положения ИМ или при подаче противоположной команды
selfOn  := (wasOff AND NOT iOff OR selfOn) AND NOT (iOff OR qOn or unlock);
selfOff := (wasOn  AND NOT iOn OR selfOff) AND NOT (iOn or unlock);
wasOn  := iOn AND qOn;
wasOff := (iOff OR wasOff) AND NOT (qOn or unlock);

// разрешение для кнопок, когда ИМ не_открылся/не_закрылся
AM.prmBtnOn := notOn  AND algOn  AND NOT qOn;
AM.prmBtnOff := notOff AND algOff AND NOT qOff;

END_CASE;

//------------------------------------ Имитатор ИМ ---------------------------------------------------------

frontImitOn(onImit, frImitOn); //передний фронт onImit

IF onImit THEN //Начало имитации

	IF frImitOn THEN // по переднему фронту onImit инициализация положение ИМ
	  IF iOn AND NOT iOff THEN imtState := imtChangeTime; // открыт
		ELSIF iOff AND NOT iOn THEN imtState := 0.0; //закрыт
		ELSE imtState := imtChangeTime / 2.0; // ставим в середину
	  END_IF;
	END_IF;

	// формирование внутренних команд в соответствии с типом ИМ
	IF AMtype = 1 OR AMtype = 6 OR AMtype = 7 THEN // ИМ с двумя командами
	  imt_qOn  := qOn;
	  imt_qOff := qOff;
	ELSIF AMtype = 3 THEN // ИМ с форсировкой-удержанием
	  imt_qOn  := qOn OR AM.qHoldOn;
	  imt_qOff := NOT imt_qOn;
	ELSIF AMtype = 8 OR AMtype = 9 THEN // для ИМ (1x1) (с командой/конечником OFF)
	  imt_qOff  := qOff;
	  imt_qOn := NOT qOff;
	ELSE // ИМ с одной командой
	  imt_qOn  := qOn;
	  imt_qOff := NOT qOn;
	END_IF;    

	IF imt_qOn  THEN imtState := imtState + cycle; END_IF; // перемещение -> ON
	IF imt_qOff THEN imtState := imtState - cycle; END_IF; // перемещение -> OFF

	IF imtState > imtChangeTime THEN imtState := imtChangeTime; END_IF; // ограничение
	IF imtState < 0.0 THEN imtState := 0.0; END_IF;

	//концевики
	IF AMtype = 4 OR AMtype = 6 THEN
	  AM.iOn  := imtState/imtChangeTime > 0.9; // формируем выход при 90% перемещения 
	  AM.iOff := NOT iOn; // для ИМ 2х1
	ELSIF AMtype = 8 THEN // для ИМ (1x1) (с командой/конечником OFF)
	  AM.iOff  := imtState/imtChangeTime < 0.1; 
	  AM.iOn := NOT iOff; // для ИМ 2х1
	ELSIF AMtype = 11 THEN // для ИМ ТРК, АПК и прочих 
	  AM.iOff  := I_OFF; 
	  AM.iOn :=  I_ON; 
	ELSIF AMtype <> 2 THEN
	  AM.iOn  := imtState/imtChangeTime > 0.9; // формируем выход при 90% перемещения
	  AM.iOff := imtState/imtChangeTime < 0.1; // формируем выход при 10% перемещения
	END_IF;

	//КЦУ (формируется, когда не подается команда управления)
	AM.iCon  := NOT imt_qOn;
	AM.iCoff := NOT imt_qOff;

END_IF; //Конец имитации

//---------------------------------------------------------------------
IF unlock THEN 
	notOn   := FALSE;
	notOff  := FALSE;
	selfOn  := FALSE;
	selfOff := FALSE;
	wasOn:= FALSE; //Добавлено
	wasOff:= FALSE; //Добавлено
	changeCounter := 0; //Добавлено
END_IF;

// привязка к выходам структуры AM
AM.fNotOn  := notOn;	//не включен (не открыт)
AM.fNotOff := notOff;	//не выключен (не закрыт)
AM.fSelfOn  := selfOn;	//самопроизвольное открытие
AM.fSelfOff := selfOff;	//самопроизвольное закрытие
AM.qOn  := qOn;
AM.qOff := qOff;
// передача выходных сигналов
Q_ON     := AM.qOn;
Q_OFF    := AM.qOff;
Q_HoldOn := AM.qHoldOn;
// сброс кнопок РУ (откр/закр)
AM.btnOn  := FALSE;
AM.btnOff := FALSE;

//ПС по ИМ для сирены. Снимать там же где и остальные ПС
ps := AM.fNotOn and not fNotOn_prv
	  or AM.fNotOff and not fNotOff_prv
	  or AM.fNotStart and not fNotStart_prv
	  or AM.fSelfOn and not fSelfOn_prv
	  or AM.fSelfOff and not fSelfOff_prv
	  or AM.fFB and not fFB_prv
	  or AM.fCon and not fCon_prv
	  or AM.fCoff and not fCoff_prv;

fNotOn_prv		:= AM.fNotOn;
fNotOff_prv		:= AM.fNotOff;
fNotStart_prv	:= AM.fNotStart;
fSelfOn_prv		:=	AM.fSelfOn;
fSelfOff_prv	:=	AM.fSelfOff;
fFB_prv			:=	AM.fFB;
fCon_prv		:=	AM.fCon;
fCoff_prv		:=	AM.fCoff;

]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="XICUTQAGUXZEZLSIPSBXR2UEV4" Name="FB_IM_Call">
                <Variables>
                    <Variable UUID="V3F7UFOBJBJKS7XR3CRKAY2IAQ" Name="Proc_Kr_1T2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="YDQZ4QFEIV6N56LHE63MN2SDLM" Name="Proc_Kr_2T2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="JLPQUBIZIROBWYUS7CB672RTWA" Name="Proc_Kr_3T2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="U3PIVH55JIKISPK5LSKIKU75TU" Name="Proc_Kr_4T2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="3Q5EMMJXIUIESHSDHK6OTW2GQ4" Name="Proc_Kr_5T2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="VDRAZ3ZUJC2D3NAOAKIR7CABEI" Name="Proc_Kr_6T2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="BBNEBDAHJ6BB5EQXA6UOI6CLKY" Name="Proc_Kr_7T2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="O33NMC4KJT5BLWNI5O5WIR2EDE" Name="Proc_Kr_8T2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="LRD6ZX72I6YBEST4RO2IG6Y4LE" Name="Proc_Kr_9T2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="ZIGM4QZWI6KDIABV6GLABUVJFI" Name="Proc_Kr_10T2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="V3PTR54PIRPCND2DGKTJACQYKM" Name="Proc_Kr_11T2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="6TIYJTULJV7KWUQVZSOEZZMKSU" Name="Proc_Kr_12T2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="UDTH4Q35JCBJOTTHQOXPOK4GFM" Name="Proc_Kr_13T2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="2D7TR7ANI44N2NLLMGAZ222I24" Name="Proc_Kr_14T2" Type="FB_IM" TypeUUID="JIOIQ3APYP4UTCXLJQK7Q6LHCA" Usage="internal" />
                    <Variable UUID="H5PBCAC4VRDULBAEGWVD6PFO3U" Name="IM_type" Type="T_AM_Type" TypeUUID="ANRR6BLMKETURJI5AWVQRMBAWA" Usage="internal" />
                </Variables>
                <ST><![CDATA[//Константы ИМ

//= if not init.AM then
if not init then 
	IM_type.am1x0	   	:= 2; //ИМ 1 команда, 0 конечников
	IM_type.am2x2fh	   	:= 3; //ИМ 2 команды, 2 конечника (открытие, удержание)
	IM_type.am1x1	   	:= 4; //ИМ 1 команда, 1 конечник
	IM_type.am1x2	   	:= 5; //ИМ 1 команда, 2 конечника
	IM_type.am2x1	   	:= 6; //ИМ 2 команды, 1 конечник
	IM_type.am2x2	   	:= 7; //ИМ 2 команды, 2 конечника
	IM_type.am1ofx1of  	:= 8; //ИМ 1 команда OF, 1 конечник OF
	IM_type.am1ofx2	   	:= 9; //ИМ 1 команда OF, 2 конечника
	IM_type.am1x1of		:= 10; //ИМ 1 команда, 1 конечник OF
	IM_type.amPos		:= 11; //ИМ прочие с положением (АПК, ТРК...)
	IM_type.am3x2		:= 12; //ИМ 3 команды (on, off, stop), 2 конечника
	IM_type.am2x2x3ware	:= 13; //ИМ 2 команды, 2 конечника, трёхпроводная схема
	IM_type.am1x4nku	:= 14; //ИМ 1 команда, 4 сигнала от НКУ
	IM_type.am2x7upp	:= 15; //ИМ 2 команды (БП и УПП) и 7 сигналов от НКУ
	IM_type.am2x8nku	:= 16; //ИМ 2 команды и 8 сигналов от НКУ
	IM_Init(); 
//=	init.APS := true; 
end_if;

ps_im := false; //звуковое предупреждение по ИМ

//Кран отсечной 1Т-2
//2x2
UPA_AM.Kr_1T2.disableManual := not UPA_TS.DU_IM;  //Запрет РУ
//= UPA_AM.Kr_1T2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=
UPA_AM.Kr_1T2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr_1T2( AMtype := IM_type.am2x2, AM := UPA_AM.Kr_1T2, onImit := ImitOn,   cycle := tim.cycle, unlock := UPA_BTN.Deblock
EN := NOT (UPA_DO_ToHMI.Kr_1T2_ON.forsEnable OR UPA_DO_ToHMI.Kr_1T2_OF.forsEnable),
tuns := TuneAM.Kr_1T2,
I_ON       := UPA_DI.Kr_1T2_ON
I_OFF      := UPA_DI.Kr_1T2_OF
I_Con      := TRUE
I_Coff     := TRUE
Q_ON     	=> UPA_DO.Kr_1T2_ON
Q_OFF     	=> UPA_DO.Kr_1T2_OF);

ps_im := ps_im OR Proc_Kr_1T2.ps;

//Кран отсечной 2Т-2
//2x2
UPA_AM.Kr_2T2.disableManual := not UPA_TS.DU_IM;  //Запрет РУ
//= UPA_AM.Kr_2T2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=
UPA_AM.Kr_2T2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr_2T2( AMtype := IM_type.am2x2, AM := UPA_AM.Kr_2T2, onImit := ImitOn,   cycle := tim.cycle, unlock := UPA_BTN.Deblock
EN := NOT (UPA_DO_ToHMI.Kr_2T2_ON.forsEnable OR UPA_DO_ToHMI.Kr_2T2_OF.forsEnable),
tuns := TuneAM.Kr_2T2,
I_ON       := UPA_DI.Kr_2T2_ON
I_OFF      := UPA_DI.Kr_2T2_OF
I_Con      := TRUE
I_Coff     := TRUE
Q_ON     	=> UPA_DO.Kr_2T2_ON
Q_OFF     	=> UPA_DO.Kr_2T2_OF);

ps_im := ps_im OR Proc_Kr_2T2.ps;

//Кран отсечной 3Т-2
//2x2
UPA_AM.Kr_3T2.disableManual := not UPA_TS.DU_IM;  //Запрет РУ
//= UPA_AM.Kr_3T2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=
UPA_AM.Kr_3T2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr_3T2( AMtype := IM_type.am2x2, AM := UPA_AM.Kr_3T2, onImit := ImitOn,   cycle := tim.cycle, unlock := UPA_BTN.Deblock
EN := NOT (UPA_DO_ToHMI.Kr_3T2_ON.forsEnable OR UPA_DO_ToHMI.Kr_3T2_OF.forsEnable),
tuns := TuneAM.Kr_3T2,
I_ON       := UPA_DI.Kr_3T2_ON
I_OFF      := UPA_DI.Kr_3T2_OF
I_Con      := TRUE
I_Coff     := TRUE
Q_ON     	=> UPA_DO.Kr_3T2_ON
Q_OFF     	=> UPA_DO.Kr_3T2_OF);

ps_im := ps_im OR Proc_Kr_3T2.ps;

//Кран отсечной 4Т-2
//2x2
UPA_AM.Kr_4T2.disableManual := not UPA_TS.DU_IM;  //Запрет РУ
//= UPA_AM.Kr_4T2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=
UPA_AM.Kr_4T2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr_4T2( AMtype := IM_type.am2x2, AM := UPA_AM.Kr_4T2, onImit := ImitOn,   cycle := tim.cycle, unlock := UPA_BTN.Deblock
EN := NOT (UPA_DO_ToHMI.Kr_4T2_ON.forsEnable OR UPA_DO_ToHMI.Kr_4T2_OF.forsEnable),
tuns := TuneAM.Kr_4T2,
I_ON       := UPA_DI.Kr_4T2_ON
I_OFF      := UPA_DI.Kr_4T2_OF
I_Con      := TRUE
I_Coff     := TRUE
Q_ON     	=> UPA_DO.Kr_4T2_ON
Q_OFF     	=> UPA_DO.Kr_4T2_OF);

ps_im := ps_im OR Proc_Kr_4T2.ps;

//Кран отсечной 5Т-2
//2x2
UPA_AM.Kr_5T2.disableManual := not UPA_TS.DU_IM;  //Запрет РУ
//= UPA_AM.Kr_5T2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=
UPA_AM.Kr_5T2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr_5T2( AMtype := IM_type.am2x2, AM := UPA_AM.Kr_5T2, onImit := ImitOn,   cycle := tim.cycle, unlock := UPA_BTN.Deblock
EN := NOT (UPA_DO_ToHMI.Kr_5T2_ON.forsEnable OR UPA_DO_ToHMI.Kr_5T2_OF.forsEnable),
tuns := TuneAM.Kr_5T2,
I_ON       := UPA_DI.Kr_5T2_ON
I_OFF      := UPA_DI.Kr_5T2_OF
I_Con      := TRUE
I_Coff     := TRUE
Q_ON     	=> UPA_DO.Kr_5T2_ON
Q_OFF     	=> UPA_DO.Kr_5T2_OF);

ps_im := ps_im OR Proc_Kr_5T2.ps;

//Кран отсечной 6Т-2
//2x2
UPA_AM.Kr_6T2.disableManual := not UPA_TS.DU_IM;  //Запрет РУ
//= UPA_AM.Kr_6T2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=
UPA_AM.Kr_6T2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr_6T2( AMtype := IM_type.am2x2, AM := UPA_AM.Kr_6T2, onImit := ImitOn,   cycle := tim.cycle, unlock := UPA_BTN.Deblock
EN := NOT (UPA_DO_ToHMI.Kr_6T2_ON.forsEnable OR UPA_DO_ToHMI.Kr_6T2_OF.forsEnable),
tuns := TuneAM.Kr_6T2,
I_ON       := UPA_DI.Kr_6T2_ON
I_OFF      := UPA_DI.Kr_6T2_OF
I_Con      := TRUE
I_Coff     := TRUE
Q_ON     	=> UPA_DO.Kr_6T2_ON
Q_OFF     	=> UPA_DO.Kr_6T2_OF);

ps_im := ps_im OR Proc_Kr_6T2.ps;

//Кран отсечной 7Т-2
//2x2
UPA_AM.Kr_7T2.disableManual := not UPA_TS.DU_IM;  //Запрет РУ
//= UPA_AM.Kr_7T2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=
UPA_AM.Kr_7T2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr_7T2( AMtype := IM_type.am2x2, AM := UPA_AM.Kr_7T2, onImit := ImitOn,   cycle := tim.cycle, unlock := UPA_BTN.Deblock
EN := NOT (UPA_DO_ToHMI.Kr_7T2_ON.forsEnable OR UPA_DO_ToHMI.Kr_7T2_OF.forsEnable),
tuns := TuneAM.Kr_7T2,
I_ON       := UPA_DI.Kr_7T2_ON
I_OFF      := UPA_DI.Kr_7T2_OF
I_Con      := TRUE
I_Coff     := TRUE
Q_ON     	=> UPA_DO.Kr_7T2_ON
Q_OFF     	=> UPA_DO.Kr_7T2_OF);

ps_im := ps_im OR Proc_Kr_7T2.ps;

//Кран отсечной 8Т-2
//2x2
UPA_AM.Kr_8T2.disableManual := not UPA_TS.DU_IM;  //Запрет РУ
//= UPA_AM.Kr_8T2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=
UPA_AM.Kr_8T2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr_8T2( AMtype := IM_type.am2x2, AM := UPA_AM.Kr_8T2, onImit := ImitOn,   cycle := tim.cycle, unlock := UPA_BTN.Deblock
EN := NOT (UPA_DO_ToHMI.Kr_8T2_ON.forsEnable OR UPA_DO_ToHMI.Kr_8T2_OF.forsEnable),
tuns := TuneAM.Kr_8T2,
I_ON       := UPA_DI.Kr_8T2_ON
I_OFF      := UPA_DI.Kr_8T2_OF
I_Con      := TRUE
I_Coff     := TRUE
Q_ON     	=> UPA_DO.Kr_8T2_ON
Q_OFF     	=> UPA_DO.Kr_8T2_OF);

ps_im := ps_im OR Proc_Kr_8T2.ps;

//Кран отсечной 9Т-2
//2x2
UPA_AM.Kr_9T2.disableManual := not UPA_TS.DU_IM;  //Запрет РУ
//= UPA_AM.Kr_9T2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=
UPA_AM.Kr_9T2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr_9T2( AMtype := IM_type.am2x2, AM := UPA_AM.Kr_9T2, onImit := ImitOn,   cycle := tim.cycle, unlock := UPA_BTN.Deblock
EN := NOT (UPA_DO_ToHMI.Kr_9T2_ON.forsEnable OR UPA_DO_ToHMI.Kr_9T2_OF.forsEnable),
tuns := TuneAM.Kr_9T2,
I_ON       := UPA_DI.Kr_9T2_ON
I_OFF      := UPA_DI.Kr_9T2_OF
I_Con      := TRUE
I_Coff     := TRUE
Q_ON     	=> UPA_DO.Kr_9T2_ON
Q_OFF     	=> UPA_DO.Kr_9T2_OF);

ps_im := ps_im OR Proc_Kr_9T2.ps;

//Кран отсечной 10Т-2
//2x2
UPA_AM.Kr_10T2.disableManual := not UPA_TS.DU_IM;  //Запрет РУ
//= UPA_AM.Kr_10T2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=
UPA_AM.Kr_10T2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr_10T2( AMtype := IM_type.am2x2, AM := UPA_AM.Kr_10T2, onImit := ImitOn,   cycle := tim.cycle, unlock := UPA_BTN.Deblock
EN := NOT (UPA_DO_ToHMI.Kr_10T2_ON.forsEnable OR UPA_DO_ToHMI.Kr_10T2_OF.forsEnable),
tuns := TuneAM.Kr_10T2,
I_ON       := UPA_DI.Kr_10T2_ON
I_OFF      := UPA_DI.Kr_10T2_OF
I_Con      := TRUE
I_Coff     := TRUE
Q_ON     	=> UPA_DO.Kr_10T2_ON
Q_OFF     	=> UPA_DO.Kr_10T2_OF);

ps_im := ps_im OR Proc_Kr_10T2.ps;

//Кран отсечной 11Т-2
//2x2
UPA_AM.Kr_11T2.disableManual := not UPA_TS.DU_IM;  //Запрет РУ
//= UPA_AM.Kr_11T2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=
UPA_AM.Kr_11T2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr_11T2( AMtype := IM_type.am2x2, AM := UPA_AM.Kr_11T2, onImit := ImitOn,   cycle := tim.cycle, unlock := UPA_BTN.Deblock
EN := NOT (UPA_DO_ToHMI.Kr_11T2_ON.forsEnable OR UPA_DO_ToHMI.Kr_11T2_OF.forsEnable),
tuns := TuneAM.Kr_11T2,
I_ON       := UPA_DI.Kr_11T2_ON
I_OFF      := UPA_DI.Kr_11T2_OF
I_Con      := TRUE
I_Coff     := TRUE
Q_ON     	=> UPA_DO.Kr_11T2_ON
Q_OFF     	=> UPA_DO.Kr_11T2_OF);

ps_im := ps_im OR Proc_Kr_11T2.ps;

//Кран отсечной 12Т-2
//2x2
UPA_AM.Kr_12T2.disableManual := not UPA_TS.DU_IM;  //Запрет РУ
//= UPA_AM.Kr_12T2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=
UPA_AM.Kr_12T2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr_12T2( AMtype := IM_type.am2x2, AM := UPA_AM.Kr_12T2, onImit := ImitOn,   cycle := tim.cycle, unlock := UPA_BTN.Deblock
EN := NOT (UPA_DO_ToHMI.Kr_12T2_ON.forsEnable OR UPA_DO_ToHMI.Kr_12T2_OF.forsEnable),
tuns := TuneAM.Kr_12T2,
I_ON       := UPA_DI.Kr_12T2_ON
I_OFF      := UPA_DI.Kr_12T2_OF
I_Con      := TRUE
I_Coff     := TRUE
Q_ON     	=> UPA_DO.Kr_12T2_ON
Q_OFF     	=> UPA_DO.Kr_12T2_OF);

ps_im := ps_im OR Proc_Kr_12T2.ps;

//Кран отсечной 13Т-2
//2x2
UPA_AM.Kr_13T2.disableManual := not UPA_TS.DU_IM;  //Запрет РУ
//= UPA_AM.Kr_13T2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=
UPA_AM.Kr_13T2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr_13T2( AMtype := IM_type.am2x2, AM := UPA_AM.Kr_13T2, onImit := ImitOn,   cycle := tim.cycle, unlock := UPA_BTN.Deblock
EN := NOT (UPA_DO_ToHMI.Kr_13T2_ON.forsEnable OR UPA_DO_ToHMI.Kr_13T2_OF.forsEnable),
tuns := TuneAM.Kr_13T2,
I_ON       := UPA_DI.Kr_13T2_ON
I_OFF      := UPA_DI.Kr_13T2_OF
I_Con      := TRUE
I_Coff     := TRUE
Q_ON     	=> UPA_DO.Kr_13T2_ON
Q_OFF     	=> UPA_DO.Kr_13T2_OF);

ps_im := ps_im OR Proc_Kr_13T2.ps;

//Кран отсечной 14Т-2
//2x2
UPA_AM.Kr_14T2.disableManual := not UPA_TS.DU_IM;  //Запрет РУ
//= UPA_AM.Kr_14T2.algOff	:=	FALSE;  //Логическая команда на закр.(выкл.) - формируется в алгоритме //=
UPA_AM.Kr_14T2.algOn	:=	FALSE;  //Логическая команда на откр.(вкл.)

Proc_Kr_14T2( AMtype := IM_type.am2x2, AM := UPA_AM.Kr_14T2, onImit := ImitOn,   cycle := tim.cycle, unlock := UPA_BTN.Deblock
EN := NOT (UPA_DO_ToHMI.Kr_14T2_ON.forsEnable OR UPA_DO_ToHMI.Kr_14T2_OF.forsEnable),
tuns := TuneAM.Kr_14T2,
I_ON       := UPA_DI.Kr_14T2_ON
I_OFF      := UPA_DI.Kr_14T2_OF
I_Con      := TRUE
I_Coff     := TRUE
Q_ON     	=> UPA_DO.Kr_14T2_ON
Q_OFF     	=> UPA_DO.Kr_14T2_OF);

ps_im := ps_im OR Proc_Kr_14T2.ps;]]></ST>
            </FunctionBlock>
            <Function UUID="CODNAAKPURQE5ISSMFLXHEFINI" Name="IM_Init" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables />
                <ST><![CDATA[//Кран отсечной 1Т-2
TuneAM.Kr_1T2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr_1T2.delayQTimeout := 20.0;
TuneAM.Kr_1T2.delayExtraOn := 1.0;
TuneAM.Kr_1T2.delayExtraOff := 1.0;
TuneAM.Kr_1T2.delayNotMoveAlert := 5.0;
TuneAM.Kr_1T2.delayCircBrkAlert := 1.0;

//Кран отсечной 2Т-2
TuneAM.Kr_2T2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr_2T2.delayQTimeout := 20.0;
TuneAM.Kr_2T2.delayExtraOn := 1.0;
TuneAM.Kr_2T2.delayExtraOff := 1.0;
TuneAM.Kr_2T2.delayNotMoveAlert := 5.0;
TuneAM.Kr_2T2.delayCircBrkAlert := 1.0;

//Кран отсечной 3Т-2
TuneAM.Kr_3T2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr_3T2.delayQTimeout := 20.0;
TuneAM.Kr_3T2.delayExtraOn := 1.0;
TuneAM.Kr_3T2.delayExtraOff := 1.0;
TuneAM.Kr_3T2.delayNotMoveAlert := 5.0;
TuneAM.Kr_3T2.delayCircBrkAlert := 1.0;

//Кран отсечной 4Т-2
TuneAM.Kr_4T2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr_4T2.delayQTimeout := 20.0;
TuneAM.Kr_4T2.delayExtraOn := 1.0;
TuneAM.Kr_4T2.delayExtraOff := 1.0;
TuneAM.Kr_4T2.delayNotMoveAlert := 5.0;
TuneAM.Kr_4T2.delayCircBrkAlert := 1.0;

//Кран отсечной 5Т-2
TuneAM.Kr_5T2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr_5T2.delayQTimeout := 20.0;
TuneAM.Kr_5T2.delayExtraOn := 1.0;
TuneAM.Kr_5T2.delayExtraOff := 1.0;
TuneAM.Kr_5T2.delayNotMoveAlert := 5.0;
TuneAM.Kr_5T2.delayCircBrkAlert := 1.0;

//Кран отсечной 6Т-2
TuneAM.Kr_6T2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr_6T2.delayQTimeout := 20.0;
TuneAM.Kr_6T2.delayExtraOn := 1.0;
TuneAM.Kr_6T2.delayExtraOff := 1.0;
TuneAM.Kr_6T2.delayNotMoveAlert := 5.0;
TuneAM.Kr_6T2.delayCircBrkAlert := 1.0;

//Кран отсечной 7Т-2
TuneAM.Kr_7T2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr_7T2.delayQTimeout := 20.0;
TuneAM.Kr_7T2.delayExtraOn := 1.0;
TuneAM.Kr_7T2.delayExtraOff := 1.0;
TuneAM.Kr_7T2.delayNotMoveAlert := 5.0;
TuneAM.Kr_7T2.delayCircBrkAlert := 1.0;

//Кран отсечной 8Т-2
TuneAM.Kr_8T2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr_8T2.delayQTimeout := 20.0;
TuneAM.Kr_8T2.delayExtraOn := 1.0;
TuneAM.Kr_8T2.delayExtraOff := 1.0;
TuneAM.Kr_8T2.delayNotMoveAlert := 5.0;
TuneAM.Kr_8T2.delayCircBrkAlert := 1.0;

//Кран отсечной 9Т-2
TuneAM.Kr_9T2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr_9T2.delayQTimeout := 20.0;
TuneAM.Kr_9T2.delayExtraOn := 1.0;
TuneAM.Kr_9T2.delayExtraOff := 1.0;
TuneAM.Kr_9T2.delayNotMoveAlert := 5.0;
TuneAM.Kr_9T2.delayCircBrkAlert := 1.0;

//Кран отсечной 10Т-2
TuneAM.Kr_10T2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr_10T2.delayQTimeout := 20.0;
TuneAM.Kr_10T2.delayExtraOn := 1.0;
TuneAM.Kr_10T2.delayExtraOff := 1.0;
TuneAM.Kr_10T2.delayNotMoveAlert := 5.0;
TuneAM.Kr_10T2.delayCircBrkAlert := 1.0;

//Кран отсечной 11Т-2
TuneAM.Kr_11T2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr_11T2.delayQTimeout := 20.0;
TuneAM.Kr_11T2.delayExtraOn := 1.0;
TuneAM.Kr_11T2.delayExtraOff := 1.0;
TuneAM.Kr_11T2.delayNotMoveAlert := 5.0;
TuneAM.Kr_11T2.delayCircBrkAlert := 1.0;

//Кран отсечной 12Т-2
TuneAM.Kr_12T2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr_12T2.delayQTimeout := 20.0;
TuneAM.Kr_12T2.delayExtraOn := 1.0;
TuneAM.Kr_12T2.delayExtraOff := 1.0;
TuneAM.Kr_12T2.delayNotMoveAlert := 5.0;
TuneAM.Kr_12T2.delayCircBrkAlert := 1.0;

//Кран отсечной 13Т-2
TuneAM.Kr_13T2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr_13T2.delayQTimeout := 20.0;
TuneAM.Kr_13T2.delayExtraOn := 1.0;
TuneAM.Kr_13T2.delayExtraOff := 1.0;
TuneAM.Kr_13T2.delayNotMoveAlert := 5.0;
TuneAM.Kr_13T2.delayCircBrkAlert := 1.0;

//Кран отсечной 14Т-2
TuneAM.Kr_14T2.delayChangeOvertimeAlert := 15.0;
TuneAM.Kr_14T2.delayQTimeout := 20.0;
TuneAM.Kr_14T2.delayExtraOn := 1.0;
TuneAM.Kr_14T2.delayExtraOff := 1.0;
TuneAM.Kr_14T2.delayNotMoveAlert := 5.0;
TuneAM.Kr_14T2.delayCircBrkAlert := 1.0;]]></ST>
            </Function>
        </Folder>
        <Folder Name="InOut" Comment="" Data="" UUID="5MHVACQQWEUE5JR6T5MZWNRBY4">
            <Folder Name="AI" Comment="" Data="" UUID="YCGHQI3KDU6U7CTRV4HYAOBK5A">
                <Folder Name="ANB" Comment="" Data="" UUID="J6KXMSAMFXBEPLNLJPHAP6T65U">
                    <Function UUID="BYAR3MRKOBFE3ASGP7ZBFBDZQA" Name="ANB_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then

//Пониженное давление газа в коллекторе газа PT-15
UPA_Ust.Pg_Kol_Pn := 5.3;
//Повышенное давление газа в коллекторе газа PT-15
UPA_Ust.Pg_Kol_Pv := 15.1;
//Высокое давление газа в коллекторе газа PT-15
UPA_Ust.Pg_Kol_Av := 15.2;
//---------------------------------------------------------------------
//Пониженная температура воздуха в ББ САУ УПА
UPA_Ust.T_BB_UPA_Pn := 5.0;
//Повышенная температура воздуха в ББ САУ УПА
UPA_Ust.T_BB_UPA_Pv := 45.0;
//---------------------------------------------------------------------
//Пониженное давление газа на скважине 1Т
UPA_Ust.Pg_PT1_Pn := 5.3;
//Повышенное давление газа на скважине 1Т
UPA_Ust.Pg_PT1_Pv := 15.1;
//Высокое давление газа на скважине 1Т
UPA_Ust.Pg_PT1_Av := 15.2;
//---------------------------------------------------------------------
//Пониженное давление газа на скважине 2Т
UPA_Ust.Pg_PT2_Pn := 5.3;
//Повышенное давление газа на скважине 2Т
UPA_Ust.Pg_PT2_Pv := 15.1;
//Высокое давление газа на скважине 2Т
UPA_Ust.Pg_PT2_Av := 15.2;
//---------------------------------------------------------------------
//Пониженное давление газа на скважине 3Т
UPA_Ust.Pg_PT3_Pn := 5.3;
//Повышенное давление газа на скважине 3Т
UPA_Ust.Pg_PT3_Pv := 15.1;
//Высокое давление газа на скважине 3Т
UPA_Ust.Pg_PT3_Av := 15.2;
//---------------------------------------------------------------------
//Пониженное давление газа на скважине 4Т
UPA_Ust.Pg_PT4_Pn := 5.3;
//Повышенное давление газа на скважине 4Т
UPA_Ust.Pg_PT4_Pv := 15.1;
//Высокое давление газа на скважине 4Т
UPA_Ust.Pg_PT4_Av := 15.2;
//---------------------------------------------------------------------
//Пониженное давление газа на скважине 5Т
UPA_Ust.Pg_PT5_Pn := 5.3;
//Повышенное давление газа на скважине 5Т
UPA_Ust.Pg_PT5_Pv := 15.1;
//Высокое давление газа на скважине 5Т
UPA_Ust.Pg_PT5_Av := 15.2;
//---------------------------------------------------------------------
//Пониженное давление газа на скважине 6Т
UPA_Ust.Pg_PT6_Pn := 5.3;
//Повышенное давление газа на скважине 6Т
UPA_Ust.Pg_PT6_Pv := 15.1;
//Высокое давление газа на скважине 6Т
UPA_Ust.Pg_PT6_Av := 15.2;
//---------------------------------------------------------------------
//Пониженное давление газа на скважине 7Т
UPA_Ust.Pg_PT7_Pn := 5.3;
//Повышенное давление газа на скважине 7Т
UPA_Ust.Pg_PT7_Pv := 15.1;
//Высокое давление газа на скважине 7Т
UPA_Ust.Pg_PT7_Av := 15.2;
//---------------------------------------------------------------------
//Пониженное давление газа на скважине 8Т
UPA_Ust.Pg_PT8_Pn := 5.3;
//Повышенное давление газа на скважине 8Т
UPA_Ust.Pg_PT8_Pv := 15.1;
//Высокое давление газа на скважине 8Т
UPA_Ust.Pg_PT8_Av := 15.2;
//---------------------------------------------------------------------
//Пониженное давление газа на скважине 9Т
UPA_Ust.Pg_PT9_Pn := 5.3;
//Повышенное давление газа на скважине 9Т
UPA_Ust.Pg_PT9_Pv := 15.1;
//Высокое давление газа на скважине 9Т
UPA_Ust.Pg_PT9_Av := 15.2;
//---------------------------------------------------------------------
//Пониженное давление газа на скважине 10Т
UPA_Ust.Pg_PT10_Pn := 5.3;
//Повышенное давление газа на скважине 10Т
UPA_Ust.Pg_PT10_Pv := 15.1;
//Высокое давление газа на скважине 10Т
UPA_Ust.Pg_PT10_Av := 15.2;
//---------------------------------------------------------------------
//Пониженное давление газа на скважине 11Т
UPA_Ust.Pg_PT11_Pn := 5.3;
//Повышенное давление газа на скважине 11Т
UPA_Ust.Pg_PT11_Pv := 15.1;
//Высокое давление газа на скважине 11Т
UPA_Ust.Pg_PT11_Av := 15.2;
//---------------------------------------------------------------------
//Пониженное давление газа на скважине 12Т
UPA_Ust.Pg_PT12_Pn := 5.3;
//Повышенное давление газа на скважине 12Т
UPA_Ust.Pg_PT12_Pv := 15.1;
//Высокое давление газа на скважине 12Т
UPA_Ust.Pg_PT12_Av := 15.2;
//---------------------------------------------------------------------
//Пониженное давление газа на скважине 13Т
UPA_Ust.Pg_PT13_Pn := 5.3;
//Повышенное давление газа на скважине 13Т
UPA_Ust.Pg_PT13_Pv := 15.1;
//Высокое давление газа на скважине 13Т
UPA_Ust.Pg_PT13_Av := 15.2;
//---------------------------------------------------------------------
//Пониженное давление газа на скважине 14Т
UPA_Ust.Pg_PT14_Pn := 5.3;
//Повышенное давление газа на скважине 14Т
UPA_Ust.Pg_PT14_Pv := 15.1;
//Высокое давление газа на скважине 14Т
UPA_Ust.Pg_PT14_Av := 15.2;
//---------------------------------------------------------------------
//Низкая температура газа на скважине 1Т
UPA_Ust.Tg_TE1_Pn := 5.25;
//Высокая температура газа на скважине 1Т
UPA_Ust.Tg_TE1_Pv := 14.25;
//---------------------------------------------------------------------
//Низкая температура газа на скважине 2Т
UPA_Ust.Tg_TE2_Pn := 5.25;
//Высокая температура газа на скважине 2Т
UPA_Ust.Tg_TE2_Pv := 14.25;
//---------------------------------------------------------------------
//Низкая температура газа на скважине 3Т
UPA_Ust.Tg_TE3_Pn := 5.25;
//Высокая температура газа на скважине 3Т
UPA_Ust.Tg_TE3_Pv := 14.25;
//---------------------------------------------------------------------
//Низкая температура газа на скважине 4Т
UPA_Ust.Tg_TE4_Pn := 5.25;
//Высокая температура газа на скважине 4Т
UPA_Ust.Tg_TE4_Pv := 14.25;
//---------------------------------------------------------------------
//Низкая температура газа на скважине 5Т
UPA_Ust.Tg_TE5_Pn := 5.25;
//Высокая температура газа на скважине 5Т
UPA_Ust.Tg_TE5_Pv := 14.25;
//---------------------------------------------------------------------
//Низкая температура газа на скважине 6Т
UPA_Ust.Tg_TE6_Pn := 5.25;
//Высокая температура газа на скважине 6Т
UPA_Ust.Tg_TE6_Pv := 14.25;
//---------------------------------------------------------------------
//Низкая температура газа на скважине 7Т
UPA_Ust.Tg_TE7_Pn := 5.25;
//Высокая температура газа на скважине 7Т
UPA_Ust.Tg_TE7_Pv := 14.25;
//---------------------------------------------------------------------
//Низкая температура газа на скважине 8Т
UPA_Ust.Tg_TE8_Pn := 5.25;
//Высокая температура газа на скважине 8Т
UPA_Ust.Tg_TE8_Pv := 14.25;
//---------------------------------------------------------------------
//Низкая температура газа на скважине 9Т
UPA_Ust.Tg_TE9_Pn := 5.25;
//Высокая температура газа на скважине 9Т
UPA_Ust.Tg_TE9_Pv := 14.25;
//---------------------------------------------------------------------
//Низкая температура газа на скважине 10Т
UPA_Ust.Tg_TE10_Pn := 5.25;
//Высокая температура газа на скважине 10Т
UPA_Ust.Tg_TE10_Pv := 14.25;
//---------------------------------------------------------------------
//Низкая температура газа на скважине 11Т
UPA_Ust.Tg_TE11_Pn := 5.25;
//Высокая температура газа на скважине 11Т
UPA_Ust.Tg_TE11_Pv := 14.25;
//---------------------------------------------------------------------
//Низкая температура газа на скважине 12Т
UPA_Ust.Tg_TE12_Pn := 5.25;
//Высокая температура газа на скважине 12Т
UPA_Ust.Tg_TE12_Pv := 14.25;
//---------------------------------------------------------------------
//Низкая температура газа на скважине 13Т
UPA_Ust.Tg_TE13_Pn := 5.25;
//Высокая температура газа на скважине 13Т
UPA_Ust.Tg_TE13_Pv := 14.25;
//---------------------------------------------------------------------
//Низкая температура газа на скважине 14Т
UPA_Ust.Tg_TE14_Pn := 5.25;
//Высокая температура газа на скважине 14Т
UPA_Ust.Tg_TE14_Pv := 14.25;
//=====================================||уставка||setForFault||true - верхняя, false - нижняя||задержка||=================================

UPA_ANB_Settings.Pg_Kol_Pn:= ANB_init(0, false, 0.0); // Пониженное давление газа в коллекторе газа PT-15 
UPA_ANB_Settings.Pg_Kol_Pv:= ANB_init(0, true, 0.0); // Повышенное давление газа в коллекторе газа PT-15 
UPA_ANB_Settings.Pg_Kol_Av:= ANB_init(0, true, 0.0); // Высокое давление газа в коллекторе газа PT-15 
UPA_ANB_Settings.T_BB_UPA_Pn:= ANB_init(0, false, 0.0); // Пониженная температура воздуха в ББ САУ УПА 
UPA_ANB_Settings.T_BB_UPA_Pv:= ANB_init(0, true, 0.0); // Повышенная температура воздуха в ББ САУ УПА 
UPA_ANB_Settings.Pg_PT1_Pn:= ANB_init(0, false, 0.0); // Пониженное давление газа на скважине 1Т 
UPA_ANB_Settings.Pg_PT1_Pv:= ANB_init(0, true, 0.0); // Повышенное давление газа на скважине 1Т 
UPA_ANB_Settings.Pg_PT1_Av:= ANB_init(0, true, 0.0); // Высокое давление газа на скважине 1Т 
UPA_ANB_Settings.Pg_PT2_Pn:= ANB_init(0, false, 0.0); // Пониженное давление газа на скважине 2Т 
UPA_ANB_Settings.Pg_PT2_Pv:= ANB_init(0, true, 0.0); // Повышенное давление газа на скважине 2Т 
UPA_ANB_Settings.Pg_PT2_Av:= ANB_init(0, true, 0.0); // Высокое давление газа на скважине 2Т 
UPA_ANB_Settings.Pg_PT3_Pn:= ANB_init(0, false, 0.0); // Пониженное давление газа на скважине 3Т 
UPA_ANB_Settings.Pg_PT3_Pv:= ANB_init(0, true, 0.0); // Повышенное давление газа на скважине 3Т 
UPA_ANB_Settings.Pg_PT3_Av:= ANB_init(0, true, 0.0); // Высокое давление газа на скважине 3Т 
UPA_ANB_Settings.Pg_PT4_Pn:= ANB_init(0, false, 0.0); // Пониженное давление газа на скважине 4Т 
UPA_ANB_Settings.Pg_PT4_Pv:= ANB_init(0, true, 0.0); // Повышенное давление газа на скважине 4Т 
UPA_ANB_Settings.Pg_PT4_Av:= ANB_init(0, true, 0.0); // Высокое давление газа на скважине 4Т 
UPA_ANB_Settings.Pg_PT5_Pn:= ANB_init(0, false, 0.0); // Пониженное давление газа на скважине 5Т 
UPA_ANB_Settings.Pg_PT5_Pv:= ANB_init(0, true, 0.0); // Повышенное давление газа на скважине 5Т 
UPA_ANB_Settings.Pg_PT5_Av:= ANB_init(0, true, 0.0); // Высокое давление газа на скважине 5Т 
UPA_ANB_Settings.Pg_PT6_Pn:= ANB_init(0, false, 0.0); // Пониженное давление газа на скважине 6Т 
UPA_ANB_Settings.Pg_PT6_Pv:= ANB_init(0, true, 0.0); // Повышенное давление газа на скважине 6Т 
UPA_ANB_Settings.Pg_PT6_Av:= ANB_init(0, true, 0.0); // Высокое давление газа на скважине 6Т 
UPA_ANB_Settings.Pg_PT7_Pn:= ANB_init(0, false, 0.0); // Пониженное давление газа на скважине 7Т 
UPA_ANB_Settings.Pg_PT7_Pv:= ANB_init(0, true, 0.0); // Повышенное давление газа на скважине 7Т 
UPA_ANB_Settings.Pg_PT7_Av:= ANB_init(0, true, 0.0); // Высокое давление газа на скважине 7Т 
UPA_ANB_Settings.Pg_PT8_Pn:= ANB_init(0, false, 0.0); // Пониженное давление газа на скважине 8Т 
UPA_ANB_Settings.Pg_PT8_Pv:= ANB_init(0, true, 0.0); // Повышенное давление газа на скважине 8Т 
UPA_ANB_Settings.Pg_PT8_Av:= ANB_init(0, true, 0.0); // Высокое давление газа на скважине 8Т 
UPA_ANB_Settings.Pg_PT9_Pn:= ANB_init(0, false, 0.0); // Пониженное давление газа на скважине 9Т 
UPA_ANB_Settings.Pg_PT9_Pv:= ANB_init(0, true, 0.0); // Повышенное давление газа на скважине 9Т 
UPA_ANB_Settings.Pg_PT9_Av:= ANB_init(0, true, 0.0); // Высокое давление газа на скважине 9Т 
UPA_ANB_Settings.Pg_PT10_Pn:= ANB_init(0, false, 0.0); // Пониженное давление газа на скважине 10Т 
UPA_ANB_Settings.Pg_PT10_Pv:= ANB_init(0, true, 0.0); // Повышенное давление газа на скважине 10Т 
UPA_ANB_Settings.Pg_PT10_Av:= ANB_init(0, true, 0.0); // Высокое давление газа на скважине 10Т 
UPA_ANB_Settings.Pg_PT11_Pn:= ANB_init(0, false, 0.0); // Пониженное давление газа на скважине 11Т 
UPA_ANB_Settings.Pg_PT11_Pv:= ANB_init(0, true, 0.0); // Повышенное давление газа на скважине 11Т 
UPA_ANB_Settings.Pg_PT11_Av:= ANB_init(0, true, 0.0); // Высокое давление газа на скважине 11Т 
UPA_ANB_Settings.Pg_PT12_Pn:= ANB_init(0, false, 0.0); // Пониженное давление газа на скважине 12Т 
UPA_ANB_Settings.Pg_PT12_Pv:= ANB_init(0, true, 0.0); // Повышенное давление газа на скважине 12Т 
UPA_ANB_Settings.Pg_PT12_Av:= ANB_init(0, true, 0.0); // Высокое давление газа на скважине 12Т 
UPA_ANB_Settings.Pg_PT13_Pn:= ANB_init(0, false, 0.0); // Пониженное давление газа на скважине 13Т 
UPA_ANB_Settings.Pg_PT13_Pv:= ANB_init(0, true, 0.0); // Повышенное давление газа на скважине 13Т 
UPA_ANB_Settings.Pg_PT13_Av:= ANB_init(0, true, 0.0); // Высокое давление газа на скважине 13Т 
UPA_ANB_Settings.Pg_PT14_Pn:= ANB_init(0, false, 0.0); // Пониженное давление газа на скважине 14Т 
UPA_ANB_Settings.Pg_PT14_Pv:= ANB_init(0, true, 0.0); // Повышенное давление газа на скважине 14Т 
UPA_ANB_Settings.Pg_PT14_Av:= ANB_init(0, true, 0.0); // Высокое давление газа на скважине 14Т 
UPA_ANB_Settings.Tg_TE1_Pn:= ANB_init(0, false, 0.0); // Низкая температура газа на скважине 1Т 
UPA_ANB_Settings.Tg_TE1_Pv:= ANB_init(0, true, 0.0); // Высокая температура газа на скважине 1Т 
UPA_ANB_Settings.Tg_TE2_Pn:= ANB_init(0, false, 0.0); // Низкая температура газа на скважине 2Т 
UPA_ANB_Settings.Tg_TE2_Pv:= ANB_init(0, true, 0.0); // Высокая температура газа на скважине 2Т 
UPA_ANB_Settings.Tg_TE3_Pn:= ANB_init(0, false, 0.0); // Низкая температура газа на скважине 3Т 
UPA_ANB_Settings.Tg_TE3_Pv:= ANB_init(0, true, 0.0); // Высокая температура газа на скважине 3Т 
UPA_ANB_Settings.Tg_TE4_Pn:= ANB_init(0, false, 0.0); // Низкая температура газа на скважине 4Т 
UPA_ANB_Settings.Tg_TE4_Pv:= ANB_init(0, true, 0.0); // Высокая температура газа на скважине 4Т 
UPA_ANB_Settings.Tg_TE5_Pn:= ANB_init(0, false, 0.0); // Низкая температура газа на скважине 5Т 
UPA_ANB_Settings.Tg_TE5_Pv:= ANB_init(0, true, 0.0); // Высокая температура газа на скважине 5Т 
UPA_ANB_Settings.Tg_TE6_Pn:= ANB_init(0, false, 0.0); // Низкая температура газа на скважине 6Т 
UPA_ANB_Settings.Tg_TE6_Pv:= ANB_init(0, true, 0.0); // Высокая температура газа на скважине 6Т 
UPA_ANB_Settings.Tg_TE7_Pn:= ANB_init(0, false, 0.0); // Низкая температура газа на скважине 7Т 
UPA_ANB_Settings.Tg_TE7_Pv:= ANB_init(0, true, 0.0); // Высокая температура газа на скважине 7Т 
UPA_ANB_Settings.Tg_TE8_Pn:= ANB_init(0, false, 0.0); // Низкая температура газа на скважине 8Т 
UPA_ANB_Settings.Tg_TE8_Pv:= ANB_init(0, true, 0.0); // Высокая температура газа на скважине 8Т 
UPA_ANB_Settings.Tg_TE9_Pn:= ANB_init(0, false, 0.0); // Низкая температура газа на скважине 9Т 
UPA_ANB_Settings.Tg_TE9_Pv:= ANB_init(0, true, 0.0); // Высокая температура газа на скважине 9Т 
UPA_ANB_Settings.Tg_TE10_Pn:= ANB_init(0, false, 0.0); // Низкая температура газа на скважине 10Т 
UPA_ANB_Settings.Tg_TE10_Pv:= ANB_init(0, true, 0.0); // Высокая температура газа на скважине 10Т 
UPA_ANB_Settings.Tg_TE11_Pn:= ANB_init(0, false, 0.0); // Низкая температура газа на скважине 11Т 
UPA_ANB_Settings.Tg_TE11_Pv:= ANB_init(0, true, 0.0); // Высокая температура газа на скважине 11Т 
UPA_ANB_Settings.Tg_TE12_Pn:= ANB_init(0, false, 0.0); // Низкая температура газа на скважине 12Т 
UPA_ANB_Settings.Tg_TE12_Pv:= ANB_init(0, true, 0.0); // Высокая температура газа на скважине 12Т 
UPA_ANB_Settings.Tg_TE13_Pn:= ANB_init(0, false, 0.0); // Низкая температура газа на скважине 13Т 
UPA_ANB_Settings.Tg_TE13_Pv:= ANB_init(0, true, 0.0); // Высокая температура газа на скважине 13Т 
UPA_ANB_Settings.Tg_TE14_Pn:= ANB_init(0, false, 0.0); // Низкая температура газа на скважине 14Т 
UPA_ANB_Settings.Tg_TE14_Pv:= ANB_init(0, true, 0.0); // Высокая температура газа на скважине 14Т 

end_if;

//========================================================================================================================================

UPA_ANB.Pg_Kol_Pn:= ANB_Processing(UPA_Ust.Pg_Kol_Pn, UPA_AI_ToHMI.Pg_Kol.PV, UPA_AI_ToHMI.Pg_Kol.fault_common, UPA_ANB_Settings.Pg_Kol_Pn, UPA_ANB_Internal.Pg_Kol_Pn);// Пониженное давление газа в коллекторе газа PT-15 
UPA_ANB.Pg_Kol_Pv:= ANB_Processing(UPA_Ust.Pg_Kol_Pv, UPA_AI_ToHMI.Pg_Kol.PV, UPA_AI_ToHMI.Pg_Kol.fault_common, UPA_ANB_Settings.Pg_Kol_Pv, UPA_ANB_Internal.Pg_Kol_Pv);// Повышенное давление газа в коллекторе газа PT-15 
UPA_ANB.Pg_Kol_Av:= ANB_Processing(UPA_Ust.Pg_Kol_Av, UPA_AI_ToHMI.Pg_Kol.PV, UPA_AI_ToHMI.Pg_Kol.fault_common, UPA_ANB_Settings.Pg_Kol_Av, UPA_ANB_Internal.Pg_Kol_Av);// Высокое давление газа в коллекторе газа PT-15 
UPA_AI_ToHMI.Pg_Kol.ps := UPA_ANB.Pg_Kol_Pn OR UPA_ANB.Pg_Kol_Pv;
UPA_AI_ToHMI.Pg_Kol.as := UPA_ANB.Pg_Kol_Av;
UPA_ANB.T_BB_UPA_Pn:= ANB_Processing(UPA_Ust.T_BB_UPA_Pn, UPA_AI_ToHMI.T_BB_UPA.PV, UPA_AI_ToHMI.T_BB_UPA.fault_common, UPA_ANB_Settings.T_BB_UPA_Pn, UPA_ANB_Internal.T_BB_UPA_Pn);// Пониженная температура воздуха в ББ САУ УПА 
UPA_ANB.T_BB_UPA_Pv:= ANB_Processing(UPA_Ust.T_BB_UPA_Pv, UPA_AI_ToHMI.T_BB_UPA.PV, UPA_AI_ToHMI.T_BB_UPA.fault_common, UPA_ANB_Settings.T_BB_UPA_Pv, UPA_ANB_Internal.T_BB_UPA_Pv);// Повышенная температура воздуха в ББ САУ УПА 
UPA_AI_ToHMI.T_BB_UPA.ps :=  UPA_ANB.T_BB_UPA_Pn OR UPA_ANB.T_BB_UPA_Pv;


//======================== модбасовские сигналы от ПИРов =================================================================================
//======================== давление
//= ПИР1
UPA_ANB.Pg_PT1_Pn:= ANB_Processing(UPA_Ust.Pg_PT1_Pn, UPA_PIR1_mb_AI_ToHMI.P_SR.PV, UPA_PIR1_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT1_Pn, UPA_ANB_Internal.Pg_PT1_Pn);// Пониженное давление газа на скважине 1Т 
UPA_ANB.Pg_PT1_Pv:= ANB_Processing(UPA_Ust.Pg_PT1_Pv, UPA_PIR1_mb_AI_ToHMI.P_SR.PV, UPA_PIR1_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT1_Pv, UPA_ANB_Internal.Pg_PT1_Pv);// Повышенное давление газа на скважине 1Т 
UPA_ANB.Pg_PT1_Av:= ANB_Processing(UPA_Ust.Pg_PT1_Av, UPA_PIR1_mb_AI_ToHMI.P_SR.PV, UPA_PIR1_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT1_Av, UPA_ANB_Internal.Pg_PT1_Av);// Высокое давление газа на скважине 1Т 
UPA_PIR1_mb_AI_ToHMI.P_SR.ps := UPA_ANB.Pg_PT1_Pn OR UPA_ANB.Pg_PT1_Pv;
UPA_PIR1_mb_AI_ToHMI.P_SR.as := UPA_ANB.Pg_PT1_Av;
//= ПИР2
UPA_ANB.Pg_PT2_Pn:= ANB_Processing(UPA_Ust.Pg_PT2_Pn, UPA_PIR2_mb_AI_ToHMI.P_SR.PV, UPA_PIR2_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT2_Pn, UPA_ANB_Internal.Pg_PT2_Pn);// Пониженное давление газа на скважине 2Т 
UPA_ANB.Pg_PT2_Pv:= ANB_Processing(UPA_Ust.Pg_PT2_Pv, UPA_PIR2_mb_AI_ToHMI.P_SR.PV, UPA_PIR2_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT2_Pv, UPA_ANB_Internal.Pg_PT2_Pv);// Повышенное давление газа на скважине 2Т 
UPA_ANB.Pg_PT2_Av:= ANB_Processing(UPA_Ust.Pg_PT2_Av, UPA_PIR2_mb_AI_ToHMI.P_SR.PV, UPA_PIR2_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT2_Av, UPA_ANB_Internal.Pg_PT2_Av);// Высокое давление газа на скважине 2Т 
UPA_PIR2_mb_AI_ToHMI.P_SR.ps := UPA_ANB.Pg_PT2_Pn OR UPA_ANB.Pg_PT2_Pv;
UPA_PIR2_mb_AI_ToHMI.P_SR.as := UPA_ANB.Pg_PT2_Av;
//= ПИР3
UPA_ANB.Pg_PT3_Pn:= ANB_Processing(UPA_Ust.Pg_PT3_Pn, UPA_PIR3_mb_AI_ToHMI.P_SR.PV, UPA_PIR3_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT3_Pn, UPA_ANB_Internal.Pg_PT3_Pn);// Пониженное давление газа на скважине 3Т 
UPA_ANB.Pg_PT3_Pv:= ANB_Processing(UPA_Ust.Pg_PT3_Pv, UPA_PIR3_mb_AI_ToHMI.P_SR.PV, UPA_PIR3_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT3_Pv, UPA_ANB_Internal.Pg_PT3_Pv);// Повышенное давление газа на скважине 3Т 
UPA_ANB.Pg_PT3_Av:= ANB_Processing(UPA_Ust.Pg_PT3_Av, UPA_PIR3_mb_AI_ToHMI.P_SR.PV, UPA_PIR3_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT3_Av, UPA_ANB_Internal.Pg_PT3_Av);// Высокое давление газа на скважине 3Т 
UPA_PIR3_mb_AI_ToHMI.P_SR.ps := UPA_ANB.Pg_PT3_Pn OR UPA_ANB.Pg_PT3_Pv;
UPA_PIR3_mb_AI_ToHMI.P_SR.as := UPA_ANB.Pg_PT3_Av;
//= ПИР4
UPA_ANB.Pg_PT4_Pn:= ANB_Processing(UPA_Ust.Pg_PT4_Pn, UPA_PIR4_mb_AI_ToHMI.P_SR.PV, UPA_PIR4_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT4_Pn, UPA_ANB_Internal.Pg_PT4_Pn);// Пониженное давление газа на скважине 4Т 
UPA_ANB.Pg_PT4_Pv:= ANB_Processing(UPA_Ust.Pg_PT4_Pv, UPA_PIR4_mb_AI_ToHMI.P_SR.PV, UPA_PIR4_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT4_Pv, UPA_ANB_Internal.Pg_PT4_Pv);// Повышенное давление газа на скважине 4Т 
UPA_ANB.Pg_PT4_Av:= ANB_Processing(UPA_Ust.Pg_PT4_Av, UPA_PIR4_mb_AI_ToHMI.P_SR.PV, UPA_PIR4_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT4_Av, UPA_ANB_Internal.Pg_PT4_Av);// Высокое давление газа на скважине 4Т 
UPA_PIR4_mb_AI_ToHMI.P_SR.ps := UPA_ANB.Pg_PT4_Pn OR UPA_ANB.Pg_PT4_Pv;
UPA_PIR4_mb_AI_ToHMI.P_SR.as := UPA_ANB.Pg_PT4_Av;
//= ПИР5
UPA_ANB.Pg_PT5_Pn:= ANB_Processing(UPA_Ust.Pg_PT5_Pn, UPA_PIR5_mb_AI_ToHMI.P_SR.PV, UPA_PIR5_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT5_Pn, UPA_ANB_Internal.Pg_PT5_Pn);// Пониженное давление газа на скважине 5Т 
UPA_ANB.Pg_PT5_Pv:= ANB_Processing(UPA_Ust.Pg_PT5_Pv, UPA_PIR5_mb_AI_ToHMI.P_SR.PV, UPA_PIR5_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT5_Pv, UPA_ANB_Internal.Pg_PT5_Pv);// Повышенное давление газа на скважине 5Т 
UPA_ANB.Pg_PT5_Av:= ANB_Processing(UPA_Ust.Pg_PT5_Av, UPA_PIR5_mb_AI_ToHMI.P_SR.PV, UPA_PIR5_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT5_Av, UPA_ANB_Internal.Pg_PT5_Av);// Высокое давление газа на скважине 5Т 
UPA_PIR5_mb_AI_ToHMI.P_SR.ps := UPA_ANB.Pg_PT5_Pn OR UPA_ANB.Pg_PT5_Pv;
UPA_PIR5_mb_AI_ToHMI.P_SR.as := UPA_ANB.Pg_PT5_Av;
//= ПИР6
UPA_ANB.Pg_PT6_Pn:= ANB_Processing(UPA_Ust.Pg_PT6_Pn, UPA_PIR6_mb_AI_ToHMI.P_SR.PV, UPA_PIR6_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT6_Pn, UPA_ANB_Internal.Pg_PT6_Pn);// Пониженное давление газа на скважине 6Т 
UPA_ANB.Pg_PT6_Pv:= ANB_Processing(UPA_Ust.Pg_PT6_Pv, UPA_PIR6_mb_AI_ToHMI.P_SR.PV, UPA_PIR6_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT6_Pv, UPA_ANB_Internal.Pg_PT6_Pv);// Повышенное давление газа на скважине 6Т 
UPA_ANB.Pg_PT6_Av:= ANB_Processing(UPA_Ust.Pg_PT6_Av, UPA_PIR6_mb_AI_ToHMI.P_SR.PV, UPA_PIR6_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT6_Av, UPA_ANB_Internal.Pg_PT6_Av);// Высокое давление газа на скважине 6Т 
UPA_PIR6_mb_AI_ToHMI.P_SR.ps := UPA_ANB.Pg_PT6_Pn OR UPA_ANB.Pg_PT6_Pv;
UPA_PIR6_mb_AI_ToHMI.P_SR.as := UPA_ANB.Pg_PT6_Av;
//= ПИР7
UPA_ANB.Pg_PT7_Pn:= ANB_Processing(UPA_Ust.Pg_PT7_Pn, UPA_PIR7_mb_AI_ToHMI.P_SR.PV, UPA_PIR7_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT7_Pn, UPA_ANB_Internal.Pg_PT7_Pn);// Пониженное давление газа на скважине 7Т 
UPA_ANB.Pg_PT7_Pv:= ANB_Processing(UPA_Ust.Pg_PT7_Pv, UPA_PIR7_mb_AI_ToHMI.P_SR.PV, UPA_PIR7_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT7_Pv, UPA_ANB_Internal.Pg_PT7_Pv);// Повышенное давление газа на скважине 7Т 
UPA_ANB.Pg_PT7_Av:= ANB_Processing(UPA_Ust.Pg_PT7_Av, UPA_PIR7_mb_AI_ToHMI.P_SR.PV, UPA_PIR7_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT7_Av, UPA_ANB_Internal.Pg_PT7_Av);// Высокое давление газа на скважине 7Т 
UPA_PIR7_mb_AI_ToHMI.P_SR.ps := UPA_ANB.Pg_PT7_Pn OR UPA_ANB.Pg_PT7_Pv;
UPA_PIR7_mb_AI_ToHMI.P_SR.as := UPA_ANB.Pg_PT7_Av;
//= ПИР8
UPA_ANB.Pg_PT8_Pn:= ANB_Processing(UPA_Ust.Pg_PT8_Pn, UPA_PIR8_mb_AI_ToHMI.P_SR.PV, UPA_PIR8_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT8_Pn, UPA_ANB_Internal.Pg_PT8_Pn);// Пониженное давление газа на скважине 8Т 
UPA_ANB.Pg_PT8_Pv:= ANB_Processing(UPA_Ust.Pg_PT8_Pv, UPA_PIR8_mb_AI_ToHMI.P_SR.PV, UPA_PIR8_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT8_Pv, UPA_ANB_Internal.Pg_PT8_Pv);// Повышенное давление газа на скважине 8Т 
UPA_ANB.Pg_PT8_Av:= ANB_Processing(UPA_Ust.Pg_PT8_Av, UPA_PIR8_mb_AI_ToHMI.P_SR.PV, UPA_PIR8_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT8_Av, UPA_ANB_Internal.Pg_PT8_Av);// Высокое давление газа на скважине 8Т 
UPA_PIR8_mb_AI_ToHMI.P_SR.ps := UPA_ANB.Pg_PT8_Pn OR UPA_ANB.Pg_PT8_Pv;
UPA_PIR8_mb_AI_ToHMI.P_SR.as := UPA_ANB.Pg_PT8_Av;
//= ПИР9
UPA_ANB.Pg_PT9_Pn:= ANB_Processing(UPA_Ust.Pg_PT9_Pn, UPA_PIR9_mb_AI_ToHMI.P_SR.PV, UPA_PIR9_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT9_Pn, UPA_ANB_Internal.Pg_PT9_Pn);// Пониженное давление газа на скважине 9Т 
UPA_ANB.Pg_PT9_Pv:= ANB_Processing(UPA_Ust.Pg_PT9_Pv, UPA_PIR9_mb_AI_ToHMI.P_SR.PV, UPA_PIR9_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT9_Pv, UPA_ANB_Internal.Pg_PT9_Pv);// Повышенное давление газа на скважине 9Т 
UPA_ANB.Pg_PT9_Av:= ANB_Processing(UPA_Ust.Pg_PT9_Av, UPA_PIR9_mb_AI_ToHMI.P_SR.PV, UPA_PIR9_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT9_Av, UPA_ANB_Internal.Pg_PT9_Av);// Высокое давление газа на скважине 9Т 
UPA_PIR9_mb_AI_ToHMI.P_SR.ps := UPA_ANB.Pg_PT9_Pn OR UPA_ANB.Pg_PT9_Pv;
UPA_PIR9_mb_AI_ToHMI.P_SR.as := UPA_ANB.Pg_PT9_Av;
//= ПИР10
UPA_ANB.Pg_PT10_Pn:= ANB_Processing(UPA_Ust.Pg_PT10_Pn, UPA_PIR10_mb_AI_ToHMI.P_SR.PV, UPA_PIR10_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT10_Pn, UPA_ANB_Internal.Pg_PT10_Pn);// Пониженное давление газа на скважине 10Т 
UPA_ANB.Pg_PT10_Pv:= ANB_Processing(UPA_Ust.Pg_PT10_Pv, UPA_PIR10_mb_AI_ToHMI.P_SR.PV, UPA_PIR10_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT10_Pv, UPA_ANB_Internal.Pg_PT10_Pv);// Повышенное давление газа на скважине 10Т 
UPA_ANB.Pg_PT10_Av:= ANB_Processing(UPA_Ust.Pg_PT10_Av, UPA_PIR10_mb_AI_ToHMI.P_SR.PV, UPA_PIR10_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT10_Av, UPA_ANB_Internal.Pg_PT10_Av);// Высокое давление газа на скважине 10Т 
UPA_PIR10_mb_AI_ToHMI.P_SR.ps := UPA_ANB.Pg_PT10_Pn OR UPA_ANB.Pg_PT10_Pv;
UPA_PIR10_mb_AI_ToHMI.P_SR.as := UPA_ANB.Pg_PT10_Av;
//= ПИР11
UPA_ANB.Pg_PT11_Pn:= ANB_Processing(UPA_Ust.Pg_PT11_Pn, UPA_PIR11_mb_AI_ToHMI.P_SR.PV, UPA_PIR11_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT11_Pn, UPA_ANB_Internal.Pg_PT11_Pn);// Пониженное давление газа на скважине 11Т 
UPA_ANB.Pg_PT11_Pv:= ANB_Processing(UPA_Ust.Pg_PT11_Pv, UPA_PIR11_mb_AI_ToHMI.P_SR.PV, UPA_PIR11_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT11_Pv, UPA_ANB_Internal.Pg_PT11_Pv);// Повышенное давление газа на скважине 11Т 
UPA_ANB.Pg_PT11_Av:= ANB_Processing(UPA_Ust.Pg_PT11_Av, UPA_PIR11_mb_AI_ToHMI.P_SR.PV, UPA_PIR11_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT11_Av, UPA_ANB_Internal.Pg_PT11_Av);// Высокое давление газа на скважине 11Т 
UPA_PIR11_mb_AI_ToHMI.P_SR.ps := UPA_ANB.Pg_PT11_Pn OR UPA_ANB.Pg_PT11_Pv;
UPA_PIR11_mb_AI_ToHMI.P_SR.as := UPA_ANB.Pg_PT11_Av;
//= ПИР12
UPA_ANB.Pg_PT12_Pn:= ANB_Processing(UPA_Ust.Pg_PT12_Pn, UPA_PIR12_mb_AI_ToHMI.P_SR.PV, UPA_PIR12_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT12_Pn, UPA_ANB_Internal.Pg_PT12_Pn);// Пониженное давление газа на скважине 12Т 
UPA_ANB.Pg_PT12_Pv:= ANB_Processing(UPA_Ust.Pg_PT12_Pv, UPA_PIR12_mb_AI_ToHMI.P_SR.PV, UPA_PIR12_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT12_Pv, UPA_ANB_Internal.Pg_PT12_Pv);// Повышенное давление газа на скважине 12Т 
UPA_ANB.Pg_PT12_Av:= ANB_Processing(UPA_Ust.Pg_PT12_Av, UPA_PIR12_mb_AI_ToHMI.P_SR.PV, UPA_PIR12_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT12_Av, UPA_ANB_Internal.Pg_PT12_Av);// Высокое давление газа на скважине 12Т 
UPA_PIR12_mb_AI_ToHMI.P_SR.ps := UPA_ANB.Pg_PT12_Pn OR UPA_ANB.Pg_PT12_Pv;
UPA_PIR12_mb_AI_ToHMI.P_SR.as := UPA_ANB.Pg_PT12_Av;
//= ПИР13
UPA_ANB.Pg_PT13_Pn:= ANB_Processing(UPA_Ust.Pg_PT13_Pn, UPA_PIR13_mb_AI_ToHMI.P_SR.PV, UPA_PIR13_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT13_Pn, UPA_ANB_Internal.Pg_PT13_Pn);// Пониженное давление газа на скважине 13Т 
UPA_ANB.Pg_PT13_Pv:= ANB_Processing(UPA_Ust.Pg_PT13_Pv, UPA_PIR13_mb_AI_ToHMI.P_SR.PV, UPA_PIR13_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT13_Pv, UPA_ANB_Internal.Pg_PT13_Pv);// Повышенное давление газа на скважине 13Т 
UPA_ANB.Pg_PT13_Av:= ANB_Processing(UPA_Ust.Pg_PT13_Av, UPA_PIR13_mb_AI_ToHMI.P_SR.PV, UPA_PIR13_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT13_Av, UPA_ANB_Internal.Pg_PT13_Av);// Высокое давление газа на скважине 13Т 
UPA_PIR13_mb_AI_ToHMI.P_SR.ps := UPA_ANB.Pg_PT13_Pn OR UPA_ANB.Pg_PT13_Pv;
UPA_PIR13_mb_AI_ToHMI.P_SR.as := UPA_ANB.Pg_PT13_Av;
//= ПИР14
UPA_ANB.Pg_PT14_Pn:= ANB_Processing(UPA_Ust.Pg_PT14_Pn, UPA_PIR14_mb_AI_ToHMI.P_SR.PV, UPA_PIR14_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT14_Pn, UPA_ANB_Internal.Pg_PT14_Pn);// Пониженное давление газа на скважине 14Т 
UPA_ANB.Pg_PT14_Pv:= ANB_Processing(UPA_Ust.Pg_PT14_Pv, UPA_PIR14_mb_AI_ToHMI.P_SR.PV, UPA_PIR14_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT14_Pv, UPA_ANB_Internal.Pg_PT14_Pv);// Повышенное давление газа на скважине 14Т 
UPA_ANB.Pg_PT14_Av:= ANB_Processing(UPA_Ust.Pg_PT14_Av, UPA_PIR14_mb_AI_ToHMI.P_SR.PV, UPA_PIR14_mb_AI_ToHMI.P_SR.fault_common, UPA_ANB_Settings.Pg_PT14_Av, UPA_ANB_Internal.Pg_PT14_Av);// Высокое давление газа на скважине 14Т 
UPA_PIR14_mb_AI_ToHMI.P_SR.ps := UPA_ANB.Pg_PT14_Pn OR UPA_ANB.Pg_PT14_Pv;
UPA_PIR14_mb_AI_ToHMI.P_SR.as := UPA_ANB.Pg_PT14_Av;

//======================== температура
//= ПИР1
UPA_ANB.Tg_TE1_Pn:= ANB_Processing(UPA_Ust.Tg_TE1_Pn, UPA_PIR1_mb_AI_ToHMI.T_SR.PV, UPA_PIR1_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE1_Pn, UPA_ANB_Internal.Tg_TE1_Pn);// Низкая температура газа на скважине 1Т 
UPA_ANB.Tg_TE1_Pv:= ANB_Processing(UPA_Ust.Tg_TE1_Pv, UPA_PIR1_mb_AI_ToHMI.T_SR.PV, UPA_PIR1_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE1_Pv, UPA_ANB_Internal.Tg_TE1_Pv);// Высокая температура газа на скважине 1Т 
UPA_PIR1_mb_AI_ToHMI.T_SR.ps := UPA_ANB.Tg_TE1_Pn OR UPA_ANB.Tg_TE1_Pv;
//= ПИР2
UPA_ANB.Tg_TE2_Pn:= ANB_Processing(UPA_Ust.Tg_TE2_Pn, UPA_PIR2_mb_AI_ToHMI.T_SR.PV, UPA_PIR2_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE2_Pn, UPA_ANB_Internal.Tg_TE2_Pn);// Низкая температура газа на скважине 2Т 
UPA_ANB.Tg_TE2_Pv:= ANB_Processing(UPA_Ust.Tg_TE2_Pv, UPA_PIR2_mb_AI_ToHMI.T_SR.PV, UPA_PIR2_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE2_Pv, UPA_ANB_Internal.Tg_TE2_Pv);// Высокая температура газа на скважине 2Т 
UPA_PIR2_mb_AI_ToHMI.T_SR.ps := UPA_ANB.Tg_TE2_Pn OR UPA_ANB.Tg_TE2_Pv;
//= ПИР3
UPA_ANB.Tg_TE3_Pn:= ANB_Processing(UPA_Ust.Tg_TE3_Pn, UPA_PIR3_mb_AI_ToHMI.T_SR.PV, UPA_PIR3_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE3_Pn, UPA_ANB_Internal.Tg_TE3_Pn);// Низкая температура газа на скважине 3Т 
UPA_ANB.Tg_TE3_Pv:= ANB_Processing(UPA_Ust.Tg_TE3_Pv, UPA_PIR3_mb_AI_ToHMI.T_SR.PV, UPA_PIR3_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE3_Pv, UPA_ANB_Internal.Tg_TE3_Pv);// Высокая температура газа на скважине 3Т 
UPA_PIR3_mb_AI_ToHMI.T_SR.ps := UPA_ANB.Tg_TE3_Pn OR UPA_ANB.Tg_TE3_Pv;
//= ПИР4
UPA_ANB.Tg_TE4_Pn:= ANB_Processing(UPA_Ust.Tg_TE4_Pn, UPA_PIR4_mb_AI_ToHMI.T_SR.PV, UPA_PIR4_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE4_Pn, UPA_ANB_Internal.Tg_TE4_Pn);// Низкая температура газа на скважине 4Т 
UPA_ANB.Tg_TE4_Pv:= ANB_Processing(UPA_Ust.Tg_TE4_Pv, UPA_PIR4_mb_AI_ToHMI.T_SR.PV, UPA_PIR4_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE4_Pv, UPA_ANB_Internal.Tg_TE4_Pv);// Высокая температура газа на скважине 4Т 
UPA_PIR4_mb_AI_ToHMI.T_SR.ps := UPA_ANB.Tg_TE4_Pn OR UPA_ANB.Tg_TE4_Pv;
//= ПИР5
UPA_ANB.Tg_TE5_Pn:= ANB_Processing(UPA_Ust.Tg_TE5_Pn, UPA_PIR5_mb_AI_ToHMI.T_SR.PV, UPA_PIR5_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE5_Pn, UPA_ANB_Internal.Tg_TE5_Pn);// Низкая температура газа на скважине 5Т 
UPA_ANB.Tg_TE5_Pv:= ANB_Processing(UPA_Ust.Tg_TE5_Pv, UPA_PIR5_mb_AI_ToHMI.T_SR.PV, UPA_PIR5_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE5_Pv, UPA_ANB_Internal.Tg_TE5_Pv);// Высокая температура газа на скважине 5Т 
UPA_PIR5_mb_AI_ToHMI.T_SR.ps := UPA_ANB.Tg_TE5_Pn OR UPA_ANB.Tg_TE5_Pv;
//= ПИР6
UPA_ANB.Tg_TE6_Pn:= ANB_Processing(UPA_Ust.Tg_TE6_Pn, UPA_PIR6_mb_AI_ToHMI.T_SR.PV, UPA_PIR6_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE6_Pn, UPA_ANB_Internal.Tg_TE6_Pn);// Низкая температура газа на скважине 6Т 
UPA_ANB.Tg_TE6_Pv:= ANB_Processing(UPA_Ust.Tg_TE6_Pv, UPA_PIR6_mb_AI_ToHMI.T_SR.PV, UPA_PIR6_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE6_Pv, UPA_ANB_Internal.Tg_TE6_Pv);// Высокая температура газа на скважине 6Т 
UPA_PIR6_mb_AI_ToHMI.T_SR.ps := UPA_ANB.Tg_TE6_Pn OR UPA_ANB.Tg_TE6_Pv;
//= ПИР7
UPA_ANB.Tg_TE7_Pn:= ANB_Processing(UPA_Ust.Tg_TE7_Pn, UPA_PIR7_mb_AI_ToHMI.T_SR.PV, UPA_PIR7_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE7_Pn, UPA_ANB_Internal.Tg_TE7_Pn);// Низкая температура газа на скважине 7Т 
UPA_ANB.Tg_TE7_Pv:= ANB_Processing(UPA_Ust.Tg_TE7_Pv, UPA_PIR7_mb_AI_ToHMI.T_SR.PV, UPA_PIR7_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE7_Pv, UPA_ANB_Internal.Tg_TE7_Pv);// Высокая температура газа на скважине 7Т 
UPA_PIR7_mb_AI_ToHMI.T_SR.ps := UPA_ANB.Tg_TE7_Pn OR UPA_ANB.Tg_TE7_Pv;
//= ПИР8
UPA_ANB.Tg_TE8_Pn:= ANB_Processing(UPA_Ust.Tg_TE8_Pn, UPA_PIR8_mb_AI_ToHMI.T_SR.PV, UPA_PIR8_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE8_Pn, UPA_ANB_Internal.Tg_TE8_Pn);// Низкая температура газа на скважине 8Т 
UPA_ANB.Tg_TE8_Pv:= ANB_Processing(UPA_Ust.Tg_TE8_Pv, UPA_PIR8_mb_AI_ToHMI.T_SR.PV, UPA_PIR8_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE8_Pv, UPA_ANB_Internal.Tg_TE8_Pv);// Высокая температура газа на скважине 8Т 
UPA_PIR8_mb_AI_ToHMI.T_SR.ps := UPA_ANB.Tg_TE8_Pn OR UPA_ANB.Tg_TE8_Pv;
//= ПИР9
UPA_ANB.Tg_TE9_Pn:= ANB_Processing(UPA_Ust.Tg_TE9_Pn, UPA_PIR9_mb_AI_ToHMI.T_SR.PV, UPA_PIR9_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE9_Pn, UPA_ANB_Internal.Tg_TE9_Pn);// Низкая температура газа на скважине 9Т 
UPA_ANB.Tg_TE9_Pv:= ANB_Processing(UPA_Ust.Tg_TE9_Pv, UPA_PIR9_mb_AI_ToHMI.T_SR.PV, UPA_PIR9_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE9_Pv, UPA_ANB_Internal.Tg_TE9_Pv);// Высокая температура газа на скважине 9Т 
UPA_PIR9_mb_AI_ToHMI.T_SR.ps := UPA_ANB.Tg_TE9_Pn OR UPA_ANB.Tg_TE9_Pv;
//= ПИР10
UPA_ANB.Tg_TE10_Pn:= ANB_Processing(UPA_Ust.Tg_TE10_Pn, UPA_PIR10_mb_AI_ToHMI.T_SR.PV, UPA_PIR10_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE10_Pn, UPA_ANB_Internal.Tg_TE10_Pn);// Низкая температура газа на скважине 10Т 
UPA_ANB.Tg_TE10_Pv:= ANB_Processing(UPA_Ust.Tg_TE10_Pv, UPA_PIR10_mb_AI_ToHMI.T_SR.PV, UPA_PIR10_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE10_Pv, UPA_ANB_Internal.Tg_TE10_Pv);// Высокая температура газа на скважине 10Т 
UPA_PIR10_mb_AI_ToHMI.T_SR.ps := UPA_ANB.Tg_TE10_Pn OR UPA_ANB.Tg_TE10_Pv;
//= ПИР11
UPA_ANB.Tg_TE11_Pn:= ANB_Processing(UPA_Ust.Tg_TE11_Pn, UPA_PIR11_mb_AI_ToHMI.T_SR.PV, UPA_PIR11_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE11_Pn, UPA_ANB_Internal.Tg_TE11_Pn);// Низкая температура газа на скважине 11Т 
UPA_ANB.Tg_TE11_Pv:= ANB_Processing(UPA_Ust.Tg_TE11_Pv, UPA_PIR11_mb_AI_ToHMI.T_SR.PV, UPA_PIR11_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE11_Pv, UPA_ANB_Internal.Tg_TE11_Pv);// Высокая температура газа на скважине 11Т 
UPA_PIR11_mb_AI_ToHMI.T_SR.ps := UPA_ANB.Tg_TE11_Pn OR UPA_ANB.Tg_TE11_Pv;
//= ПИР12
UPA_ANB.Tg_TE12_Pn:= ANB_Processing(UPA_Ust.Tg_TE12_Pn, UPA_PIR12_mb_AI_ToHMI.T_SR.PV, UPA_PIR12_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE12_Pn, UPA_ANB_Internal.Tg_TE12_Pn);// Низкая температура газа на скважине 12Т 
UPA_ANB.Tg_TE12_Pv:= ANB_Processing(UPA_Ust.Tg_TE12_Pv, UPA_PIR12_mb_AI_ToHMI.T_SR.PV, UPA_PIR12_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE12_Pv, UPA_ANB_Internal.Tg_TE12_Pv);// Высокая температура газа на скважине 12Т 
UPA_PIR12_mb_AI_ToHMI.T_SR.ps := UPA_ANB.Tg_TE12_Pn OR UPA_ANB.Tg_TE12_Pv;
//= ПИР13
UPA_ANB.Tg_TE13_Pn:= ANB_Processing(UPA_Ust.Tg_TE13_Pn, UPA_PIR13_mb_AI_ToHMI.T_SR.PV, UPA_PIR13_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE13_Pn, UPA_ANB_Internal.Tg_TE13_Pn);// Низкая температура газа на скважине 13Т 
UPA_ANB.Tg_TE13_Pv:= ANB_Processing(UPA_Ust.Tg_TE13_Pv, UPA_PIR13_mb_AI_ToHMI.T_SR.PV, UPA_PIR13_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE13_Pv, UPA_ANB_Internal.Tg_TE13_Pv);// Высокая температура газа на скважине 13Т 
UPA_PIR13_mb_AI_ToHMI.T_SR.ps := UPA_ANB.Tg_TE13_Pn OR UPA_ANB.Tg_TE13_Pv;
//= ПИР14
UPA_ANB.Tg_TE14_Pn:= ANB_Processing(UPA_Ust.Tg_TE14_Pn, UPA_PIR14_mb_AI_ToHMI.T_SR.PV, UPA_PIR14_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE14_Pn, UPA_ANB_Internal.Tg_TE14_Pn);// Низкая температура газа на скважине 14Т 
UPA_ANB.Tg_TE14_Pv:= ANB_Processing(UPA_Ust.Tg_TE14_Pv, UPA_PIR14_mb_AI_ToHMI.T_SR.PV, UPA_PIR14_mb_AI_ToHMI.T_SR.fault_common, UPA_ANB_Settings.Tg_TE14_Pv, UPA_ANB_Internal.Tg_TE14_Pv);// Высокая температура газа на скважине 14Т 
UPA_PIR14_mb_AI_ToHMI.T_SR.ps := UPA_ANB.Tg_TE14_Pn OR UPA_ANB.Tg_TE14_Pv;]]></ST>
                    </Function>
                    <Function UUID="XYBPO55BLI4UPLMLN7IPM2G3AE" Name="ANB_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="NGTALOKOFQQEJCXFO5K2WRVOEM" Name="limit" Comment="порог срабатывания" Type="REAL" Usage="input" />
                            <Variable UUID="OYP2F37VW5REJFKT3KXRET4S3M" Name="anp" Type="REAL" Usage="input" />
                            <Variable UUID="QHRSZQ2O22ZUDO3RO7LZCS7TCQ" Name="fault" Type="BOOL" Usage="input" />
                            <Variable UUID="XZFZFVGE5NOUHBKTICGTXHSDWI" Name="set" Type="T_ANB_Settings" TypeUUID="I7SVZ4ZR3CPE7BHJZXJTI4JZXI" Usage="input" />
                            <Variable UUID="6A7WAZF3BDRUBOHX4IKMI5L3CY" Name="timer" Type="REAL" Usage="inout" />
                        </Variables>
                        <ST><![CDATA[if fault then
	if    set.setForFault = 0 then ANB_Processing := false;
	elsif set.setForFault = 1 then ANB_Processing := true; 
	end_if;
else
	if anp < limit xor set.isUp then
		timer := timer + tim.cycle;
	else
		timer := 0.0;
	end_if;
	ANB_Processing := timer >(*=*) set.delay; //= неравенство д.б. строгим
(*anp.ps := ANB_Processing and set.tip = 1;
anp.as := ANB_Processing and set.tip = 2; 
anp.os := ANB_Processing and set.tip = 3; 
*)
end_if;]]></ST>
                    </Function>
                    <Function UUID="QLH3Q4CCZZNUZDE6GAV5NNELHQ" Name="ANB_init" ResultTypeUUID="I7SVZ4ZR3CPE7BHJZXJTI4JZXI">
                        <Variables>
                            <Variable UUID="J3PMJZQQPFCKTLXZKHCSBVW2FY" Name="setForFault" Type="INT" Usage="input" />
                            <Variable UUID="PPFZBCEPQNDGDPXS4GFZ5DG2R4" Name="isUp" Type="BOOL" Usage="input" />
                            <Variable UUID="YGKONKKT2ZACFPHVF5HQIODJOQ" Name="delay" Type="REAL" Usage="input" />
                        </Variables>
                        <ST><![CDATA[//setStruct.spVal := spVal;//значения уставки
ANB_init.setForFault := setForFault;//значение, записываемое в ANB при неисправности канала: 0 - FALSE, 1 - TRUE, 2 - оставить то что было
ANB_init.isUp := isUp;//направление срабатывания. TRUE - верхняя, FALSE - нижняя
ANB_init.delay := delay;//задержка на срабатывание
//ANB_init.tip := tip; // тип уставки (1 ПС, 2 АС, 3 ОС)]]></ST>
                    </Function>
                </Folder>
                <Function UUID="FRQ7F67BQNBCDLLM53Q4UKPGR4" Name="AI_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="L27BSM7XEZH7PBAFCWXQPDPAHM" Name="in" Type="REAL" Usage="input" />
                        <Variable UUID="3RRZ672T65H27KGUANWIHJUTAQ" Name="set" Type="T_AI_Settings" TypeUUID="XHUY6ZRHGRQEVOF35XEJI5L2SE" Usage="input" />
                        <Variable UUID="6GENIMNWPJBGLDUSADU5POKSIU" Name="btn" Type="T_AI_FromHMI" TypeUUID="VZ3H6GEVT3CUTI65HAA5AALRAY" Usage="input" />
                        <Variable UUID="2ISD2SFA6RHOVBLDUJA43YIYKA" Name="out" Type="T_AI_ToHMI" TypeUUID="J74RQIZG5I6EZDCM32A6SZRKIM" Usage="inout" />
                        <Variable UUID="KNUNDWLBWVFKTOYD3CUNK54D2I" Name="my" Type="T_AI_Internal" TypeUUID="GZ6UU5D6R5EXXPFY4TZ3EOTECU" Usage="inout" />
                        <Variable UUID="Z3VWPXEY7ZHYHLOJY634T36OTI" Name="tmp" Type="INT" Usage="internal" />
                        <Variable UUID="3JRCDCALYZAKDD252W6PF3GDLA" Name="qCycleCheckROC" Comment="Количество циклов контроля РОК" Type="INT" Usage="internal" />
                        <Variable UUID="5M2NFBWVLJEB5GONNQSVU37O3M" Name="tau" Type="REAL" Usage="internal" />
                        <Variable UUID="4FOVGDDSVNDJVMJ33BNQD4UHBQ" Name="criticalSettingErr" Type="BOOL" Usage="internal" />
                        <Variable UUID="SIMSIEIFINHRJIC55L2DCXT3CM" Name="limSettingErr" Type="BOOL" Usage="internal" />
                        <Variable UUID="BGOHZRGBKVHJFGQBERMGBC6VXU" Name="brkSettingErr" Type="BOOL" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[//---------------------- Поиск ошибок задания настроек – несоответствие допустимым значениям (BOOL)-----------------------------------------
criticalSettingErr := (set.min >= set.max or 
					set.minADC = set.maxADC or
					set.repairTime = 0 or set.recoveryTime < 0.0)  and not out.manual ;     //AKV
limSettingErr := (set.loLim >= set.hiLim or set.loLim >= set.max or set.hiLim <= set.min)  and not out.manual ;    //AKV
brkSettingErr := (set.hiBrk <= set.hiLim or set.loBrk >= set.loLim)  and not out.manual ;     //AKV
out.settingErr := criticalSettingErr or limSettingErr or brkSettingErr;
	out.fault_common := (out.settingErr or out.break or out.up_scale or out.down_scale or out.ROC)  and not out.manual ;  //AKV //обобщённая неисправность. Образуется по «ИЛИ» от break,up_scale,down_scale,ROC,settingErr (BOOL)
	out.criticalFault := (criticalSettingErr or out.break or out.ROC)  and not out.manual ;   //AKV //Критическая ошибка, свидетельствующая о полной неисправности канала

//---------------- таймер восстановления канала после неисправности или ремонта или ДУ ----------------------------------------------------------------
if not (criticalSettingErr or out.repair or out.manual) and my.prevFault then
	my.timerRecover := set.recoveryTime;
elsif my.timerRecover > 0.0 then
	my.timerRecover := my.timerRecover - tim.cycle;
else
	my.timerRecover := 0.0;
end_if;
my.prevFault := criticalSettingErr or out.repair or out.manual;
if criticalSettingErr then return; end_if; //Если есть ошибки настроек - прекращаем обработку
//---------------------------------------------------------------------------------------------------------------------------------------------
//----------------- Пересчёт парамера из кодов АЦП в единицы измерения -----------------------------------------------------------------------
out.measure := (in - set.minADC  + set.corrADC)/(set.maxADC - set.minADC)*(set.max - set.min)+set.min;//Пересчёт кода АЦП в инженерные единицы (REAL)
//---------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------- Определение обрыва и зашкалов -----------------------------------------------------------------------
if not brkSettingErr and not out.manual then    //AKV
	out.break      := out.break      and not btn.BTNworkOn or out.measure > set.hiBrk or out.measure < set.loBrk;	//обрыв канала (BOOL)
	elsif out.manual then
		out.break      := false;

end_if;
if not limSettingErr and not out.manual then //AKV
	out.up_scale   := out.up_scale   and not btn.BTNworkOn or out.measure > set.hiLim;							//выход за верхний зашкал (BOOL)
	out.down_scale := out.down_scale and not btn.BTNworkOn or out.manual or out.measure < set.loLim;							//выход за нижний зашкал (BOOL)
		elsif out.manual then
			out.up_scale   :=false;
			out.down_scale :=false;

end_if;
//---------------------------------------------------------------------------------------------------------------------------------------------
//----------- Расчёт превышения максимальной скорости изменения парамера -----------------------------------------------------------------------
if set.maxROC > 0.0 and tim.cycle > 0.0 then //Работает только если макс.скорость задана и есть корректное время цикла
	qCycleCheckROC := 3; //Количество циклов подряд, когда скорость изменения параметра превышает заданный предел
	if (out.measure - my.prevMeasure)/tim.cycle > set.maxROC  then //если новый замер больше старого на заданную величину приведённую к времени цикла
		if    my.qCycleROC >= 0 and my.qCycleROC < qCycleCheckROC then my.qCycleROC := my.qCycleROC + 1; //и предыдущий тоже был больше или никаким - увеличиваем счётчик на 1
		elsif my.qCycleROC < 0 then my.qCycleROC := 1;														//если предыдущая проверка показала падение скорости - устанавливаем счётчик на 1
		end_if;
	elsif (my.prevMeasure - out.measure)/tim.cycle > set.maxROC then // то же делаем для отрицательной разницы
		if    my.qCycleROC <= 0 and my.qCycleROC > -qCycleCheckROC then my.qCycleROC := my.qCycleROC - 1;
		elsif my.qCycleROC < 0 then my.qCycleROC := -1;
		end_if;
	else
		my.qCycleROC := 0; 		//если скорость в норме - обнуляем счётчик превышений подряд
								//и, если таймер восстановления не запущен, запоминаем достоверное значение
		//------- Обработка вывода канала в работу ----------------------------------------------------------------------------------------------------------
		if my.timerRecover <= 0.0 then my.validMeasure := out.measure;
		else my.validMeasure := my.validMeasure + (out.measure - my.validMeasure)*(set.recoveryTime - my.timerRecover + 1.0)/(set.recoveryTime + 1.0);
		end_if;
	end_if;
else
	//------- Обработка вывода канала в работу ----------------------------------------------------------------------------------------------------------
	if my.timerRecover <= 0.0 then my.validMeasure := out.measure;
	else my.validMeasure := my.validMeasure + (out.measure - my.validMeasure)*(set.recoveryTime - my.timerRecover + 1.0)/(set.recoveryTime + 1.0);
	end_if;
end_if;
//Если количество циклов с превышением скорости больше заданного количества, неисправность запоминаем до нажатия кнопки "в работу"
//= out.ROC := out.ROC and not btn.BTNworkOn or (my.qCycleROC >= qCycleCheckROC) or (my.qCycleROC <= -qCycleCheckROC);
out.ROC := (out.ROC and not btn.BTNworkOn or (my.qCycleROC >= qCycleCheckROC) or (my.qCycleROC <= -qCycleCheckROC)) and set.maxROC > 0.0;//=
my.prevMeasure := out.measure; //запоминаем предыдущее измерение.
//------------------------------------------------------------------------------------------------------------------------------------------------
out.repair := (btn.BTNrepairOn or out.repair) and not(btn.BTNworkOn or btn.BTNmanualOn or out.CurrentTimeOfRepair > set.repairTime);//канал в ремонте (BOOL)
out.manual := (btn.BTNmanualOn or out.manual) and not(btn.BTNworkOn or btn.BTNrepairOn);//канал в дист.упр. (BOOL)
//------------------- Обработка ремонта ----------------------------------------------------------------------------------------------------------
if out.repair and not btn.BTNrepairProlong then
	my.timerRepair := my.timerRepair + tim.cycle;//оставшееся время ремонта (INT)
else
	my.timerRepair := 0.0;
end_if;
tmp := set.repairTime - REAL_TO_INT(my.timerRepair);
if tmp >= 0 then out.CurrentTimeOfRepair := tmp;
else out.CurrentTimeOfRepair := 0;
end_if;
out.repair_time_less_10_percent := out.CurrentTimeOfRepair < set.repairTime/10;//до конца ремонта осталось меньше 10% от заданного времени (BOOL)
if out.repair then return; end_if; //если выставлен ремонт - не обновляем значение параметра для алгоритма
//------------------------------------------------------------------------------------------------------------------------------------------------
//------------------- Обработка ДУ ----------------------------------------------------------------------------------------------------------
if out.manual then
	my.validMeasure := btn.manualTarget;//значение для САУ. Рассчитывается из  measure, Manual_Target с учётом неисправностей и фильтрации (REAL)
else
	btn.manualTarget := my.validMeasure;
end_if;
//------------------------------------------------------------------------------------------------------------------------------------------------
//------------------- Расчёт PV ----------------------------------------------------------------------------------------------------------
//значение для САУ. Рассчитывается из  measure, Manual_Target с учётом неисправностей и фильтрации (REAL)
if tim.cycle > 0.0 then
	tau := 4.0 * set.tau/tim.cycle;
	if tau > 1.0 then
		out.PV := out.PV + (my.validMeasure - out.PV)/tau;
	else
		out.PV := my.validMeasure;
	end_if;
else
	out.PV := my.validMeasure;
end_if;
(*
set.min := ;//минимум шкалы канала, ед.изм. Не может быть >= max
set.max := ;//максимум шкалы канала, ед.изм. Не может быть <= min
set.loLim := ;//уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
set.hiLim := ;//уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
set.minADC := ;//значение АЦП, соответствующее минимуму шкалы канала, б.р.
set.maxADC := ;//значение АЦП, соотв. макс. шкалы, б.р. Не может быть равно minADC
set.minROC := ;//макс. допустимая скорость сниж. показаний, ед.изм./сек. Если «0» - скорость падения не анализируется
set.maxROC := ;//макс. допустимая скорость роста, ед.изм./сек. Если «0» - скорость роста не анализируется
set.ROC_time := ;//время, за которое анализируется скорость изменения, сек. Если «0» - скорость не анализируется
set.recoveryTime := ;//время восстановления после неисправности, сек. Не может быть < «0»
set.repairTime := ;//максимальное время в ремонте, сек. Не может быть «0»
set.tau := ;//тау фильтра, сек. Если «0» - фильтрация отсутствует
set.id := ;//номер по порядку
btn.manualTarget //Задание из ЧМИ
btn.BTNmanualOn //Кнопка вкл. задания значения из ЧМИ
btn.BTNrepairOn //Кнопка вкл. ремонта
btn.BTNworkOn //Кнопка перекл. в работу
btn.BTNrepairProlong //Кнопка продления ремонта
*)]]></ST>
                </Function>
                <Function UUID="CF4QENKSGJC3PJ2UNFRMVS5ILY" Name="AI_init" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="3PUM5EGSZZGW5B46GT7GJGJYHY" Name="setStruct" Type="T_AI_Settings" TypeUUID="XHUY6ZRHGRQEVOF35XEJI5L2SE" Usage="output" />
                        <Variable UUID="A4X47N4MTNEGBMHG5JCV54OYD4" Name="min" Type="REAL" Usage="input" />
                        <Variable UUID="J3PMJZQQPFCKTLXZKHCSBVW2FY" Name="max" Type="REAL" Usage="input" />
                        <Variable UUID="PPFZBCEPQNDGDPXS4GFZ5DG2R4" Name="minADC" Type="REAL" Usage="input" />
                        <Variable UUID="YGKONKKT2ZACFPHVF5HQIODJOQ" Name="maxADC" Type="REAL" Usage="input" />
                        <Variable UUID="SNMC52OSVNCEJC2WKNQ55IXRDU" Name="loLim" Type="REAL" Usage="input" />
                        <Variable UUID="C5FFNJBSORADZKDONAJYIOYQMM" Name="hiLim" Type="REAL" Usage="input" />
                        <Variable UUID="BLJ7QPD3B5GIFOK5INHVLE4N4M" Name="loBrk" Type="REAL" Usage="input" />
                        <Variable UUID="BRAZ2SPNOBCCNMKASNN375STCQ" Name="hiBrk" Type="REAL" Usage="input" />
                        <Variable UUID="A5ZCH4MWLNBG7GEVV73JJRNRZ4" Name="maxROC" Type="REAL" Usage="input" />
                        <Variable UUID="322VB4Q5PNEOBO55S4FRZSF2IQ" Name="recoveryTime" Type="REAL" Usage="input" />
                        <Variable UUID="UCAGZSJ77NAYTFYRM4N5QV62A4" Name="repairTime" Type="INT" Usage="input" />
                        <Variable UUID="3WUETIGW3VCGPPNXPQHEFM4NP4" Name="tau" Type="REAL" Usage="input" />
                        <Variable UUID="O2PSTUZUB5EIRAZBONFYBOPYXU" Name="id" Type="INT" Usage="input" />
                    </Variables>
                    <ST><![CDATA[setStruct.min:= min;//минимум шкалы канала, ед.изм. Не может быть >= max
setStruct.max:= max;//максимум шкалы канала, ед.изм. Не может быть <= min
setStruct.minADC:= minADC;//значение АЦП, соответствующее минимуму шкалы канала, б.р.
setStruct.maxADC:= maxADC;//значение АЦП, соотв. макс. шкалы, б.р. Не может быть равно minADC
setStruct.loLim:= loLim;//уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
setStruct.hiLim:= hiLim;//уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
setStruct.loBrk:= loBrk;//уровень зашкала вниз, ед.изм. Не может быть >= loLim
setStruct.hiBrk:= hiBrk;//уровень обрыва вверх, ед.изм. Не может быть <= hiLim
setStruct.maxROC:= maxROC;//макс. допустимая скорость роста, ед.изм./сек. Если «0» - скорость роста не анализируется
setStruct.recoveryTime:= recoveryTime;//время восстановления после неисправности, сек. Не может быть меньше "0"
setStruct.repairTime:= repairTime;//максимальное время в ремонте, сек. Не может быть меньше или равно «0»
setStruct.tau:= tau;//тау фильтра, сек. Если «0» - фильтрация отсутствует
setStruct.id:= id;//номер по порядку	
setStruct.corrADC:= 0.0;//корректировка минимумa АЦП
]]></ST>
                </Function>
                <Function UUID="TSL5H6ZEIRG4LLJTI6YGIGMSUU" Name="UPA_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="repTime" Type="INT" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[repTime := 3600;
if init = false then

//------------------------------- аргументы функции инициализации --------------------------------
//минимум шкалы канала, ед.изм. Не может быть >= max
//максимум шкалы канала, ед.изм. Не может быть <= min
//значение АЦП, соответствующее минимуму шкалы канала, б.р.
//значение АЦП, соотв. макс. шкалы, б.р. Не может быть равно minADC
//уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
//уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
//уровень зашкала вниз, ед.изм. Не может быть >= loLim
//уровень обрыва вверх, ед.изм. Не может быть <= hiLim
//макс. допустимая скорость роста, ед.изм./сек. Если «0» - скорость роста не анализируется
//время восстановления после неисправности, сек. Не может быть меньше "0"
//максимальное время в ремонте, сек. Не может быть меньше или равно «0»
//тау фильтра, сек. Если «0» - фильтрация отсутствует
//номер по порядку	
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Расход компримируемого газа по скважине 1Т
AI_init(UPA_AI_Settings.Qg_1T,2.0,12.0,11773.0,59714.0,1.7,12.3,1.4,12.6,0.0,1.0,repTime,1.0,0);
//Расход компримируемого газа по скважине 2Т
AI_init(UPA_AI_Settings.Qg_2T,2.0,12.0,11773.0,59714.0,1.7,12.3,1.4,12.6,0.0,1.0,repTime,1.0,1);
//Расход компримируемого газа по скважине 3Т
AI_init(UPA_AI_Settings.Qg_3T,2.0,12.0,11773.0,59714.0,1.7,12.3,1.4,12.6,0.0,1.0,repTime,1.0,2);
//Расход компримируемого газа по скважине 4Т
AI_init(UPA_AI_Settings.Qg_4T,2.0,12.0,11773.0,59714.0,1.7,12.3,1.4,12.6,0.0,1.0,repTime,1.0,3);
//Расход компримируемого газа по скважине 5Т
AI_init(UPA_AI_Settings.Qg_5T,2.0,12.0,11773.0,59714.0,1.7,12.3,1.4,12.6,0.0,1.0,repTime,1.0,4);
//Расход компримируемого газа по скважине 6Т
AI_init(UPA_AI_Settings.Qg_6T,2.0,12.0,11773.0,59714.0,1.7,12.3,1.4,12.6,0.0,1.0,repTime,1.0,5);
//Расход компримируемого газа по скважине 7Т
AI_init(UPA_AI_Settings.Qg_7T,2.0,12.0,11773.0,59714.0,1.7,12.3,1.4,12.6,0.0,1.0,repTime,1.0,6);
//Расход компримируемого газа по скважине 8Т
AI_init(UPA_AI_Settings.Qg_8T,2.0,12.0,11773.0,59714.0,1.7,12.3,1.4,12.6,0.0,1.0,repTime,1.0,7);
//Расход компримируемого газа по скважине 9Т
AI_init(UPA_AI_Settings.Qg_9T,2.0,12.0,11773.0,59714.0,1.7,12.3,1.4,12.6,0.0,1.0,repTime,1.0,8);
//Расход компримируемого газа по скважине 10Т
AI_init(UPA_AI_Settings.Qg_10T,2.0,12.0,11773.0,59714.0,1.7,12.3,1.4,12.6,0.0,1.0,repTime,1.0,9);
//Расход компримируемого газа по скважине 11Т
AI_init(UPA_AI_Settings.Qg_11T,2.0,12.0,11773.0,59714.0,1.7,12.3,1.4,12.6,0.0,1.0,repTime,1.0,10);
//Расход компримируемого газа по скважине 12Т
AI_init(UPA_AI_Settings.Qg_12T,2.0,12.0,11773.0,59714.0,1.7,12.3,1.4,12.6,0.0,1.0,repTime,1.0,11);
//Расход компримируемого газа по скважине 13Т
AI_init(UPA_AI_Settings.Qg_13T,2.0,12.0,11773.0,59714.0,1.7,12.3,1.4,12.6,0.0,1.0,repTime,1.0,12);
//Расход компримируемого газа по скважине 14Т
AI_init(UPA_AI_Settings.Qg_14T,2.0,12.0,11773.0,59714.0,1.7,12.3,1.4,12.6,0.0,1.0,repTime,1.0,13);
//Давление газа в коллекторе газа
AI_init(UPA_AI_Settings.Pg_Kol,0.0,16.0,11773.0,59714.0,-0.48,16.48,-0.96,16.96,0.0,1.0,repTime,1.0,14);
//Температура воздуха в ББ САУ УПА
AI_init(UPA_AI_Settings.T_BB_UPA,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,15);
//Резерв
AI_init(UPA_AI_Settings.Res_0,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,16);
//Резерв
AI_init(UPA_AI_Settings.Res_1,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,17);
//Резерв
AI_init(UPA_AI_Settings.Res_2,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,18);
//Резерв
AI_init(UPA_AI_Settings.Res_3,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,19);
//Измерение основного напряжения
AI_init(UPA_AI_Settings.Uosn_SAU,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,20);
//Измерение резервного напряжения
AI_init(UPA_AI_Settings.Urez_SAU,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,21);
//Резерв
AI_init(UPA_AI_Settings.Res_4,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,22);
//Резерв
AI_init(UPA_AI_Settings.Res_5,4.0,20.0,11773.0,59714.0,3.52,20.48,3.04,20.96,0.0,1.0,repTime,1.0,23);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Расход компримируемого газа по скважине 1Т
AI_Processing(UPA_AI_DRV.Qg_1T,UPA_AI_Settings.Qg_1T,UPA_AI_FromHMI.Qg_1T,UPA_AI_ToHMI.Qg_1T,UPA_AI_Internal.Qg_1T);
//Расход компримируемого газа по скважине 2Т
AI_Processing(UPA_AI_DRV.Qg_2T,UPA_AI_Settings.Qg_2T,UPA_AI_FromHMI.Qg_2T,UPA_AI_ToHMI.Qg_2T,UPA_AI_Internal.Qg_2T);
//Расход компримируемого газа по скважине 3Т
AI_Processing(UPA_AI_DRV.Qg_3T,UPA_AI_Settings.Qg_3T,UPA_AI_FromHMI.Qg_3T,UPA_AI_ToHMI.Qg_3T,UPA_AI_Internal.Qg_3T);
//Расход компримируемого газа по скважине 4Т
AI_Processing(UPA_AI_DRV.Qg_4T,UPA_AI_Settings.Qg_4T,UPA_AI_FromHMI.Qg_4T,UPA_AI_ToHMI.Qg_4T,UPA_AI_Internal.Qg_4T);
//Расход компримируемого газа по скважине 5Т
AI_Processing(UPA_AI_DRV.Qg_5T,UPA_AI_Settings.Qg_5T,UPA_AI_FromHMI.Qg_5T,UPA_AI_ToHMI.Qg_5T,UPA_AI_Internal.Qg_5T);
//Расход компримируемого газа по скважине 6Т
AI_Processing(UPA_AI_DRV.Qg_6T,UPA_AI_Settings.Qg_6T,UPA_AI_FromHMI.Qg_6T,UPA_AI_ToHMI.Qg_6T,UPA_AI_Internal.Qg_6T);
//Расход компримируемого газа по скважине 7Т
AI_Processing(UPA_AI_DRV.Qg_7T,UPA_AI_Settings.Qg_7T,UPA_AI_FromHMI.Qg_7T,UPA_AI_ToHMI.Qg_7T,UPA_AI_Internal.Qg_7T);
//Расход компримируемого газа по скважине 8Т
AI_Processing(UPA_AI_DRV.Qg_8T,UPA_AI_Settings.Qg_8T,UPA_AI_FromHMI.Qg_8T,UPA_AI_ToHMI.Qg_8T,UPA_AI_Internal.Qg_8T);
//Расход компримируемого газа по скважине 9Т
AI_Processing(UPA_AI_DRV.Qg_9T,UPA_AI_Settings.Qg_9T,UPA_AI_FromHMI.Qg_9T,UPA_AI_ToHMI.Qg_9T,UPA_AI_Internal.Qg_9T);
//Расход компримируемого газа по скважине 10Т
AI_Processing(UPA_AI_DRV.Qg_10T,UPA_AI_Settings.Qg_10T,UPA_AI_FromHMI.Qg_10T,UPA_AI_ToHMI.Qg_10T,UPA_AI_Internal.Qg_10T);
//Расход компримируемого газа по скважине 11Т
AI_Processing(UPA_AI_DRV.Qg_11T,UPA_AI_Settings.Qg_11T,UPA_AI_FromHMI.Qg_11T,UPA_AI_ToHMI.Qg_11T,UPA_AI_Internal.Qg_11T);
//Расход компримируемого газа по скважине 12Т
AI_Processing(UPA_AI_DRV.Qg_12T,UPA_AI_Settings.Qg_12T,UPA_AI_FromHMI.Qg_12T,UPA_AI_ToHMI.Qg_12T,UPA_AI_Internal.Qg_12T);
//Расход компримируемого газа по скважине 13Т
AI_Processing(UPA_AI_DRV.Qg_13T,UPA_AI_Settings.Qg_13T,UPA_AI_FromHMI.Qg_13T,UPA_AI_ToHMI.Qg_13T,UPA_AI_Internal.Qg_13T);
//Расход компримируемого газа по скважине 14Т
AI_Processing(UPA_AI_DRV.Qg_14T,UPA_AI_Settings.Qg_14T,UPA_AI_FromHMI.Qg_14T,UPA_AI_ToHMI.Qg_14T,UPA_AI_Internal.Qg_14T);
//Давление газа в коллекторе газа
AI_Processing(UPA_AI_DRV.Pg_Kol,UPA_AI_Settings.Pg_Kol,UPA_AI_FromHMI.Pg_Kol,UPA_AI_ToHMI.Pg_Kol,UPA_AI_Internal.Pg_Kol);
//Температура воздуха в ББ САУ УПА
AI_Processing(UPA_AI_DRV.T_BB_UPA,UPA_AI_Settings.T_BB_UPA,UPA_AI_FromHMI.T_BB_UPA,UPA_AI_ToHMI.T_BB_UPA,UPA_AI_Internal.T_BB_UPA);
//Резерв
AI_Processing(UPA_AI_DRV.Res_0,UPA_AI_Settings.Res_0,UPA_AI_FromHMI.Res_0,UPA_AI_ToHMI.Res_0,UPA_AI_Internal.Res_0);
//Резерв
AI_Processing(UPA_AI_DRV.Res_1,UPA_AI_Settings.Res_1,UPA_AI_FromHMI.Res_1,UPA_AI_ToHMI.Res_1,UPA_AI_Internal.Res_1);
//Резерв
AI_Processing(UPA_AI_DRV.Res_2,UPA_AI_Settings.Res_2,UPA_AI_FromHMI.Res_2,UPA_AI_ToHMI.Res_2,UPA_AI_Internal.Res_2);
//Резерв
AI_Processing(UPA_AI_DRV.Res_3,UPA_AI_Settings.Res_3,UPA_AI_FromHMI.Res_3,UPA_AI_ToHMI.Res_3,UPA_AI_Internal.Res_3);
//Измерение основного напряжения
AI_Processing(UPA_AI_DRV.Uosn_SAU,UPA_AI_Settings.Uosn_SAU,UPA_AI_FromHMI.Uosn_SAU,UPA_AI_ToHMI.Uosn_SAU,UPA_AI_Internal.Uosn_SAU);
//Измерение резервного напряжения
AI_Processing(UPA_AI_DRV.Urez_SAU,UPA_AI_Settings.Urez_SAU,UPA_AI_FromHMI.Urez_SAU,UPA_AI_ToHMI.Urez_SAU,UPA_AI_Internal.Urez_SAU);
//Резерв
AI_Processing(UPA_AI_DRV.Res_4,UPA_AI_Settings.Res_4,UPA_AI_FromHMI.Res_4,UPA_AI_ToHMI.Res_4,UPA_AI_Internal.Res_4);
//Резерв
AI_Processing(UPA_AI_DRV.Res_5,UPA_AI_Settings.Res_5,UPA_AI_FromHMI.Res_5,UPA_AI_ToHMI.Res_5,UPA_AI_Internal.Res_5);
//Конец сгенерированного кода
]]></ST>
                </Function>
            </Folder>
            <Folder Name="DI" Comment="" Data="" UUID="QRVJIJ5BTUJU5JVQ6JWP25IMQM">
                <Function UUID="P2XYAGEU5FGZTGPRCEWII4RCGE" Name="DI_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="L27BSM7XEZH7PBAFCWXQPDPAHM" Name="in" Type="BOOL" Usage="input" />
                        <Variable UUID="WHFS6UBDDVC7RDLEWVS6NYVJLQ" Name="externalFault" Type="BOOL" Usage="input" />
                        <Variable UUID="3RRZ672T65H27KGUANWIHJUTAQ" Name="set" Type="T_DI_Settings" TypeUUID="YYQ4LFBFOMREFPHHDI3SPZLDYM" Usage="input" />
                        <Variable UUID="6GENIMNWPJBGLDUSADU5POKSIU" Name="fromHMI" Type="T_DI_FromHMI" TypeUUID="CB63GVNINFXE5NDGOS62CUMGSY" Usage="inout" />
                        <Variable UUID="2ISD2SFA6RHOVBLDUJA43YIYKA" Name="toHMI" Type="T_DI_ToHMI" TypeUUID="GHOQ5H5MCDOEHDF2HTYC2D4HJI" Usage="inout" />
                        <Variable UUID="KNUNDWLBWVFKTOYD3CUNK54D2I" Name="my" Type="T_DI_Internal" TypeUUID="AZLZGZOBJZBF3NOVFVJWX37NVA" Usage="inout" />
                        <Variable UUID="BHQXJT3WMZFR5CMWIFB25VJNXQ" Name="out" Type="BOOL" Usage="inout" />
                        <Variable UUID="I6ZDT3YY5BCUHDXRDWGOOQPS74" Name="tmp" Type="INT" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[//---------------------- Поиск ошибок задания настроек – несоответствие допустимым значениям (BOOL)-----------------------------------------
toHMI.settingErr := set.repairTime = 0;
toHMI.fault_common := toHMI.settingErr or externalFault;//обобщённая неисправность. Образуется по «ИЛИ» от settingErr и неисправности цепи датчика
//---------------------------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------------------------------
toHMI.repair := (fromHMI.BTNrepairOn or toHMI.repair) and not(fromHMI.BTNworkOn or fromHMI.BTNmanualOn or toHMI.CurrentTimeOfRepair > set.repairTime);//канал в ремонте (BOOL)
toHMI.manual := (fromHMI.BTNmanualOn or toHMI.manual) and not(fromHMI.BTNworkOn or fromHMI.BTNrepairOn);//канал в дист.упр. (BOOL)
//------------------- Обработка ремонта ----------------------------------------------------------------------------------------------------------
if toHMI.repair and not fromHMI.BTNrepairProlong then
	my.timerRepair := my.timerRepair + tim.cycle;//оставшееся время ремонта (INT)
else
	my.timerRepair := 0.0;
end_if;
tmp := set.repairTime - REAL_TO_INT(my.timerRepair);
if(tmp >= 0) then toHMI.CurrentTimeOfRepair := tmp;
else toHMI.CurrentTimeOfRepair := 0;
end_if;
toHMI.repair_time_less_10_percent := toHMI.CurrentTimeOfRepair < set.repairTime/10;//до конца ремонта осталось меньше 10% от заданного времени (BOOL)
if toHMI.repair then return; end_if; //если выставлен ремонт - не обновляем значение параметра для алгоритма
//------------------------------------------------------------------------------------------------------------------------------------------------
fromHMI.BTNrepairOn := false;
fromHMI.BTNworkOn	:= false;
fromHMI.BTNmanualOn	:= false;
fromHMI.BTNrepairProlong := false;
//------------------- Обработка ДУ ----------------------------------------------------------------------------------------------------------
if toHMI.manual then
	out := fromHMI.manualTarget;	//значение для САУ. Рассчитывается из  measure, Manual_Target с учётом неисправностей и фильтрации (REAL)
	return; 					//дальнейшие вычисления не нужны
else
	fromHMI.manualTarget := out;
end_if;
//------------------------------------------------------------------------------------------------------------------------------------------------
//------------------- Расчёт PV ----------------------------------------------------------------------------------------------------------
//значение для САУ
if set.del = 0.0 then
	out := in;
else
    if not out and in and my.timerAntiTremor < set.del then// or not out and in then
        if my.timerAntiTremor < 0.0 then
            my.timerAntiTremor := 0.0;
        end_if;
        my.timerAntiTremor := my.timerAntiTremor + tim.cycle;
    elsif out and not in and my.timerAntiTremor > -set.del then// or not out and in then
        if my.timerAntiTremor > 0.0 then
            my.timerAntiTremor := 0.0;
        end_if;
        my.timerAntiTremor := my.timerAntiTremor - tim.cycle;
	else
		my.timerAntiTremor := 0.0;
    end_if;
    out := in and my.timerAntiTremor >= set.del or out and (in or my.timerAntiTremor > -set.del);
end_if;
//-----------------------------------------------------------------------------------------------------------------------------------
]]></ST>
                </Function>
                <Function UUID="HNOM4UHXFVC4LPCSJFKZTYGF74" Name="DI_init" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="3PUM5EGSZZGW5B46GT7GJGJYHY" Name="setStruct" Type="T_DI_Settings" TypeUUID="YYQ4LFBFOMREFPHHDI3SPZLDYM" Usage="output" />
                        <Variable UUID="UCAGZSJ77NAYTFYRM4N5QV62A4" Name="repairTime" Type="INT" Usage="input" />
                        <Variable UUID="3WUETIGW3VCGPPNXPQHEFM4NP4" Name="del" Type="REAL" Usage="input" />
                        <Variable UUID="DOVR3SXOLZGSNMUJFQXZNFY4WQ" Name="inv" Type="BOOL" Usage="input" />
                        <Variable UUID="O2PSTUZUB5EIRAZBONFYBOPYXU" Name="id" Type="INT" Usage="input" />
                    </Variables>
                    <ST><![CDATA[setStruct.del:= del;//задержка от дребезга
setStruct.repairTime:= repairTime;//максимальное время в ремонте, сек. Не может быть меньше или равно «0»
setStruct.inv:= inv;//признак инверсии
setStruct.id:= id;//номер по порядку	]]></ST>
                </Function>
                <Function UUID="WIBPCTGFJQWOUO7JPCQS4USVEI" Name="UPA_DI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="IPPP52UYWOXETJA3YKWVVFCKSM" Name="repTime" Type="INT" Usage="internal" />
                    </Variables>
                    <ST><![CDATA[repTime := 3600;
if init = false then

//---------------- аргументы функции инициализации --------------------------
//задержка от дребезга
//максимальное время в ремонте, сек. Не может быть меньше или равно «0»
//признак инверсии
//номер по порядку	
//---------------------------------------------------------------------
//Начало сгенерированного кода DI_init
//Кран 1Т-2  открыт
DI_init(UPA_DI_Settings.Kr_1T2_ON,repTime,0.0,false,0);
//Кран 1Т-2  закрыт
DI_init(UPA_DI_Settings.Kr_1T2_OF,repTime,0.0,false,1);
//Кран 2Т-2  открыт
DI_init(UPA_DI_Settings.Kr_2T2_ON,repTime,0.0,false,2);
//Кран 2Т-2  закрыт
DI_init(UPA_DI_Settings.Kr_2T2_OF,repTime,0.0,false,3);
//Кран 3Т-2  открыт
DI_init(UPA_DI_Settings.Kr_3T2_ON,repTime,0.0,false,4);
//Кран 3Т-2  закрыт
DI_init(UPA_DI_Settings.Kr_3T2_OF,repTime,0.0,false,5);
//Кран 4Т-2  открыт
DI_init(UPA_DI_Settings.Kr_4T2_ON,repTime,0.0,false,6);
//Кран 4Т-2  закрыт
DI_init(UPA_DI_Settings.Kr_4T2_OF,repTime,0.0,false,7);
//Кран 5Т-2  открыт
DI_init(UPA_DI_Settings.Kr_5T2_ON,repTime,0.0,false,8);
//Кран 5Т-2  закрыт
DI_init(UPA_DI_Settings.Kr_5T2_OF,repTime,0.0,false,9);
//Кран 6Т-2  открыт
DI_init(UPA_DI_Settings.Kr_6T2_ON,repTime,0.0,false,10);
//Кран 6Т-2  закрыт
DI_init(UPA_DI_Settings.Kr_6T2_OF,repTime,0.0,false,11);
//Кран 7Т-2  открыт
DI_init(UPA_DI_Settings.Kr_7T2_ON,repTime,0.0,false,12);
//Кран 7Т-2  закрыт
DI_init(UPA_DI_Settings.Kr_7T2_OF,repTime,0.0,false,13);
//Кран 8Т-2  открыт
DI_init(UPA_DI_Settings.Kr_8T2_ON,repTime,0.0,false,14);
//Кран 8Т-2  закрыт
DI_init(UPA_DI_Settings.Kr_8T2_OF,repTime,0.0,false,15);
//Кран 9Т-2  открыт
DI_init(UPA_DI_Settings.Kr_9T2_ON,repTime,0.0,false,16);
//Кран 9Т-2  закрыт
DI_init(UPA_DI_Settings.Kr_9T2_OF,repTime,0.0,false,17);
//Кран 10Т-2  открыт
DI_init(UPA_DI_Settings.Kr_10T2_ON,repTime,0.0,false,18);
//Кран 10Т-2  закрыт
DI_init(UPA_DI_Settings.Kr_10T2_OF,repTime,0.0,false,19);
//Кран 11Т-2  открыт
DI_init(UPA_DI_Settings.Kr_11T2_ON,repTime,0.0,false,20);
//Кран 11Т-2  закрыт
DI_init(UPA_DI_Settings.Kr_11T2_OF,repTime,0.0,false,21);
//Кран 12Т-2  открыт
DI_init(UPA_DI_Settings.Kr_12T2_ON,repTime,0.0,false,22);
//Кран 12Т-2  закрыт
DI_init(UPA_DI_Settings.Kr_12T2_OF,repTime,0.0,false,23);
//Кран 13Т-2  открыт
DI_init(UPA_DI_Settings.Kr_13T2_ON,repTime,0.0,false,24);
//Кран 13Т-2  закрыт
DI_init(UPA_DI_Settings.Kr_13T2_OF,repTime,0.0,false,25);
//Кран 14Т-2  открыт
DI_init(UPA_DI_Settings.Kr_14T2_ON,repTime,0.0,false,26);
//Кран 14Т-2  закрыт
DI_init(UPA_DI_Settings.Kr_14T2_OF,repTime,0.0,false,27);
//(Резерв)
DI_init(UPA_DI_Settings.Res_0,repTime,0.0,false,28);
//(Резерв)
DI_init(UPA_DI_Settings.Res_1,repTime,0.0,false,29);
//Влажность в ББ САУ УПА повышенная
DI_init(UPA_DI_Settings.Vlaga_BB_UPA_v,repTime,0.0,false,30);
//Дверь ББ САУ УПА открыта 
DI_init(UPA_DI_Settings.Dver_BB_UPA_open,repTime,0.0,false,31);
//(Резерв)
DI_init(UPA_DI_Settings.Res_2,repTime,0.0,false,32);
//(Резерв)
DI_init(UPA_DI_Settings.Res_3,repTime,0.0,false,33);
//(Резерв)
DI_init(UPA_DI_Settings.Res_4,repTime,0.0,false,34);
//(Резерв)
DI_init(UPA_DI_Settings.Res_5,repTime,0.0,false,35);
//(Резерв)
DI_init(UPA_DI_Settings.Res_6,repTime,0.0,false,36);
//(Резерв)
DI_init(UPA_DI_Settings.Res_7,repTime,0.0,false,37);
//(Резерв)
DI_init(UPA_DI_Settings.Res_8,repTime,0.0,false,38);
//(Резерв)
DI_init(UPA_DI_Settings.Res_9,repTime,0.0,false,39);
//(Резерв)
DI_init(UPA_DI_Settings.Res_10,repTime,0.0,false,40);
//(Резерв)
DI_init(UPA_DI_Settings.Res_11,repTime,0.0,false,41);
//(Резерв)
DI_init(UPA_DI_Settings.Res_12,repTime,0.0,false,42);
//(Резерв)
DI_init(UPA_DI_Settings.Res_13,repTime,0.0,false,43);
//(Резерв)
DI_init(UPA_DI_Settings.Res_14,repTime,0.0,false,44);
//(Резерв)
DI_init(UPA_DI_Settings.Res_15,repTime,0.0,false,45);
//(Резерв)
DI_init(UPA_DI_Settings.Res_16,repTime,0.0,false,46);
//(Резерв)
DI_init(UPA_DI_Settings.Res_17,repTime,0.0,false,47);
//Контроль основного питания ~220 В
DI_init(UPA_DI_Settings.Chk_AC220_SAU,repTime,0.0,false,48);
//Контроль резервного питания =220 В
DI_init(UPA_DI_Settings.Chk_DC220_SAU,repTime,0.0,false,49);
//Двери открыты
DI_init(UPA_DI_Settings.Cabin_open,repTime,0.0,false,50);
//Автоматы питания включены
DI_init(UPA_DI_Settings.QF_ON,repTime,0.0,false,51);
//Исправность осн. ИП =24В внутренних цепей
DI_init(UPA_DI_Settings.DC24osn_Int_ok,repTime,0.0,false,52);
//Исправность рез. ИП =24В внутренних цепей
DI_init(UPA_DI_Settings.DC24rez_Int_ok,repTime,0.0,false,53);
//Исправность осн. ИП =24В внешних цепей
DI_init(UPA_DI_Settings.DC24osn_Ext_ok,repTime,0.0,false,54);
//Исправность рез. ИП =24В внешних цепей
DI_init(UPA_DI_Settings.DC24rez_Ext_ok,repTime,0.0,false,55);
//(Резерв)
DI_init(UPA_DI_Settings.Res_18,repTime,0.0,false,56);
//(Резерв)
DI_init(UPA_DI_Settings.Res_19,repTime,0.0,false,57);
//(Резерв)
DI_init(UPA_DI_Settings.Res_20,repTime,0.0,false,58);
//(Резерв)
DI_init(UPA_DI_Settings.Res_21,repTime,0.0,false,59);
//(Резерв)
DI_init(UPA_DI_Settings.Res_22,repTime,0.0,false,60);
//(Резерв)
DI_init(UPA_DI_Settings.Res_23,repTime,0.0,false,61);
//(Резерв)
DI_init(UPA_DI_Settings.Res_24,repTime,0.0,false,62);
//(Резерв)
DI_init(UPA_DI_Settings.Res_25,repTime,0.0,false,63);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода DI_Processing
//Кран 1Т-2  открыт
DI_Processing(UPA_DI_DRV.Kr_1T2_ON,false,UPA_DI_Settings.Kr_1T2_ON,UPA_DI_FromHMI.Kr_1T2_ON,UPA_DI_ToHMI.Kr_1T2_ON,UPA_DI_Internal.Kr_1T2_ON,UPA_DI.Kr_1T2_ON);
//Кран 1Т-2  закрыт
DI_Processing(UPA_DI_DRV.Kr_1T2_OF,false,UPA_DI_Settings.Kr_1T2_OF,UPA_DI_FromHMI.Kr_1T2_OF,UPA_DI_ToHMI.Kr_1T2_OF,UPA_DI_Internal.Kr_1T2_OF,UPA_DI.Kr_1T2_OF);
//Кран 2Т-2  открыт
DI_Processing(UPA_DI_DRV.Kr_2T2_ON,false,UPA_DI_Settings.Kr_2T2_ON,UPA_DI_FromHMI.Kr_2T2_ON,UPA_DI_ToHMI.Kr_2T2_ON,UPA_DI_Internal.Kr_2T2_ON,UPA_DI.Kr_2T2_ON);
//Кран 2Т-2  закрыт
DI_Processing(UPA_DI_DRV.Kr_2T2_OF,false,UPA_DI_Settings.Kr_2T2_OF,UPA_DI_FromHMI.Kr_2T2_OF,UPA_DI_ToHMI.Kr_2T2_OF,UPA_DI_Internal.Kr_2T2_OF,UPA_DI.Kr_2T2_OF);
//Кран 3Т-2  открыт
DI_Processing(UPA_DI_DRV.Kr_3T2_ON,false,UPA_DI_Settings.Kr_3T2_ON,UPA_DI_FromHMI.Kr_3T2_ON,UPA_DI_ToHMI.Kr_3T2_ON,UPA_DI_Internal.Kr_3T2_ON,UPA_DI.Kr_3T2_ON);
//Кран 3Т-2  закрыт
DI_Processing(UPA_DI_DRV.Kr_3T2_OF,false,UPA_DI_Settings.Kr_3T2_OF,UPA_DI_FromHMI.Kr_3T2_OF,UPA_DI_ToHMI.Kr_3T2_OF,UPA_DI_Internal.Kr_3T2_OF,UPA_DI.Kr_3T2_OF);
//Кран 4Т-2  открыт
DI_Processing(UPA_DI_DRV.Kr_4T2_ON,false,UPA_DI_Settings.Kr_4T2_ON,UPA_DI_FromHMI.Kr_4T2_ON,UPA_DI_ToHMI.Kr_4T2_ON,UPA_DI_Internal.Kr_4T2_ON,UPA_DI.Kr_4T2_ON);
//Кран 4Т-2  закрыт
DI_Processing(UPA_DI_DRV.Kr_4T2_OF,false,UPA_DI_Settings.Kr_4T2_OF,UPA_DI_FromHMI.Kr_4T2_OF,UPA_DI_ToHMI.Kr_4T2_OF,UPA_DI_Internal.Kr_4T2_OF,UPA_DI.Kr_4T2_OF);
//Кран 5Т-2  открыт
DI_Processing(UPA_DI_DRV.Kr_5T2_ON,false,UPA_DI_Settings.Kr_5T2_ON,UPA_DI_FromHMI.Kr_5T2_ON,UPA_DI_ToHMI.Kr_5T2_ON,UPA_DI_Internal.Kr_5T2_ON,UPA_DI.Kr_5T2_ON);
//Кран 5Т-2  закрыт
DI_Processing(UPA_DI_DRV.Kr_5T2_OF,false,UPA_DI_Settings.Kr_5T2_OF,UPA_DI_FromHMI.Kr_5T2_OF,UPA_DI_ToHMI.Kr_5T2_OF,UPA_DI_Internal.Kr_5T2_OF,UPA_DI.Kr_5T2_OF);
//Кран 6Т-2  открыт
DI_Processing(UPA_DI_DRV.Kr_6T2_ON,false,UPA_DI_Settings.Kr_6T2_ON,UPA_DI_FromHMI.Kr_6T2_ON,UPA_DI_ToHMI.Kr_6T2_ON,UPA_DI_Internal.Kr_6T2_ON,UPA_DI.Kr_6T2_ON);
//Кран 6Т-2  закрыт
DI_Processing(UPA_DI_DRV.Kr_6T2_OF,false,UPA_DI_Settings.Kr_6T2_OF,UPA_DI_FromHMI.Kr_6T2_OF,UPA_DI_ToHMI.Kr_6T2_OF,UPA_DI_Internal.Kr_6T2_OF,UPA_DI.Kr_6T2_OF);
//Кран 7Т-2  открыт
DI_Processing(UPA_DI_DRV.Kr_7T2_ON,false,UPA_DI_Settings.Kr_7T2_ON,UPA_DI_FromHMI.Kr_7T2_ON,UPA_DI_ToHMI.Kr_7T2_ON,UPA_DI_Internal.Kr_7T2_ON,UPA_DI.Kr_7T2_ON);
//Кран 7Т-2  закрыт
DI_Processing(UPA_DI_DRV.Kr_7T2_OF,false,UPA_DI_Settings.Kr_7T2_OF,UPA_DI_FromHMI.Kr_7T2_OF,UPA_DI_ToHMI.Kr_7T2_OF,UPA_DI_Internal.Kr_7T2_OF,UPA_DI.Kr_7T2_OF);
//Кран 8Т-2  открыт
DI_Processing(UPA_DI_DRV.Kr_8T2_ON,false,UPA_DI_Settings.Kr_8T2_ON,UPA_DI_FromHMI.Kr_8T2_ON,UPA_DI_ToHMI.Kr_8T2_ON,UPA_DI_Internal.Kr_8T2_ON,UPA_DI.Kr_8T2_ON);
//Кран 8Т-2  закрыт
DI_Processing(UPA_DI_DRV.Kr_8T2_OF,false,UPA_DI_Settings.Kr_8T2_OF,UPA_DI_FromHMI.Kr_8T2_OF,UPA_DI_ToHMI.Kr_8T2_OF,UPA_DI_Internal.Kr_8T2_OF,UPA_DI.Kr_8T2_OF);
//Кран 9Т-2  открыт
DI_Processing(UPA_DI_DRV.Kr_9T2_ON,false,UPA_DI_Settings.Kr_9T2_ON,UPA_DI_FromHMI.Kr_9T2_ON,UPA_DI_ToHMI.Kr_9T2_ON,UPA_DI_Internal.Kr_9T2_ON,UPA_DI.Kr_9T2_ON);
//Кран 9Т-2  закрыт
DI_Processing(UPA_DI_DRV.Kr_9T2_OF,false,UPA_DI_Settings.Kr_9T2_OF,UPA_DI_FromHMI.Kr_9T2_OF,UPA_DI_ToHMI.Kr_9T2_OF,UPA_DI_Internal.Kr_9T2_OF,UPA_DI.Kr_9T2_OF);
//Кран 10Т-2  открыт
DI_Processing(UPA_DI_DRV.Kr_10T2_ON,false,UPA_DI_Settings.Kr_10T2_ON,UPA_DI_FromHMI.Kr_10T2_ON,UPA_DI_ToHMI.Kr_10T2_ON,UPA_DI_Internal.Kr_10T2_ON,UPA_DI.Kr_10T2_ON);
//Кран 10Т-2  закрыт
DI_Processing(UPA_DI_DRV.Kr_10T2_OF,false,UPA_DI_Settings.Kr_10T2_OF,UPA_DI_FromHMI.Kr_10T2_OF,UPA_DI_ToHMI.Kr_10T2_OF,UPA_DI_Internal.Kr_10T2_OF,UPA_DI.Kr_10T2_OF);
//Кран 11Т-2  открыт
DI_Processing(UPA_DI_DRV.Kr_11T2_ON,false,UPA_DI_Settings.Kr_11T2_ON,UPA_DI_FromHMI.Kr_11T2_ON,UPA_DI_ToHMI.Kr_11T2_ON,UPA_DI_Internal.Kr_11T2_ON,UPA_DI.Kr_11T2_ON);
//Кран 11Т-2  закрыт
DI_Processing(UPA_DI_DRV.Kr_11T2_OF,false,UPA_DI_Settings.Kr_11T2_OF,UPA_DI_FromHMI.Kr_11T2_OF,UPA_DI_ToHMI.Kr_11T2_OF,UPA_DI_Internal.Kr_11T2_OF,UPA_DI.Kr_11T2_OF);
//Кран 12Т-2  открыт
DI_Processing(UPA_DI_DRV.Kr_12T2_ON,false,UPA_DI_Settings.Kr_12T2_ON,UPA_DI_FromHMI.Kr_12T2_ON,UPA_DI_ToHMI.Kr_12T2_ON,UPA_DI_Internal.Kr_12T2_ON,UPA_DI.Kr_12T2_ON);
//Кран 12Т-2  закрыт
DI_Processing(UPA_DI_DRV.Kr_12T2_OF,false,UPA_DI_Settings.Kr_12T2_OF,UPA_DI_FromHMI.Kr_12T2_OF,UPA_DI_ToHMI.Kr_12T2_OF,UPA_DI_Internal.Kr_12T2_OF,UPA_DI.Kr_12T2_OF);
//Кран 13Т-2  открыт
DI_Processing(UPA_DI_DRV.Kr_13T2_ON,false,UPA_DI_Settings.Kr_13T2_ON,UPA_DI_FromHMI.Kr_13T2_ON,UPA_DI_ToHMI.Kr_13T2_ON,UPA_DI_Internal.Kr_13T2_ON,UPA_DI.Kr_13T2_ON);
//Кран 13Т-2  закрыт
DI_Processing(UPA_DI_DRV.Kr_13T2_OF,false,UPA_DI_Settings.Kr_13T2_OF,UPA_DI_FromHMI.Kr_13T2_OF,UPA_DI_ToHMI.Kr_13T2_OF,UPA_DI_Internal.Kr_13T2_OF,UPA_DI.Kr_13T2_OF);
//Кран 14Т-2  открыт
DI_Processing(UPA_DI_DRV.Kr_14T2_ON,false,UPA_DI_Settings.Kr_14T2_ON,UPA_DI_FromHMI.Kr_14T2_ON,UPA_DI_ToHMI.Kr_14T2_ON,UPA_DI_Internal.Kr_14T2_ON,UPA_DI.Kr_14T2_ON);
//Кран 14Т-2  закрыт
DI_Processing(UPA_DI_DRV.Kr_14T2_OF,false,UPA_DI_Settings.Kr_14T2_OF,UPA_DI_FromHMI.Kr_14T2_OF,UPA_DI_ToHMI.Kr_14T2_OF,UPA_DI_Internal.Kr_14T2_OF,UPA_DI.Kr_14T2_OF);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_0,false,UPA_DI_Settings.Res_0,UPA_DI_FromHMI.Res_0,UPA_DI_ToHMI.Res_0,UPA_DI_Internal.Res_0,UPA_DI.Res_0);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_1,false,UPA_DI_Settings.Res_1,UPA_DI_FromHMI.Res_1,UPA_DI_ToHMI.Res_1,UPA_DI_Internal.Res_1,UPA_DI.Res_1);
//Влажность в ББ САУ УПА повышенная
DI_Processing(UPA_DI_DRV.Vlaga_BB_UPA_v,false,UPA_DI_Settings.Vlaga_BB_UPA_v,UPA_DI_FromHMI.Vlaga_BB_UPA_v,UPA_DI_ToHMI.Vlaga_BB_UPA_v,UPA_DI_Internal.Vlaga_BB_UPA_v,UPA_DI.Vlaga_BB_UPA_v);
//Дверь ББ САУ УПА открыта 
DI_Processing(UPA_DI_DRV.Dver_BB_UPA_open,false,UPA_DI_Settings.Dver_BB_UPA_open,UPA_DI_FromHMI.Dver_BB_UPA_open,UPA_DI_ToHMI.Dver_BB_UPA_open,UPA_DI_Internal.Dver_BB_UPA_open,UPA_DI.Dver_BB_UPA_open);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_2,false,UPA_DI_Settings.Res_2,UPA_DI_FromHMI.Res_2,UPA_DI_ToHMI.Res_2,UPA_DI_Internal.Res_2,UPA_DI.Res_2);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_3,false,UPA_DI_Settings.Res_3,UPA_DI_FromHMI.Res_3,UPA_DI_ToHMI.Res_3,UPA_DI_Internal.Res_3,UPA_DI.Res_3);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_4,false,UPA_DI_Settings.Res_4,UPA_DI_FromHMI.Res_4,UPA_DI_ToHMI.Res_4,UPA_DI_Internal.Res_4,UPA_DI.Res_4);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_5,false,UPA_DI_Settings.Res_5,UPA_DI_FromHMI.Res_5,UPA_DI_ToHMI.Res_5,UPA_DI_Internal.Res_5,UPA_DI.Res_5);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_6,false,UPA_DI_Settings.Res_6,UPA_DI_FromHMI.Res_6,UPA_DI_ToHMI.Res_6,UPA_DI_Internal.Res_6,UPA_DI.Res_6);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_7,false,UPA_DI_Settings.Res_7,UPA_DI_FromHMI.Res_7,UPA_DI_ToHMI.Res_7,UPA_DI_Internal.Res_7,UPA_DI.Res_7);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_8,false,UPA_DI_Settings.Res_8,UPA_DI_FromHMI.Res_8,UPA_DI_ToHMI.Res_8,UPA_DI_Internal.Res_8,UPA_DI.Res_8);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_9,false,UPA_DI_Settings.Res_9,UPA_DI_FromHMI.Res_9,UPA_DI_ToHMI.Res_9,UPA_DI_Internal.Res_9,UPA_DI.Res_9);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_10,false,UPA_DI_Settings.Res_10,UPA_DI_FromHMI.Res_10,UPA_DI_ToHMI.Res_10,UPA_DI_Internal.Res_10,UPA_DI.Res_10);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_11,false,UPA_DI_Settings.Res_11,UPA_DI_FromHMI.Res_11,UPA_DI_ToHMI.Res_11,UPA_DI_Internal.Res_11,UPA_DI.Res_11);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_12,false,UPA_DI_Settings.Res_12,UPA_DI_FromHMI.Res_12,UPA_DI_ToHMI.Res_12,UPA_DI_Internal.Res_12,UPA_DI.Res_12);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_13,false,UPA_DI_Settings.Res_13,UPA_DI_FromHMI.Res_13,UPA_DI_ToHMI.Res_13,UPA_DI_Internal.Res_13,UPA_DI.Res_13);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_14,false,UPA_DI_Settings.Res_14,UPA_DI_FromHMI.Res_14,UPA_DI_ToHMI.Res_14,UPA_DI_Internal.Res_14,UPA_DI.Res_14);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_15,false,UPA_DI_Settings.Res_15,UPA_DI_FromHMI.Res_15,UPA_DI_ToHMI.Res_15,UPA_DI_Internal.Res_15,UPA_DI.Res_15);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_16,false,UPA_DI_Settings.Res_16,UPA_DI_FromHMI.Res_16,UPA_DI_ToHMI.Res_16,UPA_DI_Internal.Res_16,UPA_DI.Res_16);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_17,false,UPA_DI_Settings.Res_17,UPA_DI_FromHMI.Res_17,UPA_DI_ToHMI.Res_17,UPA_DI_Internal.Res_17,UPA_DI.Res_17);
//Контроль основного питания ~220 В
DI_Processing(UPA_DI_DRV.Chk_AC220_SAU,false,UPA_DI_Settings.Chk_AC220_SAU,UPA_DI_FromHMI.Chk_AC220_SAU,UPA_DI_ToHMI.Chk_AC220_SAU,UPA_DI_Internal.Chk_AC220_SAU,UPA_DI.Chk_AC220_SAU);
//Контроль резервного питания =220 В
DI_Processing(UPA_DI_DRV.Chk_DC220_SAU,false,UPA_DI_Settings.Chk_DC220_SAU,UPA_DI_FromHMI.Chk_DC220_SAU,UPA_DI_ToHMI.Chk_DC220_SAU,UPA_DI_Internal.Chk_DC220_SAU,UPA_DI.Chk_DC220_SAU);
//Двери открыты
DI_Processing(UPA_DI_DRV.Cabin_open,false,UPA_DI_Settings.Cabin_open,UPA_DI_FromHMI.Cabin_open,UPA_DI_ToHMI.Cabin_open,UPA_DI_Internal.Cabin_open,UPA_DI.Cabin_open);
//Автоматы питания включены
DI_Processing(UPA_DI_DRV.QF_ON,false,UPA_DI_Settings.QF_ON,UPA_DI_FromHMI.QF_ON,UPA_DI_ToHMI.QF_ON,UPA_DI_Internal.QF_ON,UPA_DI.QF_ON);
//Исправность осн. ИП =24В внутренних цепей
DI_Processing(UPA_DI_DRV.DC24osn_Int_ok,false,UPA_DI_Settings.DC24osn_Int_ok,UPA_DI_FromHMI.DC24osn_Int_ok,UPA_DI_ToHMI.DC24osn_Int_ok,UPA_DI_Internal.DC24osn_Int_ok,UPA_DI.DC24osn_Int_ok);
//Исправность рез. ИП =24В внутренних цепей
DI_Processing(UPA_DI_DRV.DC24rez_Int_ok,false,UPA_DI_Settings.DC24rez_Int_ok,UPA_DI_FromHMI.DC24rez_Int_ok,UPA_DI_ToHMI.DC24rez_Int_ok,UPA_DI_Internal.DC24rez_Int_ok,UPA_DI.DC24rez_Int_ok);
//Исправность осн. ИП =24В внешних цепей
DI_Processing(UPA_DI_DRV.DC24osn_Ext_ok,false,UPA_DI_Settings.DC24osn_Ext_ok,UPA_DI_FromHMI.DC24osn_Ext_ok,UPA_DI_ToHMI.DC24osn_Ext_ok,UPA_DI_Internal.DC24osn_Ext_ok,UPA_DI.DC24osn_Ext_ok);
//Исправность рез. ИП =24В внешних цепей
DI_Processing(UPA_DI_DRV.DC24rez_Ext_ok,false,UPA_DI_Settings.DC24rez_Ext_ok,UPA_DI_FromHMI.DC24rez_Ext_ok,UPA_DI_ToHMI.DC24rez_Ext_ok,UPA_DI_Internal.DC24rez_Ext_ok,UPA_DI.DC24rez_Ext_ok);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_18,false,UPA_DI_Settings.Res_18,UPA_DI_FromHMI.Res_18,UPA_DI_ToHMI.Res_18,UPA_DI_Internal.Res_18,UPA_DI.Res_18);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_19,false,UPA_DI_Settings.Res_19,UPA_DI_FromHMI.Res_19,UPA_DI_ToHMI.Res_19,UPA_DI_Internal.Res_19,UPA_DI.Res_19);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_20,false,UPA_DI_Settings.Res_20,UPA_DI_FromHMI.Res_20,UPA_DI_ToHMI.Res_20,UPA_DI_Internal.Res_20,UPA_DI.Res_20);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_21,false,UPA_DI_Settings.Res_21,UPA_DI_FromHMI.Res_21,UPA_DI_ToHMI.Res_21,UPA_DI_Internal.Res_21,UPA_DI.Res_21);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_22,false,UPA_DI_Settings.Res_22,UPA_DI_FromHMI.Res_22,UPA_DI_ToHMI.Res_22,UPA_DI_Internal.Res_22,UPA_DI.Res_22);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_23,false,UPA_DI_Settings.Res_23,UPA_DI_FromHMI.Res_23,UPA_DI_ToHMI.Res_23,UPA_DI_Internal.Res_23,UPA_DI.Res_23);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_24,false,UPA_DI_Settings.Res_24,UPA_DI_FromHMI.Res_24,UPA_DI_ToHMI.Res_24,UPA_DI_Internal.Res_24,UPA_DI.Res_24);
//(Резерв)
DI_Processing(UPA_DI_DRV.Res_25,false,UPA_DI_Settings.Res_25,UPA_DI_FromHMI.Res_25,UPA_DI_ToHMI.Res_25,UPA_DI_Internal.Res_25,UPA_DI.Res_25);
//Конец сгенерированного кода
]]></ST>
                </Function>
            </Folder>
            <Folder Name="DO" Comment="" Data="" UUID="HZJUVCHD4H3UDF3CIXHJ3YXTEQ">
                <Function UUID="A5XW7BBUWNFW7M2YG2UJULUSFM" Name="DO_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables>
                        <Variable UUID="4AIZP6TN7OCU3GVNU6PSRDOTRA" Name="algOut" Type="BOOL" Usage="input" />
                        <Variable UUID="5R5WL3HGLRGMXN3ZVPA3FETS6Q" Name="fromHMI" Type="T_DO_FromHMI" TypeUUID="ICYCYA5WR5FTZMTITNXXGA6V4U" Usage="inout" />
                        <Variable UUID="EDA4FRWG6FGWJPKIBGBT6SNR2Q" Name="toHMI" Type="T_DO_ToHMI" TypeUUID="JPIXI5FFWBGSRAAFIJ2MBV77UE" Usage="inout" />
                        <Variable UUID="ROPOI5IJ6BZEBLSGQEGYPURC2I" Name="drv" Type="BOOL" Usage="output" />
                    </Variables>
                    <ST><![CDATA[toHMI.forsEnable := (toHMI.forsEnable or fromHMI.BTNforceOn) and toHMI.forsPermit and not fromHMI.BTNworkOn;
drv := algOut and not toHMI.forsEnable or fromHMI.manualTarget and toHMI.forsEnable;
fromHMI.manualTarget := drv;
//-------------------------------------------
fromHMI.BTNforceOn := false;
fromHMI.BTNworkOn := false;]]></ST>
                </Function>
                <Function UUID="KU2JJYFKI6WDDOKYKWB57EGXHM" Name="UPA_DO_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                    <Variables />
                    <ST><![CDATA[//----------- Обработка дискретных выходов ---------------
//Начало сгенерированного кода DO_Processing
//Кран отсечной 1Т-2 открыть
DO_Processing(UPA_DO.Kr_1T2_ON,UPA_DO_FromHMI.Kr_1T2_ON,UPA_DO_ToHMI.Kr_1T2_ON,UPA_DO_DRV.Kr_1T2_ON);
//Кран отсечной 1Т-2 закрыть
DO_Processing(UPA_DO.Kr_1T2_OF,UPA_DO_FromHMI.Kr_1T2_OF,UPA_DO_ToHMI.Kr_1T2_OF,UPA_DO_DRV.Kr_1T2_OF);
//Кран отсечной 2Т-2 открыть
DO_Processing(UPA_DO.Kr_2T2_ON,UPA_DO_FromHMI.Kr_2T2_ON,UPA_DO_ToHMI.Kr_2T2_ON,UPA_DO_DRV.Kr_2T2_ON);
//Кран отсечной 2Т-2 закрыть
DO_Processing(UPA_DO.Kr_2T2_OF,UPA_DO_FromHMI.Kr_2T2_OF,UPA_DO_ToHMI.Kr_2T2_OF,UPA_DO_DRV.Kr_2T2_OF);
//Кран отсечной 3Т-2 открыть
DO_Processing(UPA_DO.Kr_3T2_ON,UPA_DO_FromHMI.Kr_3T2_ON,UPA_DO_ToHMI.Kr_3T2_ON,UPA_DO_DRV.Kr_3T2_ON);
//Кран отсечной 3Т-2 закрыть
DO_Processing(UPA_DO.Kr_3T2_OF,UPA_DO_FromHMI.Kr_3T2_OF,UPA_DO_ToHMI.Kr_3T2_OF,UPA_DO_DRV.Kr_3T2_OF);
//Кран отсечной 4Т-2 открыть
DO_Processing(UPA_DO.Kr_4T2_ON,UPA_DO_FromHMI.Kr_4T2_ON,UPA_DO_ToHMI.Kr_4T2_ON,UPA_DO_DRV.Kr_4T2_ON);
//Кран отсечной 4Т-2 закрыть
DO_Processing(UPA_DO.Kr_4T2_OF,UPA_DO_FromHMI.Kr_4T2_OF,UPA_DO_ToHMI.Kr_4T2_OF,UPA_DO_DRV.Kr_4T2_OF);
//Кран отсечной 5Т-2 открыть
DO_Processing(UPA_DO.Kr_5T2_ON,UPA_DO_FromHMI.Kr_5T2_ON,UPA_DO_ToHMI.Kr_5T2_ON,UPA_DO_DRV.Kr_5T2_ON);
//Кран отсечной 5Т-2 закрыть
DO_Processing(UPA_DO.Kr_5T2_OF,UPA_DO_FromHMI.Kr_5T2_OF,UPA_DO_ToHMI.Kr_5T2_OF,UPA_DO_DRV.Kr_5T2_OF);
//Кран отсечной 6Т-2 открыть
DO_Processing(UPA_DO.Kr_6T2_ON,UPA_DO_FromHMI.Kr_6T2_ON,UPA_DO_ToHMI.Kr_6T2_ON,UPA_DO_DRV.Kr_6T2_ON);
//Кран отсечной 6Т-2 закрыть
DO_Processing(UPA_DO.Kr_6T2_OF,UPA_DO_FromHMI.Kr_6T2_OF,UPA_DO_ToHMI.Kr_6T2_OF,UPA_DO_DRV.Kr_6T2_OF);
//Кран отсечной 7Т-2 открыть
DO_Processing(UPA_DO.Kr_7T2_ON,UPA_DO_FromHMI.Kr_7T2_ON,UPA_DO_ToHMI.Kr_7T2_ON,UPA_DO_DRV.Kr_7T2_ON);
//Кран отсечной 7Т-2 закрыть
DO_Processing(UPA_DO.Kr_7T2_OF,UPA_DO_FromHMI.Kr_7T2_OF,UPA_DO_ToHMI.Kr_7T2_OF,UPA_DO_DRV.Kr_7T2_OF);
//Кран отсечной 8Т-2 открыть
DO_Processing(UPA_DO.Kr_8T2_ON,UPA_DO_FromHMI.Kr_8T2_ON,UPA_DO_ToHMI.Kr_8T2_ON,UPA_DO_DRV.Kr_8T2_ON);
//Кран отсечной 8Т-2 закрыть
DO_Processing(UPA_DO.Kr_8T2_OF,UPA_DO_FromHMI.Kr_8T2_OF,UPA_DO_ToHMI.Kr_8T2_OF,UPA_DO_DRV.Kr_8T2_OF);
//Кран отсечной 9Т-2 открыть
DO_Processing(UPA_DO.Kr_9T2_ON,UPA_DO_FromHMI.Kr_9T2_ON,UPA_DO_ToHMI.Kr_9T2_ON,UPA_DO_DRV.Kr_9T2_ON);
//Кран отсечной 9Т-2 закрыть
DO_Processing(UPA_DO.Kr_9T2_OF,UPA_DO_FromHMI.Kr_9T2_OF,UPA_DO_ToHMI.Kr_9T2_OF,UPA_DO_DRV.Kr_9T2_OF);
//Кран отсечной 10Т-2 открыть
DO_Processing(UPA_DO.Kr_10T2_ON,UPA_DO_FromHMI.Kr_10T2_ON,UPA_DO_ToHMI.Kr_10T2_ON,UPA_DO_DRV.Kr_10T2_ON);
//Кран отсечной 10Т-2 закрыть
DO_Processing(UPA_DO.Kr_10T2_OF,UPA_DO_FromHMI.Kr_10T2_OF,UPA_DO_ToHMI.Kr_10T2_OF,UPA_DO_DRV.Kr_10T2_OF);
//Кран отсечной 11Т-2 открыть
DO_Processing(UPA_DO.Kr_11T2_ON,UPA_DO_FromHMI.Kr_11T2_ON,UPA_DO_ToHMI.Kr_11T2_ON,UPA_DO_DRV.Kr_11T2_ON);
//Кран отсечной 11Т-2 закрыть
DO_Processing(UPA_DO.Kr_11T2_OF,UPA_DO_FromHMI.Kr_11T2_OF,UPA_DO_ToHMI.Kr_11T2_OF,UPA_DO_DRV.Kr_11T2_OF);
//Кран отсечной 12Т-2 открыть
DO_Processing(UPA_DO.Kr_12T2_ON,UPA_DO_FromHMI.Kr_12T2_ON,UPA_DO_ToHMI.Kr_12T2_ON,UPA_DO_DRV.Kr_12T2_ON);
//Кран отсечной 12Т-2 закрыть
DO_Processing(UPA_DO.Kr_12T2_OF,UPA_DO_FromHMI.Kr_12T2_OF,UPA_DO_ToHMI.Kr_12T2_OF,UPA_DO_DRV.Kr_12T2_OF);
//Кран отсечной 13Т-2 открыть
DO_Processing(UPA_DO.Kr_13T2_ON,UPA_DO_FromHMI.Kr_13T2_ON,UPA_DO_ToHMI.Kr_13T2_ON,UPA_DO_DRV.Kr_13T2_ON);
//Кран отсечной 13Т-2 закрыть
DO_Processing(UPA_DO.Kr_13T2_OF,UPA_DO_FromHMI.Kr_13T2_OF,UPA_DO_ToHMI.Kr_13T2_OF,UPA_DO_DRV.Kr_13T2_OF);
//Кран отсечной 14Т-2 открыть
DO_Processing(UPA_DO.Kr_14T2_ON,UPA_DO_FromHMI.Kr_14T2_ON,UPA_DO_ToHMI.Kr_14T2_ON,UPA_DO_DRV.Kr_14T2_ON);
//Кран отсечной 14Т-2 закрыть
DO_Processing(UPA_DO.Kr_14T2_OF,UPA_DO_FromHMI.Kr_14T2_OF,UPA_DO_ToHMI.Kr_14T2_OF,UPA_DO_DRV.Kr_14T2_OF);
//(Резерв)
DO_Processing(UPA_DO.Res_0,UPA_DO_FromHMI.Res_0,UPA_DO_ToHMI.Res_0,UPA_DO_DRV.Res_0);
//(Резерв)
DO_Processing(UPA_DO.Res_1,UPA_DO_FromHMI.Res_1,UPA_DO_ToHMI.Res_1,UPA_DO_DRV.Res_1);
//(Резерв)
DO_Processing(UPA_DO.Res_2,UPA_DO_FromHMI.Res_2,UPA_DO_ToHMI.Res_2,UPA_DO_DRV.Res_2);
//(Резерв)
DO_Processing(UPA_DO.Res_3,UPA_DO_FromHMI.Res_3,UPA_DO_ToHMI.Res_3,UPA_DO_DRV.Res_3);
//Конец сгенерированного кода
]]></ST>
                </Function>
            </Folder>
        </Folder>
        <Folder Name="АПС" Comment="" Data="" UUID="D3ONYNNZM2SEVBE3RH4U37LJ4A">
            <Function UUID="FW42INRNPRHFXK54IV4UB5K24M" Name="APS_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="5KOTXMQ56XMUXOPGEVEUSMNRCY" Name="unlock" Comment="Деблокировка" Type="BOOL" Usage="input" />
                    <Variable UUID="A4RLFHSGO6HEPPBSGLD75OAVJA" Name="i" Type="INT" Usage="internal" />
                </Variables>
                <ST><![CDATA[
for i :=0 to 8 do AlarmTarget[i] := FALSE; end_for; // 5 - номер последнего типа сигнализации (target)
if unlock then UPA_FirstOutIndex := 0; end_if;

new_wrn := false;
new_crs := false;
i:=0;
APS_Processing(UPA_ANB.Pg_Kol_Av, 1.0, unlock, UPA_APS.Pg_Kol_Av, UPA_APS_Internal.Pg_Kol_Av, UPA_FirstOutIndex, i); // Высокое давление газа в коллекторе газа PT-15 [AS]
APS_Processing(UPA_ANB.Pg_PT1_Av, 1.0, unlock, UPA_APS.Pg_PT1_Av, UPA_APS_Internal.Pg_PT1_Av, UPA_FirstOutIndex, i); // Высокое давление газа на скважине 1Т [AS]
APS_Processing(UPA_ANB.Pg_PT2_Av, 1.0, unlock, UPA_APS.Pg_PT2_Av, UPA_APS_Internal.Pg_PT2_Av, UPA_FirstOutIndex, i); // Высокое давление газа на скважине 2Т [AS]
APS_Processing(UPA_ANB.Pg_PT3_Av, 1.0, unlock, UPA_APS.Pg_PT3_Av, UPA_APS_Internal.Pg_PT3_Av, UPA_FirstOutIndex, i); // Высокое давление газа на скважине 3Т [AS]
APS_Processing(UPA_ANB.Pg_PT4_Av, 1.0, unlock, UPA_APS.Pg_PT4_Av, UPA_APS_Internal.Pg_PT4_Av, UPA_FirstOutIndex, i); // Высокое давление газа на скважине 4Т [AS]
APS_Processing(UPA_ANB.Pg_PT5_Av, 1.0, unlock, UPA_APS.Pg_PT5_Av, UPA_APS_Internal.Pg_PT5_Av, UPA_FirstOutIndex, i); // Высокое давление газа на скважине 5Т [AS]
APS_Processing(UPA_ANB.Pg_PT6_Av, 1.0, unlock, UPA_APS.Pg_PT6_Av, UPA_APS_Internal.Pg_PT6_Av, UPA_FirstOutIndex, i); // Высокое давление газа на скважине 6Т [AS]
APS_Processing(UPA_ANB.Pg_PT7_Av, 1.0, unlock, UPA_APS.Pg_PT7_Av, UPA_APS_Internal.Pg_PT7_Av, UPA_FirstOutIndex, i); // Высокое давление газа на скважине 7Т [AS]
APS_Processing(UPA_ANB.Pg_PT8_Av, 1.0, unlock, UPA_APS.Pg_PT8_Av, UPA_APS_Internal.Pg_PT8_Av, UPA_FirstOutIndex, i); // Высокое давление газа на скважине 8Т [AS]
APS_Processing(UPA_ANB.Pg_PT9_Av, 1.0, unlock, UPA_APS.Pg_PT9_Av, UPA_APS_Internal.Pg_PT9_Av, UPA_FirstOutIndex, i); // Высокое давление газа на скважине 9Т [AS]
APS_Processing(UPA_ANB.Pg_PT10_Av, 1.0, unlock, UPA_APS.Pg_PT10_Av, UPA_APS_Internal.Pg_PT10_Av, UPA_FirstOutIndex, i); // Высокое давление газа на скважине 10Т [AS]
APS_Processing(UPA_ANB.Pg_PT11_Av, 1.0, unlock, UPA_APS.Pg_PT11_Av, UPA_APS_Internal.Pg_PT11_Av, UPA_FirstOutIndex, i); // Высокое давление газа на скважине 11Т [AS]
APS_Processing(UPA_ANB.Pg_PT12_Av, 1.0, unlock, UPA_APS.Pg_PT12_Av, UPA_APS_Internal.Pg_PT12_Av, UPA_FirstOutIndex, i); // Высокое давление газа на скважине 12Т [AS]
APS_Processing(UPA_ANB.Pg_PT13_Av, 1.0, unlock, UPA_APS.Pg_PT13_Av, UPA_APS_Internal.Pg_PT13_Av, UPA_FirstOutIndex, i); // Высокое давление газа на скважине 13Т [AS]
APS_Processing(UPA_ANB.Pg_PT14_Av, 1.0, unlock, UPA_APS.Pg_PT14_Av, UPA_APS_Internal.Pg_PT14_Av, UPA_FirstOutIndex, i); // Высокое давление газа на скважине 14Т [AS]
APS_Processing(algUPA.Kr_1T2_selfON, 1.0, unlock, UPA_APS.Kr_1T2_selfON, UPA_APS_Internal.Kr_1T2_selfON, UPA_FirstOutIndex, i); // Самопроизвольное открытие крана 1Т-2 [AS]
APS_Processing(algUPA.Kr_1T2_selfOF, 1.0, unlock, UPA_APS.Kr_1T2_selfOF, UPA_APS_Internal.Kr_1T2_selfOF, UPA_FirstOutIndex, i); // Самопроизвольное закрытие крана  1Т-2 [AS]
APS_Processing(algUPA.Kr_2T2_selfON, 1.0, unlock, UPA_APS.Kr_2T2_selfON, UPA_APS_Internal.Kr_2T2_selfON, UPA_FirstOutIndex, i); // Самопроизвольное открытие крана 2Т-2 [AS]
APS_Processing(algUPA.Kr_2T2_selfOF, 1.0, unlock, UPA_APS.Kr_2T2_selfOF, UPA_APS_Internal.Kr_2T2_selfOF, UPA_FirstOutIndex, i); // Самопроизвольное закрытие крана  2Т-2 [AS]
APS_Processing(algUPA.Kr_3T2_selfON, 1.0, unlock, UPA_APS.Kr_3T2_selfON, UPA_APS_Internal.Kr_3T2_selfON, UPA_FirstOutIndex, i); // Самопроизвольное открытие крана 3Т-2 [AS]
APS_Processing(algUPA.Kr_3T2_selfOF, 1.0, unlock, UPA_APS.Kr_3T2_selfOF, UPA_APS_Internal.Kr_3T2_selfOF, UPA_FirstOutIndex, i); // Самопроизвольное закрытие крана  3Т-2 [AS]
APS_Processing(algUPA.Kr_4T2_selfON, 1.0, unlock, UPA_APS.Kr_4T2_selfON, UPA_APS_Internal.Kr_4T2_selfON, UPA_FirstOutIndex, i); // Самопроизвольное открытие крана 4Т-2 [AS]
APS_Processing(algUPA.Kr_4T2_selfOF, 1.0, unlock, UPA_APS.Kr_4T2_selfOF, UPA_APS_Internal.Kr_4T2_selfOF, UPA_FirstOutIndex, i); // Самопроизвольное закрытие крана  4Т-2 [AS]
APS_Processing(algUPA.Kr_5T2_selfON, 1.0, unlock, UPA_APS.Kr_5T2_selfON, UPA_APS_Internal.Kr_5T2_selfON, UPA_FirstOutIndex, i); // Самопроизвольное открытие крана 5Т-2 [AS]
APS_Processing(algUPA.Kr_5T2_selfOF, 1.0, unlock, UPA_APS.Kr_5T2_selfOF, UPA_APS_Internal.Kr_5T2_selfOF, UPA_FirstOutIndex, i); // Самопроизвольное закрытие крана  5Т-2 [AS]
APS_Processing(algUPA.Kr_6T2_selfON, 1.0, unlock, UPA_APS.Kr_6T2_selfON, UPA_APS_Internal.Kr_6T2_selfON, UPA_FirstOutIndex, i); // Самопроизвольное открытие крана 6Т-2 [AS]
APS_Processing(algUPA.Kr_6T2_selfOF, 1.0, unlock, UPA_APS.Kr_6T2_selfOF, UPA_APS_Internal.Kr_6T2_selfOF, UPA_FirstOutIndex, i); // Самопроизвольное закрытие крана  6Т-2 [AS]
APS_Processing(algUPA.Kr_7T2_selfON, 1.0, unlock, UPA_APS.Kr_7T2_selfON, UPA_APS_Internal.Kr_7T2_selfON, UPA_FirstOutIndex, i); // Самопроизвольное открытие крана 7Т-2 [AS]
APS_Processing(algUPA.Kr_7T2_selfOF, 1.0, unlock, UPA_APS.Kr_7T2_selfOF, UPA_APS_Internal.Kr_7T2_selfOF, UPA_FirstOutIndex, i); // Самопроизвольное закрытие крана  7Т-2 [AS]
APS_Processing(algUPA.Kr_8T2_selfON, 1.0, unlock, UPA_APS.Kr_8T2_selfON, UPA_APS_Internal.Kr_8T2_selfON, UPA_FirstOutIndex, i); // Самопроизвольное открытие крана 8Т-2 [AS]
APS_Processing(algUPA.Kr_8T2_selfOF, 1.0, unlock, UPA_APS.Kr_8T2_selfOF, UPA_APS_Internal.Kr_8T2_selfOF, UPA_FirstOutIndex, i); // Самопроизвольное закрытие крана  8Т-2 [AS]
APS_Processing(algUPA.Kr_9T2_selfON, 1.0, unlock, UPA_APS.Kr_9T2_selfON, UPA_APS_Internal.Kr_9T2_selfON, UPA_FirstOutIndex, i); // Самопроизвольное открытие крана 9Т-2 [AS]
APS_Processing(algUPA.Kr_9T2_selfOF, 1.0, unlock, UPA_APS.Kr_9T2_selfOF, UPA_APS_Internal.Kr_9T2_selfOF, UPA_FirstOutIndex, i); // Самопроизвольное закрытие крана  9Т-2 [AS]
APS_Processing(algUPA.Kr_10T2_selfON, 1.0, unlock, UPA_APS.Kr_10T2_selfON, UPA_APS_Internal.Kr_10T2_selfON, UPA_FirstOutIndex, i); // Самопроизвольное открытие крана 10Т-2 [AS]
APS_Processing(algUPA.Kr_10T2_selfOF, 1.0, unlock, UPA_APS.Kr_10T2_selfOF, UPA_APS_Internal.Kr_10T2_selfOF, UPA_FirstOutIndex, i); // Самопроизвольное закрытие крана  10Т-2 [AS]
APS_Processing(algUPA.Kr_11T2_selfON, 1.0, unlock, UPA_APS.Kr_11T2_selfON, UPA_APS_Internal.Kr_11T2_selfON, UPA_FirstOutIndex, i); // Самопроизвольное открытие крана 11Т-2 [AS]
APS_Processing(algUPA.Kr_11T2_selfOF, 1.0, unlock, UPA_APS.Kr_11T2_selfOF, UPA_APS_Internal.Kr_11T2_selfOF, UPA_FirstOutIndex, i); // Самопроизвольное закрытие крана  11Т-2 [AS]
APS_Processing(algUPA.Kr_12T2_selfON, 1.0, unlock, UPA_APS.Kr_12T2_selfON, UPA_APS_Internal.Kr_12T2_selfON, UPA_FirstOutIndex, i); // Самопроизвольное открытие крана 12Т-2 [AS]
APS_Processing(algUPA.Kr_12T2_selfOF, 1.0, unlock, UPA_APS.Kr_12T2_selfOF, UPA_APS_Internal.Kr_12T2_selfOF, UPA_FirstOutIndex, i); // Самопроизвольное закрытие крана  12Т-2 [AS]
APS_Processing(algUPA.Kr_13T2_selfON, 1.0, unlock, UPA_APS.Kr_13T2_selfON, UPA_APS_Internal.Kr_13T2_selfON, UPA_FirstOutIndex, i); // Самопроизвольное открытие крана 13Т-2 [AS]
APS_Processing(algUPA.Kr_13T2_selfOF, 1.0, unlock, UPA_APS.Kr_13T2_selfOF, UPA_APS_Internal.Kr_13T2_selfOF, UPA_FirstOutIndex, i); // Самопроизвольное закрытие крана  13Т-2 [AS]
APS_Processing(algUPA.Kr_14T2_selfON, 1.0, unlock, UPA_APS.Kr_14T2_selfON, UPA_APS_Internal.Kr_14T2_selfON, UPA_FirstOutIndex, i); // Самопроизвольное открытие крана 14Т-2 [AS]
APS_Processing(algUPA.Kr_14T2_selfOF, 1.0, unlock, UPA_APS.Kr_14T2_selfOF, UPA_APS_Internal.Kr_14T2_selfOF, UPA_FirstOutIndex, i); // Самопроизвольное закрытие крана  14Т-2 [AS]
APS_Processing(UPA_ANB.Pg_Kol_Pn, 1.0, unlock, UPA_APS.Pg_Kol_Pn, UPA_APS_Internal.Pg_Kol_Pn, UPA_FirstOutIndex, i); // Пониженное давление газа в коллекторе газа PT-15 [PS]
APS_Processing(UPA_ANB.Pg_Kol_Pv, 1.0, unlock, UPA_APS.Pg_Kol_Pv, UPA_APS_Internal.Pg_Kol_Pv, UPA_FirstOutIndex, i); // Повышенное давление газа в коллекторе газа PT-15 [PS]
APS_Processing(UPA_ANB.T_BB_UPA_Pn, 1.0, unlock, UPA_APS.T_BB_UPA_Pn, UPA_APS_Internal.T_BB_UPA_Pn, UPA_FirstOutIndex, i); // Пониженная температура воздуха в ББ САУ УПА [PS]
APS_Processing(UPA_ANB.T_BB_UPA_Pv, 1.0, unlock, UPA_APS.T_BB_UPA_Pv, UPA_APS_Internal.T_BB_UPA_Pv, UPA_FirstOutIndex, i); // Повышенная температура воздуха в ББ САУ УПА [PS]
APS_Processing(UPA_ANB.Pg_PT1_Pn, 1.0, unlock, UPA_APS.Pg_PT1_Pn, UPA_APS_Internal.Pg_PT1_Pn, UPA_FirstOutIndex, i); // Пониженное давление газа на скважине 1Т [PS]
APS_Processing(UPA_ANB.Pg_PT1_Pv, 1.0, unlock, UPA_APS.Pg_PT1_Pv, UPA_APS_Internal.Pg_PT1_Pv, UPA_FirstOutIndex, i); // Повышенное давление газа на скважине 1Т [PS]
APS_Processing(UPA_ANB.Pg_PT2_Pn, 1.0, unlock, UPA_APS.Pg_PT2_Pn, UPA_APS_Internal.Pg_PT2_Pn, UPA_FirstOutIndex, i); // Пониженное давление газа на скважине 2Т [PS]
APS_Processing(UPA_ANB.Pg_PT2_Pv, 1.0, unlock, UPA_APS.Pg_PT2_Pv, UPA_APS_Internal.Pg_PT2_Pv, UPA_FirstOutIndex, i); // Повышенное давление газа на скважине 2Т [PS]
APS_Processing(UPA_ANB.Pg_PT3_Pn, 1.0, unlock, UPA_APS.Pg_PT3_Pn, UPA_APS_Internal.Pg_PT3_Pn, UPA_FirstOutIndex, i); // Пониженное давление газа на скважине 3Т [PS]
APS_Processing(UPA_ANB.Pg_PT3_Pv, 1.0, unlock, UPA_APS.Pg_PT3_Pv, UPA_APS_Internal.Pg_PT3_Pv, UPA_FirstOutIndex, i); // Повышенное давление газа на скважине 3Т [PS]
APS_Processing(UPA_ANB.Pg_PT4_Pn, 1.0, unlock, UPA_APS.Pg_PT4_Pn, UPA_APS_Internal.Pg_PT4_Pn, UPA_FirstOutIndex, i); // Пониженное давление газа на скважине 4Т [PS]
APS_Processing(UPA_ANB.Pg_PT4_Pv, 1.0, unlock, UPA_APS.Pg_PT4_Pv, UPA_APS_Internal.Pg_PT4_Pv, UPA_FirstOutIndex, i); // Повышенное давление газа на скважине 4Т [PS]
APS_Processing(UPA_ANB.Pg_PT5_Pn, 1.0, unlock, UPA_APS.Pg_PT5_Pn, UPA_APS_Internal.Pg_PT5_Pn, UPA_FirstOutIndex, i); // Пониженное давление газа на скважине 5Т [PS]
APS_Processing(UPA_ANB.Pg_PT5_Pv, 1.0, unlock, UPA_APS.Pg_PT5_Pv, UPA_APS_Internal.Pg_PT5_Pv, UPA_FirstOutIndex, i); // Повышенное давление газа на скважине 5Т [PS]
APS_Processing(UPA_ANB.Pg_PT6_Pn, 1.0, unlock, UPA_APS.Pg_PT6_Pn, UPA_APS_Internal.Pg_PT6_Pn, UPA_FirstOutIndex, i); // Пониженное давление газа на скважине 6Т [PS]
APS_Processing(UPA_ANB.Pg_PT6_Pv, 1.0, unlock, UPA_APS.Pg_PT6_Pv, UPA_APS_Internal.Pg_PT6_Pv, UPA_FirstOutIndex, i); // Повышенное давление газа на скважине 6Т [PS]
APS_Processing(UPA_ANB.Pg_PT7_Pn, 1.0, unlock, UPA_APS.Pg_PT7_Pn, UPA_APS_Internal.Pg_PT7_Pn, UPA_FirstOutIndex, i); // Пониженное давление газа на скважине 7Т [PS]
APS_Processing(UPA_ANB.Pg_PT7_Pv, 1.0, unlock, UPA_APS.Pg_PT7_Pv, UPA_APS_Internal.Pg_PT7_Pv, UPA_FirstOutIndex, i); // Повышенное давление газа на скважине 7Т [PS]
APS_Processing(UPA_ANB.Pg_PT8_Pn, 1.0, unlock, UPA_APS.Pg_PT8_Pn, UPA_APS_Internal.Pg_PT8_Pn, UPA_FirstOutIndex, i); // Пониженное давление газа на скважине 8Т [PS]
APS_Processing(UPA_ANB.Pg_PT8_Pv, 1.0, unlock, UPA_APS.Pg_PT8_Pv, UPA_APS_Internal.Pg_PT8_Pv, UPA_FirstOutIndex, i); // Повышенное давление газа на скважине 8Т [PS]
APS_Processing(UPA_ANB.Pg_PT9_Pn, 1.0, unlock, UPA_APS.Pg_PT9_Pn, UPA_APS_Internal.Pg_PT9_Pn, UPA_FirstOutIndex, i); // Пониженное давление газа на скважине 9Т [PS]
APS_Processing(UPA_ANB.Pg_PT9_Pv, 1.0, unlock, UPA_APS.Pg_PT9_Pv, UPA_APS_Internal.Pg_PT9_Pv, UPA_FirstOutIndex, i); // Повышенное давление газа на скважине 9Т [PS]
APS_Processing(UPA_ANB.Pg_PT10_Pn, 1.0, unlock, UPA_APS.Pg_PT10_Pn, UPA_APS_Internal.Pg_PT10_Pn, UPA_FirstOutIndex, i); // Пониженное давление газа на скважине 10Т [PS]
APS_Processing(UPA_ANB.Pg_PT10_Pv, 1.0, unlock, UPA_APS.Pg_PT10_Pv, UPA_APS_Internal.Pg_PT10_Pv, UPA_FirstOutIndex, i); // Повышенное давление газа на скважине 10Т [PS]
APS_Processing(UPA_ANB.Pg_PT11_Pn, 1.0, unlock, UPA_APS.Pg_PT11_Pn, UPA_APS_Internal.Pg_PT11_Pn, UPA_FirstOutIndex, i); // Пониженное давление газа на скважине 11Т [PS]
APS_Processing(UPA_ANB.Pg_PT11_Pv, 1.0, unlock, UPA_APS.Pg_PT11_Pv, UPA_APS_Internal.Pg_PT11_Pv, UPA_FirstOutIndex, i); // Повышенное давление газа на скважине 11Т [PS]
APS_Processing(UPA_ANB.Pg_PT12_Pn, 1.0, unlock, UPA_APS.Pg_PT12_Pn, UPA_APS_Internal.Pg_PT12_Pn, UPA_FirstOutIndex, i); // Пониженное давление газа на скважине 12Т [PS]
APS_Processing(UPA_ANB.Pg_PT12_Pv, 1.0, unlock, UPA_APS.Pg_PT12_Pv, UPA_APS_Internal.Pg_PT12_Pv, UPA_FirstOutIndex, i); // Повышенное давление газа на скважине 12Т [PS]
APS_Processing(UPA_ANB.Pg_PT13_Pn, 1.0, unlock, UPA_APS.Pg_PT13_Pn, UPA_APS_Internal.Pg_PT13_Pn, UPA_FirstOutIndex, i); // Пониженное давление газа на скважине 13Т [PS]
APS_Processing(UPA_ANB.Pg_PT13_Pv, 1.0, unlock, UPA_APS.Pg_PT13_Pv, UPA_APS_Internal.Pg_PT13_Pv, UPA_FirstOutIndex, i); // Повышенное давление газа на скважине 13Т [PS]
APS_Processing(UPA_ANB.Pg_PT14_Pn, 1.0, unlock, UPA_APS.Pg_PT14_Pn, UPA_APS_Internal.Pg_PT14_Pn, UPA_FirstOutIndex, i); // Пониженное давление газа на скважине 14Т [PS]
APS_Processing(UPA_ANB.Pg_PT14_Pv, 1.0, unlock, UPA_APS.Pg_PT14_Pv, UPA_APS_Internal.Pg_PT14_Pv, UPA_FirstOutIndex, i); // Повышенное давление газа на скважине 14Т [PS]
APS_Processing(UPA_ANB.Tg_TE1_Pn, 1.0, unlock, UPA_APS.Tg_TE1_Pn, UPA_APS_Internal.Tg_TE1_Pn, UPA_FirstOutIndex, i); // Низкая температура газа на скважине 1Т [PS]
APS_Processing(UPA_ANB.Tg_TE1_Pv, 1.0, unlock, UPA_APS.Tg_TE1_Pv, UPA_APS_Internal.Tg_TE1_Pv, UPA_FirstOutIndex, i); // Высокая температура газа на скважине 1Т [PS]
APS_Processing(UPA_ANB.Tg_TE2_Pn, 1.0, unlock, UPA_APS.Tg_TE2_Pn, UPA_APS_Internal.Tg_TE2_Pn, UPA_FirstOutIndex, i); // Низкая температура газа на скважине 2Т [PS]
APS_Processing(UPA_ANB.Tg_TE2_Pv, 1.0, unlock, UPA_APS.Tg_TE2_Pv, UPA_APS_Internal.Tg_TE2_Pv, UPA_FirstOutIndex, i); // Высокая температура газа на скважине 2Т [PS]
APS_Processing(UPA_ANB.Tg_TE3_Pn, 1.0, unlock, UPA_APS.Tg_TE3_Pn, UPA_APS_Internal.Tg_TE3_Pn, UPA_FirstOutIndex, i); // Низкая температура газа на скважине 3Т [PS]
APS_Processing(UPA_ANB.Tg_TE3_Pv, 1.0, unlock, UPA_APS.Tg_TE3_Pv, UPA_APS_Internal.Tg_TE3_Pv, UPA_FirstOutIndex, i); // Высокая температура газа на скважине 3Т [PS]
APS_Processing(UPA_ANB.Tg_TE4_Pn, 1.0, unlock, UPA_APS.Tg_TE4_Pn, UPA_APS_Internal.Tg_TE4_Pn, UPA_FirstOutIndex, i); // Низкая температура газа на скважине 4Т [PS]
APS_Processing(UPA_ANB.Tg_TE4_Pv, 1.0, unlock, UPA_APS.Tg_TE4_Pv, UPA_APS_Internal.Tg_TE4_Pv, UPA_FirstOutIndex, i); // Высокая температура газа на скважине 4Т [PS]
APS_Processing(UPA_ANB.Tg_TE5_Pn, 1.0, unlock, UPA_APS.Tg_TE5_Pn, UPA_APS_Internal.Tg_TE5_Pn, UPA_FirstOutIndex, i); // Низкая температура газа на скважине 5Т [PS]
APS_Processing(UPA_ANB.Tg_TE5_Pv, 1.0, unlock, UPA_APS.Tg_TE5_Pv, UPA_APS_Internal.Tg_TE5_Pv, UPA_FirstOutIndex, i); // Высокая температура газа на скважине 5Т [PS]
APS_Processing(UPA_ANB.Tg_TE6_Pn, 1.0, unlock, UPA_APS.Tg_TE6_Pn, UPA_APS_Internal.Tg_TE6_Pn, UPA_FirstOutIndex, i); // Низкая температура газа на скважине 6Т [PS]
APS_Processing(UPA_ANB.Tg_TE6_Pv, 1.0, unlock, UPA_APS.Tg_TE6_Pv, UPA_APS_Internal.Tg_TE6_Pv, UPA_FirstOutIndex, i); // Высокая температура газа на скважине 6Т [PS]
APS_Processing(UPA_ANB.Tg_TE7_Pn, 1.0, unlock, UPA_APS.Tg_TE7_Pn, UPA_APS_Internal.Tg_TE7_Pn, UPA_FirstOutIndex, i); // Низкая температура газа на скважине 7Т [PS]
APS_Processing(UPA_ANB.Tg_TE7_Pv, 1.0, unlock, UPA_APS.Tg_TE7_Pv, UPA_APS_Internal.Tg_TE7_Pv, UPA_FirstOutIndex, i); // Высокая температура газа на скважине 7Т [PS]
APS_Processing(UPA_ANB.Tg_TE8_Pn, 1.0, unlock, UPA_APS.Tg_TE8_Pn, UPA_APS_Internal.Tg_TE8_Pn, UPA_FirstOutIndex, i); // Низкая температура газа на скважине 8Т [PS]
APS_Processing(UPA_ANB.Tg_TE8_Pv, 1.0, unlock, UPA_APS.Tg_TE8_Pv, UPA_APS_Internal.Tg_TE8_Pv, UPA_FirstOutIndex, i); // Высокая температура газа на скважине 8Т [PS]
APS_Processing(UPA_ANB.Tg_TE9_Pn, 1.0, unlock, UPA_APS.Tg_TE9_Pn, UPA_APS_Internal.Tg_TE9_Pn, UPA_FirstOutIndex, i); // Низкая температура газа на скважине 9Т [PS]
APS_Processing(UPA_ANB.Tg_TE9_Pv, 1.0, unlock, UPA_APS.Tg_TE9_Pv, UPA_APS_Internal.Tg_TE9_Pv, UPA_FirstOutIndex, i); // Высокая температура газа на скважине 9Т [PS]
APS_Processing(UPA_ANB.Tg_TE10_Pn, 1.0, unlock, UPA_APS.Tg_TE10_Pn, UPA_APS_Internal.Tg_TE10_Pn, UPA_FirstOutIndex, i); // Низкая температура газа на скважине 10Т [PS]
APS_Processing(UPA_ANB.Tg_TE10_Pv, 1.0, unlock, UPA_APS.Tg_TE10_Pv, UPA_APS_Internal.Tg_TE10_Pv, UPA_FirstOutIndex, i); // Высокая температура газа на скважине 10Т [PS]
APS_Processing(UPA_ANB.Tg_TE11_Pn, 1.0, unlock, UPA_APS.Tg_TE11_Pn, UPA_APS_Internal.Tg_TE11_Pn, UPA_FirstOutIndex, i); // Низкая температура газа на скважине 11Т [PS]
APS_Processing(UPA_ANB.Tg_TE11_Pv, 1.0, unlock, UPA_APS.Tg_TE11_Pv, UPA_APS_Internal.Tg_TE11_Pv, UPA_FirstOutIndex, i); // Высокая температура газа на скважине 11Т [PS]
APS_Processing(UPA_ANB.Tg_TE12_Pn, 1.0, unlock, UPA_APS.Tg_TE12_Pn, UPA_APS_Internal.Tg_TE12_Pn, UPA_FirstOutIndex, i); // Низкая температура газа на скважине 12Т [PS]
APS_Processing(UPA_ANB.Tg_TE12_Pv, 1.0, unlock, UPA_APS.Tg_TE12_Pv, UPA_APS_Internal.Tg_TE12_Pv, UPA_FirstOutIndex, i); // Высокая температура газа на скважине 12Т [PS]
APS_Processing(UPA_ANB.Tg_TE13_Pn, 1.0, unlock, UPA_APS.Tg_TE13_Pn, UPA_APS_Internal.Tg_TE13_Pn, UPA_FirstOutIndex, i); // Низкая температура газа на скважине 13Т [PS]
APS_Processing(UPA_ANB.Tg_TE13_Pv, 1.0, unlock, UPA_APS.Tg_TE13_Pv, UPA_APS_Internal.Tg_TE13_Pv, UPA_FirstOutIndex, i); // Высокая температура газа на скважине 13Т [PS]
APS_Processing(UPA_ANB.Tg_TE14_Pn, 1.0, unlock, UPA_APS.Tg_TE14_Pn, UPA_APS_Internal.Tg_TE14_Pn, UPA_FirstOutIndex, i); // Низкая температура газа на скважине 14Т [PS]
APS_Processing(UPA_ANB.Tg_TE14_Pv, 1.0, unlock, UPA_APS.Tg_TE14_Pv, UPA_APS_Internal.Tg_TE14_Pv, UPA_FirstOutIndex, i); // Высокая температура газа на скважине 14Т [PS]
APS_Processing(UPA_DI.Vlaga_BB_UPA_v, 1.0, unlock, UPA_APS.Vlaga_BB_UPA_v, UPA_APS_Internal.Vlaga_BB_UPA_v, UPA_FirstOutIndex, i); // Влажность в ББ САУ УПА повышенная [PS]
APS_Processing(UPA_DI.Dver_BB_UPA_open, 1.0, unlock, UPA_APS.Dver_BB_UPA_open, UPA_APS_Internal.Dver_BB_UPA_open, UPA_FirstOutIndex, i); // Дверь ББ САУ УПА открыта  [PS]
APS_Processing(UPA_DI.Chk_AC220_SAU, 1.0, unlock, UPA_APS.Chk_AC220_SAU, UPA_APS_Internal.Chk_AC220_SAU, UPA_FirstOutIndex, i); // Нет основного питания ~220 В [PS]
APS_Processing(UPA_DI.Chk_DC220_SAU, 1.0, unlock, UPA_APS.Chk_DC220_SAU, UPA_APS_Internal.Chk_DC220_SAU, UPA_FirstOutIndex, i); // Нет резервного питания =220 В [PS]
APS_Processing(UPA_DI.Cabin_open, 1.0, unlock, UPA_APS.Cabin_open, UPA_APS_Internal.Cabin_open, UPA_FirstOutIndex, i); // Двери открыты [PS]
APS_Processing(UPA_DI.QF_ON, 1.0, unlock, UPA_APS.QF_ON, UPA_APS_Internal.QF_ON, UPA_FirstOutIndex, i); // Автоматы питания выключены [PS]
APS_Processing(not UPA_DI.DC24osn_Int_ok, 1.0, unlock, UPA_APS.DC24osn_Int_ok, UPA_APS_Internal.DC24osn_Int_ok, UPA_FirstOutIndex, i); // Неисправность осн. ИП =24В внутренних цепей [PS]
APS_Processing(not UPA_DI.DC24rez_Int_ok, 1.0, unlock, UPA_APS.DC24rez_Int_ok, UPA_APS_Internal.DC24rez_Int_ok, UPA_FirstOutIndex, i); // Неисправность рез. ИП =24В внутренних цепей [PS]
APS_Processing(not UPA_DI.DC24osn_Ext_ok, 1.0, unlock, UPA_APS.DC24osn_Ext_ok, UPA_APS_Internal.DC24osn_Ext_ok, UPA_FirstOutIndex, i); // Неисправность осн. ИП =24В внешних цепей [PS]
APS_Processing(not UPA_DI.DC24rez_Ext_ok, 1.0, unlock, UPA_APS.DC24rez_Ext_ok, UPA_APS_Internal.DC24rez_Ext_ok, UPA_FirstOutIndex, i); // Неисправность рез. ИП =24В внешних цепей [PS]
APS_Processing(KC_CRS.AOs or KC_CRS.AOb, 1.0, unlock, UPA_APS.AO_KC, UPA_APS_Internal.AO_KC, UPA_FirstOutIndex, i); // Останов от цеховой системы

//------------------- Звук --------------------------------

(*

for i:=1 to 113 do
	new_wrn := UPA_APS.Arr[i] and not UPA_APS_Internal.Arr[i].pr_value and UPA_APS_Internal.Arr[i].target > 3 or new_wrn;
	new_crs := UPA_APS.Arr[i] and not UPA_APS_Internal.Arr[i].pr_value and UPA_APS_Internal.Arr[i].target < 4 or new_crs; 
	UPA_APS_Internal.Arr[i].pr_value  := UPA_APS.Arr[i];
end_for;
*)
UPA_Sound.alarm := (new_wrn or ps_im) or UPA_Sound.alarm and not (UPA_BTN.Sound_Off or unlock); // сигн. тревога
UPA_Sound.crash := new_crs or UPA_Sound.crash and not (UPA_BTN.Sound_Off or unlock); // сигн. авария
//признак отключения звука
UPA_SS.mute := (AlarmTarget[1] or AlarmTarget[2] or AlarmTarget[3] or AlarmTarget[4] or AlarmTarget[5]) and not UPA_Sound.crash  or 
			  (AlarmTarget[6] or AlarmTarget[7]) and not UPA_Sound.alarm;]]></ST>
            </Function>
            <Function UUID="JRWJCZBU4NHJNB6ORKLXITPVMQ" Name="APS_Init" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables />
                <ST><![CDATA[
if not init then

Alarms.Fire := 1; // Пожар
Alarms.AOs := 2; // Аварийный останов со стравливанием
Alarms.AOb := 3; // Аварийный останов без стравливания
Alarms.VOs := 4; // Вынужденный останов со стравливанием
Alarms.VOb := 5; // Вынужденный останов без стравливания
Alarms.AS  := 6; // Аварийная сигнализация без останова
Alarms.PS  := 7; // Предупредительная сигнализация
Alarms.OS  := 8; // Ограничительная сигнализация

UPA_APS_Internal.Pg_Kol_Av.target        := Alarms.AS; // Высокое давление газа в коллекторе газа PT-15
UPA_APS_Internal.Pg_PT1_Av.target        := Alarms.AS; // Высокое давление газа на скважине 1Т
UPA_APS_Internal.Pg_PT2_Av.target        := Alarms.AS; // Высокое давление газа на скважине 2Т
UPA_APS_Internal.Pg_PT3_Av.target        := Alarms.AS; // Высокое давление газа на скважине 3Т
UPA_APS_Internal.Pg_PT4_Av.target        := Alarms.AS; // Высокое давление газа на скважине 4Т
UPA_APS_Internal.Pg_PT5_Av.target        := Alarms.AS; // Высокое давление газа на скважине 5Т
UPA_APS_Internal.Pg_PT6_Av.target        := Alarms.AS; // Высокое давление газа на скважине 6Т
UPA_APS_Internal.Pg_PT7_Av.target        := Alarms.AS; // Высокое давление газа на скважине 7Т
UPA_APS_Internal.Pg_PT8_Av.target        := Alarms.AS; // Высокое давление газа на скважине 8Т
UPA_APS_Internal.Pg_PT9_Av.target        := Alarms.AS; // Высокое давление газа на скважине 9Т
UPA_APS_Internal.Pg_PT10_Av.target       := Alarms.AS; // Высокое давление газа на скважине 10Т
UPA_APS_Internal.Pg_PT11_Av.target       := Alarms.AS; // Высокое давление газа на скважине 11Т
UPA_APS_Internal.Pg_PT12_Av.target       := Alarms.AS; // Высокое давление газа на скважине 12Т
UPA_APS_Internal.Pg_PT13_Av.target       := Alarms.AS; // Высокое давление газа на скважине 13Т
UPA_APS_Internal.Pg_PT14_Av.target       := Alarms.AS; // Высокое давление газа на скважине 14Т
UPA_APS_Internal.Kr_1T2_selfON.target    := Alarms.AS; // Самопроизвольное открытие крана 1Т-2
UPA_APS_Internal.Kr_1T2_selfOF.target    := Alarms.AS; // Самопроизвольное закрытие крана  1Т-2
UPA_APS_Internal.Kr_2T2_selfON.target    := Alarms.AS; // Самопроизвольное открытие крана 2Т-2
UPA_APS_Internal.Kr_2T2_selfOF.target    := Alarms.AS; // Самопроизвольное закрытие крана  2Т-2
UPA_APS_Internal.Kr_3T2_selfON.target    := Alarms.AS; // Самопроизвольное открытие крана 3Т-2
UPA_APS_Internal.Kr_3T2_selfOF.target    := Alarms.AS; // Самопроизвольное закрытие крана  3Т-2
UPA_APS_Internal.Kr_4T2_selfON.target    := Alarms.AS; // Самопроизвольное открытие крана 4Т-2
UPA_APS_Internal.Kr_4T2_selfOF.target    := Alarms.AS; // Самопроизвольное закрытие крана  4Т-2
UPA_APS_Internal.Kr_5T2_selfON.target    := Alarms.AS; // Самопроизвольное открытие крана 5Т-2
UPA_APS_Internal.Kr_5T2_selfOF.target    := Alarms.AS; // Самопроизвольное закрытие крана  5Т-2
UPA_APS_Internal.Kr_6T2_selfON.target    := Alarms.AS; // Самопроизвольное открытие крана 6Т-2
UPA_APS_Internal.Kr_6T2_selfOF.target    := Alarms.AS; // Самопроизвольное закрытие крана  6Т-2
UPA_APS_Internal.Kr_7T2_selfON.target    := Alarms.AS; // Самопроизвольное открытие крана 7Т-2
UPA_APS_Internal.Kr_7T2_selfOF.target    := Alarms.AS; // Самопроизвольное закрытие крана  7Т-2
UPA_APS_Internal.Kr_8T2_selfON.target    := Alarms.AS; // Самопроизвольное открытие крана 8Т-2
UPA_APS_Internal.Kr_8T2_selfOF.target    := Alarms.AS; // Самопроизвольное закрытие крана  8Т-2
UPA_APS_Internal.Kr_9T2_selfON.target    := Alarms.AS; // Самопроизвольное открытие крана 9Т-2
UPA_APS_Internal.Kr_9T2_selfOF.target    := Alarms.AS; // Самопроизвольное закрытие крана  9Т-2
UPA_APS_Internal.Kr_10T2_selfON.target   := Alarms.AS; // Самопроизвольное открытие крана 10Т-2
UPA_APS_Internal.Kr_10T2_selfOF.target   := Alarms.AS; // Самопроизвольное закрытие крана  10Т-2
UPA_APS_Internal.Kr_11T2_selfON.target   := Alarms.AS; // Самопроизвольное открытие крана 11Т-2
UPA_APS_Internal.Kr_11T2_selfOF.target   := Alarms.AS; // Самопроизвольное закрытие крана  11Т-2
UPA_APS_Internal.Kr_12T2_selfON.target   := Alarms.AS; // Самопроизвольное открытие крана 12Т-2
UPA_APS_Internal.Kr_12T2_selfOF.target   := Alarms.AS; // Самопроизвольное закрытие крана  12Т-2
UPA_APS_Internal.Kr_13T2_selfON.target   := Alarms.AS; // Самопроизвольное открытие крана 13Т-2
UPA_APS_Internal.Kr_13T2_selfOF.target   := Alarms.AS; // Самопроизвольное закрытие крана  13Т-2
UPA_APS_Internal.Kr_14T2_selfON.target   := Alarms.AS; // Самопроизвольное открытие крана 14Т-2
UPA_APS_Internal.Kr_14T2_selfOF.target   := Alarms.AS; // Самопроизвольное закрытие крана  14Т-2
UPA_APS_Internal.Pg_Kol_Pn.target        := Alarms.PS; // Пониженное давление газа в коллекторе газа PT-15
UPA_APS_Internal.Pg_Kol_Pv.target        := Alarms.PS; // Повышенное давление газа в коллекторе газа PT-15
UPA_APS_Internal.T_BB_UPA_Pn.target      := Alarms.PS; // Пониженная температура воздуха в ББ САУ УПА
UPA_APS_Internal.T_BB_UPA_Pv.target      := Alarms.PS; // Повышенная температура воздуха в ББ САУ УПА
UPA_APS_Internal.Pg_PT1_Pn.target        := Alarms.PS; // Пониженное давление газа на скважине 1Т
UPA_APS_Internal.Pg_PT1_Pv.target        := Alarms.PS; // Повышенное давление газа на скважине 1Т
UPA_APS_Internal.Pg_PT2_Pn.target        := Alarms.PS; // Пониженное давление газа на скважине 2Т
UPA_APS_Internal.Pg_PT2_Pv.target        := Alarms.PS; // Повышенное давление газа на скважине 2Т
UPA_APS_Internal.Pg_PT3_Pn.target        := Alarms.PS; // Пониженное давление газа на скважине 3Т
UPA_APS_Internal.Pg_PT3_Pv.target        := Alarms.PS; // Повышенное давление газа на скважине 3Т
UPA_APS_Internal.Pg_PT4_Pn.target        := Alarms.PS; // Пониженное давление газа на скважине 4Т
UPA_APS_Internal.Pg_PT4_Pv.target        := Alarms.PS; // Повышенное давление газа на скважине 4Т
UPA_APS_Internal.Pg_PT5_Pn.target        := Alarms.PS; // Пониженное давление газа на скважине 5Т
UPA_APS_Internal.Pg_PT5_Pv.target        := Alarms.PS; // Повышенное давление газа на скважине 5Т
UPA_APS_Internal.Pg_PT6_Pn.target        := Alarms.PS; // Пониженное давление газа на скважине 6Т
UPA_APS_Internal.Pg_PT6_Pv.target        := Alarms.PS; // Повышенное давление газа на скважине 6Т
UPA_APS_Internal.Pg_PT7_Pn.target        := Alarms.PS; // Пониженное давление газа на скважине 7Т
UPA_APS_Internal.Pg_PT7_Pv.target        := Alarms.PS; // Повышенное давление газа на скважине 7Т
UPA_APS_Internal.Pg_PT8_Pn.target        := Alarms.PS; // Пониженное давление газа на скважине 8Т
UPA_APS_Internal.Pg_PT8_Pv.target        := Alarms.PS; // Повышенное давление газа на скважине 8Т
UPA_APS_Internal.Pg_PT9_Pn.target        := Alarms.PS; // Пониженное давление газа на скважине 9Т
UPA_APS_Internal.Pg_PT9_Pv.target        := Alarms.PS; // Повышенное давление газа на скважине 9Т
UPA_APS_Internal.Pg_PT10_Pn.target       := Alarms.PS; // Пониженное давление газа на скважине 10Т
UPA_APS_Internal.Pg_PT10_Pv.target       := Alarms.PS; // Повышенное давление газа на скважине 10Т
UPA_APS_Internal.Pg_PT11_Pn.target       := Alarms.PS; // Пониженное давление газа на скважине 11Т
UPA_APS_Internal.Pg_PT11_Pv.target       := Alarms.PS; // Повышенное давление газа на скважине 11Т
UPA_APS_Internal.Pg_PT12_Pn.target       := Alarms.PS; // Пониженное давление газа на скважине 12Т
UPA_APS_Internal.Pg_PT12_Pv.target       := Alarms.PS; // Повышенное давление газа на скважине 12Т
UPA_APS_Internal.Pg_PT13_Pn.target       := Alarms.PS; // Пониженное давление газа на скважине 13Т
UPA_APS_Internal.Pg_PT13_Pv.target       := Alarms.PS; // Повышенное давление газа на скважине 13Т
UPA_APS_Internal.Pg_PT14_Pn.target       := Alarms.PS; // Пониженное давление газа на скважине 14Т
UPA_APS_Internal.Pg_PT14_Pv.target       := Alarms.PS; // Повышенное давление газа на скважине 14Т
UPA_APS_Internal.Tg_TE1_Pn.target        := Alarms.PS; // Низкая температура газа на скважине 1Т
UPA_APS_Internal.Tg_TE1_Pv.target        := Alarms.PS; // Высокая температура газа на скважине 1Т
UPA_APS_Internal.Tg_TE2_Pn.target        := Alarms.PS; // Низкая температура газа на скважине 2Т
UPA_APS_Internal.Tg_TE2_Pv.target        := Alarms.PS; // Высокая температура газа на скважине 2Т
UPA_APS_Internal.Tg_TE3_Pn.target        := Alarms.PS; // Низкая температура газа на скважине 3Т
UPA_APS_Internal.Tg_TE3_Pv.target        := Alarms.PS; // Высокая температура газа на скважине 3Т
UPA_APS_Internal.Tg_TE4_Pn.target        := Alarms.PS; // Низкая температура газа на скважине 4Т
UPA_APS_Internal.Tg_TE4_Pv.target        := Alarms.PS; // Высокая температура газа на скважине 4Т
UPA_APS_Internal.Tg_TE5_Pn.target        := Alarms.PS; // Низкая температура газа на скважине 5Т
UPA_APS_Internal.Tg_TE5_Pv.target        := Alarms.PS; // Высокая температура газа на скважине 5Т
UPA_APS_Internal.Tg_TE6_Pn.target        := Alarms.PS; // Низкая температура газа на скважине 6Т
UPA_APS_Internal.Tg_TE6_Pv.target        := Alarms.PS; // Высокая температура газа на скважине 6Т
UPA_APS_Internal.Tg_TE7_Pn.target        := Alarms.PS; // Низкая температура газа на скважине 7Т
UPA_APS_Internal.Tg_TE7_Pv.target        := Alarms.PS; // Высокая температура газа на скважине 7Т
UPA_APS_Internal.Tg_TE8_Pn.target        := Alarms.PS; // Низкая температура газа на скважине 8Т
UPA_APS_Internal.Tg_TE8_Pv.target        := Alarms.PS; // Высокая температура газа на скважине 8Т
UPA_APS_Internal.Tg_TE9_Pn.target        := Alarms.PS; // Низкая температура газа на скважине 9Т
UPA_APS_Internal.Tg_TE9_Pv.target        := Alarms.PS; // Высокая температура газа на скважине 9Т
UPA_APS_Internal.Tg_TE10_Pn.target       := Alarms.PS; // Низкая температура газа на скважине 10Т
UPA_APS_Internal.Tg_TE10_Pv.target       := Alarms.PS; // Высокая температура газа на скважине 10Т
UPA_APS_Internal.Tg_TE11_Pn.target       := Alarms.PS; // Низкая температура газа на скважине 11Т
UPA_APS_Internal.Tg_TE11_Pv.target       := Alarms.PS; // Высокая температура газа на скважине 11Т
UPA_APS_Internal.Tg_TE12_Pn.target       := Alarms.PS; // Низкая температура газа на скважине 12Т
UPA_APS_Internal.Tg_TE12_Pv.target       := Alarms.PS; // Высокая температура газа на скважине 12Т
UPA_APS_Internal.Tg_TE13_Pn.target       := Alarms.PS; // Низкая температура газа на скважине 13Т
UPA_APS_Internal.Tg_TE13_Pv.target       := Alarms.PS; // Высокая температура газа на скважине 13Т
UPA_APS_Internal.Tg_TE14_Pn.target       := Alarms.PS; // Низкая температура газа на скважине 14Т
UPA_APS_Internal.Tg_TE14_Pv.target       := Alarms.PS; // Высокая температура газа на скважине 14Т
UPA_APS_Internal.Vlaga_BB_UPA_v.target   := Alarms.PS; // Влажность в ББ САУ УПА повышенная
UPA_APS_Internal.Dver_BB_UPA_open.target := Alarms.PS; // Дверь ББ САУ УПА открыта 
UPA_APS_Internal.Chk_AC220_SAU.target    := Alarms.PS; // Нет основного питания ~220 В
UPA_APS_Internal.Chk_DC220_SAU.target    := Alarms.PS; // Нет резервного питания =220 В
UPA_APS_Internal.Cabin_open.target       := Alarms.PS; // Двери открыты
UPA_APS_Internal.QF_ON.target            := Alarms.PS; // Автоматы питания выключены
UPA_APS_Internal.DC24osn_Int_ok.target   := Alarms.PS; // Неисправность осн. ИП =24В внутренних цепей
UPA_APS_Internal.DC24rez_Int_ok.target   := Alarms.PS; // Неисправность рез. ИП =24В внутренних цепей
UPA_APS_Internal.DC24osn_Ext_ok.target   := Alarms.PS; // Неисправность осн. ИП =24В внешних цепей
UPA_APS_Internal.DC24rez_Ext_ok.target   := Alarms.PS; // Неисправность рез. ИП =24В внешних цепей
UPA_APS_Internal.AO_KC.target   		 := Alarms.AS; // Останов от цеховой системы

end_if;
]]></ST>
            </Function>
            <Function UUID="5JNGGSG7TFAZNF652CWSBV7ITU" Name="APS_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="XUPU5QSBXZB3VKJC3T2JHCQBBE" Name="cnd" Comment="условие защиты" Type="BOOL" Usage="input" />
                    <Variable UUID="JGZ43QLS3Y3ULHFPRNURAOQSIY" Name="delay" Comment="задержка, с" Type="REAL" Usage="input" />
                    <Variable UUID="6ZQWFLESTWCE5BISEPM5ARCL5U" Name="reset" Comment="сброс защиты" Type="BOOL" Usage="input" />
                    <Variable UUID="DGLQLOIG5VHVZKGYZCFYXHHMA4" Name="alr" Comment="выход аларма" Type="BOOL" Usage="inout" />
                    <Variable UUID="VBXXK6DJKZDA3NVMCEXSSROBZQ" Name="var" Type="T_APS_Internal" TypeUUID="Y2SUFYR34WCUVAETREJRLVIA74" Usage="inout" />
                    <Variable UUID="GPPVQEL7KXYEDFUOLVBG2MOKWM" Name="firstoutIndex" Comment="Индекс первопричины" Type="INT" Usage="inout" />
                    <Variable UUID="ZBDBYGOJVK6ENPJDBDHCVBPHWI" Name="index" Type="INT" Usage="inout" />
                    <Variable UUID="4GHYRI5B2VSUXDN5TVPGJVYHR4" Name="av" Type="BOOL" Usage="internal" />
                </Variables>
                <ST><![CDATA[if cnd
	then if var.tmr <= delay then var.tmr := var.tmr + tim.cycle; end_if;  //отсчет задержки
	else var.tmr := 0.0; 
end_if;
av := var.tmr > delay ; //срабатывание аварии
//-- детектирование нового аларма (для звука)
new_wrn := av and not var.pr_value and var.target >= Alarms.AS or new_wrn; // новое предупреждение
new_crs := av and not var.pr_value and var.target <= Alarms.VOb or new_crs; //новая авария
var.pr_value := av;
//-- 
alr := av or alr and not reset; //выдача аларма
AlarmTarget[var.target] := AlarmTarget[var.target] or alr; //срабатывание защиты в алгоритм
//первопричина
if var.target >= Alarms.AS or firstoutIndex <> 0 then return; end_if;
index := index + 1;
if alr then firstoutIndex := index; end_if;	]]></ST>
            </Function>
        </Folder>
        <Folder Name="Алгоритм" Comment="" Data="" UUID="Q7AXIKJVZ5RUZE7JQMDKAS36JU">
            <Function UUID="ML2IACWZS7CEHJOW6R5PEBGND4" Name="Alg_UPA" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables />
                <ST><![CDATA[//====================================== УПА =======================================================

// Краны
algUPA.Kr_1T2_selfON := UPA_AM.Kr_1T2.fSelfOn   ;//   Самопроизвольное открытие Крана 1Т-2
algUPA.Kr_1T2_selfOF := UPA_AM.Kr_1T2.fSelfOff  ;//   Самопроизвольное закрытие Крана  1Т-2
algUPA.Kr_2T2_selfON := UPA_AM.Kr_2T2.fSelfOn   ;//   Самопроизвольное открытие Крана 2Т-2
algUPA.Kr_2T2_selfOF := UPA_AM.Kr_2T2.fSelfOff  ;//   Самопроизвольное закрытие Крана  2Т-2
algUPA.Kr_3T2_selfON := UPA_AM.Kr_3T2.fSelfOn   ;//   Самопроизвольное открытие Крана 3Т-2
algUPA.Kr_3T2_selfOF := UPA_AM.Kr_3T2.fSelfOff  ;//   Самопроизвольное закрытие Крана  3Т-2
algUPA.Kr_4T2_selfON := UPA_AM.Kr_4T2.fSelfOn   ;//   Самопроизвольное открытие Крана 4Т-2
algUPA.Kr_4T2_selfOF := UPA_AM.Kr_4T2.fSelfOff  ;//   Самопроизвольное закрытие Крана  4Т-2
algUPA.Kr_5T2_selfON := UPA_AM.Kr_5T2.fSelfOn   ;//   Самопроизвольное открытие Крана 5Т-2
algUPA.Kr_5T2_selfOF := UPA_AM.Kr_5T2.fSelfOff  ;//   Самопроизвольное закрытие Крана  5Т-2
algUPA.Kr_6T2_selfON := UPA_AM.Kr_6T2.fSelfOn   ;//   Самопроизвольное открытие Крана 6Т-2
algUPA.Kr_6T2_selfOF := UPA_AM.Kr_6T2.fSelfOff  ;//   Самопроизвольное закрытие Крана  6Т-2
algUPA.Kr_7T2_selfON := UPA_AM.Kr_7T2.fSelfOn   ;//   Самопроизвольное открытие Крана 7Т-2
algUPA.Kr_7T2_selfOF := UPA_AM.Kr_7T2.fSelfOff  ;//   Самопроизвольное закрытие Крана  7Т-2
algUPA.Kr_8T2_selfON := UPA_AM.Kr_8T2.fSelfOn   ;//   Самопроизвольное открытие Крана 8Т-2
algUPA.Kr_8T2_selfOF := UPA_AM.Kr_8T2.fSelfOff  ;//   Самопроизвольное закрытие Крана  8Т-2
algUPA.Kr_9T2_selfON := UPA_AM.Kr_9T2.fSelfOn   ;//   Самопроизвольное открытие Крана 9Т-2
algUPA.Kr_9T2_selfOF := UPA_AM.Kr_9T2.fSelfOff  ;//   Самопроизвольное закрытие Крана  9Т-2
algUPA.Kr_10T2_selfON := UPA_AM.Kr_10T2.fSelfOn   ;//   Самопроизвольное открытие Крана 10Т-2
algUPA.Kr_10T2_selfOF := UPA_AM.Kr_10T2.fSelfOff  ;//   Самопроизвольное закрытие Крана  10Т-2
algUPA.Kr_11T2_selfON := UPA_AM.Kr_11T2.fSelfOn   ;//   Самопроизвольное открытие Крана 11Т-2
algUPA.Kr_11T2_selfOF := UPA_AM.Kr_11T2.fSelfOff  ;//   Самопроизвольное закрытие Крана  11Т-2
algUPA.Kr_12T2_selfON := UPA_AM.Kr_12T2.fSelfOn   ;//   Самопроизвольное открытие Крана 12Т-2
algUPA.Kr_12T2_selfOF := UPA_AM.Kr_12T2.fSelfOff  ;//   Самопроизвольное закрытие Крана  12Т-2
algUPA.Kr_13T2_selfON := UPA_AM.Kr_13T2.fSelfOn   ;//   Самопроизвольное открытие Крана 13Т-2
algUPA.Kr_13T2_selfOF := UPA_AM.Kr_13T2.fSelfOff  ;//   Самопроизвольное закрытие Крана  13Т-2
algUPA.Kr_14T2_selfON := UPA_AM.Kr_14T2.fSelfOn   ;//   Самопроизвольное открытие Крана 14Т-2
algUPA.Kr_14T2_selfOF := UPA_AM.Kr_14T2.fSelfOff  ;//   Самопроизвольное закрытие Крана  14Т-2

//=================================================================================================
//= АО от САУ КЦ algKC.AO

algUPA.AO := KC_Mode.AOssKC OR KC_Mode.AObsKC;

//= формирование команд на ИМы
//Кран 1T-2
UPA_AM.Kr_1T2.algOff :=	algUPA.AO;  //Логическая команда на закр.(вкл.)
//Кран 2T-2
UPA_AM.Kr_2T2.algOff :=	algUPA.AO;  //Логическая команда на закр.(вкл.)
//Кран 3T-2
UPA_AM.Kr_3T2.algOff :=	algUPA.AO;  //Логическая команда на закр.(вкл.)
//Кран 4T-2
UPA_AM.Kr_4T2.algOff :=	algUPA.AO;  //Логическая команда на закр.(вкл.)
//Кран 5T-2
UPA_AM.Kr_5T2.algOff :=	algUPA.AO;  //Логическая команда на закр.(вкл.)
//Кран 6T-2
UPA_AM.Kr_6T2.algOff :=	algUPA.AO;  //Логическая команда на закр.(вкл.)
//Кран 7T-2
UPA_AM.Kr_7T2.algOff :=	algUPA.AO;  //Логическая команда на закр.(вкл.)
//Кран 8T-2
UPA_AM.Kr_8T2.algOff :=	algUPA.AO;  //Логическая команда на закр.(вкл.)
//Кран 9T-2
UPA_AM.Kr_9T2.algOff :=	algUPA.AO;  //Логическая команда на закр.(вкл.)
//Кран 10T-2
UPA_AM.Kr_10T2.algOff :=	algUPA.AO;  //Логическая команда на закр.(вкл.)
//Кран 11T-2
UPA_AM.Kr_11T2.algOff :=	algUPA.AO;  //Логическая команда на закр.(вкл.)
//Кран 12T-2
UPA_AM.Kr_12T2.algOff :=	algUPA.AO;  //Логическая команда на закр.(вкл.)
//Кран 13T-2
UPA_AM.Kr_13T2.algOff :=	algUPA.AO;  //Логическая команда на закр.(вкл.)
//Кран 14T-2
UPA_AM.Kr_14T2.algOff :=	algUPA.AO;  //Логическая команда на закр.(вкл.)]]></ST>
            </Function>
            <FunctionBlock UUID="YFVWCR36G4AULLUU4VNZS6SAEA" Name="FB_Logic">
                <Variables>
                    <Variable UUID="MPEJOQ6TUKCUVNPNAXN2N4O6BI" Name="Kn_DU_IM" Type="FB_Ttrg" TypeUUID="JH6E2RDLE37ULL4MOUYCEZKSHQ" Usage="internal" />
                </Variables>
                <ST><![CDATA[//Включение ДУ для ИМ по кнопке
UPA_SS.Prm_DU_IM := NOT algUPA.AO; //разрешение кнопки
Kn_DU_IM(UPA_BTN.DU_IM, NOT UPA_SS.Prm_DU_IM, UPA_TS.DU_IM); //включение ДУ для ИМ (пропадание UPA_SS.Prm_DU_IM сбросит флаг ДУ UPA_TS.DU_IM в ноль)


]]></ST>
            </FunctionBlock>
            <FunctionBlock UUID="JH6E2RDLE37ULL4MOUYCEZKSHQ" Name="FB_Ttrg" Comment="Т-триггер на дискретных элементах">
                <Variables>
                    <Variable UUID="G733ZPQIUZCUZJXOIV7OQQT3G4" Name="c" Comment="Входной тактовый импульс" Type="BOOL" Usage="input" />
                    <Variable UUID="7QPJXKAOG7XUTMS7SZ3FDZDHCE" Name="r" Comment="Безусловный сброс" Type="BOOL" Usage="input" />
                    <Variable UUID="VBKMAUZHCLJUTLMX4GJ6QYJVRY" Name="q" Comment="Выход Т-триггера" Type="BOOL" Usage="output" />
                    <Variable UUID="EEKECSBDYVAELGKC3TOJWPG56M" Name="pr_c" Type="BOOL" Usage="internal" />
                </Variables>
                <ST><![CDATA[
q := (c AND NOT pr_c  AND NOT q OR q) AND NOT (c AND NOT pr_c  AND q OR r);
pr_c := c;]]></ST>
            </FunctionBlock>
        </Folder>
        <Folder Name="Драйверы" Comment="" Data="" UUID="VVOJVQV24WBUNOJ2RTUSV5YNAM">
            <Folder Name="ПИР" Comment="" Data="" UUID="JSQI5NFGUI3EJHWLZGBIZABOT4">
                <Folder Name="AI" Comment="" Data="" UUID="PJAOT23ZMPGEPMINSLXJLS47BY">
                    <Function UUID="SWKU6ZEOIFWIL7TXKO2HEA63JM" Name="UPA_PIR10_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
UPA_PIR10_mb_AI_ToHMI.T_SR.manual := tmpPermit; //Температура среды (в точке, где измеряется расход);
UPA_PIR10_mb_AI_ToHMI.P_SR.manual := tmpPermit; //Давление среды (в точке, где измеряется расход);
UPA_PIR10_mb_AI_ToHMI.T_SR_2.manual := tmpPermit; //Температура среды (в точке, где измеряется расход), канал 2;
UPA_PIR10_mb_AI_ToHMI.P_SR_2.manual := tmpPermit; //Давление среды (в точке, где измеряется расход), канал 2;
UPA_PIR10_mb_AI_ToHMI.QV.manual := tmpPermit; //Объемный расход, м3/час;
UPA_PIR10_mb_AI_ToHMI.QV_ST.manual := tmpPermit; //Объемный расход, приведенный к стандартным условиям, нм3/час;
UPA_PIR10_mb_AI_ToHMI.QM.manual := tmpPermit; //Массовый расход, кг/с;
UPA_PIR10_mb_AI_ToHMI.QQ.manual := tmpPermit; //Тепловой расход, Вт;
UPA_PIR10_mb_AI_ToHMI.KONC.manual := tmpPermit; //Концентрация;
UPA_PIR10_mb_AI_ToHMI.K_s.manual := tmpPermit; //Коэффициент сжимаемости газа;
UPA_PIR10_mb_AI_ToHMI.PLT.manual := tmpPermit; //Плотность ;
//Конец сгенерированного кода
//Начало сгенерированного кода AI_Alter
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="BN2J46STJOM52WWCACJ4PP2GLI" Name="UPA_PIR10_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR10_mb_AI_Settings.T_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,0);
//Давление среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR10_mb_AI_Settings.P_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,1);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR10_mb_AI_Settings.T_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR10_mb_AI_Settings.P_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,3);
//Объемный расход, м3/час
mb_AI_init(UPA_PIR10_mb_AI_Settings.QV,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,4);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_init(UPA_PIR10_mb_AI_Settings.QV_ST,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,5);
//Массовый расход, кг/с
mb_AI_init(UPA_PIR10_mb_AI_Settings.QM,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,6);
//Тепловой расход, Вт
mb_AI_init(UPA_PIR10_mb_AI_Settings.QQ,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,7);
//Концентрация
mb_AI_init(UPA_PIR10_mb_AI_Settings.KONC,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,8);
//Коэффициент сжимаемости газа
mb_AI_init(UPA_PIR10_mb_AI_Settings.K_s,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,9);
//Плотность 
mb_AI_init(UPA_PIR10_mb_AI_Settings.PLT,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,10);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR10_mb_AI_DRV.T_SR,UPA_PIR10_mb_AI_Settings.T_SR,UPA_PIR10_mb_AI_FromHMI.T_SR,UPA_PIR10_mb_AI_ToHMI.T_SR);
//Давление среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR10_mb_AI_DRV.P_SR,UPA_PIR10_mb_AI_Settings.P_SR,UPA_PIR10_mb_AI_FromHMI.P_SR,UPA_PIR10_mb_AI_ToHMI.P_SR);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR10_mb_AI_DRV.T_SR_2,UPA_PIR10_mb_AI_Settings.T_SR_2,UPA_PIR10_mb_AI_FromHMI.T_SR_2,UPA_PIR10_mb_AI_ToHMI.T_SR_2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR10_mb_AI_DRV.P_SR_2,UPA_PIR10_mb_AI_Settings.P_SR_2,UPA_PIR10_mb_AI_FromHMI.P_SR_2,UPA_PIR10_mb_AI_ToHMI.P_SR_2);
//Объемный расход, м3/час
mb_AI_Processing(UPA_PIR10_mb_AI_DRV.QV,UPA_PIR10_mb_AI_Settings.QV,UPA_PIR10_mb_AI_FromHMI.QV,UPA_PIR10_mb_AI_ToHMI.QV);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_Processing(UPA_PIR10_mb_AI_DRV.QV_ST,UPA_PIR10_mb_AI_Settings.QV_ST,UPA_PIR10_mb_AI_FromHMI.QV_ST,UPA_PIR10_mb_AI_ToHMI.QV_ST);
//Массовый расход, кг/с
mb_AI_Processing(UPA_PIR10_mb_AI_DRV.QM,UPA_PIR10_mb_AI_Settings.QM,UPA_PIR10_mb_AI_FromHMI.QM,UPA_PIR10_mb_AI_ToHMI.QM);
//Тепловой расход, Вт
mb_AI_Processing(UPA_PIR10_mb_AI_DRV.QQ,UPA_PIR10_mb_AI_Settings.QQ,UPA_PIR10_mb_AI_FromHMI.QQ,UPA_PIR10_mb_AI_ToHMI.QQ);
//Концентрация
mb_AI_Processing(UPA_PIR10_mb_AI_DRV.KONC,UPA_PIR10_mb_AI_Settings.KONC,UPA_PIR10_mb_AI_FromHMI.KONC,UPA_PIR10_mb_AI_ToHMI.KONC);
//Коэффициент сжимаемости газа
mb_AI_Processing(UPA_PIR10_mb_AI_DRV.K_s,UPA_PIR10_mb_AI_Settings.K_s,UPA_PIR10_mb_AI_FromHMI.K_s,UPA_PIR10_mb_AI_ToHMI.K_s);
//Плотность 
mb_AI_Processing(UPA_PIR10_mb_AI_DRV.PLT,UPA_PIR10_mb_AI_Settings.PLT,UPA_PIR10_mb_AI_FromHMI.PLT,UPA_PIR10_mb_AI_ToHMI.PLT);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="3V3UFCOFIKIUC44RT6HXA4XWXQ" Name="UPA_PIR11_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
UPA_PIR11_mb_AI_ToHMI.T_SR.manual := tmpPermit; //Температура среды (в точке, где измеряется расход);
UPA_PIR11_mb_AI_ToHMI.P_SR.manual := tmpPermit; //Давление среды (в точке, где измеряется расход);
UPA_PIR11_mb_AI_ToHMI.T_SR_2.manual := tmpPermit; //Температура среды (в точке, где измеряется расход), канал 2;
UPA_PIR11_mb_AI_ToHMI.P_SR_2.manual := tmpPermit; //Давление среды (в точке, где измеряется расход), канал 2;
UPA_PIR11_mb_AI_ToHMI.QV.manual := tmpPermit; //Объемный расход, м3/час;
UPA_PIR11_mb_AI_ToHMI.QV_ST.manual := tmpPermit; //Объемный расход, приведенный к стандартным условиям, нм3/час;
UPA_PIR11_mb_AI_ToHMI.QM.manual := tmpPermit; //Массовый расход, кг/с;
UPA_PIR11_mb_AI_ToHMI.QQ.manual := tmpPermit; //Тепловой расход, Вт;
UPA_PIR11_mb_AI_ToHMI.KONC.manual := tmpPermit; //Концентрация;
UPA_PIR11_mb_AI_ToHMI.K_s.manual := tmpPermit; //Коэффициент сжимаемости газа;
UPA_PIR11_mb_AI_ToHMI.PLT.manual := tmpPermit; //Плотность ;
//Конец сгенерированного кода
//Начало сгенерированного кода AI_Alter
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="3O77YMJ3IHMQOQPBB2AQTTKYLI" Name="UPA_PIR11_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR11_mb_AI_Settings.T_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,0);
//Давление среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR11_mb_AI_Settings.P_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,1);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR11_mb_AI_Settings.T_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR11_mb_AI_Settings.P_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,3);
//Объемный расход, м3/час
mb_AI_init(UPA_PIR11_mb_AI_Settings.QV,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,4);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_init(UPA_PIR11_mb_AI_Settings.QV_ST,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,5);
//Массовый расход, кг/с
mb_AI_init(UPA_PIR11_mb_AI_Settings.QM,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,6);
//Тепловой расход, Вт
mb_AI_init(UPA_PIR11_mb_AI_Settings.QQ,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,7);
//Концентрация
mb_AI_init(UPA_PIR11_mb_AI_Settings.KONC,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,8);
//Коэффициент сжимаемости газа
mb_AI_init(UPA_PIR11_mb_AI_Settings.K_s,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,9);
//Плотность 
mb_AI_init(UPA_PIR11_mb_AI_Settings.PLT,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,10);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR11_mb_AI_DRV.T_SR,UPA_PIR11_mb_AI_Settings.T_SR,UPA_PIR11_mb_AI_FromHMI.T_SR,UPA_PIR11_mb_AI_ToHMI.T_SR);
//Давление среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR11_mb_AI_DRV.P_SR,UPA_PIR11_mb_AI_Settings.P_SR,UPA_PIR11_mb_AI_FromHMI.P_SR,UPA_PIR11_mb_AI_ToHMI.P_SR);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR11_mb_AI_DRV.T_SR_2,UPA_PIR11_mb_AI_Settings.T_SR_2,UPA_PIR11_mb_AI_FromHMI.T_SR_2,UPA_PIR11_mb_AI_ToHMI.T_SR_2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR11_mb_AI_DRV.P_SR_2,UPA_PIR11_mb_AI_Settings.P_SR_2,UPA_PIR11_mb_AI_FromHMI.P_SR_2,UPA_PIR11_mb_AI_ToHMI.P_SR_2);
//Объемный расход, м3/час
mb_AI_Processing(UPA_PIR11_mb_AI_DRV.QV,UPA_PIR11_mb_AI_Settings.QV,UPA_PIR11_mb_AI_FromHMI.QV,UPA_PIR11_mb_AI_ToHMI.QV);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_Processing(UPA_PIR11_mb_AI_DRV.QV_ST,UPA_PIR11_mb_AI_Settings.QV_ST,UPA_PIR11_mb_AI_FromHMI.QV_ST,UPA_PIR11_mb_AI_ToHMI.QV_ST);
//Массовый расход, кг/с
mb_AI_Processing(UPA_PIR11_mb_AI_DRV.QM,UPA_PIR11_mb_AI_Settings.QM,UPA_PIR11_mb_AI_FromHMI.QM,UPA_PIR11_mb_AI_ToHMI.QM);
//Тепловой расход, Вт
mb_AI_Processing(UPA_PIR11_mb_AI_DRV.QQ,UPA_PIR11_mb_AI_Settings.QQ,UPA_PIR11_mb_AI_FromHMI.QQ,UPA_PIR11_mb_AI_ToHMI.QQ);
//Концентрация
mb_AI_Processing(UPA_PIR11_mb_AI_DRV.KONC,UPA_PIR11_mb_AI_Settings.KONC,UPA_PIR11_mb_AI_FromHMI.KONC,UPA_PIR11_mb_AI_ToHMI.KONC);
//Коэффициент сжимаемости газа
mb_AI_Processing(UPA_PIR11_mb_AI_DRV.K_s,UPA_PIR11_mb_AI_Settings.K_s,UPA_PIR11_mb_AI_FromHMI.K_s,UPA_PIR11_mb_AI_ToHMI.K_s);
//Плотность 
mb_AI_Processing(UPA_PIR11_mb_AI_DRV.PLT,UPA_PIR11_mb_AI_Settings.PLT,UPA_PIR11_mb_AI_FromHMI.PLT,UPA_PIR11_mb_AI_ToHMI.PLT);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="IIMZ3XYRIKZNTCVVPG46ABSI7Q" Name="UPA_PIR12_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
UPA_PIR12_mb_AI_ToHMI.T_SR.manual := tmpPermit; //Температура среды (в точке, где измеряется расход);
UPA_PIR12_mb_AI_ToHMI.P_SR.manual := tmpPermit; //Давление среды (в точке, где измеряется расход);
UPA_PIR12_mb_AI_ToHMI.T_SR_2.manual := tmpPermit; //Температура среды (в точке, где измеряется расход), канал 2;
UPA_PIR12_mb_AI_ToHMI.P_SR_2.manual := tmpPermit; //Давление среды (в точке, где измеряется расход), канал 2;
UPA_PIR12_mb_AI_ToHMI.QV.manual := tmpPermit; //Объемный расход, м3/час;
UPA_PIR12_mb_AI_ToHMI.QV_ST.manual := tmpPermit; //Объемный расход, приведенный к стандартным условиям, нм3/час;
UPA_PIR12_mb_AI_ToHMI.QM.manual := tmpPermit; //Массовый расход, кг/с;
UPA_PIR12_mb_AI_ToHMI.QQ.manual := tmpPermit; //Тепловой расход, Вт;
UPA_PIR12_mb_AI_ToHMI.KONC.manual := tmpPermit; //Концентрация;
UPA_PIR12_mb_AI_ToHMI.K_s.manual := tmpPermit; //Коэффициент сжимаемости газа;
UPA_PIR12_mb_AI_ToHMI.PLT.manual := tmpPermit; //Плотность ;
//Конец сгенерированного кода
//Начало сгенерированного кода AI_Alter
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="WVRCC6HWIU7VWOKF3SHCHBSDZ4" Name="UPA_PIR12_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR12_mb_AI_Settings.T_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,0);
//Давление среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR12_mb_AI_Settings.P_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,1);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR12_mb_AI_Settings.T_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR12_mb_AI_Settings.P_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,3);
//Объемный расход, м3/час
mb_AI_init(UPA_PIR12_mb_AI_Settings.QV,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,4);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_init(UPA_PIR12_mb_AI_Settings.QV_ST,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,5);
//Массовый расход, кг/с
mb_AI_init(UPA_PIR12_mb_AI_Settings.QM,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,6);
//Тепловой расход, Вт
mb_AI_init(UPA_PIR12_mb_AI_Settings.QQ,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,7);
//Концентрация
mb_AI_init(UPA_PIR12_mb_AI_Settings.KONC,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,8);
//Коэффициент сжимаемости газа
mb_AI_init(UPA_PIR12_mb_AI_Settings.K_s,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,9);
//Плотность 
mb_AI_init(UPA_PIR12_mb_AI_Settings.PLT,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,10);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR12_mb_AI_DRV.T_SR,UPA_PIR12_mb_AI_Settings.T_SR,UPA_PIR12_mb_AI_FromHMI.T_SR,UPA_PIR12_mb_AI_ToHMI.T_SR);
//Давление среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR12_mb_AI_DRV.P_SR,UPA_PIR12_mb_AI_Settings.P_SR,UPA_PIR12_mb_AI_FromHMI.P_SR,UPA_PIR12_mb_AI_ToHMI.P_SR);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR12_mb_AI_DRV.T_SR_2,UPA_PIR12_mb_AI_Settings.T_SR_2,UPA_PIR12_mb_AI_FromHMI.T_SR_2,UPA_PIR12_mb_AI_ToHMI.T_SR_2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR12_mb_AI_DRV.P_SR_2,UPA_PIR12_mb_AI_Settings.P_SR_2,UPA_PIR12_mb_AI_FromHMI.P_SR_2,UPA_PIR12_mb_AI_ToHMI.P_SR_2);
//Объемный расход, м3/час
mb_AI_Processing(UPA_PIR12_mb_AI_DRV.QV,UPA_PIR12_mb_AI_Settings.QV,UPA_PIR12_mb_AI_FromHMI.QV,UPA_PIR12_mb_AI_ToHMI.QV);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_Processing(UPA_PIR12_mb_AI_DRV.QV_ST,UPA_PIR12_mb_AI_Settings.QV_ST,UPA_PIR12_mb_AI_FromHMI.QV_ST,UPA_PIR12_mb_AI_ToHMI.QV_ST);
//Массовый расход, кг/с
mb_AI_Processing(UPA_PIR12_mb_AI_DRV.QM,UPA_PIR12_mb_AI_Settings.QM,UPA_PIR12_mb_AI_FromHMI.QM,UPA_PIR12_mb_AI_ToHMI.QM);
//Тепловой расход, Вт
mb_AI_Processing(UPA_PIR12_mb_AI_DRV.QQ,UPA_PIR12_mb_AI_Settings.QQ,UPA_PIR12_mb_AI_FromHMI.QQ,UPA_PIR12_mb_AI_ToHMI.QQ);
//Концентрация
mb_AI_Processing(UPA_PIR12_mb_AI_DRV.KONC,UPA_PIR12_mb_AI_Settings.KONC,UPA_PIR12_mb_AI_FromHMI.KONC,UPA_PIR12_mb_AI_ToHMI.KONC);
//Коэффициент сжимаемости газа
mb_AI_Processing(UPA_PIR12_mb_AI_DRV.K_s,UPA_PIR12_mb_AI_Settings.K_s,UPA_PIR12_mb_AI_FromHMI.K_s,UPA_PIR12_mb_AI_ToHMI.K_s);
//Плотность 
mb_AI_Processing(UPA_PIR12_mb_AI_DRV.PLT,UPA_PIR12_mb_AI_Settings.PLT,UPA_PIR12_mb_AI_FromHMI.PLT,UPA_PIR12_mb_AI_ToHMI.PLT);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="4BCSIRAMIGUI4PYUO2HVYYYY44" Name="UPA_PIR13_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
UPA_PIR13_mb_AI_ToHMI.T_SR.manual := tmpPermit; //Температура среды (в точке, где измеряется расход);
UPA_PIR13_mb_AI_ToHMI.P_SR.manual := tmpPermit; //Давление среды (в точке, где измеряется расход);
UPA_PIR13_mb_AI_ToHMI.T_SR_2.manual := tmpPermit; //Температура среды (в точке, где измеряется расход), канал 2;
UPA_PIR13_mb_AI_ToHMI.P_SR_2.manual := tmpPermit; //Давление среды (в точке, где измеряется расход), канал 2;
UPA_PIR13_mb_AI_ToHMI.QV.manual := tmpPermit; //Объемный расход, м3/час;
UPA_PIR13_mb_AI_ToHMI.QV_ST.manual := tmpPermit; //Объемный расход, приведенный к стандартным условиям, нм3/час;
UPA_PIR13_mb_AI_ToHMI.QM.manual := tmpPermit; //Массовый расход, кг/с;
UPA_PIR13_mb_AI_ToHMI.QQ.manual := tmpPermit; //Тепловой расход, Вт;
UPA_PIR13_mb_AI_ToHMI.KONC.manual := tmpPermit; //Концентрация;
UPA_PIR13_mb_AI_ToHMI.K_s.manual := tmpPermit; //Коэффициент сжимаемости газа;
UPA_PIR13_mb_AI_ToHMI.PLT.manual := tmpPermit; //Плотность ;
//Конец сгенерированного кода
//Начало сгенерированного кода AI_Alter
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="IM4RMT33JFJES23ZRGIJHHQRLU" Name="UPA_PIR13_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR13_mb_AI_Settings.T_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,0);
//Давление среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR13_mb_AI_Settings.P_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,1);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR13_mb_AI_Settings.T_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR13_mb_AI_Settings.P_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,3);
//Объемный расход, м3/час
mb_AI_init(UPA_PIR13_mb_AI_Settings.QV,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,4);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_init(UPA_PIR13_mb_AI_Settings.QV_ST,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,5);
//Массовый расход, кг/с
mb_AI_init(UPA_PIR13_mb_AI_Settings.QM,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,6);
//Тепловой расход, Вт
mb_AI_init(UPA_PIR13_mb_AI_Settings.QQ,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,7);
//Концентрация
mb_AI_init(UPA_PIR13_mb_AI_Settings.KONC,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,8);
//Коэффициент сжимаемости газа
mb_AI_init(UPA_PIR13_mb_AI_Settings.K_s,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,9);
//Плотность 
mb_AI_init(UPA_PIR13_mb_AI_Settings.PLT,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,10);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR13_mb_AI_DRV.T_SR,UPA_PIR13_mb_AI_Settings.T_SR,UPA_PIR13_mb_AI_FromHMI.T_SR,UPA_PIR13_mb_AI_ToHMI.T_SR);
//Давление среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR13_mb_AI_DRV.P_SR,UPA_PIR13_mb_AI_Settings.P_SR,UPA_PIR13_mb_AI_FromHMI.P_SR,UPA_PIR13_mb_AI_ToHMI.P_SR);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR13_mb_AI_DRV.T_SR_2,UPA_PIR13_mb_AI_Settings.T_SR_2,UPA_PIR13_mb_AI_FromHMI.T_SR_2,UPA_PIR13_mb_AI_ToHMI.T_SR_2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR13_mb_AI_DRV.P_SR_2,UPA_PIR13_mb_AI_Settings.P_SR_2,UPA_PIR13_mb_AI_FromHMI.P_SR_2,UPA_PIR13_mb_AI_ToHMI.P_SR_2);
//Объемный расход, м3/час
mb_AI_Processing(UPA_PIR13_mb_AI_DRV.QV,UPA_PIR13_mb_AI_Settings.QV,UPA_PIR13_mb_AI_FromHMI.QV,UPA_PIR13_mb_AI_ToHMI.QV);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_Processing(UPA_PIR13_mb_AI_DRV.QV_ST,UPA_PIR13_mb_AI_Settings.QV_ST,UPA_PIR13_mb_AI_FromHMI.QV_ST,UPA_PIR13_mb_AI_ToHMI.QV_ST);
//Массовый расход, кг/с
mb_AI_Processing(UPA_PIR13_mb_AI_DRV.QM,UPA_PIR13_mb_AI_Settings.QM,UPA_PIR13_mb_AI_FromHMI.QM,UPA_PIR13_mb_AI_ToHMI.QM);
//Тепловой расход, Вт
mb_AI_Processing(UPA_PIR13_mb_AI_DRV.QQ,UPA_PIR13_mb_AI_Settings.QQ,UPA_PIR13_mb_AI_FromHMI.QQ,UPA_PIR13_mb_AI_ToHMI.QQ);
//Концентрация
mb_AI_Processing(UPA_PIR13_mb_AI_DRV.KONC,UPA_PIR13_mb_AI_Settings.KONC,UPA_PIR13_mb_AI_FromHMI.KONC,UPA_PIR13_mb_AI_ToHMI.KONC);
//Коэффициент сжимаемости газа
mb_AI_Processing(UPA_PIR13_mb_AI_DRV.K_s,UPA_PIR13_mb_AI_Settings.K_s,UPA_PIR13_mb_AI_FromHMI.K_s,UPA_PIR13_mb_AI_ToHMI.K_s);
//Плотность 
mb_AI_Processing(UPA_PIR13_mb_AI_DRV.PLT,UPA_PIR13_mb_AI_Settings.PLT,UPA_PIR13_mb_AI_FromHMI.PLT,UPA_PIR13_mb_AI_ToHMI.PLT);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="EEW4XCEDITUB7KIE2SAD5TW2Z4" Name="UPA_PIR14_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
UPA_PIR14_mb_AI_ToHMI.T_SR.manual := tmpPermit; //Температура среды (в точке, где измеряется расход);
UPA_PIR14_mb_AI_ToHMI.P_SR.manual := tmpPermit; //Давление среды (в точке, где измеряется расход);
UPA_PIR14_mb_AI_ToHMI.T_SR_2.manual := tmpPermit; //Температура среды (в точке, где измеряется расход), канал 2;
UPA_PIR14_mb_AI_ToHMI.P_SR_2.manual := tmpPermit; //Давление среды (в точке, где измеряется расход), канал 2;
UPA_PIR14_mb_AI_ToHMI.QV.manual := tmpPermit; //Объемный расход, м3/час;
UPA_PIR14_mb_AI_ToHMI.QV_ST.manual := tmpPermit; //Объемный расход, приведенный к стандартным условиям, нм3/час;
UPA_PIR14_mb_AI_ToHMI.QM.manual := tmpPermit; //Массовый расход, кг/с;
UPA_PIR14_mb_AI_ToHMI.QQ.manual := tmpPermit; //Тепловой расход, Вт;
UPA_PIR14_mb_AI_ToHMI.KONC.manual := tmpPermit; //Концентрация;
UPA_PIR14_mb_AI_ToHMI.K_s.manual := tmpPermit; //Коэффициент сжимаемости газа;
UPA_PIR14_mb_AI_ToHMI.PLT.manual := tmpPermit; //Плотность ;
//Конец сгенерированного кода
//Начало сгенерированного кода AI_Alter
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="SOS7XVEIIED2ZNPZ3SSNZCP77Q" Name="UPA_PIR14_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR14_mb_AI_Settings.T_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,0);
//Давление среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR14_mb_AI_Settings.P_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,1);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR14_mb_AI_Settings.T_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR14_mb_AI_Settings.P_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,3);
//Объемный расход, м3/час
mb_AI_init(UPA_PIR14_mb_AI_Settings.QV,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,4);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_init(UPA_PIR14_mb_AI_Settings.QV_ST,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,5);
//Массовый расход, кг/с
mb_AI_init(UPA_PIR14_mb_AI_Settings.QM,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,6);
//Тепловой расход, Вт
mb_AI_init(UPA_PIR14_mb_AI_Settings.QQ,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,7);
//Концентрация
mb_AI_init(UPA_PIR14_mb_AI_Settings.KONC,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,8);
//Коэффициент сжимаемости газа
mb_AI_init(UPA_PIR14_mb_AI_Settings.K_s,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,9);
//Плотность 
mb_AI_init(UPA_PIR14_mb_AI_Settings.PLT,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,10);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR14_mb_AI_DRV.T_SR,UPA_PIR14_mb_AI_Settings.T_SR,UPA_PIR14_mb_AI_FromHMI.T_SR,UPA_PIR14_mb_AI_ToHMI.T_SR);
//Давление среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR14_mb_AI_DRV.P_SR,UPA_PIR14_mb_AI_Settings.P_SR,UPA_PIR14_mb_AI_FromHMI.P_SR,UPA_PIR14_mb_AI_ToHMI.P_SR);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR14_mb_AI_DRV.T_SR_2,UPA_PIR14_mb_AI_Settings.T_SR_2,UPA_PIR14_mb_AI_FromHMI.T_SR_2,UPA_PIR14_mb_AI_ToHMI.T_SR_2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR14_mb_AI_DRV.P_SR_2,UPA_PIR14_mb_AI_Settings.P_SR_2,UPA_PIR14_mb_AI_FromHMI.P_SR_2,UPA_PIR14_mb_AI_ToHMI.P_SR_2);
//Объемный расход, м3/час
mb_AI_Processing(UPA_PIR14_mb_AI_DRV.QV,UPA_PIR14_mb_AI_Settings.QV,UPA_PIR14_mb_AI_FromHMI.QV,UPA_PIR14_mb_AI_ToHMI.QV);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_Processing(UPA_PIR14_mb_AI_DRV.QV_ST,UPA_PIR14_mb_AI_Settings.QV_ST,UPA_PIR14_mb_AI_FromHMI.QV_ST,UPA_PIR14_mb_AI_ToHMI.QV_ST);
//Массовый расход, кг/с
mb_AI_Processing(UPA_PIR14_mb_AI_DRV.QM,UPA_PIR14_mb_AI_Settings.QM,UPA_PIR14_mb_AI_FromHMI.QM,UPA_PIR14_mb_AI_ToHMI.QM);
//Тепловой расход, Вт
mb_AI_Processing(UPA_PIR14_mb_AI_DRV.QQ,UPA_PIR14_mb_AI_Settings.QQ,UPA_PIR14_mb_AI_FromHMI.QQ,UPA_PIR14_mb_AI_ToHMI.QQ);
//Концентрация
mb_AI_Processing(UPA_PIR14_mb_AI_DRV.KONC,UPA_PIR14_mb_AI_Settings.KONC,UPA_PIR14_mb_AI_FromHMI.KONC,UPA_PIR14_mb_AI_ToHMI.KONC);
//Коэффициент сжимаемости газа
mb_AI_Processing(UPA_PIR14_mb_AI_DRV.K_s,UPA_PIR14_mb_AI_Settings.K_s,UPA_PIR14_mb_AI_FromHMI.K_s,UPA_PIR14_mb_AI_ToHMI.K_s);
//Плотность 
mb_AI_Processing(UPA_PIR14_mb_AI_DRV.PLT,UPA_PIR14_mb_AI_Settings.PLT,UPA_PIR14_mb_AI_FromHMI.PLT,UPA_PIR14_mb_AI_ToHMI.PLT);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="T6ME22KDJZ7QO5PKU23O67BL6U" Name="UPA_PIR1_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
UPA_PIR1_mb_AI_ToHMI.T_SR.manual := tmpPermit; //Температура среды (в точке, где измеряется расход);
UPA_PIR1_mb_AI_ToHMI.P_SR.manual := tmpPermit; //Давление среды (в точке, где измеряется расход);
UPA_PIR1_mb_AI_ToHMI.T_SR_2.manual := tmpPermit; //Температура среды (в точке, где измеряется расход), канал 2;
UPA_PIR1_mb_AI_ToHMI.P_SR_2.manual := tmpPermit; //Давление среды (в точке, где измеряется расход), канал 2;
UPA_PIR1_mb_AI_ToHMI.QV.manual := tmpPermit; //Объемный расход, м3/час;
UPA_PIR1_mb_AI_ToHMI.QV_ST.manual := tmpPermit; //Объемный расход, приведенный к стандартным условиям, нм3/час;
UPA_PIR1_mb_AI_ToHMI.QM.manual := tmpPermit; //Массовый расход, кг/с;
UPA_PIR1_mb_AI_ToHMI.QQ.manual := tmpPermit; //Тепловой расход, Вт;
UPA_PIR1_mb_AI_ToHMI.KONC.manual := tmpPermit; //Концентрация;
UPA_PIR1_mb_AI_ToHMI.K_s.manual := tmpPermit; //Коэффициент сжимаемости газа;
UPA_PIR1_mb_AI_ToHMI.PLT.manual := tmpPermit; //Плотность ;
//Конец сгенерированного кода
//Начало сгенерированного кода AI_Alter
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="32GDLRTVIA5AIKGHUGAEFKN4BQ" Name="UPA_PIR1_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR1_mb_AI_Settings.T_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,0);
//Давление среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR1_mb_AI_Settings.P_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,1);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR1_mb_AI_Settings.T_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR1_mb_AI_Settings.P_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,3);
//Объемный расход, м3/час
mb_AI_init(UPA_PIR1_mb_AI_Settings.QV,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,4);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_init(UPA_PIR1_mb_AI_Settings.QV_ST,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,5);
//Массовый расход, кг/с
mb_AI_init(UPA_PIR1_mb_AI_Settings.QM,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,6);
//Тепловой расход, Вт
mb_AI_init(UPA_PIR1_mb_AI_Settings.QQ,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,7);
//Концентрация
mb_AI_init(UPA_PIR1_mb_AI_Settings.KONC,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,8);
//Коэффициент сжимаемости газа
mb_AI_init(UPA_PIR1_mb_AI_Settings.K_s,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,9);
//Плотность 
mb_AI_init(UPA_PIR1_mb_AI_Settings.PLT,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,10);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR1_mb_AI_DRV.T_SR,UPA_PIR1_mb_AI_Settings.T_SR,UPA_PIR1_mb_AI_FromHMI.T_SR,UPA_PIR1_mb_AI_ToHMI.T_SR);
//Давление среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR1_mb_AI_DRV.P_SR,UPA_PIR1_mb_AI_Settings.P_SR,UPA_PIR1_mb_AI_FromHMI.P_SR,UPA_PIR1_mb_AI_ToHMI.P_SR);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR1_mb_AI_DRV.T_SR_2,UPA_PIR1_mb_AI_Settings.T_SR_2,UPA_PIR1_mb_AI_FromHMI.T_SR_2,UPA_PIR1_mb_AI_ToHMI.T_SR_2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR1_mb_AI_DRV.P_SR_2,UPA_PIR1_mb_AI_Settings.P_SR_2,UPA_PIR1_mb_AI_FromHMI.P_SR_2,UPA_PIR1_mb_AI_ToHMI.P_SR_2);
//Объемный расход, м3/час
mb_AI_Processing(UPA_PIR1_mb_AI_DRV.QV,UPA_PIR1_mb_AI_Settings.QV,UPA_PIR1_mb_AI_FromHMI.QV,UPA_PIR1_mb_AI_ToHMI.QV);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_Processing(UPA_PIR1_mb_AI_DRV.QV_ST,UPA_PIR1_mb_AI_Settings.QV_ST,UPA_PIR1_mb_AI_FromHMI.QV_ST,UPA_PIR1_mb_AI_ToHMI.QV_ST);
//Массовый расход, кг/с
mb_AI_Processing(UPA_PIR1_mb_AI_DRV.QM,UPA_PIR1_mb_AI_Settings.QM,UPA_PIR1_mb_AI_FromHMI.QM,UPA_PIR1_mb_AI_ToHMI.QM);
//Тепловой расход, Вт
mb_AI_Processing(UPA_PIR1_mb_AI_DRV.QQ,UPA_PIR1_mb_AI_Settings.QQ,UPA_PIR1_mb_AI_FromHMI.QQ,UPA_PIR1_mb_AI_ToHMI.QQ);
//Концентрация
mb_AI_Processing(UPA_PIR1_mb_AI_DRV.KONC,UPA_PIR1_mb_AI_Settings.KONC,UPA_PIR1_mb_AI_FromHMI.KONC,UPA_PIR1_mb_AI_ToHMI.KONC);
//Коэффициент сжимаемости газа
mb_AI_Processing(UPA_PIR1_mb_AI_DRV.K_s,UPA_PIR1_mb_AI_Settings.K_s,UPA_PIR1_mb_AI_FromHMI.K_s,UPA_PIR1_mb_AI_ToHMI.K_s);
//Плотность 
mb_AI_Processing(UPA_PIR1_mb_AI_DRV.PLT,UPA_PIR1_mb_AI_Settings.PLT,UPA_PIR1_mb_AI_FromHMI.PLT,UPA_PIR1_mb_AI_ToHMI.PLT);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="LYRYTRKOJBU7Y6ZJWSXXGW6RNY" Name="UPA_PIR2_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
UPA_PIR2_mb_AI_ToHMI.T_SR.manual := tmpPermit; //Температура среды (в точке, где измеряется расход);
UPA_PIR2_mb_AI_ToHMI.P_SR.manual := tmpPermit; //Давление среды (в точке, где измеряется расход);
UPA_PIR2_mb_AI_ToHMI.T_SR_2.manual := tmpPermit; //Температура среды (в точке, где измеряется расход), канал 2;
UPA_PIR2_mb_AI_ToHMI.P_SR_2.manual := tmpPermit; //Давление среды (в точке, где измеряется расход), канал 2;
UPA_PIR2_mb_AI_ToHMI.QV.manual := tmpPermit; //Объемный расход, м3/час;
UPA_PIR2_mb_AI_ToHMI.QV_ST.manual := tmpPermit; //Объемный расход, приведенный к стандартным условиям, нм3/час;
UPA_PIR2_mb_AI_ToHMI.QM.manual := tmpPermit; //Массовый расход, кг/с;
UPA_PIR2_mb_AI_ToHMI.QQ.manual := tmpPermit; //Тепловой расход, Вт;
UPA_PIR2_mb_AI_ToHMI.KONC.manual := tmpPermit; //Концентрация;
UPA_PIR2_mb_AI_ToHMI.K_s.manual := tmpPermit; //Коэффициент сжимаемости газа;
UPA_PIR2_mb_AI_ToHMI.PLT.manual := tmpPermit; //Плотность ;
//Конец сгенерированного кода
//Начало сгенерированного кода AI_Alter
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="LI3X2H2KI2U3OGUMX6PZMJ4Y3E" Name="UPA_PIR2_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR2_mb_AI_Settings.T_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,0);
//Давление среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR2_mb_AI_Settings.P_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,1);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR2_mb_AI_Settings.T_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR2_mb_AI_Settings.P_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,3);
//Объемный расход, м3/час
mb_AI_init(UPA_PIR2_mb_AI_Settings.QV,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,4);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_init(UPA_PIR2_mb_AI_Settings.QV_ST,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,5);
//Массовый расход, кг/с
mb_AI_init(UPA_PIR2_mb_AI_Settings.QM,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,6);
//Тепловой расход, Вт
mb_AI_init(UPA_PIR2_mb_AI_Settings.QQ,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,7);
//Концентрация
mb_AI_init(UPA_PIR2_mb_AI_Settings.KONC,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,8);
//Коэффициент сжимаемости газа
mb_AI_init(UPA_PIR2_mb_AI_Settings.K_s,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,9);
//Плотность 
mb_AI_init(UPA_PIR2_mb_AI_Settings.PLT,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,10);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR2_mb_AI_DRV.T_SR,UPA_PIR2_mb_AI_Settings.T_SR,UPA_PIR2_mb_AI_FromHMI.T_SR,UPA_PIR2_mb_AI_ToHMI.T_SR);
//Давление среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR2_mb_AI_DRV.P_SR,UPA_PIR2_mb_AI_Settings.P_SR,UPA_PIR2_mb_AI_FromHMI.P_SR,UPA_PIR2_mb_AI_ToHMI.P_SR);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR2_mb_AI_DRV.T_SR_2,UPA_PIR2_mb_AI_Settings.T_SR_2,UPA_PIR2_mb_AI_FromHMI.T_SR_2,UPA_PIR2_mb_AI_ToHMI.T_SR_2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR2_mb_AI_DRV.P_SR_2,UPA_PIR2_mb_AI_Settings.P_SR_2,UPA_PIR2_mb_AI_FromHMI.P_SR_2,UPA_PIR2_mb_AI_ToHMI.P_SR_2);
//Объемный расход, м3/час
mb_AI_Processing(UPA_PIR2_mb_AI_DRV.QV,UPA_PIR2_mb_AI_Settings.QV,UPA_PIR2_mb_AI_FromHMI.QV,UPA_PIR2_mb_AI_ToHMI.QV);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_Processing(UPA_PIR2_mb_AI_DRV.QV_ST,UPA_PIR2_mb_AI_Settings.QV_ST,UPA_PIR2_mb_AI_FromHMI.QV_ST,UPA_PIR2_mb_AI_ToHMI.QV_ST);
//Массовый расход, кг/с
mb_AI_Processing(UPA_PIR2_mb_AI_DRV.QM,UPA_PIR2_mb_AI_Settings.QM,UPA_PIR2_mb_AI_FromHMI.QM,UPA_PIR2_mb_AI_ToHMI.QM);
//Тепловой расход, Вт
mb_AI_Processing(UPA_PIR2_mb_AI_DRV.QQ,UPA_PIR2_mb_AI_Settings.QQ,UPA_PIR2_mb_AI_FromHMI.QQ,UPA_PIR2_mb_AI_ToHMI.QQ);
//Концентрация
mb_AI_Processing(UPA_PIR2_mb_AI_DRV.KONC,UPA_PIR2_mb_AI_Settings.KONC,UPA_PIR2_mb_AI_FromHMI.KONC,UPA_PIR2_mb_AI_ToHMI.KONC);
//Коэффициент сжимаемости газа
mb_AI_Processing(UPA_PIR2_mb_AI_DRV.K_s,UPA_PIR2_mb_AI_Settings.K_s,UPA_PIR2_mb_AI_FromHMI.K_s,UPA_PIR2_mb_AI_ToHMI.K_s);
//Плотность 
mb_AI_Processing(UPA_PIR2_mb_AI_DRV.PLT,UPA_PIR2_mb_AI_Settings.PLT,UPA_PIR2_mb_AI_FromHMI.PLT,UPA_PIR2_mb_AI_ToHMI.PLT);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="Q735UTN7JSF62NGM6GI4FG6DTM" Name="UPA_PIR3_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
UPA_PIR3_mb_AI_ToHMI.T_SR.manual := tmpPermit; //Температура среды (в точке, где измеряется расход);
UPA_PIR3_mb_AI_ToHMI.P_SR.manual := tmpPermit; //Давление среды (в точке, где измеряется расход);
UPA_PIR3_mb_AI_ToHMI.T_SR_2.manual := tmpPermit; //Температура среды (в точке, где измеряется расход), канал 2;
UPA_PIR3_mb_AI_ToHMI.P_SR_2.manual := tmpPermit; //Давление среды (в точке, где измеряется расход), канал 2;
UPA_PIR3_mb_AI_ToHMI.QV.manual := tmpPermit; //Объемный расход, м3/час;
UPA_PIR3_mb_AI_ToHMI.QV_ST.manual := tmpPermit; //Объемный расход, приведенный к стандартным условиям, нм3/час;
UPA_PIR3_mb_AI_ToHMI.QM.manual := tmpPermit; //Массовый расход, кг/с;
UPA_PIR3_mb_AI_ToHMI.QQ.manual := tmpPermit; //Тепловой расход, Вт;
UPA_PIR3_mb_AI_ToHMI.KONC.manual := tmpPermit; //Концентрация;
UPA_PIR3_mb_AI_ToHMI.K_s.manual := tmpPermit; //Коэффициент сжимаемости газа;
UPA_PIR3_mb_AI_ToHMI.PLT.manual := tmpPermit; //Плотность ;
//Конец сгенерированного кода
//Начало сгенерированного кода AI_Alter
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="LZTAFVY4IEYWPJHABW5W7AIGHI" Name="UPA_PIR3_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR3_mb_AI_Settings.T_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,0);
//Давление среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR3_mb_AI_Settings.P_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,1);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR3_mb_AI_Settings.T_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR3_mb_AI_Settings.P_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,3);
//Объемный расход, м3/час
mb_AI_init(UPA_PIR3_mb_AI_Settings.QV,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,4);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_init(UPA_PIR3_mb_AI_Settings.QV_ST,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,5);
//Массовый расход, кг/с
mb_AI_init(UPA_PIR3_mb_AI_Settings.QM,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,6);
//Тепловой расход, Вт
mb_AI_init(UPA_PIR3_mb_AI_Settings.QQ,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,7);
//Концентрация
mb_AI_init(UPA_PIR3_mb_AI_Settings.KONC,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,8);
//Коэффициент сжимаемости газа
mb_AI_init(UPA_PIR3_mb_AI_Settings.K_s,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,9);
//Плотность 
mb_AI_init(UPA_PIR3_mb_AI_Settings.PLT,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,10);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR3_mb_AI_DRV.T_SR,UPA_PIR3_mb_AI_Settings.T_SR,UPA_PIR3_mb_AI_FromHMI.T_SR,UPA_PIR3_mb_AI_ToHMI.T_SR);
//Давление среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR3_mb_AI_DRV.P_SR,UPA_PIR3_mb_AI_Settings.P_SR,UPA_PIR3_mb_AI_FromHMI.P_SR,UPA_PIR3_mb_AI_ToHMI.P_SR);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR3_mb_AI_DRV.T_SR_2,UPA_PIR3_mb_AI_Settings.T_SR_2,UPA_PIR3_mb_AI_FromHMI.T_SR_2,UPA_PIR3_mb_AI_ToHMI.T_SR_2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR3_mb_AI_DRV.P_SR_2,UPA_PIR3_mb_AI_Settings.P_SR_2,UPA_PIR3_mb_AI_FromHMI.P_SR_2,UPA_PIR3_mb_AI_ToHMI.P_SR_2);
//Объемный расход, м3/час
mb_AI_Processing(UPA_PIR3_mb_AI_DRV.QV,UPA_PIR3_mb_AI_Settings.QV,UPA_PIR3_mb_AI_FromHMI.QV,UPA_PIR3_mb_AI_ToHMI.QV);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_Processing(UPA_PIR3_mb_AI_DRV.QV_ST,UPA_PIR3_mb_AI_Settings.QV_ST,UPA_PIR3_mb_AI_FromHMI.QV_ST,UPA_PIR3_mb_AI_ToHMI.QV_ST);
//Массовый расход, кг/с
mb_AI_Processing(UPA_PIR3_mb_AI_DRV.QM,UPA_PIR3_mb_AI_Settings.QM,UPA_PIR3_mb_AI_FromHMI.QM,UPA_PIR3_mb_AI_ToHMI.QM);
//Тепловой расход, Вт
mb_AI_Processing(UPA_PIR3_mb_AI_DRV.QQ,UPA_PIR3_mb_AI_Settings.QQ,UPA_PIR3_mb_AI_FromHMI.QQ,UPA_PIR3_mb_AI_ToHMI.QQ);
//Концентрация
mb_AI_Processing(UPA_PIR3_mb_AI_DRV.KONC,UPA_PIR3_mb_AI_Settings.KONC,UPA_PIR3_mb_AI_FromHMI.KONC,UPA_PIR3_mb_AI_ToHMI.KONC);
//Коэффициент сжимаемости газа
mb_AI_Processing(UPA_PIR3_mb_AI_DRV.K_s,UPA_PIR3_mb_AI_Settings.K_s,UPA_PIR3_mb_AI_FromHMI.K_s,UPA_PIR3_mb_AI_ToHMI.K_s);
//Плотность 
mb_AI_Processing(UPA_PIR3_mb_AI_DRV.PLT,UPA_PIR3_mb_AI_Settings.PLT,UPA_PIR3_mb_AI_FromHMI.PLT,UPA_PIR3_mb_AI_ToHMI.PLT);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="LXINH34VJP4H2BIT5OSA7UY3VU" Name="UPA_PIR4_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
UPA_PIR4_mb_AI_ToHMI.T_SR.manual := tmpPermit; //Температура среды (в точке, где измеряется расход);
UPA_PIR4_mb_AI_ToHMI.P_SR.manual := tmpPermit; //Давление среды (в точке, где измеряется расход);
UPA_PIR4_mb_AI_ToHMI.T_SR_2.manual := tmpPermit; //Температура среды (в точке, где измеряется расход), канал 2;
UPA_PIR4_mb_AI_ToHMI.P_SR_2.manual := tmpPermit; //Давление среды (в точке, где измеряется расход), канал 2;
UPA_PIR4_mb_AI_ToHMI.QV.manual := tmpPermit; //Объемный расход, м3/час;
UPA_PIR4_mb_AI_ToHMI.QV_ST.manual := tmpPermit; //Объемный расход, приведенный к стандартным условиям, нм3/час;
UPA_PIR4_mb_AI_ToHMI.QM.manual := tmpPermit; //Массовый расход, кг/с;
UPA_PIR4_mb_AI_ToHMI.QQ.manual := tmpPermit; //Тепловой расход, Вт;
UPA_PIR4_mb_AI_ToHMI.KONC.manual := tmpPermit; //Концентрация;
UPA_PIR4_mb_AI_ToHMI.K_s.manual := tmpPermit; //Коэффициент сжимаемости газа;
UPA_PIR4_mb_AI_ToHMI.PLT.manual := tmpPermit; //Плотность ;
//Конец сгенерированного кода
//Начало сгенерированного кода AI_Alter
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="RQZNJMMDI7RJCZFXJG3SU3Y4TQ" Name="UPA_PIR4_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR4_mb_AI_Settings.T_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,0);
//Давление среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR4_mb_AI_Settings.P_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,1);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR4_mb_AI_Settings.T_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR4_mb_AI_Settings.P_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,3);
//Объемный расход, м3/час
mb_AI_init(UPA_PIR4_mb_AI_Settings.QV,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,4);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_init(UPA_PIR4_mb_AI_Settings.QV_ST,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,5);
//Массовый расход, кг/с
mb_AI_init(UPA_PIR4_mb_AI_Settings.QM,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,6);
//Тепловой расход, Вт
mb_AI_init(UPA_PIR4_mb_AI_Settings.QQ,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,7);
//Концентрация
mb_AI_init(UPA_PIR4_mb_AI_Settings.KONC,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,8);
//Коэффициент сжимаемости газа
mb_AI_init(UPA_PIR4_mb_AI_Settings.K_s,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,9);
//Плотность 
mb_AI_init(UPA_PIR4_mb_AI_Settings.PLT,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,10);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR4_mb_AI_DRV.T_SR,UPA_PIR4_mb_AI_Settings.T_SR,UPA_PIR4_mb_AI_FromHMI.T_SR,UPA_PIR4_mb_AI_ToHMI.T_SR);
//Давление среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR4_mb_AI_DRV.P_SR,UPA_PIR4_mb_AI_Settings.P_SR,UPA_PIR4_mb_AI_FromHMI.P_SR,UPA_PIR4_mb_AI_ToHMI.P_SR);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR4_mb_AI_DRV.T_SR_2,UPA_PIR4_mb_AI_Settings.T_SR_2,UPA_PIR4_mb_AI_FromHMI.T_SR_2,UPA_PIR4_mb_AI_ToHMI.T_SR_2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR4_mb_AI_DRV.P_SR_2,UPA_PIR4_mb_AI_Settings.P_SR_2,UPA_PIR4_mb_AI_FromHMI.P_SR_2,UPA_PIR4_mb_AI_ToHMI.P_SR_2);
//Объемный расход, м3/час
mb_AI_Processing(UPA_PIR4_mb_AI_DRV.QV,UPA_PIR4_mb_AI_Settings.QV,UPA_PIR4_mb_AI_FromHMI.QV,UPA_PIR4_mb_AI_ToHMI.QV);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_Processing(UPA_PIR4_mb_AI_DRV.QV_ST,UPA_PIR4_mb_AI_Settings.QV_ST,UPA_PIR4_mb_AI_FromHMI.QV_ST,UPA_PIR4_mb_AI_ToHMI.QV_ST);
//Массовый расход, кг/с
mb_AI_Processing(UPA_PIR4_mb_AI_DRV.QM,UPA_PIR4_mb_AI_Settings.QM,UPA_PIR4_mb_AI_FromHMI.QM,UPA_PIR4_mb_AI_ToHMI.QM);
//Тепловой расход, Вт
mb_AI_Processing(UPA_PIR4_mb_AI_DRV.QQ,UPA_PIR4_mb_AI_Settings.QQ,UPA_PIR4_mb_AI_FromHMI.QQ,UPA_PIR4_mb_AI_ToHMI.QQ);
//Концентрация
mb_AI_Processing(UPA_PIR4_mb_AI_DRV.KONC,UPA_PIR4_mb_AI_Settings.KONC,UPA_PIR4_mb_AI_FromHMI.KONC,UPA_PIR4_mb_AI_ToHMI.KONC);
//Коэффициент сжимаемости газа
mb_AI_Processing(UPA_PIR4_mb_AI_DRV.K_s,UPA_PIR4_mb_AI_Settings.K_s,UPA_PIR4_mb_AI_FromHMI.K_s,UPA_PIR4_mb_AI_ToHMI.K_s);
//Плотность 
mb_AI_Processing(UPA_PIR4_mb_AI_DRV.PLT,UPA_PIR4_mb_AI_Settings.PLT,UPA_PIR4_mb_AI_FromHMI.PLT,UPA_PIR4_mb_AI_ToHMI.PLT);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="I6NLZ5XIIOXMEMLMSW235JLHSY" Name="UPA_PIR5_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
UPA_PIR5_mb_AI_ToHMI.T_SR.manual := tmpPermit; //Температура среды (в точке, где измеряется расход);
UPA_PIR5_mb_AI_ToHMI.P_SR.manual := tmpPermit; //Давление среды (в точке, где измеряется расход);
UPA_PIR5_mb_AI_ToHMI.T_SR_2.manual := tmpPermit; //Температура среды (в точке, где измеряется расход), канал 2;
UPA_PIR5_mb_AI_ToHMI.P_SR_2.manual := tmpPermit; //Давление среды (в точке, где измеряется расход), канал 2;
UPA_PIR5_mb_AI_ToHMI.QV.manual := tmpPermit; //Объемный расход, м3/час;
UPA_PIR5_mb_AI_ToHMI.QV_ST.manual := tmpPermit; //Объемный расход, приведенный к стандартным условиям, нм3/час;
UPA_PIR5_mb_AI_ToHMI.QM.manual := tmpPermit; //Массовый расход, кг/с;
UPA_PIR5_mb_AI_ToHMI.QQ.manual := tmpPermit; //Тепловой расход, Вт;
UPA_PIR5_mb_AI_ToHMI.KONC.manual := tmpPermit; //Концентрация;
UPA_PIR5_mb_AI_ToHMI.K_s.manual := tmpPermit; //Коэффициент сжимаемости газа;
UPA_PIR5_mb_AI_ToHMI.PLT.manual := tmpPermit; //Плотность ;
//Конец сгенерированного кода
//Начало сгенерированного кода AI_Alter
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="FBNLL3C2ITAV7WVGR2OYTYVJNM" Name="UPA_PIR5_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR5_mb_AI_Settings.T_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,0);
//Давление среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR5_mb_AI_Settings.P_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,1);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR5_mb_AI_Settings.T_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR5_mb_AI_Settings.P_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,3);
//Объемный расход, м3/час
mb_AI_init(UPA_PIR5_mb_AI_Settings.QV,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,4);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_init(UPA_PIR5_mb_AI_Settings.QV_ST,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,5);
//Массовый расход, кг/с
mb_AI_init(UPA_PIR5_mb_AI_Settings.QM,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,6);
//Тепловой расход, Вт
mb_AI_init(UPA_PIR5_mb_AI_Settings.QQ,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,7);
//Концентрация
mb_AI_init(UPA_PIR5_mb_AI_Settings.KONC,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,8);
//Коэффициент сжимаемости газа
mb_AI_init(UPA_PIR5_mb_AI_Settings.K_s,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,9);
//Плотность 
mb_AI_init(UPA_PIR5_mb_AI_Settings.PLT,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,10);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR5_mb_AI_DRV.T_SR,UPA_PIR5_mb_AI_Settings.T_SR,UPA_PIR5_mb_AI_FromHMI.T_SR,UPA_PIR5_mb_AI_ToHMI.T_SR);
//Давление среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR5_mb_AI_DRV.P_SR,UPA_PIR5_mb_AI_Settings.P_SR,UPA_PIR5_mb_AI_FromHMI.P_SR,UPA_PIR5_mb_AI_ToHMI.P_SR);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR5_mb_AI_DRV.T_SR_2,UPA_PIR5_mb_AI_Settings.T_SR_2,UPA_PIR5_mb_AI_FromHMI.T_SR_2,UPA_PIR5_mb_AI_ToHMI.T_SR_2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR5_mb_AI_DRV.P_SR_2,UPA_PIR5_mb_AI_Settings.P_SR_2,UPA_PIR5_mb_AI_FromHMI.P_SR_2,UPA_PIR5_mb_AI_ToHMI.P_SR_2);
//Объемный расход, м3/час
mb_AI_Processing(UPA_PIR5_mb_AI_DRV.QV,UPA_PIR5_mb_AI_Settings.QV,UPA_PIR5_mb_AI_FromHMI.QV,UPA_PIR5_mb_AI_ToHMI.QV);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_Processing(UPA_PIR5_mb_AI_DRV.QV_ST,UPA_PIR5_mb_AI_Settings.QV_ST,UPA_PIR5_mb_AI_FromHMI.QV_ST,UPA_PIR5_mb_AI_ToHMI.QV_ST);
//Массовый расход, кг/с
mb_AI_Processing(UPA_PIR5_mb_AI_DRV.QM,UPA_PIR5_mb_AI_Settings.QM,UPA_PIR5_mb_AI_FromHMI.QM,UPA_PIR5_mb_AI_ToHMI.QM);
//Тепловой расход, Вт
mb_AI_Processing(UPA_PIR5_mb_AI_DRV.QQ,UPA_PIR5_mb_AI_Settings.QQ,UPA_PIR5_mb_AI_FromHMI.QQ,UPA_PIR5_mb_AI_ToHMI.QQ);
//Концентрация
mb_AI_Processing(UPA_PIR5_mb_AI_DRV.KONC,UPA_PIR5_mb_AI_Settings.KONC,UPA_PIR5_mb_AI_FromHMI.KONC,UPA_PIR5_mb_AI_ToHMI.KONC);
//Коэффициент сжимаемости газа
mb_AI_Processing(UPA_PIR5_mb_AI_DRV.K_s,UPA_PIR5_mb_AI_Settings.K_s,UPA_PIR5_mb_AI_FromHMI.K_s,UPA_PIR5_mb_AI_ToHMI.K_s);
//Плотность 
mb_AI_Processing(UPA_PIR5_mb_AI_DRV.PLT,UPA_PIR5_mb_AI_Settings.PLT,UPA_PIR5_mb_AI_FromHMI.PLT,UPA_PIR5_mb_AI_ToHMI.PLT);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="WTSJI3DUJWFKWQF3L2XPKGGNG4" Name="UPA_PIR6_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
UPA_PIR6_mb_AI_ToHMI.T_SR.manual := tmpPermit; //Температура среды (в точке, где измеряется расход);
UPA_PIR6_mb_AI_ToHMI.P_SR.manual := tmpPermit; //Давление среды (в точке, где измеряется расход);
UPA_PIR6_mb_AI_ToHMI.T_SR_2.manual := tmpPermit; //Температура среды (в точке, где измеряется расход), канал 2;
UPA_PIR6_mb_AI_ToHMI.P_SR_2.manual := tmpPermit; //Давление среды (в точке, где измеряется расход), канал 2;
UPA_PIR6_mb_AI_ToHMI.QV.manual := tmpPermit; //Объемный расход, м3/час;
UPA_PIR6_mb_AI_ToHMI.QV_ST.manual := tmpPermit; //Объемный расход, приведенный к стандартным условиям, нм3/час;
UPA_PIR6_mb_AI_ToHMI.QM.manual := tmpPermit; //Массовый расход, кг/с;
UPA_PIR6_mb_AI_ToHMI.QQ.manual := tmpPermit; //Тепловой расход, Вт;
UPA_PIR6_mb_AI_ToHMI.KONC.manual := tmpPermit; //Концентрация;
UPA_PIR6_mb_AI_ToHMI.K_s.manual := tmpPermit; //Коэффициент сжимаемости газа;
UPA_PIR6_mb_AI_ToHMI.PLT.manual := tmpPermit; //Плотность ;
//Конец сгенерированного кода
//Начало сгенерированного кода AI_Alter
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="7WKZEZABIFDQEOSA4WMJHB6A4I" Name="UPA_PIR6_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR6_mb_AI_Settings.T_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,0);
//Давление среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR6_mb_AI_Settings.P_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,1);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR6_mb_AI_Settings.T_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR6_mb_AI_Settings.P_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,3);
//Объемный расход, м3/час
mb_AI_init(UPA_PIR6_mb_AI_Settings.QV,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,4);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_init(UPA_PIR6_mb_AI_Settings.QV_ST,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,5);
//Массовый расход, кг/с
mb_AI_init(UPA_PIR6_mb_AI_Settings.QM,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,6);
//Тепловой расход, Вт
mb_AI_init(UPA_PIR6_mb_AI_Settings.QQ,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,7);
//Концентрация
mb_AI_init(UPA_PIR6_mb_AI_Settings.KONC,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,8);
//Коэффициент сжимаемости газа
mb_AI_init(UPA_PIR6_mb_AI_Settings.K_s,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,9);
//Плотность 
mb_AI_init(UPA_PIR6_mb_AI_Settings.PLT,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,10);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR6_mb_AI_DRV.T_SR,UPA_PIR6_mb_AI_Settings.T_SR,UPA_PIR6_mb_AI_FromHMI.T_SR,UPA_PIR6_mb_AI_ToHMI.T_SR);
//Давление среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR6_mb_AI_DRV.P_SR,UPA_PIR6_mb_AI_Settings.P_SR,UPA_PIR6_mb_AI_FromHMI.P_SR,UPA_PIR6_mb_AI_ToHMI.P_SR);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR6_mb_AI_DRV.T_SR_2,UPA_PIR6_mb_AI_Settings.T_SR_2,UPA_PIR6_mb_AI_FromHMI.T_SR_2,UPA_PIR6_mb_AI_ToHMI.T_SR_2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR6_mb_AI_DRV.P_SR_2,UPA_PIR6_mb_AI_Settings.P_SR_2,UPA_PIR6_mb_AI_FromHMI.P_SR_2,UPA_PIR6_mb_AI_ToHMI.P_SR_2);
//Объемный расход, м3/час
mb_AI_Processing(UPA_PIR6_mb_AI_DRV.QV,UPA_PIR6_mb_AI_Settings.QV,UPA_PIR6_mb_AI_FromHMI.QV,UPA_PIR6_mb_AI_ToHMI.QV);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_Processing(UPA_PIR6_mb_AI_DRV.QV_ST,UPA_PIR6_mb_AI_Settings.QV_ST,UPA_PIR6_mb_AI_FromHMI.QV_ST,UPA_PIR6_mb_AI_ToHMI.QV_ST);
//Массовый расход, кг/с
mb_AI_Processing(UPA_PIR6_mb_AI_DRV.QM,UPA_PIR6_mb_AI_Settings.QM,UPA_PIR6_mb_AI_FromHMI.QM,UPA_PIR6_mb_AI_ToHMI.QM);
//Тепловой расход, Вт
mb_AI_Processing(UPA_PIR6_mb_AI_DRV.QQ,UPA_PIR6_mb_AI_Settings.QQ,UPA_PIR6_mb_AI_FromHMI.QQ,UPA_PIR6_mb_AI_ToHMI.QQ);
//Концентрация
mb_AI_Processing(UPA_PIR6_mb_AI_DRV.KONC,UPA_PIR6_mb_AI_Settings.KONC,UPA_PIR6_mb_AI_FromHMI.KONC,UPA_PIR6_mb_AI_ToHMI.KONC);
//Коэффициент сжимаемости газа
mb_AI_Processing(UPA_PIR6_mb_AI_DRV.K_s,UPA_PIR6_mb_AI_Settings.K_s,UPA_PIR6_mb_AI_FromHMI.K_s,UPA_PIR6_mb_AI_ToHMI.K_s);
//Плотность 
mb_AI_Processing(UPA_PIR6_mb_AI_DRV.PLT,UPA_PIR6_mb_AI_Settings.PLT,UPA_PIR6_mb_AI_FromHMI.PLT,UPA_PIR6_mb_AI_ToHMI.PLT);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="5IXZKJA7JJNM3LCPXK4SS4ELQM" Name="UPA_PIR7_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
UPA_PIR7_mb_AI_ToHMI.T_SR.manual := tmpPermit; //Температура среды (в точке, где измеряется расход);
UPA_PIR7_mb_AI_ToHMI.P_SR.manual := tmpPermit; //Давление среды (в точке, где измеряется расход);
UPA_PIR7_mb_AI_ToHMI.T_SR_2.manual := tmpPermit; //Температура среды (в точке, где измеряется расход), канал 2;
UPA_PIR7_mb_AI_ToHMI.P_SR_2.manual := tmpPermit; //Давление среды (в точке, где измеряется расход), канал 2;
UPA_PIR7_mb_AI_ToHMI.QV.manual := tmpPermit; //Объемный расход, м3/час;
UPA_PIR7_mb_AI_ToHMI.QV_ST.manual := tmpPermit; //Объемный расход, приведенный к стандартным условиям, нм3/час;
UPA_PIR7_mb_AI_ToHMI.QM.manual := tmpPermit; //Массовый расход, кг/с;
UPA_PIR7_mb_AI_ToHMI.QQ.manual := tmpPermit; //Тепловой расход, Вт;
UPA_PIR7_mb_AI_ToHMI.KONC.manual := tmpPermit; //Концентрация;
UPA_PIR7_mb_AI_ToHMI.K_s.manual := tmpPermit; //Коэффициент сжимаемости газа;
UPA_PIR7_mb_AI_ToHMI.PLT.manual := tmpPermit; //Плотность ;
//Конец сгенерированного кода
//Начало сгенерированного кода AI_Alter
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="AAMLFBPJJTWQDGPDQC25A4Z4BQ" Name="UPA_PIR7_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR7_mb_AI_Settings.T_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,0);
//Давление среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR7_mb_AI_Settings.P_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,1);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR7_mb_AI_Settings.T_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR7_mb_AI_Settings.P_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,3);
//Объемный расход, м3/час
mb_AI_init(UPA_PIR7_mb_AI_Settings.QV,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,4);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_init(UPA_PIR7_mb_AI_Settings.QV_ST,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,5);
//Массовый расход, кг/с
mb_AI_init(UPA_PIR7_mb_AI_Settings.QM,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,6);
//Тепловой расход, Вт
mb_AI_init(UPA_PIR7_mb_AI_Settings.QQ,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,7);
//Концентрация
mb_AI_init(UPA_PIR7_mb_AI_Settings.KONC,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,8);
//Коэффициент сжимаемости газа
mb_AI_init(UPA_PIR7_mb_AI_Settings.K_s,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,9);
//Плотность 
mb_AI_init(UPA_PIR7_mb_AI_Settings.PLT,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,10);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR7_mb_AI_DRV.T_SR,UPA_PIR7_mb_AI_Settings.T_SR,UPA_PIR7_mb_AI_FromHMI.T_SR,UPA_PIR7_mb_AI_ToHMI.T_SR);
//Давление среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR7_mb_AI_DRV.P_SR,UPA_PIR7_mb_AI_Settings.P_SR,UPA_PIR7_mb_AI_FromHMI.P_SR,UPA_PIR7_mb_AI_ToHMI.P_SR);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR7_mb_AI_DRV.T_SR_2,UPA_PIR7_mb_AI_Settings.T_SR_2,UPA_PIR7_mb_AI_FromHMI.T_SR_2,UPA_PIR7_mb_AI_ToHMI.T_SR_2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR7_mb_AI_DRV.P_SR_2,UPA_PIR7_mb_AI_Settings.P_SR_2,UPA_PIR7_mb_AI_FromHMI.P_SR_2,UPA_PIR7_mb_AI_ToHMI.P_SR_2);
//Объемный расход, м3/час
mb_AI_Processing(UPA_PIR7_mb_AI_DRV.QV,UPA_PIR7_mb_AI_Settings.QV,UPA_PIR7_mb_AI_FromHMI.QV,UPA_PIR7_mb_AI_ToHMI.QV);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_Processing(UPA_PIR7_mb_AI_DRV.QV_ST,UPA_PIR7_mb_AI_Settings.QV_ST,UPA_PIR7_mb_AI_FromHMI.QV_ST,UPA_PIR7_mb_AI_ToHMI.QV_ST);
//Массовый расход, кг/с
mb_AI_Processing(UPA_PIR7_mb_AI_DRV.QM,UPA_PIR7_mb_AI_Settings.QM,UPA_PIR7_mb_AI_FromHMI.QM,UPA_PIR7_mb_AI_ToHMI.QM);
//Тепловой расход, Вт
mb_AI_Processing(UPA_PIR7_mb_AI_DRV.QQ,UPA_PIR7_mb_AI_Settings.QQ,UPA_PIR7_mb_AI_FromHMI.QQ,UPA_PIR7_mb_AI_ToHMI.QQ);
//Концентрация
mb_AI_Processing(UPA_PIR7_mb_AI_DRV.KONC,UPA_PIR7_mb_AI_Settings.KONC,UPA_PIR7_mb_AI_FromHMI.KONC,UPA_PIR7_mb_AI_ToHMI.KONC);
//Коэффициент сжимаемости газа
mb_AI_Processing(UPA_PIR7_mb_AI_DRV.K_s,UPA_PIR7_mb_AI_Settings.K_s,UPA_PIR7_mb_AI_FromHMI.K_s,UPA_PIR7_mb_AI_ToHMI.K_s);
//Плотность 
mb_AI_Processing(UPA_PIR7_mb_AI_DRV.PLT,UPA_PIR7_mb_AI_Settings.PLT,UPA_PIR7_mb_AI_FromHMI.PLT,UPA_PIR7_mb_AI_ToHMI.PLT);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="OY3ZV4QWI7F6QGHWL64CAGRLOQ" Name="UPA_PIR8_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
UPA_PIR8_mb_AI_ToHMI.T_SR.manual := tmpPermit; //Температура среды (в точке, где измеряется расход);
UPA_PIR8_mb_AI_ToHMI.P_SR.manual := tmpPermit; //Давление среды (в точке, где измеряется расход);
UPA_PIR8_mb_AI_ToHMI.T_SR_2.manual := tmpPermit; //Температура среды (в точке, где измеряется расход), канал 2;
UPA_PIR8_mb_AI_ToHMI.P_SR_2.manual := tmpPermit; //Давление среды (в точке, где измеряется расход), канал 2;
UPA_PIR8_mb_AI_ToHMI.QV.manual := tmpPermit; //Объемный расход, м3/час;
UPA_PIR8_mb_AI_ToHMI.QV_ST.manual := tmpPermit; //Объемный расход, приведенный к стандартным условиям, нм3/час;
UPA_PIR8_mb_AI_ToHMI.QM.manual := tmpPermit; //Массовый расход, кг/с;
UPA_PIR8_mb_AI_ToHMI.QQ.manual := tmpPermit; //Тепловой расход, Вт;
UPA_PIR8_mb_AI_ToHMI.KONC.manual := tmpPermit; //Концентрация;
UPA_PIR8_mb_AI_ToHMI.K_s.manual := tmpPermit; //Коэффициент сжимаемости газа;
UPA_PIR8_mb_AI_ToHMI.PLT.manual := tmpPermit; //Плотность ;
//Конец сгенерированного кода
//Начало сгенерированного кода AI_Alter
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="LOI5ABIYIBJG2DTYE2YY2RTYBQ" Name="UPA_PIR8_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR8_mb_AI_Settings.T_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,0);
//Давление среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR8_mb_AI_Settings.P_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,1);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR8_mb_AI_Settings.T_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR8_mb_AI_Settings.P_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,3);
//Объемный расход, м3/час
mb_AI_init(UPA_PIR8_mb_AI_Settings.QV,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,4);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_init(UPA_PIR8_mb_AI_Settings.QV_ST,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,5);
//Массовый расход, кг/с
mb_AI_init(UPA_PIR8_mb_AI_Settings.QM,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,6);
//Тепловой расход, Вт
mb_AI_init(UPA_PIR8_mb_AI_Settings.QQ,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,7);
//Концентрация
mb_AI_init(UPA_PIR8_mb_AI_Settings.KONC,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,8);
//Коэффициент сжимаемости газа
mb_AI_init(UPA_PIR8_mb_AI_Settings.K_s,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,9);
//Плотность 
mb_AI_init(UPA_PIR8_mb_AI_Settings.PLT,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,10);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR8_mb_AI_DRV.T_SR,UPA_PIR8_mb_AI_Settings.T_SR,UPA_PIR8_mb_AI_FromHMI.T_SR,UPA_PIR8_mb_AI_ToHMI.T_SR);
//Давление среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR8_mb_AI_DRV.P_SR,UPA_PIR8_mb_AI_Settings.P_SR,UPA_PIR8_mb_AI_FromHMI.P_SR,UPA_PIR8_mb_AI_ToHMI.P_SR);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR8_mb_AI_DRV.T_SR_2,UPA_PIR8_mb_AI_Settings.T_SR_2,UPA_PIR8_mb_AI_FromHMI.T_SR_2,UPA_PIR8_mb_AI_ToHMI.T_SR_2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR8_mb_AI_DRV.P_SR_2,UPA_PIR8_mb_AI_Settings.P_SR_2,UPA_PIR8_mb_AI_FromHMI.P_SR_2,UPA_PIR8_mb_AI_ToHMI.P_SR_2);
//Объемный расход, м3/час
mb_AI_Processing(UPA_PIR8_mb_AI_DRV.QV,UPA_PIR8_mb_AI_Settings.QV,UPA_PIR8_mb_AI_FromHMI.QV,UPA_PIR8_mb_AI_ToHMI.QV);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_Processing(UPA_PIR8_mb_AI_DRV.QV_ST,UPA_PIR8_mb_AI_Settings.QV_ST,UPA_PIR8_mb_AI_FromHMI.QV_ST,UPA_PIR8_mb_AI_ToHMI.QV_ST);
//Массовый расход, кг/с
mb_AI_Processing(UPA_PIR8_mb_AI_DRV.QM,UPA_PIR8_mb_AI_Settings.QM,UPA_PIR8_mb_AI_FromHMI.QM,UPA_PIR8_mb_AI_ToHMI.QM);
//Тепловой расход, Вт
mb_AI_Processing(UPA_PIR8_mb_AI_DRV.QQ,UPA_PIR8_mb_AI_Settings.QQ,UPA_PIR8_mb_AI_FromHMI.QQ,UPA_PIR8_mb_AI_ToHMI.QQ);
//Концентрация
mb_AI_Processing(UPA_PIR8_mb_AI_DRV.KONC,UPA_PIR8_mb_AI_Settings.KONC,UPA_PIR8_mb_AI_FromHMI.KONC,UPA_PIR8_mb_AI_ToHMI.KONC);
//Коэффициент сжимаемости газа
mb_AI_Processing(UPA_PIR8_mb_AI_DRV.K_s,UPA_PIR8_mb_AI_Settings.K_s,UPA_PIR8_mb_AI_FromHMI.K_s,UPA_PIR8_mb_AI_ToHMI.K_s);
//Плотность 
mb_AI_Processing(UPA_PIR8_mb_AI_DRV.PLT,UPA_PIR8_mb_AI_Settings.PLT,UPA_PIR8_mb_AI_FromHMI.PLT,UPA_PIR8_mb_AI_ToHMI.PLT);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="3FW47CV4IBY74TMJF62NGVA36Y" Name="UPA_PIR9_AI_Permit" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables>
                            <Variable UUID="TGLRFATQ24XUPFHW373KXU5CZ4" Name="tmpPermit" Type="BOOL" Usage="internal" />
                        </Variables>
                        <ST><![CDATA[//--- Групповое разрешение ДУ ---
tmpPermit := true;
//Начало сгенерированного кода AI_Permit
UPA_PIR9_mb_AI_ToHMI.T_SR.manual := tmpPermit; //Температура среды (в точке, где измеряется расход);
UPA_PIR9_mb_AI_ToHMI.P_SR.manual := tmpPermit; //Давление среды (в точке, где измеряется расход);
UPA_PIR9_mb_AI_ToHMI.T_SR_2.manual := tmpPermit; //Температура среды (в точке, где измеряется расход), канал 2;
UPA_PIR9_mb_AI_ToHMI.P_SR_2.manual := tmpPermit; //Давление среды (в точке, где измеряется расход), канал 2;
UPA_PIR9_mb_AI_ToHMI.QV.manual := tmpPermit; //Объемный расход, м3/час;
UPA_PIR9_mb_AI_ToHMI.QV_ST.manual := tmpPermit; //Объемный расход, приведенный к стандартным условиям, нм3/час;
UPA_PIR9_mb_AI_ToHMI.QM.manual := tmpPermit; //Массовый расход, кг/с;
UPA_PIR9_mb_AI_ToHMI.QQ.manual := tmpPermit; //Тепловой расход, Вт;
UPA_PIR9_mb_AI_ToHMI.KONC.manual := tmpPermit; //Концентрация;
UPA_PIR9_mb_AI_ToHMI.K_s.manual := tmpPermit; //Коэффициент сжимаемости газа;
UPA_PIR9_mb_AI_ToHMI.PLT.manual := tmpPermit; //Плотность ;
//Конец сгенерированного кода
//Начало сгенерированного кода AI_Alter
//Конец сгенерированного кода
]]></ST>
                    </Function>
                    <Function UUID="TPOEFNTMILTLSJ5RLSVT52PUMY" Name="UPA_PIR9_mb_AI_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                        <Variables />
                        <ST><![CDATA[if init = false then
//------------------------------- аргументы функции инициализации --------------------------------
// 1                               минимум шкалы канала, ед.изм. Не может быть >= max
// 2                               |    максимум шкалы канала, ед.изм. Не может быть <= min
// 3                               |    |   уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
// 4                               |    |   |   уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
// 5                               |    |   |   |    уровень обрыва вниз, ед.изм. Не может быть >= loLim
// 6                               |    |   |   |    |    уровень обрыва вверх, ед.изм. Не может быть <= hiLim
// 7                               |    |   |   |    |    |  Формат данных
// 8                               |    |   |   |    |    |  |  Настройка 1
// 9                               |    |   |   |    |    |  |  |   Настройка 2
//12                               |    |   |   |    |    |  |  |   |   тау фильтра, сек. Если «0» - фильтрация отсутствует
//13                               |    |   |   |    |    |  |  |   |   |  номер по порядку	
//mb_AI_init(mb_AI_Settings.T_VT1,0.0,50.0,0.0,0.0,-1.5,51.5,0,0.0,0.0,0.0,0);
//-------------------------------------------------------------------------------------------
//Начало сгенерированного кода AI_init
//Температура среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR9_mb_AI_Settings.T_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,0);
//Давление среды (в точке, где измеряется расход)
mb_AI_init(UPA_PIR9_mb_AI_Settings.P_SR,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,1);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR9_mb_AI_Settings.T_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_init(UPA_PIR9_mb_AI_Settings.P_SR_2,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,3);
//Объемный расход, м3/час
mb_AI_init(UPA_PIR9_mb_AI_Settings.QV,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,4);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_init(UPA_PIR9_mb_AI_Settings.QV_ST,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,5);
//Массовый расход, кг/с
mb_AI_init(UPA_PIR9_mb_AI_Settings.QM,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,6);
//Тепловой расход, Вт
mb_AI_init(UPA_PIR9_mb_AI_Settings.QQ,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,7);
//Концентрация
mb_AI_init(UPA_PIR9_mb_AI_Settings.KONC,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,8);
//Коэффициент сжимаемости газа
mb_AI_init(UPA_PIR9_mb_AI_Settings.K_s,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,9);
//Плотность 
mb_AI_init(UPA_PIR9_mb_AI_Settings.PLT,0.0,10000.0,-300.0,10300.0,-600.0,10600.0,1,0.0,0.0,0.0,10);
//Конец сгенерированного кода
end_if;
//Начало сгенерированного кода AI_Processing
//Температура среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR9_mb_AI_DRV.T_SR,UPA_PIR9_mb_AI_Settings.T_SR,UPA_PIR9_mb_AI_FromHMI.T_SR,UPA_PIR9_mb_AI_ToHMI.T_SR);
//Давление среды (в точке, где измеряется расход)
mb_AI_Processing(UPA_PIR9_mb_AI_DRV.P_SR,UPA_PIR9_mb_AI_Settings.P_SR,UPA_PIR9_mb_AI_FromHMI.P_SR,UPA_PIR9_mb_AI_ToHMI.P_SR);
//Температура среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR9_mb_AI_DRV.T_SR_2,UPA_PIR9_mb_AI_Settings.T_SR_2,UPA_PIR9_mb_AI_FromHMI.T_SR_2,UPA_PIR9_mb_AI_ToHMI.T_SR_2);
//Давление среды (в точке, где измеряется расход), канал 2
mb_AI_Processing(UPA_PIR9_mb_AI_DRV.P_SR_2,UPA_PIR9_mb_AI_Settings.P_SR_2,UPA_PIR9_mb_AI_FromHMI.P_SR_2,UPA_PIR9_mb_AI_ToHMI.P_SR_2);
//Объемный расход, м3/час
mb_AI_Processing(UPA_PIR9_mb_AI_DRV.QV,UPA_PIR9_mb_AI_Settings.QV,UPA_PIR9_mb_AI_FromHMI.QV,UPA_PIR9_mb_AI_ToHMI.QV);
//Объемный расход, приведенный к стандартным условиям, нм3/час
mb_AI_Processing(UPA_PIR9_mb_AI_DRV.QV_ST,UPA_PIR9_mb_AI_Settings.QV_ST,UPA_PIR9_mb_AI_FromHMI.QV_ST,UPA_PIR9_mb_AI_ToHMI.QV_ST);
//Массовый расход, кг/с
mb_AI_Processing(UPA_PIR9_mb_AI_DRV.QM,UPA_PIR9_mb_AI_Settings.QM,UPA_PIR9_mb_AI_FromHMI.QM,UPA_PIR9_mb_AI_ToHMI.QM);
//Тепловой расход, Вт
mb_AI_Processing(UPA_PIR9_mb_AI_DRV.QQ,UPA_PIR9_mb_AI_Settings.QQ,UPA_PIR9_mb_AI_FromHMI.QQ,UPA_PIR9_mb_AI_ToHMI.QQ);
//Концентрация
mb_AI_Processing(UPA_PIR9_mb_AI_DRV.KONC,UPA_PIR9_mb_AI_Settings.KONC,UPA_PIR9_mb_AI_FromHMI.KONC,UPA_PIR9_mb_AI_ToHMI.KONC);
//Коэффициент сжимаемости газа
mb_AI_Processing(UPA_PIR9_mb_AI_DRV.K_s,UPA_PIR9_mb_AI_Settings.K_s,UPA_PIR9_mb_AI_FromHMI.K_s,UPA_PIR9_mb_AI_ToHMI.K_s);
//Плотность 
mb_AI_Processing(UPA_PIR9_mb_AI_DRV.PLT,UPA_PIR9_mb_AI_Settings.PLT,UPA_PIR9_mb_AI_FromHMI.PLT,UPA_PIR9_mb_AI_ToHMI.PLT);
//Конец сгенерированного кода
]]></ST>
                    </Function>
                </Folder>
                <FunctionBlock UUID="7NYXJGRWY6AEXEDFHDIMWNW2UY" Name="UPA_PIR_mb_AI">
                    <Variables />
                    <ST><![CDATA[//= Вызов процедур ввода аналоговых параметров от расходомеров ПИР
//=================================================================

//= ПИР1
UPA_PIR1_mb_AI_CallAll();
//= ПИР2
UPA_PIR2_mb_AI_CallAll();
//= ПИР3
UPA_PIR3_mb_AI_CallAll();
//= ПИР4
UPA_PIR4_mb_AI_CallAll();
//= ПИР5
UPA_PIR5_mb_AI_CallAll();
//= ПИР6
UPA_PIR6_mb_AI_CallAll();
//= ПИР7
UPA_PIR7_mb_AI_CallAll();
//= ПИР8
UPA_PIR8_mb_AI_CallAll();
//= ПИР9
UPA_PIR9_mb_AI_CallAll();
//= ПИР10
UPA_PIR10_mb_AI_CallAll();
//= ПИР11
UPA_PIR11_mb_AI_CallAll();
//= ПИР12
UPA_PIR12_mb_AI_CallAll();
//= ПИР13
UPA_PIR13_mb_AI_CallAll();
//= ПИР14
UPA_PIR14_mb_AI_CallAll();]]></ST>
                </FunctionBlock>
            </Folder>
            <Function UUID="2F3UB23OXIHELI6M3KYMPN46DE" Name="mb_AI_Processing" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="L27BSM7XEZH7PBAFCWXQPDPAHM" Name="in" Type="REAL" Usage="input" />
                    <Variable UUID="3RRZ672T65H27KGUANWIHJUTAQ" Name="set" Type="T_mb_AI_Settings" TypeUUID="ESHVMMDQRNWUVGD5OOWOXN2N44" Usage="input" />
                    <Variable UUID="6GENIMNWPJBGLDUSADU5POKSIU" Name="fromHMI" Type="T_AI_FromHMI" TypeUUID="VZ3H6GEVT3CUTI65HAA5AALRAY" Usage="inout" />
                    <Variable UUID="2ISD2SFA6RHOVBLDUJA43YIYKA" Name="toHMI" Type="T_AI_ToHMI" TypeUUID="J74RQIZG5I6EZDCM32A6SZRKIM" Usage="inout" />
                    <Variable UUID="4FOVGDDSVNDJVMJ33BNQD4UHBQ" Name="criticalSettingErr" Type="BOOL" Usage="internal" />
                    <Variable UUID="SIMSIEIFINHRJIC55L2DCXT3CM" Name="limSettingErr" Type="BOOL" Usage="internal" />
                    <Variable UUID="BGOHZRGBKVHJFGQBERMGBC6VXU" Name="brkSettingErr" Type="BOOL" Usage="internal" />
                    <Variable UUID="26HV5IVYA7UE5DV5U7Q5EC2O2Q" Name="tmp" Type="REAL" Usage="internal" />
                </Variables>
                <ST><![CDATA[//0- float ABCD, 1- float CDAB, 2- float BADC, 3- float DCBA, 4 - INT ABxN,  5 - INT BAxN,   6 - INT ABxR,   7 - INT BAxR
//                                                            8 - UINT ABxN, 9 - UINT BAxN, 10 - UINT ABxR, 11 - UINT BAxR

//---------------------- Поиск ошибок задания настроек – несоответствие допустимым значениям (BOOL)-----------------------------------------
criticalSettingErr := (set.format = 6 or set.format = 7 or set.format = 10 or set.format = 11) and (set.min >= set.max or set.set2 = set.set1);
limSettingErr := set.loLim >= set.hiLim or set.loLim >= set.max or set.hiLim <= set.min;
brkSettingErr := set.hiBrk <= set.hiLim or set.loBrk >= set.loLim;
toHMI.settingErr := criticalSettingErr or limSettingErr or brkSettingErr;
toHMI.fault_common := toHMI.settingErr or toHMI.break or toHMI.up_scale or toHMI.down_scale;//обобщённая неисправность. Образуется по «ИЛИ» от break,up_scale,down_scale,ROC,settingErr (BOOL)
toHMI.criticalFault := criticalSettingErr or toHMI.break;//Критическая ошибка, свидетельствующая о полной неисправности канала
if criticalSettingErr then
	return;
end_if;
//---------------------------------------------------------------------------------------------------------------------------------------------
//----------------- Пересчёт парамера из кодов АЦП в единицы измерения -----------------------------------------------------------------------
if    set.format = 4 or set.format = 5 then
	if set.set1 = 0.0 then
		set.set1 := 1.0;
	end_if;
	toHMI.measure := in * set.set1;
elsif set.format = 6 or set.format = 7 then
	toHMI.measure := (in - set.set1)/(set.set2 - set.set1)*(set.max - set.min) + set.min;
else
	toHMI.measure := in;
end_if;
//---------------------------------------------------------------------------------------------------------------------------------------------
//--------------------------------------- Определение обрыва и зашкалов -----------------------------------------------------------------------
if not brkSettingErr then
	toHMI.break      := toHMI.break      and not fromHMI.BTNworkOn or toHMI.measure > set.hiBrk or toHMI.measure < set.loBrk;	//обрыв канала (BOOL)
end_if;
if not limSettingErr then
	toHMI.up_scale   := toHMI.up_scale   and not fromHMI.BTNworkOn or toHMI.measure > set.hiLim;							//выход за верхний зашкал (BOOL)
	toHMI.down_scale := toHMI.down_scale and not fromHMI.BTNworkOn or toHMI.measure < set.loLim;							//выход за нижний зашкал (BOOL)
end_if;
//------------------------------------------------------------------------------------------------------------------------------------------------
//------------------- Обработка ДУ ----------------------------------------------------------------------------------------------------------
tmp := toHMI.measure;
toHMI.manual := (fromHMI.BTNmanualOn or toHMI.manual) and not fromHMI.BTNworkOn;//канал в дист.упр. (BOOL)
if toHMI.manual then
	toHMI.PV := fromHMI.manualTarget;//значение для САУ. Рассчитывается из  measure, Manual_Target с учётом неисправностей и фильтрации (REAL)
else
	toHMI.PV := toHMI.measure;
	fromHMI.manualTarget := toHMI.PV;
end_if;
if set.tau > 0.0 then
	toHMI.PV := toHMI.PV + (tmp - toHMI.PV)/set.tau;
else
	toHMI.PV := tmp;
end_if;
//-------------- Обнуление кнопок -----------
fromHMI.BTNmanualOn := false;
fromHMI.BTNworkOn := false;]]></ST>
            </Function>
            <Function UUID="NVF5WA36MS3EDEJJCGBUSAEYDY" Name="mb_AI_init" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="3PUM5EGSZZGW5B46GT7GJGJYHY" Name="setStruct" Type="T_mb_AI_Settings" TypeUUID="ESHVMMDQRNWUVGD5OOWOXN2N44" Usage="output" />
                    <Variable UUID="A4X47N4MTNEGBMHG5JCV54OYD4" Name="min" Type="REAL" Usage="input" />
                    <Variable UUID="J3PMJZQQPFCKTLXZKHCSBVW2FY" Name="max" Type="REAL" Usage="input" />
                    <Variable UUID="SNMC52OSVNCEJC2WKNQ55IXRDU" Name="loLim" Type="REAL" Usage="input" />
                    <Variable UUID="C5FFNJBSORADZKDONAJYIOYQMM" Name="hiLim" Type="REAL" Usage="input" />
                    <Variable UUID="BLJ7QPD3B5GIFOK5INHVLE4N4M" Name="loBrk" Type="REAL" Usage="input" />
                    <Variable UUID="BRAZ2SPNOBCCNMKASNN375STCQ" Name="hiBrk" Type="REAL" Usage="input" />
                    <Variable UUID="UCAGZSJ77NAYTFYRM4N5QV62A4" Name="format" Type="INT" Usage="input" />
                    <Variable UUID="PPFZBCEPQNDGDPXS4GFZ5DG2R4" Name="set1" Type="REAL" Usage="input" />
                    <Variable UUID="YGKONKKT2ZACFPHVF5HQIODJOQ" Name="set2" Type="REAL" Usage="input" />
                    <Variable UUID="FIPADVDHNWOEBDOPFXPJ6QM5UM" Name="tau" Type="REAL" Usage="input" />
                    <Variable UUID="O2PSTUZUB5EIRAZBONFYBOPYXU" Name="id" Type="INT" Usage="input" />
                </Variables>
                <ST><![CDATA[setStruct.min:= min;//минимум шкалы канала, ед.изм. Не может быть >= max
setStruct.max:= max;//максимум шкалы канала, ед.изм. Не может быть <= min
setStruct.loLim:= loLim;//уровень зашкала вниз, ед.изм. Не может быть >= hiLim и < min
setStruct.hiLim:= hiLim;//уровень зашкала вверх, ед.изм. Не может быть <= loLim и > max
setStruct.loBrk:= loBrk;//уровень зашкала вниз, ед.изм. Не может быть >= loLim
setStruct.hiBrk:= hiBrk;//уровень обрыва вверх, ед.изм. Не может быть <= hiLim
setStruct.format:= format;//Формат данных
setStruct.set1:= set1;//Настройка 1
setStruct.set2:= set2;//Настройка 2
setStruct.tau:= tau;//Настройка лаг-фильтра
setStruct.id:= id;//номер по порядку]]></ST>
            </Function>
        </Folder>
        <Folder Name="Режимы" Comment="" Data="" UUID="U22VFDPY5F3URPTKOPR5CMJUKI">
            <Function UUID="4Q6M2NOJJZVU3L6AW4OON5QEFE" Name="Graph_Processing" ResultTypeUUID="J2GLKR5SZATEPPS6SYYJ4FXRO4">
                <Variables>
                    <Variable UUID="JAJ25GPVEBHEDJFPKUJ6NFJW5A" Name="graph" Type="T_Graph" TypeUUID="KHQWP3RHOTWEFJWBPCB6JIVNWI" Usage="inout" />
                    <Variable UUID="YFBXCL5MXYLUPBW4MBKKSVU7OQ" Name="i" Type="INT" Usage="internal" />
                    <Variable UUID="NMDCZXMXGX4UFDOHJS75GMLLJ4" Name="j" Type="INT" Usage="internal" />
                </Variables>
                <ST><![CDATA[(*for i := 0 to 32 do
	if graph.state = i then
		for j := 0 to 32 do
			if EXTRACT(graph.cond[i],j) then graph.state := j; end_if;
		end_for;
	end_if;
end_for;
*)

//=  31
for i := 0 to 31 do
//=	if graph.state = i then
		for j := 0 to 31 do
			if EXTRACT(graph.cond[i],j) then graph.state := j; (*exit;*) end_if;
		end_for;
//=	end_if;
end_for;


//= обнуляем условия переходов
for i:= 0 to 31 do
	graph.cond[i] := DWORD#0;
end_for;

Graph_Processing := graph.state;

]]></ST>
            </Function>
            <Function UUID="XOMDT3IVRFDTLE3KIXYOQ6CO2I" Name="Mode_CallAll" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
                <Variables>
                    <Variable UUID="4GGEESI4WEBELMXGJPCY6EMSXI" Name="AO" Type="INT" Usage="internal" />
                    <Variable UUID="NB5XWH7SF4PULE6RHMMEANS5QA" Name="Norma" Type="INT" Usage="internal" />
                    <Variable UUID="GMMSZZIWZ2QENHQ6ZGJYWZVZQM" Name="Fault" Type="INT" Usage="internal" />
                </Variables>
                <ST><![CDATA[//УПА
Fault  	:= 0;//Нет режима
//
AO  	:= 1;//АО
Norma  	:= 2;//Норма

//===========================================================================================================================================================================================

//=== АО    ========|======||======||=======================
if not algUPA.AO 	then mdeUPA.graph.cond[AO] := PUTBIT(mdeUPA.graph.cond[AO],  Norma, true); end_if;		// Из АО в Норма
//=== Норма  ========|======||======||=======================
if algUPA.AO 		then mdeUPA.graph.cond[Norma] := PUTBIT(mdeUPA.graph.cond[Norma],AO, 	true); end_if;		// в АО
//===========================================================================================================================================================================================
//============================================================================
UPA_Mode.Num := Graph_Processing(mdeUPA.graph);
//============================================================================
//===========================================================================================================================================================================================

UPA_Mode.AOUPA 	:=  mdeUPA.graph.state = AO;	//АО
UPA_Mode.NormaUPA	:=  mdeUPA.graph.state = Norma;//Резерв

UPA_Mode.FaultUPA := not (UPA_Mode.NormaUPA or UPA_Mode.AOUPA);// Нет режима
]]></ST>
            </Function>
        </Folder>
        <FunctionBlock UUID="6FYJFI56GMYUTBC5ILWW7D63N4" Name="FB_Imit">
            <Variables>
                <Variable UUID="54WEIN3B6QWEPCCDUJ3TRWWWDA" Name="tmr_init" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
            </Variables>
            <ST><![CDATA[tmr_init(IN:= ImitOn, PT:= T#1s);

if not tmr_init.Q then 
	UPA_DI_DRV.Kr_1T2_ON   := TRUE;
	UPA_DI_DRV.Kr_2T2_ON   := TRUE;
	UPA_DI_DRV.Kr_3T2_ON   := TRUE;
	UPA_DI_DRV.Kr_4T2_ON   := TRUE;
	UPA_DI_DRV.Kr_5T2_ON   := TRUE;
	UPA_DI_DRV.Kr_6T2_ON   := TRUE;
	UPA_DI_DRV.Kr_7T2_ON   := TRUE;
	UPA_DI_DRV.Kr_8T2_ON   := TRUE;
	UPA_DI_DRV.Kr_9T2_ON   := TRUE;
	UPA_DI_DRV.Kr_10T2_ON   := TRUE;
	UPA_DI_DRV.Kr_11T2_ON   := TRUE;
	UPA_DI_DRV.Kr_12T2_ON   := TRUE;
	UPA_DI_DRV.Kr_13T2_ON   := TRUE;
	UPA_DI_DRV.Kr_14T2_ON   := TRUE;


else
UPA_DI_DRV.Kr_1T2_ON    := UPA_AM.Kr_1T2.iOn;   UPA_DI_DRV.Kr_1T2_OF   := UPA_AM.Kr_1T2.iOff;
UPA_DI_DRV.Kr_2T2_ON    := UPA_AM.Kr_2T2.iOn;   UPA_DI_DRV.Kr_2T2_OF   := UPA_AM.Kr_2T2.iOff;
UPA_DI_DRV.Kr_3T2_ON    := UPA_AM.Kr_3T2.iOn;   UPA_DI_DRV.Kr_3T2_OF   := UPA_AM.Kr_3T2.iOff;
UPA_DI_DRV.Kr_4T2_ON    := UPA_AM.Kr_4T2.iOn;   UPA_DI_DRV.Kr_4T2_OF   := UPA_AM.Kr_4T2.iOff;
UPA_DI_DRV.Kr_5T2_ON    := UPA_AM.Kr_5T2.iOn;   UPA_DI_DRV.Kr_5T2_OF   := UPA_AM.Kr_5T2.iOff;
UPA_DI_DRV.Kr_6T2_ON    := UPA_AM.Kr_6T2.iOn;   UPA_DI_DRV.Kr_6T2_OF   := UPA_AM.Kr_6T2.iOff;
UPA_DI_DRV.Kr_7T2_ON    := UPA_AM.Kr_7T2.iOn;   UPA_DI_DRV.Kr_7T2_OF   := UPA_AM.Kr_7T2.iOff;
UPA_DI_DRV.Kr_8T2_ON    := UPA_AM.Kr_8T2.iOn;   UPA_DI_DRV.Kr_8T2_OF   := UPA_AM.Kr_8T2.iOff;
UPA_DI_DRV.Kr_9T2_ON    := UPA_AM.Kr_9T2.iOn;   UPA_DI_DRV.Kr_9T2_OF   := UPA_AM.Kr_9T2.iOff;
UPA_DI_DRV.Kr_10T2_ON    := UPA_AM.Kr_10T2.iOn;   UPA_DI_DRV.Kr_10T2_OF   := UPA_AM.Kr_10T2.iOff;
UPA_DI_DRV.Kr_11T2_ON    := UPA_AM.Kr_11T2.iOn;   UPA_DI_DRV.Kr_11T2_OF   := UPA_AM.Kr_11T2.iOff;
UPA_DI_DRV.Kr_12T2_ON    := UPA_AM.Kr_12T2.iOn;   UPA_DI_DRV.Kr_12T2_OF   := UPA_AM.Kr_12T2.iOff;
UPA_DI_DRV.Kr_13T2_ON    := UPA_AM.Kr_13T2.iOn;   UPA_DI_DRV.Kr_13T2_OF   := UPA_AM.Kr_13T2.iOff;
UPA_DI_DRV.Kr_14T2_ON    := UPA_AM.Kr_14T2.iOn;   UPA_DI_DRV.Kr_14T2_OF   := UPA_AM.Kr_14T2.iOff;

end_if;]]></ST>
        </FunctionBlock>
        <FunctionBlock UUID="LCERBCVHMURELEDEHKKNKLUZNQ" Name="FB_Pulse" Comment="Блок формирования импульсов с периодом Tp">
            <Variables>
                <Variable UUID="CMR5BQDGRKPEZBIKWN5RA576SY" Name="on" Comment="Запуск ипульсов" Type="BOOL" Usage="input" />
                <Variable UUID="B6IJ67FPJ3RUFJNLPAS7YG4QFE" Name="tp" Comment="Период следования импульсов" Type="TIME" Usage="input" />
                <Variable UUID="XZGD3TDBOORUPN4TMQKQ32TE3I" Name="tic" Comment="Выход" Type="BOOL" Usage="output" />
                <Variable UUID="TIVKZZA76UQEBDGHCVSWZRJTPI" Name="tmr" Type="TON" TypeUUID="NM52J2VHZ3GU3NCIW4VK3USPKU" Usage="internal" />
            </Variables>
            <ST><![CDATA[//таймер периода
tmr(IN:= on AND NOT tmr.Q, PT:= tp);
//на полупериоде установить 0
//выход
tic :=  tmr.ET < tp/2 AND NOT tmr.Q AND on;
//Steam
]]></ST>
        </FunctionBlock>
        <Function UUID="MZIFPVXXY5FELPWTZWUQ63OM3M" Name="Trends" ResultTypeUUID="3V5XT3AA6VAULD5HQCWTIGEZD4">
            <Variables />
            <ST><![CDATA[//--------------------------------------- Формирование трендовых переменых --------------------------------------------
//#####################################################################################################################

//------------------------------AI---------------------------------------
UPA_AI_Trend.Qg_1T := UPA_AI_ToHMI.Qg_1T.PV; //Расход компримируемого газа по скважине 1Т
UPA_AI_Trend.Qg_2T := UPA_AI_ToHMI.Qg_2T.PV; //Расход компримируемого газа по скважине 2Т
UPA_AI_Trend.Qg_3T := UPA_AI_ToHMI.Qg_3T.PV; //Расход компримируемого газа по скважине 3Т
UPA_AI_Trend.Qg_4T := UPA_AI_ToHMI.Qg_4T.PV; //Расход компримируемого газа по скважине 4Т
UPA_AI_Trend.Qg_5T := UPA_AI_ToHMI.Qg_5T.PV; //Расход компримируемого газа по скважине 5Т
UPA_AI_Trend.Qg_6T := UPA_AI_ToHMI.Qg_6T.PV; //Расход компримируемого газа по скважине 6Т
UPA_AI_Trend.Qg_7T := UPA_AI_ToHMI.Qg_7T.PV; //Расход компримируемого газа по скважине 7Т
UPA_AI_Trend.Qg_8T := UPA_AI_ToHMI.Qg_8T.PV; //Расход компримируемого газа по скважине 8Т
UPA_AI_Trend.Qg_9T := UPA_AI_ToHMI.Qg_9T.PV; //Расход компримируемого газа по скважине 9Т
UPA_AI_Trend.Qg_10T := UPA_AI_ToHMI.Qg_10T.PV; //Расход компримируемого газа по скважине 10Т
UPA_AI_Trend.Qg_11T := UPA_AI_ToHMI.Qg_11T.PV; //Расход компримируемого газа по скважине 11Т
UPA_AI_Trend.Qg_12T := UPA_AI_ToHMI.Qg_12T.PV; //Расход компримируемого газа по скважине 12Т
UPA_AI_Trend.Qg_13T := UPA_AI_ToHMI.Qg_13T.PV; //Расход компримируемого газа по скважине 13Т
UPA_AI_Trend.Qg_14T := UPA_AI_ToHMI.Qg_14T.PV; //Расход компримируемого газа по скважине 14Т
UPA_AI_Trend.Pg_Kol := UPA_AI_ToHMI.Pg_Kol.PV; //Давление газа в коллекторе газа
UPA_AI_Trend.T_BB_UPA := UPA_AI_ToHMI.T_BB_UPA.PV; //Температура воздуха в ББ САУ УПА
UPA_AI_Trend.Res_0 := UPA_AI_ToHMI.Res_0.PV; //Резерв
UPA_AI_Trend.Res_1 := UPA_AI_ToHMI.Res_1.PV; //Резерв
UPA_AI_Trend.Res_2 := UPA_AI_ToHMI.Res_2.PV; //Резерв
UPA_AI_Trend.Res_3 := UPA_AI_ToHMI.Res_3.PV; //Резерв
UPA_AI_Trend.Uosn_SAU := UPA_AI_ToHMI.Uosn_SAU.PV; //Измерение основного напряжения
UPA_AI_Trend.Urez_SAU := UPA_AI_ToHMI.Urez_SAU.PV; //Измерение резервного напряжения
UPA_AI_Trend.Res_4 := UPA_AI_ToHMI.Res_4.PV; //Резерв
UPA_AI_Trend.Res_5 := UPA_AI_ToHMI.Res_5.PV; //Резерв
(*//= это не измеряемые аналоговые параметры, пока исключим их отсюда
UPA_AI_Trend.Pg_PT1 := UPA_AI_ToHMI.Pg_PT1.PV; //Давление газа на скважине 1Т
UPA_AI_Trend.Pg_PT2 := UPA_AI_ToHMI.Pg_PT2.PV; //Давление газа на скважине 2Т
UPA_AI_Trend.Pg_PT3 := UPA_AI_ToHMI.Pg_PT3.PV; //Давление газа на скважине 3Т
UPA_AI_Trend.Pg_PT4 := UPA_AI_ToHMI.Pg_PT4.PV; //Давление газа на скважине 4Т
UPA_AI_Trend.Pg_PT5 := UPA_AI_ToHMI.Pg_PT5.PV; //Давление газа на скважине 5Т
UPA_AI_Trend.Pg_PT6 := UPA_AI_ToHMI.Pg_PT6.PV; //Давление газа на скважине 6Т
UPA_AI_Trend.Pg_PT7 := UPA_AI_ToHMI.Pg_PT7.PV; //Давление газа на скважине 7Т
UPA_AI_Trend.Pg_PT8 := UPA_AI_ToHMI.Pg_PT8.PV; //Давление газа на скважине 8Т
UPA_AI_Trend.Pg_PT9 := UPA_AI_ToHMI.Pg_PT9.PV; //Давление газа на скважине 9Т
UPA_AI_Trend.Pg_PT10 := UPA_AI_ToHMI.Pg_PT10.PV; //Давление газа на скважине 10Т
UPA_AI_Trend.Pg_PT11 := UPA_AI_ToHMI.Pg_PT11.PV; //Давление газа на скважине 11Т
UPA_AI_Trend.Pg_PT12 := UPA_AI_ToHMI.Pg_PT12.PV; //Давление газа на скважине 12Т
UPA_AI_Trend.Pg_PT13 := UPA_AI_ToHMI.Pg_PT13.PV; //Давление газа на скважине 13Т
UPA_AI_Trend.Pg_PT14 := UPA_AI_ToHMI.Pg_PT14.PV; //Давление газа на скважине 14Т
UPA_AI_Trend.Tg_TE1 := UPA_AI_ToHMI.Tg_TE1.PV; //Температура газа на скважине 1Т
UPA_AI_Trend.Tg_TE2 := UPA_AI_ToHMI.Tg_TE2.PV; //Температура газа на скважине 2Т
UPA_AI_Trend.Tg_TE3 := UPA_AI_ToHMI.Tg_TE3.PV; //Температура газа на скважине 3Т
UPA_AI_Trend.Tg_TE4 := UPA_AI_ToHMI.Tg_TE4.PV; //Температура газа на скважине 4Т
UPA_AI_Trend.Tg_TE5 := UPA_AI_ToHMI.Tg_TE5.PV; //Температура газа на скважине 5Т
UPA_AI_Trend.Tg_TE6 := UPA_AI_ToHMI.Tg_TE6.PV; //Температура газа на скважине 6Т
UPA_AI_Trend.Tg_TE7 := UPA_AI_ToHMI.Tg_TE7.PV; //Температура газа на скважине 7Т
UPA_AI_Trend.Tg_TE8 := UPA_AI_ToHMI.Tg_TE8.PV; //Температура газа на скважине 8Т
UPA_AI_Trend.Tg_TE9 := UPA_AI_ToHMI.Tg_TE9.PV; //Температура газа на скважине 9Т
UPA_AI_Trend.Tg_TE10 := UPA_AI_ToHMI.Tg_TE10.PV; //Температура газа на скважине 10Т
UPA_AI_Trend.Tg_TE11 := UPA_AI_ToHMI.Tg_TE11.PV; //Температура газа на скважине 11Т
UPA_AI_Trend.Tg_TE12 := UPA_AI_ToHMI.Tg_TE12.PV; //Температура газа на скважине 12Т
UPA_AI_Trend.Tg_TE13 := UPA_AI_ToHMI.Tg_TE13.PV; //Температура газа на скважине 13Т
UPA_AI_Trend.Tg_TE14 := UPA_AI_ToHMI.Tg_TE14.PV; //Температура газа на скважине 14Т
UPA_AI_Trend.Tg_TE15 := UPA_AI_ToHMI.Tg_TE15.PV; //Температура газа на скважине 14Т
UPA_AI_Trend.Tg_TE16 := UPA_AI_ToHMI.Tg_TE16.PV; //Температура газа на скважине 14Т
UPA_AI_Trend.Tg_TE17 := UPA_AI_ToHMI.Tg_TE17.PV; //Температура газа на скважине 14Т
UPA_AI_Trend.Tg_TE18 := UPA_AI_ToHMI.Tg_TE18.PV; //Температура газа на скважине 14Т
UPA_AI_Trend.Tg_TE19 := UPA_AI_ToHMI.Tg_TE19.PV; //Температура газа на скважине 14Т
UPA_AI_Trend.Tg_TE20 := UPA_AI_ToHMI.Tg_TE20.PV; //Температура газа на скважине 14Т
UPA_AI_Trend.Tg_TE21 := UPA_AI_ToHMI.Tg_TE21.PV; //Температура газа на скважине 14Т
UPA_AI_Trend.Tg_TE22 := UPA_AI_ToHMI.Tg_TE22.PV; //Температура газа на скважине 14Т
UPA_AI_Trend.Tg_TE23 := UPA_AI_ToHMI.Tg_TE23.PV; //Температура газа на скважине 14Т
UPA_AI_Trend.Tg_TE24 := UPA_AI_ToHMI.Tg_TE24.PV; //Температура газа на скважине 14Т
UPA_AI_Trend.Tg_TE25 := UPA_AI_ToHMI.Tg_TE25.PV; //Температура газа на скважине 14Т
UPA_AI_Trend.Tg_TE26 := UPA_AI_ToHMI.Tg_TE26.PV; //Температура газа на скважине 14Т
UPA_AI_Trend.Tg_TE27 := UPA_AI_ToHMI.Tg_TE27.PV; //Температура газа на скважине 14Т
UPA_AI_Trend.Tg_TE28 := UPA_AI_ToHMI.Tg_TE28.PV; //Температура газа на скважине 14Т
*)
//------------------------------DI---------------------------------------
UPA_DI_Trend.Kr_1T2_ON := UPA_DI.Kr_1T2_ON; //Кран 1Т-2  открыт
UPA_DI_Trend.Kr_1T2_OF := UPA_DI.Kr_1T2_OF; //Кран 1Т-2  закрыт
UPA_DI_Trend.Kr_2T2_ON := UPA_DI.Kr_2T2_ON; //Кран 2Т-2  открыт
UPA_DI_Trend.Kr_2T2_OF := UPA_DI.Kr_2T2_OF; //Кран 2Т-2  закрыт
UPA_DI_Trend.Kr_3T2_ON := UPA_DI.Kr_3T2_ON; //Кран 3Т-2  открыт
UPA_DI_Trend.Kr_3T2_OF := UPA_DI.Kr_3T2_OF; //Кран 3Т-2  закрыт
UPA_DI_Trend.Kr_4T2_ON := UPA_DI.Kr_4T2_ON; //Кран 4Т-2  открыт
UPA_DI_Trend.Kr_4T2_OF := UPA_DI.Kr_4T2_OF; //Кран 4Т-2  закрыт
UPA_DI_Trend.Kr_5T2_ON := UPA_DI.Kr_5T2_ON; //Кран 5Т-2  открыт
UPA_DI_Trend.Kr_5T2_OF := UPA_DI.Kr_5T2_OF; //Кран 5Т-2  закрыт
UPA_DI_Trend.Kr_6T2_ON := UPA_DI.Kr_6T2_ON; //Кран 6Т-2  открыт
UPA_DI_Trend.Kr_6T2_OF := UPA_DI.Kr_6T2_OF; //Кран 6Т-2  закрыт
UPA_DI_Trend.Kr_7T2_ON := UPA_DI.Kr_7T2_ON; //Кран 7Т-2  открыт
UPA_DI_Trend.Kr_7T2_OF := UPA_DI.Kr_7T2_OF; //Кран 7Т-2  закрыт
UPA_DI_Trend.Kr_8T2_ON := UPA_DI.Kr_8T2_ON; //Кран 8Т-2  открыт
UPA_DI_Trend.Kr_8T2_OF := UPA_DI.Kr_8T2_OF; //Кран 8Т-2  закрыт
UPA_DI_Trend.Kr_9T2_ON := UPA_DI.Kr_9T2_ON; //Кран 9Т-2  открыт
UPA_DI_Trend.Kr_9T2_OF := UPA_DI.Kr_9T2_OF; //Кран 9Т-2  закрыт
UPA_DI_Trend.Kr_10T2_ON := UPA_DI.Kr_10T2_ON; //Кран 10Т-2  открыт
UPA_DI_Trend.Kr_10T2_OF := UPA_DI.Kr_10T2_OF; //Кран 10Т-2  закрыт
UPA_DI_Trend.Kr_11T2_ON := UPA_DI.Kr_11T2_ON; //Кран 11Т-2  открыт
UPA_DI_Trend.Kr_11T2_OF := UPA_DI.Kr_11T2_OF; //Кран 11Т-2  закрыт
UPA_DI_Trend.Kr_12T2_ON := UPA_DI.Kr_12T2_ON; //Кран 12Т-2  открыт
UPA_DI_Trend.Kr_12T2_OF := UPA_DI.Kr_12T2_OF; //Кран 12Т-2  закрыт
UPA_DI_Trend.Kr_13T2_ON := UPA_DI.Kr_13T2_ON; //Кран 13Т-2  открыт
UPA_DI_Trend.Kr_13T2_OF := UPA_DI.Kr_13T2_OF; //Кран 13Т-2  закрыт
UPA_DI_Trend.Kr_14T2_ON := UPA_DI.Kr_14T2_ON; //Кран 14Т-2  открыт
UPA_DI_Trend.Kr_14T2_OF := UPA_DI.Kr_14T2_OF; //Кран 14Т-2  закрыт
UPA_DI_Trend.Res_0 := UPA_DI.Res_0; //(Резерв)
UPA_DI_Trend.Res_1 := UPA_DI.Res_1; //(Резерв)
UPA_DI_Trend.Vlaga_BB_UPA_v := UPA_DI.Vlaga_BB_UPA_v; //Влажность в ББ САУ УПА повышенная
UPA_DI_Trend.Dver_BB_UPA_open := UPA_DI.Dver_BB_UPA_open; //Дверь ББ САУ УПА открыта 
UPA_DI_Trend.Res_2 := UPA_DI.Res_2; //(Резерв)
UPA_DI_Trend.Res_3 := UPA_DI.Res_3; //(Резерв)
UPA_DI_Trend.Res_4 := UPA_DI.Res_4; //(Резерв)
UPA_DI_Trend.Res_5 := UPA_DI.Res_5; //(Резерв)
UPA_DI_Trend.Res_6 := UPA_DI.Res_6; //(Резерв)
UPA_DI_Trend.Res_7 := UPA_DI.Res_7; //(Резерв)
UPA_DI_Trend.Res_8 := UPA_DI.Res_8; //(Резерв)
UPA_DI_Trend.Res_9 := UPA_DI.Res_9; //(Резерв)
UPA_DI_Trend.Res_10 := UPA_DI.Res_10; //(Резерв)
UPA_DI_Trend.Res_11 := UPA_DI.Res_11; //(Резерв)
UPA_DI_Trend.Res_12 := UPA_DI.Res_12; //(Резерв)
UPA_DI_Trend.Res_13 := UPA_DI.Res_13; //(Резерв)
UPA_DI_Trend.Res_14 := UPA_DI.Res_14; //(Резерв)
UPA_DI_Trend.Res_15 := UPA_DI.Res_15; //(Резерв)
UPA_DI_Trend.Res_16 := UPA_DI.Res_16; //(Резерв)
UPA_DI_Trend.Res_17 := UPA_DI.Res_17; //(Резерв)
UPA_DI_Trend.Chk_AC220_SAU := UPA_DI.Chk_AC220_SAU; //Контроль основного питания ~220 В
UPA_DI_Trend.Chk_DC220_SAU := UPA_DI.Chk_DC220_SAU; //Контроль резервного питания =220 В
UPA_DI_Trend.Cabin_open := UPA_DI.Cabin_open; //Двери открыты
UPA_DI_Trend.QF_ON := UPA_DI.QF_ON; //Автоматы питания включены
UPA_DI_Trend.DC24osn_Int_ok := UPA_DI.DC24osn_Int_ok; //Исправность осн. ИП =24В внутренних цепей
UPA_DI_Trend.DC24rez_Int_ok := UPA_DI.DC24rez_Int_ok; //Исправность рез. ИП =24В внутренних цепей
UPA_DI_Trend.DC24osn_Ext_ok := UPA_DI.DC24osn_Ext_ok; //Исправность осн. ИП =24В внешних цепей
UPA_DI_Trend.DC24rez_Ext_ok := UPA_DI.DC24rez_Ext_ok; //Исправность рез. ИП =24В внешних цепей
UPA_DI_Trend.Res_18 := UPA_DI.Res_18; //(Резерв)
UPA_DI_Trend.Res_19 := UPA_DI.Res_19; //(Резерв)
UPA_DI_Trend.Res_20 := UPA_DI.Res_20; //(Резерв)
UPA_DI_Trend.Res_21 := UPA_DI.Res_21; //(Резерв)
UPA_DI_Trend.Res_22 := UPA_DI.Res_22; //(Резерв)
UPA_DI_Trend.Res_23 := UPA_DI.Res_23; //(Резерв)
UPA_DI_Trend.Res_24 := UPA_DI.Res_24; //(Резерв)
UPA_DI_Trend.Res_25 := UPA_DI.Res_25; //(Резерв)
//------------------------------DO---------------------------------------
UPA_DO_Trend.Kr_1T2_ON := UPA_DO.Kr_1T2_ON; //Кран отсечной 1Т-2 открыть
UPA_DO_Trend.Kr_1T2_OF := UPA_DO.Kr_1T2_OF; //Кран отсечной 1Т-2 закрыть
UPA_DO_Trend.Kr_2T2_ON := UPA_DO.Kr_2T2_ON; //Кран отсечной 2Т-2 открыть
UPA_DO_Trend.Kr_2T2_OF := UPA_DO.Kr_2T2_OF; //Кран отсечной 2Т-2 закрыть
UPA_DO_Trend.Kr_3T2_ON := UPA_DO.Kr_3T2_ON; //Кран отсечной 3Т-2 открыть
UPA_DO_Trend.Kr_3T2_OF := UPA_DO.Kr_3T2_OF; //Кран отсечной 3Т-2 закрыть
UPA_DO_Trend.Kr_4T2_ON := UPA_DO.Kr_4T2_ON; //Кран отсечной 4Т-2 открыть
UPA_DO_Trend.Kr_4T2_OF := UPA_DO.Kr_4T2_OF; //Кран отсечной 4Т-2 закрыть
UPA_DO_Trend.Kr_5T2_ON := UPA_DO.Kr_5T2_ON; //Кран отсечной 5Т-2 открыть
UPA_DO_Trend.Kr_5T2_OF := UPA_DO.Kr_5T2_OF; //Кран отсечной 5Т-2 закрыть
UPA_DO_Trend.Kr_6T2_ON := UPA_DO.Kr_6T2_ON; //Кран отсечной 6Т-2 открыть
UPA_DO_Trend.Kr_6T2_OF := UPA_DO.Kr_6T2_OF; //Кран отсечной 6Т-2 закрыть
UPA_DO_Trend.Kr_7T2_ON := UPA_DO.Kr_7T2_ON; //Кран отсечной 7Т-2 открыть
UPA_DO_Trend.Kr_7T2_OF := UPA_DO.Kr_7T2_OF; //Кран отсечной 7Т-2 закрыть
UPA_DO_Trend.Kr_8T2_ON := UPA_DO.Kr_8T2_ON; //Кран отсечной 8Т-2 открыть
UPA_DO_Trend.Kr_8T2_OF := UPA_DO.Kr_8T2_OF; //Кран отсечной 8Т-2 закрыть
UPA_DO_Trend.Kr_9T2_ON := UPA_DO.Kr_9T2_ON; //Кран отсечной 9Т-2 открыть
UPA_DO_Trend.Kr_9T2_OF := UPA_DO.Kr_9T2_OF; //Кран отсечной 9Т-2 закрыть
UPA_DO_Trend.Kr_10T2_ON := UPA_DO.Kr_10T2_ON; //Кран отсечной 10Т-2 открыть
UPA_DO_Trend.Kr_10T2_OF := UPA_DO.Kr_10T2_OF; //Кран отсечной 10Т-2 закрыть
UPA_DO_Trend.Kr_11T2_ON := UPA_DO.Kr_11T2_ON; //Кран отсечной 11Т-2 открыть
UPA_DO_Trend.Kr_11T2_OF := UPA_DO.Kr_11T2_OF; //Кран отсечной 11Т-2 закрыть
UPA_DO_Trend.Kr_12T2_ON := UPA_DO.Kr_12T2_ON; //Кран отсечной 12Т-2 открыть
UPA_DO_Trend.Kr_12T2_OF := UPA_DO.Kr_12T2_OF; //Кран отсечной 12Т-2 закрыть
UPA_DO_Trend.Kr_13T2_ON := UPA_DO.Kr_13T2_ON; //Кран отсечной 13Т-2 открыть
UPA_DO_Trend.Kr_13T2_OF := UPA_DO.Kr_13T2_OF; //Кран отсечной 13Т-2 закрыть
UPA_DO_Trend.Kr_14T2_ON := UPA_DO.Kr_14T2_ON; //Кран отсечной 14Т-2 открыть
UPA_DO_Trend.Kr_14T2_OF := UPA_DO.Kr_14T2_OF; //Кран отсечной 14Т-2 закрыть
UPA_DO_Trend.Res_0 := UPA_DO.Res_0; //(Резерв)
UPA_DO_Trend.Res_1 := UPA_DO.Res_1; //(Резерв)
UPA_DO_Trend.Res_2 := UPA_DO.Res_2; //(Резерв)
UPA_DO_Trend.Res_3 := UPA_DO.Res_3; //(Резерв)]]></ST>
        </Function>
    </FBLibrary>
</Program>
