/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FrameCreate;

import DataBaseTools.MergeBases;
import DataBaseTools.MergeBases.DiffDataTable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.DefaultListModel;

/**
 *
 * @author nazarov
 */
public class MergeBasesFrame extends javax.swing.JFrame {

    MergeBases MB;
    public ArrayList<DiffDataTable> listObjRight = new ArrayList<>(); // Храним объекты различия текущей таблицы 
    DefaultListModel<String> listModel = new DefaultListModel<String>(); // модель первого списка
    DefaultListModel<String> listModelTwo = new DefaultListModel<String>(); // модель второго списка
    String[] checkFieldTable = null; // хранятся выделлые группой элементы списков

    /**
     * Creates new form MergeBasesFrame
     */
    public MergeBasesFrame(MergeBases MB) {
        this.MB = MB;
        initComponents();
        setDataToFrame();
    }

    private MergeBasesFrame() {

    }

    // занести данные в форму
    public void setDataToFrame() {
        listModelTwo.clear(); // Очищаем модели
        listModel.clear();

        // Сортируем коллекции
        Collections.sort(MB.listTableDiff, new Comparator<DiffDataTable>() {
            public int compare(DiffDataTable o1, DiffDataTable o2) {
                return o1.getName().compareTo(o2.getName());
            }
        });

        Collections.sort(listObjRight, new Comparator<DiffDataTable>() {
            public int compare(DiffDataTable o1, DiffDataTable o2) {
                return o1.getName().compareTo(o2.getName());
            }
        });

        // заносим данные
        for (DiffDataTable difData : MB.listTableDiff) {
            String nameDT = difData.getName();
            listModel.addElement(nameDT);
        }
        jList2.setModel(listModel);

        for (DiffDataTable difData : listObjRight) {
            String nameDT = difData.getName();
            listModelTwo.addElement(nameDT);
        }
        jList1.setModel(listModelTwo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("выбор таблиц для слияния");

        jButton1.setText("Запусть процесс слияния");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jSplitPane1.setResizeWeight(.5d);

        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList2.setToolTipText("");
        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2MouseClicked(evt);
            }
        });
        jList2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jList2KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jList2);

        jSplitPane1.setLeftComponent(jScrollPane2);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jList1KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jList1);

        jSplitPane1.setRightComponent(jScrollPane3);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("<<<   Убрать таблицы слияния");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Добавить таблицы слияния >>>");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)))
                        .addGap(0, 211, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // передаем что сформировали в правом столбце обратно
        MB.insertDatAnotherDB(listObjRight); 
    }//GEN-LAST:event_jButton1ActionPerformed

    // нажатие мыши на список  слева
    private void jList2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseClicked
        // так вабираем выделенное
        checkFieldTable = new String[jList2.getSelectedIndices().length];
        for (int i = 0; i < jList2.getSelectedIndices().length; ++i) {// Массив индексов
            String datainList = (String) jList2.getModel().getElementAt(jList2.getSelectedIndices()[i]);
            checkFieldTable[i] = datainList;
        }

        if (checkFieldTable.length > 0) { // если не выделили несколько объектов сразу тогда показываем
            String s = "";
            jTextArea1.removeAll();
            int index = jList2.locationToIndex(evt.getPoint());
            //s += (String) jList2.getSelectedValue(); // Достаем значение из списка
            //s += "\n";
            DiffDataTable difEl = MB.listTableDiff.get(index);
            s += (String) difEl.getName() + "\n"; // Достаем имя
            s += (String) difEl.commentPersonal + "\n\n"; // комментарий к объекту
            for (String[] Data : difEl.diffData()) {
                for (String sD : Data) {
                    s += sD + " ";
                }
                s += "\n";
            }
            jTextArea1.setText(s += "\n");

            if (evt.getClickCount() == 2) { // при двойном нажатии
                String nameTL = (String) jList2.getSelectedValue(); // Достаем значение из списка
                for (int i = 0; i < MB.listTableDiff.size(); ++i) {
                    DiffDataTable difData = MB.listTableDiff.get(i);
                    if (nameTL.equals(difData.getName())) {
                        listObjRight.add(difEl);
                        MB.listTableDiff.remove(i);
                    }
                }
                setDataToFrame(); // перерисовка столбцов
            }
        }
    }//GEN-LAST:event_jList2MouseClicked

    // нажатие мыши на список  справа
    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        // так вабираем выделенное
        checkFieldTable = new String[jList1.getSelectedIndices().length];
        for (int i = 0; i < jList1.getSelectedIndices().length; ++i) {// Массив индексов
            String datainList = (String) jList1.getModel().getElementAt(jList1.getSelectedIndices()[i]);
            checkFieldTable[i] = datainList;
        }

        if (checkFieldTable.length > 0) { // если не выделили несколько объектов сразу тогда показываем
            String s = "";
            jTextArea1.removeAll();
            int index = jList1.locationToIndex(evt.getPoint());
            //s += (String) jList2.getSelectedValue(); // Достаем значение из списка
            //s += "\n";
            DiffDataTable difEl = listObjRight.get(index);
            s += (String) difEl.getName() + "\n"; // Достаем имя
            s += (String) difEl.commentPersonal + "\n\n"; // комментарий к объекту
            for (String[] Data : difEl.diffData()) {
                for (String sD : Data) {
                    s += sD + " ";
                }
                s += "\n";
            }
            jTextArea1.setText(s += "\n");

            if (evt.getClickCount() == 2) { // при двойном нажатии
                String nameTL = (String) jList1.getSelectedValue(); // Достаем значение из списка
                for (int i = 0; i < listObjRight.size(); ++i) {
                    DiffDataTable difData = listObjRight.get(i);
                    if (nameTL.equals(difData.getName())) {
                        MB.listTableDiff.add(difEl);
                        listObjRight.remove(i);
                    }

                }
                setDataToFrame(); // перерисовка столбцов

            }
        }
    }//GEN-LAST:event_jList1MouseClicked

    
    private void executionSelectedLeftList() {
        for (int i = 0; i < checkFieldTable.length; ++i) {// Массив индексов
            String elSelect = checkFieldTable[i];
            // таким методом выдергиваем елементы
            for (int j = 0; j < MB.listTableDiff.size(); ++j) {
                DiffDataTable difData = MB.listTableDiff.get(j);
                if (elSelect.equals(difData.getName())) {
                    listObjRight.add(difData);
                    MB.listTableDiff.remove(j);
                }
            }
        }
        setDataToFrame(); // перерисовка столбцов
    }
    
    private void executionSelectedRightList() {
        for (int i = 0; i < checkFieldTable.length; ++i) {// Массив индексов
            String elSelect = checkFieldTable[i];
            // таким методом выдергиваем елементы
            for (int j = 0; j < listObjRight.size(); ++j) {
                DiffDataTable difData = listObjRight.get(j);
                if (elSelect.equals(difData.getName())) {
                    MB.listTableDiff.add(difData);
                    listObjRight.remove(j);
                }
            }
        }
        setDataToFrame(); // перерисовка столбцов
    }
    
    // обработка клавишь левого листа
    private void jList2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList2KeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            executionSelectedLeftList();
        }
    }//GEN-LAST:event_jList2KeyPressed

    
    // обработка клавишь правого листа
    private void jList1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            executionSelectedRightList();
        }
    }//GEN-LAST:event_jList1KeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        executionSelectedRightList();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        executionSelectedLeftList();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MergeBasesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MergeBasesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MergeBasesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MergeBasesFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MergeBasesFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
