package FrameCreate;

import DataBaseConnect.DataBase;
import DataBaseConnect.StructSelectData;
import Main.Main_JPanel;
import XMLTools.XMLSAX;

import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.swing.AbstractCellEditor;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.SpinnerDateModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableModel;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactoryConfigurationError;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactoryConfigurationException;
import org.xml.sax.SAXException;
/**
 *
 * @author nazarov
 */

// --- Клас отоброжения таблицы ---
public class FrameTable extends javax.swing.JPanel {
    String nameTable = "";

        DataBase workbase = DataBase.getInstance(); // подключаем нашу базу

    /**
     * Creates new form Panel
     */
    public FrameTable() {
        initComponents();
    }

    public FrameTable(String nameTable) {
        this.nameTable = nameTable;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        jTable1.setDefaultEditor(Date.class, (TableCellEditor) new DateCellEditor());// Определение редактора ячеек
        jTable1.setModel(getTableData());
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("To_Lua_DRV");
        jButton1.setToolTipText("Формируем файл луа для драйверов");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(881, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(468, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addGap(40, 40, 40)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jTabbedPane1.addTab("tab1", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:

        JFileChooser fileopen = new JFileChooser("C:\\Users\\Nazarov\\Desktop\\Info_script_file_work\\_actual_config\\Config\\Design\\IO_XLS\\GPA");
        int ret = fileopen.showDialog(null, "Сохранить файл(DRV_from_base_LUA)");                
        if (ret == JFileChooser.APPROVE_OPTION) {
        File file = fileopen.getSelectedFile();
        //System.out.print(file.getPath());
        String currentT = StructSelectData.getnTable();
        
        ArrayList<String[]> dataFromDb = new ArrayList<>();
        //workbase.connectionToBase();
        //dataFromDb = workbase.selectData("ai1");
        dataFromDb = workbase.selectData(currentT);
        //System.out.println("This Table  -->" + currentT);
        //Сформировать файл луа новый файл

            
        javax.swing.JOptionPane.showMessageDialog(null,"Данные из базы в файл Максима" + file.getPath() + " загружены"); //диалоговое окно

        
        }  
        
    }                                        

  // --- Собственоручная модель таблицы ---
 TableModel getTableData(){ // функция для создания списка из талиц базы так же возращаем объект для конструкции таблицы при запуске
    // Можно так сложно не соединять, аппендицит от предыдущего что бы не запутаться
    String[] columnDop = {"Выбор"};// до поля для галок или еще чего
    String[] columnNames = StructSelectData.getColumns();
    String[] resultColumn = Stream.concat( Arrays.stream(columnDop), Arrays.stream(columnNames))
            .toArray(String[]::new); // соединяем два массива
    Object[][] data = StructSelectData.getcurrentSelectTable(); // От куда беру данные
    Object[] streamArray ;
    Object[] streamNull = new Object[1];
    streamNull[0] = null;
    Object[][] tmp2 = new Object[data.length][];
    for(int i=0; i< data.length; i++){
        streamArray = new Object[data[i].length+1];
        // преобразовываем массив
        Object[] testStream = Stream.concat( Arrays.stream(streamNull), Arrays.stream(data[i])).toArray(Object[]::new); 
        tmp2[i] = testStream;
    }
    return new DefaultTableModel(tmp2, resultColumn){  
    @Override           
    public Class<?> getColumnClass(int columnIndex) { // структура для отображения таблицы с галками
      Class clazz = String.class;
      switch (columnIndex) {
        case 0:
          clazz = Boolean.class;
          break;
      }
      return clazz; 
    }       
    @Override
    public boolean isCellEditable(int row, int column) {
      return column == column;
    } 
     @Override
    public void setValueAt(Object aValue, int row, int column) {
      // Условие проверки галочки скрывать легенду
      if (aValue instanceof Boolean && column == 0) {
        //System.out.println("Posution - > " + row + " " + aValue);        
        Vector rowData = (Vector)getDataVector().get(row); // не помню для чего но без этого только скрывает =(
        rowData.set(0, (boolean)aValue);
        fireTableCellUpdated(row, column);
        
        try {
            // Само действие не реализованно
        if((boolean) aValue == true){
          System.out.println("true");
        }
        if((boolean) aValue == false){
          System.out.println("false");
        }
        }catch (NullPointerException e) {
        JOptionPane.showMessageDialog(null, "Трудности с добавлением");
        }
      }
      else{  // если нет Галки просто обновляем данные
           Vector rowData = (Vector)getDataVector().get(row); // не помню для чего но без этого только скрывает =(
           //String curentCell = (String) rowData.get(column); // получить предыдущие данные
           
            String ColumnName = jTable1.getColumnName(column); // Имя выделенного столбца
            int rowTM = jTable1.getRowCount(); // количество строк
            int ColumnTM =  jTable1.getColumnCount();  //Количество столбцов
            HashMap< String, String> mapDataRow = new HashMap<>(); // элементы для отображения в этих полях

            for(int i=1; i<ColumnTM; ++i){ // Пробежать по строке где изменяются данные и сформировать список для обновления данных в базе c 1 так как там галки
                mapDataRow.put(jTable1.getColumnName(i), (String) rowData.get(i)); // Формируем список данных принудительно в String
            }
                    
            workbase.Update(nameTable, ColumnName, (String) aValue, mapDataRow); // обновить данные ячейки в таблицы базы
            rowData.set(column, aValue); // Вставляем новые данные в нужную ячейку( только после этого вставляем ячейку иначе в базу неправильный запрос пойдет)
          //System.out.println("columnTM " + columnTM + " yT " + yT  );
      }
      

    }
    };
}
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration                   
}

// Редактор даты с использованием прокручивающегося списка JSpinner
class DateCellEditor extends AbstractCellEditor implements TableCellEditor
{
    // Редактор
    private JSpinner editor;
    // Конструктор
    public DateCellEditor() {
        // Настройка прокручивающегося списка
        SpinnerDateModel model = new SpinnerDateModel(new Date(), null, null, Calendar.DAY_OF_MONTH);
        editor = new JSpinner(model);
    }
     @Override
    // Метод получения компонента для прорисовки (обязательный реализации )
    public Component getTableCellEditorComponent(JTable table, Object value, 
                                                boolean isSelected, int row, int column) {
        // Изменение значения
        editor.setValue(value);
        return editor;
    }
    // Функция текущего значения в редакторе
    public Object getCellEditorValue() {
        return editor.getValue();
    }

   
}
